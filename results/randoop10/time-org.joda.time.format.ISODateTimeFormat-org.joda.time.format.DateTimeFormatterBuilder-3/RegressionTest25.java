import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest25 {

    public static boolean debug = false;

    @Test
    public void test12501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12501");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        int int23 = mutableDateTime2.getRoundingMode();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime2.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add((long) 69547867);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test12502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12502");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(69338422);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int3 = localDateTime2.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
    }

    @Test
    public void test12503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12503");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.secondOfMinute();
        int int14 = property13.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.addWrapField(69206843);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        long long29 = dateTimeZone20.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str30 = dateTimeZone20.getID();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone20);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight33 = localDate31.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter34.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.DateTime dateTime46 = localDate31.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTime dateTime48 = dateTime46.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property49 = dateTime46.yearOfCentury();
        boolean boolean50 = mutableDateTime16.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfCentury();
        mutableDateTime53.addDays((int) (short) -1);
        int int57 = mutableDateTime53.getYear();
        org.joda.time.Instant instant58 = mutableDateTime53.toInstant();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap64 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder63.appendTimeZoneShortName(strMap64);
        boolean boolean66 = dateTimeZone62.equals((java.lang.Object) strMap64);
        boolean boolean68 = dateTimeZone62.isStandardOffset((long) (byte) -1);
        long long71 = dateTimeZone62.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str72 = dateTimeZone62.getID();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone62);
        int int74 = localDate73.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property76 = localDate73.property(dateTimeFieldType75);
        int int77 = mutableDateTime53.get(dateTimeFieldType75);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.set(dateTimeFieldType75, 69326092);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69326092 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-360599990L) + "'", long29 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:10" + "'", str30, "+100:10");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-360599990L) + "'", long71 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+100:10" + "'", str72, "+100:10");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test12504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12504");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.addWrapField((-1));
        mutableDateTime8.addYears(69451294);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test12505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12505");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) '4', dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(69218773);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter6.withZone(dateTimeZone9);
        java.util.TimeZone timeZone17 = dateTimeZone9.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime19 = localDate5.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withPeriodAdded(readablePeriod20, 69310766);
        org.joda.time.DateTime dateTime24 = dateTime22.plusDays(69462371);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(69415588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69415588 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test12506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12506");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 59, dateTimeZone34);
        boolean boolean36 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        int int38 = dateTime35.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test12507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12507");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        int int12 = localTime3.getHourOfDay();
        org.joda.time.LocalTime localTime14 = localTime3.withMillisOfDay(69250945);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        int int16 = localTime14.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
    }

    @Test
    public void test12508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12508");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str14 = mutableDateTime11.toString();
        mutableDateTime11.setTime((long) 69204394);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.secondOfMinute();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime11.dayOfMonth();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendTimeZoneShortName(strMap25);
        boolean boolean27 = dateTimeZone23.equals((java.lang.Object) strMap25);
        boolean boolean29 = dateTimeZone23.isStandardOffset((long) (byte) -1);
        long long32 = dateTimeZone23.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str33 = dateTimeZone23.getID();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone23);
        int int35 = localDate34.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property37 = localDate34.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType36.getField(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) chronology38, chronology40);
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.minutes();
        org.joda.time.DurationField durationField44 = chronology42.centuries();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = chronology42.add(readablePeriod45, (long) 19, 69206587);
        long long52 = chronology42.add((long) 1154, (long) 254, 69344441);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar57 = mutableDateTime55.toGregorianCalendar();
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar57);
        org.joda.time.LocalDate.Property property59 = localDate58.yearOfEra();
        int int60 = localDate58.size();
        int[] intArray62 = chronology42.get((org.joda.time.ReadablePartial) localDate58, (long) 489);
        org.joda.time.DateTimeField dateTimeField63 = chronology42.monthOfYear();
        mutableDateTime11.setChronology(chronology42);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str14, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-360599990L) + "'", long32 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:10" + "'", str33, "+100:10");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 19L + "'", long48 == 19L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 17613489168L + "'", long52 == 17613489168L);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test12509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12509");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        boolean boolean17 = strList15.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean27 = strList25.equals((java.lang.Object) (-1));
        boolean boolean28 = strList15.retainAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean29 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15, filteringMode30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder32.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder32.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatterBuilder32.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder32.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder32.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder32.appendMonthOfYearShortText();
        boolean boolean44 = strList15.equals((java.lang.Object) dateTimeFormatterBuilder43);
        dateTimeFormatterBuilder43.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder43.appendMonthOfYear(69246199);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder43.appendMillisOfDay(69218773);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder43.appendClockhourOfDay(69470184);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeParser37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
    }

    @Test
    public void test12510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12510");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set("70");
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfEven();
        java.lang.String str12 = mutableDateTime11.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000+100:10" + "'", str12, "1970-01-01T00:00:00.000+100:10");
    }

    @Test
    public void test12511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12511");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        int int34 = dateTime33.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableDateTime37.add(readablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap45 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder44.appendTimeZoneShortName(strMap45);
        boolean boolean47 = dateTimeZone43.equals((java.lang.Object) strMap45);
        boolean boolean49 = dateTimeZone43.isStandardOffset((long) (byte) -1);
        long long52 = dateTimeZone43.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime37.setZoneRetainFields(dateTimeZone43);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(dateTimeZone43);
        java.util.Locale locale57 = new java.util.Locale("hi!");
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale63 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology61, locale63, (java.lang.Integer) 54202800);
        java.lang.String str66 = locale57.getDisplayCountry(locale63);
        java.lang.String str67 = dateTimeZone43.getShortName((long) 69230879, locale57);
        java.lang.String str68 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime69 = dateTime33.toDateTime(dateTimeZone43);
        long long70 = dateTime69.getMillis();
        org.joda.time.DateTime.Property property71 = dateTime69.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone73);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime74.yearOfCentury();
        mutableDateTime74.addDays((int) (short) -1);
        int int78 = mutableDateTime74.getYear();
        org.joda.time.Instant instant79 = mutableDateTime74.toInstant();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        mutableDateTime74.add(readablePeriod80, 69203038);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime74.dayOfMonth();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime74.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime86 = property84.add((long) 3);
        boolean boolean87 = dateTime69.isAfter((org.joda.time.ReadableInstant) mutableDateTime86);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime86.setDateTime(69620158, 69599517, 69363853, 0, 69283737, 69425439, 69576203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69283737 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 69627150 + "'", int34 == 69627150);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-360599990L) + "'", long52 == (-360599990L));
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+100:10" + "'", str67, "+100:10");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+100:10" + "'", str68, "+100:10");
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-28401180572850L) + "'", long70 == (-28401180572850L));
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1970 + "'", int78 == 1970);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test12512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12512");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(59);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekOfWeekyear((int) '#');
        int int7 = localDateTime0.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minusSeconds(69221646);
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = property11.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2019 + "'", int10 == 2019);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test12513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12513");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder9 = builder4.setRegion("ko");
        java.util.Locale.Builder builder11 = builder9.setVariant("months");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setLanguage("5777058-08-23T18:18:34.030+100:10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 5777058-08-23T18:18:34.030+100:10 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test12514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12514");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((java.lang.Object) 69411226);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12515");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.plusWeeks(69210165);
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfSecond();
        org.joda.time.DateTime dateTime41 = property39.addToCopy(69204037);
        org.joda.time.DateTime dateTime42 = property39.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(69208090);
        org.joda.time.DateMidnight dateMidnight45 = dateTime44.toDateMidnight();
        int int46 = dateTime44.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 66027214 + "'", int46 == 66027214);
    }

    @Test
    public void test12516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12516");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.append(dateTimeFormatter5);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder6.appendFractionOfDay(69305049, 69392585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder6.appendMinuteOfDay(65657);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder13.appendTimeZoneName();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
    }

    @Test
    public void test12517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12517");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(69552217);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12518");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withWeekOfWeekyear(51);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69627246 + "'", int1 == 69627246);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test12519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12519");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendLiteral('x');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder2.appendFractionOfHour(2, 69226804);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder2.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendClockhourOfHalfday(69588200);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
    }

    @Test
    public void test12520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12520");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set("70");
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime8.toMutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.monthOfYear();
        mutableDateTime26.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.secondOfDay();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        java.lang.String str36 = mutableDateTime30.toString();
        org.joda.time.DateTimeField dateTimeField37 = mutableDateTime30.getRoundingField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str36, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNull(dateTimeField37);
    }

    @Test
    public void test12521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12521");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        java.lang.String str10 = dateTimeZone2.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone2);
        java.lang.String str13 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.monthOfYear();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale19.getISO3Language();
        int int21 = property18.getMaximumShortTextLength(locale19);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale19.getDisplayName(locale22);
        java.lang.String str25 = locale22.getVariant();
        java.lang.String str26 = dateTimeZone2.getName((long) 69204394, locale22);
        java.lang.String str27 = locale22.getVariant();
        java.util.Set<java.lang.String> strSet28 = locale22.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:10" + "'", str10, "+100:10");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fran\347ais (Canada)" + "'", str24, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+100:10" + "'", str26, "+100:10");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test12522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12522");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.setCopy(2);
        org.joda.time.DateTime dateTime35 = property32.withMaximumValue();
        org.joda.time.DateTime dateTime37 = property32.addToCopy(2022);
        org.joda.time.DateTime dateTime38 = property32.withMinimumValue();
        int int39 = dateTime38.getMonthOfYear();
        org.joda.time.DateTime dateTime40 = dateTime38.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test12523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12523");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.setMillisOfDay((int) '#');
        int int6 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.add((long) 69498143);
        org.joda.time.MutableDateTime mutableDateTime12 = property7.add(69300035);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test12524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12524");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("00");
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime3 = property2.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test12525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12525");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        java.util.Date date23 = localDate21.toDate();
        org.joda.time.LocalDate.Property property24 = localDate21.weekyear();
        org.joda.time.LocalDate localDate26 = property24.setCopy("1970");
        java.lang.String str27 = property24.toString();
        org.joda.time.LocalDate localDate28 = property24.roundCeilingCopy();
        org.joda.time.LocalDate localDate29 = property24.getLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Fri Feb 25 00:00:00 GMT+:0:10 2022");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[weekyear]" + "'", str27, "Property[weekyear]");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test12526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12526");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor1 = strSet0.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator2 = strSet0.spliterator();
        boolean boolean4 = strSet0.add("minuteOfHour");
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strItor1);
        org.junit.Assert.assertNotNull(strSpliterator2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test12527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12527");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone2.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap18);
        boolean boolean20 = dateTimeZone16.equals((java.lang.Object) strMap18);
        boolean boolean22 = dateTimeZone16.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter13.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long26 = dateTimeZone2.getMillisKeepLocal(dateTimeZone16, (long) 10);
        long long29 = dateTimeZone2.convertLocalToUTC((long) 69222959, true);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone35.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone35);
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property49 = localDate46.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType48.getField(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) chronology50, chronology52);
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate57 = localDate53.withPeriodAdded(readablePeriod55, (int) '#');
        org.joda.time.LocalDate.Property property58 = localDate53.weekyear();
        org.joda.time.LocalDate localDate59 = property58.withMinimumValue();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths(2);
        int int62 = localDate61.getMonthOfYear();
        int int63 = localDate61.getDayOfWeek();
        int int64 = localDate61.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getDurationType();
        boolean boolean67 = localDate61.isSupported(durationFieldType66);
        mutableDateTime30.add(durationFieldType66, 69221666);
        int int70 = mutableDateTime30.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime30.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599999L) + "'", long12 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-291377041L) + "'", long29 == (-291377041L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599990L) + "'", long44 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 20 + "'", int70 == 20);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test12528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12528");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"dayOfMonth\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12529");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendDayOfMonth(69203038);
        boolean boolean15 = dateTimeFormatterBuilder12.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder12.appendDayOfMonth(69220682);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendClockhourOfHalfday(69214930);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder18.appendYear(69261793, 2019);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder24.appendEraText();
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatterBuilder25.toParser();
        int int27 = dateTimeParser26.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeParser26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 276900547 + "'", int27 == 276900547);
    }

    @Test
    public void test12530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12530");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfDay(2022, 69218943);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder7.appendFractionOfMinute(18, 69223981);
        boolean boolean14 = dateTimeFormatterBuilder13.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder13.appendYearOfEra(69279894, 69236559);
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatterBuilder13.toParser();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        int int26 = localDateTime25.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.property(dateTimeFieldType27);
        org.joda.time.DurationField durationField29 = property28.getDurationField();
        org.joda.time.LocalDateTime localDateTime31 = property28.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime33 = property28.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.monthOfYear();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone37);
        mutableDateTime38.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfCentury();
        mutableDateTime43.addDays((int) (short) -1);
        int int47 = mutableDateTime43.getYear();
        boolean boolean48 = mutableDateTime38.isEqual((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.monthOfYear();
        int int53 = mutableDateTime51.getWeekOfWeekyear();
        mutableDateTime51.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean57 = mutableDateTime51.isSupported(dateTimeFieldType56);
        boolean boolean58 = mutableDateTime43.isSupported(dateTimeFieldType56);
        int int59 = mutableDateTime43.getEra();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime43.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone62);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime63.yearOfCentury();
        mutableDateTime63.addDays((int) (short) -1);
        mutableDateTime63.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime63.hourOfDay();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime63.era();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone72);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime76 = property74.add((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone78);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime79.monthOfYear();
        java.util.Locale locale81 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str82 = locale81.getISO3Language();
        int int83 = property80.getMaximumShortTextLength(locale81);
        java.lang.String str84 = property74.getAsText(locale81);
        java.lang.String str85 = locale81.getLanguage();
        int int86 = property70.getMaximumTextLength(locale81);
        int int87 = property60.getMaximumShortTextLength(locale81);
        java.lang.String str88 = locale81.getDisplayLanguage();
        java.lang.String str89 = property34.getAsText(locale81);
        java.lang.String str90 = dateTimeZone21.getName((long) 69384322, locale81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeFormatterBuilder13, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatterBuilder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69627458 + "'", int26 == 69627458);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "fra" + "'", str82, "fra");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "70" + "'", str84, "70");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fr" + "'", str85, "fr");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "fran\347ais" + "'", str88, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "f\351vrier" + "'", str89, "f\351vrier");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+100:10" + "'", str90, "+100:10");
    }

    @Test
    public void test12531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12531");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        java.lang.String str14 = mutableDateTime13.toString();
        mutableDateTime13.addMillis(0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str14, "1970-01-05T04:10:00.001+100:10");
    }

    @Test
    public void test12532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12532");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        int int11 = mutableDateTime9.getWeekOfWeekyear();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = mutableDateTime9.toString("+100:10", locale13);
        mutableDateTime9.addSeconds(4);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime9.toMutableDateTimeISO();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList31);
        boolean boolean35 = strList33.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList41);
        boolean boolean45 = strList43.equals((java.lang.Object) (-1));
        boolean boolean46 = strList33.retainAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean47 = strSet24.retainAll((java.util.Collection<java.lang.String>) strList33);
        java.util.Locale.FilteringMode filteringMode48 = null;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList33, filteringMode48);
        boolean boolean51 = strList33.add("70");
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale55 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology53, locale55, (java.lang.Integer) 54202800);
        java.util.Locale locale58 = dateTimeParserBucket57.getLocale();
        java.util.Locale locale59 = dateTimeParserBucket57.getLocale();
        dateTimeParserBucket57.setPivotYear((java.lang.Integer) 69221500);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        boolean boolean68 = dateTimeZone64.equals((java.lang.Object) strMap66);
        boolean boolean70 = dateTimeZone64.isStandardOffset((long) (byte) -1);
        java.lang.String str72 = dateTimeZone64.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(dateTimeZone64);
        dateTimeParserBucket57.setZone(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((java.lang.Object) "70", dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime9, dateTimeZone64);
        boolean boolean77 = localDateTime4.equals((java.lang.Object) mutableDateTime9);
        int int78 = localDateTime4.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+100:10" + "'", str72, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
    }

    @Test
    public void test12533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12533");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        int int2 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfEra(1970);
        org.joda.time.Chronology chronology8 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 69240429, chronology8);
        org.junit.Assert.assertNotNull(localDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 69627549 + "'", int2 == 69627549);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test12534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12534");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property26 = localDate23.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        long long39 = dateTimeZone30.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone30.getID();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone30);
        int int42 = localDate41.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property44 = localDate41.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType43.getField(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) chronology45, chronology47);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.minutes();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType25.getField(chronology49);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = locale52.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology49, locale52, (java.lang.Integer) 0, 54202800);
        boolean boolean57 = strList5.remove((java.lang.Object) chronology49);
        org.joda.time.DateTimeField dateTimeField58 = chronology49.clockhourOfDay();
        org.joda.time.DurationField durationField59 = chronology49.months();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology49);
        int int61 = mutableDateTime60.getDayOfMonth();
        mutableDateTime60.addSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableDateTime60.add(readablePeriod64, 69236770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = org.joda.time.format.ISODateTimeFormat.timeParser();
        int int68 = dateTimeFormatter67.getDefaultYear();
        java.lang.String str69 = mutableDateTime60.toString(dateTimeFormatter67);
        java.lang.Integer int70 = dateTimeFormatter67.getPivotYear();
        java.lang.StringBuffer stringBuffer71 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone73);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime74.monthOfYear();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime74.minuteOfDay();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime74.dayOfYear();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime74.hourOfDay();
        org.joda.time.ReadableDuration readableDuration79 = null;
        mutableDateTime74.add(readableDuration79, 69206920);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        java.util.Locale locale84 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter83.withLocale(locale84);
        java.lang.String str86 = locale84.getDisplayCountry();
        java.lang.String str87 = mutableDateTime74.toString("69311169", locale84);
        org.joda.time.ReadableDuration readableDuration88 = null;
        mutableDateTime74.add(readableDuration88, 0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter67.printTo(stringBuffer71, (org.joda.time.ReadableInstant) mutableDateTime74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-360599990L) + "'", long39 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:10" + "'", str40, "+100:10");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 21 + "'", int61 == 21);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2000 + "'", int68 == 2000);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "15" + "'", str69, "15");
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Taiwan" + "'", str86, "Taiwan");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "69311169" + "'", str87, "69311169");
    }

    @Test
    public void test12535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12535");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        int int2 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(69245236);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        java.lang.String str8 = localDateTime6.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69627593 + "'", int1 == 69627593);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "69245258-02-25T19:20:27.593" + "'", str8, "69245258-02-25T19:20:27.593");
    }

    @Test
    public void test12536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12536");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = nameProvider2.getName(locale3, "1", "fr");
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.property(dateTimeFieldType9);
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime14 = property10.roundFloorCopy();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale15.getDisplayVariant();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology23, locale25, (java.lang.Integer) 54202800);
        java.lang.String str28 = locale19.getDisplayCountry(locale25);
        java.lang.String str29 = locale15.getDisplayName(locale19);
        int int30 = property10.getMaximumShortTextLength(locale19);
        java.lang.String str33 = nameProvider2.getShortName(locale19, "\u516c\u5143", "AD");
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone35);
        mutableDateTime36.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.yearOfCentury();
        mutableDateTime41.addDays((int) (short) -1);
        int int45 = mutableDateTime41.getYear();
        boolean boolean46 = mutableDateTime36.isEqual((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.monthOfYear();
        int int51 = mutableDateTime49.getWeekOfWeekyear();
        mutableDateTime49.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean55 = mutableDateTime49.isSupported(dateTimeFieldType54);
        boolean boolean56 = mutableDateTime41.isSupported(dateTimeFieldType54);
        int int57 = mutableDateTime41.getEra();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime41.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone60);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.yearOfCentury();
        mutableDateTime61.addDays((int) (short) -1);
        mutableDateTime61.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime61.hourOfDay();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime61.era();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime74 = property72.add((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone76);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime77.monthOfYear();
        java.util.Locale locale79 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str80 = locale79.getISO3Language();
        int int81 = property78.getMaximumShortTextLength(locale79);
        java.lang.String str82 = property72.getAsText(locale79);
        java.lang.String str83 = locale79.getLanguage();
        int int84 = property68.getMaximumTextLength(locale79);
        int int85 = property58.getMaximumShortTextLength(locale79);
        java.lang.String str86 = locale19.getDisplayLanguage(locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((long) 69284252, chronology1, locale19);
        boolean boolean88 = locale19.hasExtensions();
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69627601 + "'", int8 == 69627601);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "German" + "'", str29, "German");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fra" + "'", str80, "fra");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "70" + "'", str82, "70");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "fr" + "'", str83, "fr");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test12537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12537");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        int int8 = mutableDateTime7.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        int int13 = mutableDateTime11.getWeekOfWeekyear();
        mutableDateTime11.setMinuteOfDay((int) (short) 0);
        int int16 = mutableDateTime11.getWeekyear();
        int int17 = mutableDateTime11.getSecondOfMinute();
        boolean boolean19 = mutableDateTime11.isBefore((-360599999L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendTimeZoneShortName(strMap26);
        boolean boolean28 = dateTimeZone24.equals((java.lang.Object) strMap26);
        boolean boolean30 = dateTimeZone24.isStandardOffset((long) (byte) -1);
        long long33 = dateTimeZone24.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str34 = dateTimeZone24.getID();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone24);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight37 = localDate35.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter38.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.DateTime dateTime50 = localDate35.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime52 = dateTime50.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property53 = dateTime50.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap59 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder58.appendTimeZoneShortName(strMap59);
        boolean boolean61 = dateTimeZone57.equals((java.lang.Object) strMap59);
        boolean boolean63 = dateTimeZone57.isStandardOffset((long) (byte) -1);
        long long66 = dateTimeZone57.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str67 = dateTimeZone57.getID();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone57);
        int int69 = localDate68.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property71 = localDate68.property(dateTimeFieldType70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType70.getField(chronology72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) chronology72, chronology74);
        org.joda.time.Chronology chronology76 = localDate75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.minutes();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.weekyear();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone81);
        org.joda.time.Chronology chronology83 = chronology76.withZone(dateTimeZone81);
        org.joda.time.MutableDateTime mutableDateTime84 = dateTime50.toMutableDateTime(chronology83);
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime((long) 10010, chronology83);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime85);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime11.hourOfDay();
        boolean boolean88 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14400 + "'", int8 == 14400);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-360599990L) + "'", long33 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:10" + "'", str34, "+100:10");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-360599990L) + "'", long66 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+100:10" + "'", str67, "+100:10");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test12538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12538");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(69401183, 69298670, 69350819, 69355645, 69284252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69355645 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12539");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.minusSeconds(0);
        int int9 = localTime6.getMillisOfDay();
        org.joda.time.LocalTime localTime11 = localTime6.minusMinutes(69594758);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399999 + "'", int9 == 86399999);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test12540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12540");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        boolean boolean11 = localDateTime9.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.monthOfYear();
        int int18 = mutableDateTime16.getWeekOfWeekyear();
        mutableDateTime16.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean22 = mutableDateTime16.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime9.property(dateTimeFieldType21);
        java.util.Date date24 = localDateTime9.toDate();
        boolean boolean25 = dateTimeZone2.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime.Property property26 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property26.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfMonth();
        org.joda.time.DurationField durationField29 = property28.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Feb 25 19:20:27 GMT+:0:10 2022");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test12541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12541");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "69226168");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder4.setVariant("French");
        java.util.Locale.Builder builder9 = builder4.setExtension('u', "69499799");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale10.getDisplayVariant();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology18, locale20, (java.lang.Integer) 54202800);
        java.lang.String str23 = locale14.getDisplayCountry(locale20);
        java.lang.String str24 = locale10.getDisplayName(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder4.setLocale(locale14);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "German" + "'", str24, "German");
    }

    @Test
    public void test12542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12542");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = mutableDateTime2.toString("+100:10", locale6);
        mutableDateTime2.addSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        long long22 = dateTimeZone13.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str23 = dateTimeZone13.getID();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone13);
        int int25 = localDate24.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property27 = localDate24.property(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendTimeZoneShortName(strMap33);
        boolean boolean35 = dateTimeZone31.equals((java.lang.Object) strMap33);
        boolean boolean37 = dateTimeZone31.isStandardOffset((long) (byte) -1);
        long long40 = dateTimeZone31.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str41 = dateTimeZone31.getID();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone31);
        int int43 = localDate42.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property45 = localDate42.property(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType44.getField(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) chronology46, chronology48);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType26.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.year();
        long long55 = dateTimeField53.remainder((long) 10010);
        int int56 = mutableDateTime2.get(dateTimeField53);
        long long57 = mutableDateTime2.getMillis();
        org.joda.time.Chronology chronology58 = mutableDateTime2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfWeek(69240838);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69240838 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:10" + "'", str7, "+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-360599990L) + "'", long22 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+100:10" + "'", str23, "+100:10");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-360599990L) + "'", long40 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+100:10" + "'", str41, "+100:10");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10010L + "'", long55 == 10010L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4001L + "'", long57 == 4001L);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test12543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12543");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\ufffd\ufffd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.io.ioexception: -292275054-02-25t??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12544");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        int int5 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter23.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = localDate20.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 59, dateTimeZone40);
        boolean boolean42 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime41);
        int int43 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime45 = dateTime37.minusSeconds(69205874);
        org.joda.time.DateTime dateTime46 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.minus(readableDuration48);
        org.joda.time.DateTime.Property property50 = dateTime49.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test12545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12545");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder6.appendFractionOfMinute(69210179, 69218943);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder6.appendMinuteOfDay(69214930);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendClockhourOfHalfday(69324855);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder11.appendTwoDigitWeekyear(69224989, false);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder16.appendTimeZoneId();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
    }

    @Test
    public void test12546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12546");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        long long38 = dateTimeZone29.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str39 = dateTimeZone29.getID();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone29);
        int int41 = localDate40.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property43 = localDate40.property(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType42.getField(chronology44);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        int int47 = dateTimeField45.getMaximumShortTextLength(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        int int49 = dateTimeField45.getMaximumTextLength(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology23, locale48, (java.lang.Integer) 2022, 0);
        org.joda.time.DateTimeField dateTimeField53 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology23.weekyear();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        int int56 = localDateTime55.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.secondOfMinute();
        int int62 = localDateTime60.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.property(dateTimeFieldType63);
        org.joda.time.LocalDateTime localDateTime65 = property64.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays(31);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withDayOfYear(14);
        org.joda.time.Chronology chronology70 = localDateTime65.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((java.lang.Object) chronology23, chronology70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-360599990L) + "'", long38 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:10" + "'", str39, "+100:10");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 69627796 + "'", int56 == 69627796);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test12547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12547");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder7.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatterBuilder7.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder7.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder14.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.append(dateTimeFormatter18);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendWeekyear((int) (short) 10, 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder23.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder23.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatterBuilder23.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder22.appendOptional(dateTimeParser28);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder30.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder30.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatterBuilder30.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder30.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder37.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.append(dateTimeFormatter41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendWeekyear((int) (short) 10, 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder46.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder46.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatterBuilder46.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder45.appendOptional(dateTimeParser51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder53.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder53.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser58 = dateTimeFormatterBuilder53.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder53.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder60.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder60.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder63.append(dateTimeFormatter64);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder65.appendWeekyear((int) (short) 10, 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder69.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = dateTimeFormatterBuilder69.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser74 = dateTimeFormatterBuilder69.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder75 = dateTimeFormatterBuilder68.appendOptional(dateTimeParser74);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder76 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder76.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder80 = dateTimeFormatterBuilder76.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser81 = dateTimeFormatterBuilder80.toParser();
        org.joda.time.format.DateTimeParser[] dateTimeParserArray82 = new org.joda.time.format.DateTimeParser[] { dateTimeParser28, dateTimeParser51, dateTimeParser74, dateTimeParser81 };
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder83 = dateTimeFormatterBuilder0.append(dateTimePrinter6, dateTimeParserArray82);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder84 = dateTimeFormatterBuilder83.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder86 = dateTimeFormatterBuilder84.appendMinuteOfDay(69247959);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder88 = dateTimeFormatterBuilder86.appendDayOfYear(69271157);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap89 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder90 = dateTimeFormatterBuilder88.appendTimeZoneName(strMap89);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder91 = dateTimeFormatterBuilder88.appendMonthOfYearShortText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeParser51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertNotNull(dateTimeParser58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder73);
        org.junit.Assert.assertNotNull(dateTimeParser74);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder75);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder80);
        org.junit.Assert.assertNotNull(dateTimeParser81);
        org.junit.Assert.assertNotNull(dateTimeParserArray82);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder83);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder84);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder86);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder88);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder90);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder91);
    }

    @Test
    public void test12548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12548");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime29.withDurationAdded(readableDuration33, 69213992);
        org.joda.time.DateTime.Property property36 = dateTime29.secondOfDay();
        int int37 = dateTime29.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1160 + "'", int37 == 1160);
    }

    @Test
    public void test12549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12549");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property26 = localDate23.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        long long39 = dateTimeZone30.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone30.getID();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone30);
        int int42 = localDate41.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property44 = localDate41.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType43.getField(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) chronology45, chronology47);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.minutes();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType25.getField(chronology49);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = locale52.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology49, locale52, (java.lang.Integer) 0, 54202800);
        boolean boolean57 = strList5.remove((java.lang.Object) chronology49);
        org.joda.time.DateTimeField dateTimeField58 = chronology49.clockhourOfDay();
        org.joda.time.DurationField durationField59 = chronology49.months();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology49);
        int int61 = mutableDateTime60.getDayOfMonth();
        mutableDateTime60.addSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableDateTime60.add(readablePeriod64, 69236770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = org.joda.time.format.ISODateTimeFormat.timeParser();
        int int68 = dateTimeFormatter67.getDefaultYear();
        java.lang.String str69 = mutableDateTime60.toString(dateTimeFormatter67);
        java.lang.String str70 = mutableDateTime60.toString();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime60.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime72 = property71.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.weekyear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-360599990L) + "'", long39 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:10" + "'", str40, "+100:10");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 21 + "'", int61 == 21);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2000 + "'", int68 == 2000);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "15" + "'", str69, "15");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-21T15:10:27.894Z" + "'", str70, "2022-02-21T15:10:27.894Z");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test12550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12550");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int[] intArray18 = localDate14.getValues();
        int int19 = localDate14.getDayOfYear();
        org.joda.time.LocalDate.Property property20 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate21 = property20.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate22 = property20.getLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 5]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test12551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12551");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        boolean boolean25 = durationFieldType0.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.secondOfDay();
        long long29 = dateTimeField27.roundHalfFloor((long) 695);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1000L + "'", long29 == 1000L);
    }

    @Test
    public void test12552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12552");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyear();
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str2 = locale1.getISO3Language();
        java.lang.String str3 = locale1.getISO3Language();
        java.lang.String str4 = locale1.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test12553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12553");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        long long38 = dateTimeZone29.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str39 = dateTimeZone29.getID();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone29);
        int int41 = localDate40.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property43 = localDate40.property(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType42.getField(chronology44);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        int int47 = dateTimeField45.getMaximumShortTextLength(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        int int49 = dateTimeField45.getMaximumTextLength(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology23, locale48, (java.lang.Integer) 2022, 0);
        org.joda.time.DateTimeField dateTimeField53 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology23.weekyear();
        org.joda.time.DurationField durationField55 = chronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField56 = chronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField57 = chronology23.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-360599990L) + "'", long38 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:10" + "'", str39, "+100:10");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test12554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12554");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 69206920);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime4 = property2.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test12555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12555");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        java.lang.String str4 = dateTimeZone2.getShortName((long) (byte) 100);
        java.lang.String str6 = dateTimeZone2.getName((long) 2);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone2);
        int int8 = localTime7.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime7.withPeriodAdded(readablePeriod9, 69230182);
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property12.addWrapFieldToCopy(69232053);
        org.joda.time.LocalTime localTime16 = property12.addCopy((long) 65721);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime19 = localTime16.withPeriodAdded(readablePeriod17, 69432169);
        org.joda.time.LocalTime localTime21 = localTime16.minusMinutes(69520208);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:10" + "'", str4, "+100:10");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:10" + "'", str6, "+100:10");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test12556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12556");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(69218643);
        int int10 = localDateTime7.getDayOfWeek();
        int int11 = localDateTime7.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minusMonths(69384459);
        int int14 = localDateTime13.getEra();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69628046 + "'", int1 == 69628046);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 56 + "'", int11 == 56);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test12557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12557");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        mutableDateTime4.setTime((long) (short) -1);
        mutableDateTime4.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str10 = mutableDateTime4.toString(dateTimeFormatter9);
        java.util.Date date11 = mutableDateTime4.toDate();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime4.year();
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime0.add(readablePeriod14, (-32));
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime0.add(readableDuration17, 65908);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 56 + "'", int1 == 56);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "00" + "'", str10, "00");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Jan 05 04:10:00 GMT+:0:10 1970");
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test12558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12558");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DurationField durationField26 = durationFieldType0.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap35 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder34.appendTimeZoneShortName(strMap35);
        boolean boolean37 = dateTimeZone33.equals((java.lang.Object) strMap35);
        boolean boolean39 = dateTimeZone33.isStandardOffset((long) (byte) -1);
        long long42 = dateTimeZone33.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str43 = dateTimeZone33.getID();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone33);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight46 = localDate44.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap52 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder51.appendTimeZoneShortName(strMap52);
        boolean boolean54 = dateTimeZone50.equals((java.lang.Object) strMap52);
        boolean boolean56 = dateTimeZone50.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter47.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.DateTime dateTime59 = localDate44.toDateTimeAtCurrentTime(dateTimeZone50);
        java.lang.String str61 = dateTimeZone50.getNameKey((long) 69213826);
        long long64 = dateTimeZone50.adjustOffset((long) 69225701, true);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.Chronology chronology66 = chronology23.withZone(dateTimeZone50);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-360599990L) + "'", long42 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+100:10" + "'", str43, "+100:10");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 69225701L + "'", long64 == 69225701L);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test12559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12559");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate localDate3 = localDate1.withYear(69208090);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(19);
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate10 = property6.addWrapFieldToCopy(69358429);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test12560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12560");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = mutableDateTime2.toString("+100:10", locale6);
        mutableDateTime2.addSeconds(4);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime2.toMutableDateTimeISO();
        int int11 = mutableDateTime2.getYear();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime2.copy();
        mutableDateTime2.setYear(191674);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:10" + "'", str7, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test12561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12561");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 69261457);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(21);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.property(dateTimeFieldType6);
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = property7.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = property13.getAsShortText(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.monthOfYear();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale26.getISO3Language();
        int int28 = property25.getMaximumShortTextLength(locale26);
        java.lang.String str29 = property19.getAsText(locale26);
        java.lang.String str30 = locale14.getDisplayCountry(locale26);
        java.util.Set<java.lang.String> strSet31 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale32 = locale26.stripExtensions();
        java.util.Calendar calendar33 = dateTime1.toCalendar(locale32);
        org.joda.time.DateTime.Property property34 = dateTime1.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 69628139 + "'", int5 == 69628139);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "feb" + "'", str15, "feb");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fra" + "'", str27, "fra");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "70" + "'", str29, "70");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Italie" + "'", str30, "Italie");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=69261457,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=5,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=24,SECOND=21,MILLISECOND=457,ZONE_OFFSET=360600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test12562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12562");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusWeeks(191509);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        boolean boolean11 = localDateTime9.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfCentury((int) (short) 0);
        int int14 = localDateTime9.getYear();
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) localDateTime9, 100L);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69628160 + "'", int1 == 69628160);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12563");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        int int6 = mutableDateTime2.getYear();
        org.joda.time.Instant instant7 = mutableDateTime2.toInstant();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime2.add(readablePeriod8, 69203038);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        mutableDateTime12.setMillisOfDay(69484571);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test12564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12564");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.property(dateTimeFieldType6);
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = property7.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = property13.getAsShortText(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.monthOfYear();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale26.getISO3Language();
        int int28 = property25.getMaximumShortTextLength(locale26);
        java.lang.String str29 = property19.getAsText(locale26);
        java.lang.String str30 = locale14.getDisplayCountry(locale26);
        java.util.Set<java.lang.String> strSet31 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale35 = new java.util.Locale("GMT+19:13", "04:10:00.001+100:10", "2022-02-21T15:03:44.751Z");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        boolean boolean37 = strSet31.containsAll((java.util.Collection<java.lang.String>) strSet36);
        boolean boolean38 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.Spliterator<java.lang.String> strSpliterator39 = strSet3.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fra" + "'", str1, "fra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 69628202 + "'", int5 == 69628202);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "feb" + "'", str15, "feb");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fra" + "'", str27, "fra");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "70" + "'", str29, "70");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Italie" + "'", str30, "Italie");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals(locale35.toString(), "gmt+19:13_04:10:00.001+100:10_2022-02-21T15:03:44.751Z");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSpliterator39);
    }

    @Test
    public void test12565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12565");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        org.joda.time.Chronology chronology27 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        java.lang.String str38 = dateTimeZone30.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight40 = localDate21.toDateMidnight(dateTimeZone30);
        boolean boolean42 = dateTimeZone30.equals((java.lang.Object) "2022-09-25T19:13:53.410");
        java.lang.String str44 = dateTimeZone30.getShortName((long) (-2));
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone30.getName((long) 69241206, locale46);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readablePeriod49);
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+100:10" + "'", str38, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+100:10" + "'", str44, "+100:10");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+100:10" + "'", str47, "+100:10");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test12566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12566");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((int) (short) 100);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        long long17 = chronology9.add((long) 2496, (long) 37, 69258090);
        org.joda.time.DurationField durationField18 = chronology9.millis();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField20 = chronology9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        int int22 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime21.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusSeconds(360600000);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.plusDays(69213082);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.plusYears(69234516);
        int int32 = localDateTime31.getYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.secondOfMinute();
        int[] intArray35 = chronology9.get((org.joda.time.ReadablePartial) localDateTime31, (long) 229);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.minusDays(69526798);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69628288 + "'", int1 == 69628288);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2562551826L + "'", long17 == 2562551826L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69628288 + "'", int22 == 69628288);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69236538 + "'", int32 == 69236538);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 229]");
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test12567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12567");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime37 = dateTime34.plusDays(39);
        org.joda.time.DateTime dateTime39 = dateTime37.plus((long) 69272);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime37.withDurationAdded(readableDuration40, 69225616);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded(readableDuration43, 1972);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test12568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12568");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendTimeZoneShortName(strMap25);
        boolean boolean27 = dateTimeZone23.equals((java.lang.Object) strMap25);
        boolean boolean29 = dateTimeZone23.isStandardOffset((long) (byte) -1);
        long long32 = dateTimeZone23.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str33 = dateTimeZone23.getID();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone23);
        int int35 = localDate34.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property37 = localDate34.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType36.getField(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) chronology38, chronology40);
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.minutes();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType18.getField(chronology42);
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = locale45.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology42, locale45, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, 5);
        org.joda.time.Chronology chronology53 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.minutes();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(obj0, chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.dayOfWeek();
        org.joda.time.DurationField durationField58 = chronology53.weeks();
        org.joda.time.DateTimeField dateTimeField59 = chronology53.year();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-360599990L) + "'", long32 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:10" + "'", str33, "+100:10");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test12569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12569");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        int int4 = localDateTime0.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(54202757);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfCeilingCopy();
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray17 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean29 = strList27.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList35);
        boolean boolean39 = strList37.equals((java.lang.Object) (-1));
        boolean boolean40 = strList27.retainAll((java.util.Collection<java.lang.String>) strList37);
        boolean boolean41 = strSet18.retainAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Locale.FilteringMode filteringMode42 = null;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList27, filteringMode42);
        boolean boolean45 = strList27.add("70");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder46.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder46.appendTwoDigitYear((int) (byte) -1, true);
        boolean boolean51 = strList27.contains((java.lang.Object) dateTimeFormatterBuilder50);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder50.appendMinuteOfDay(69268034);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder50.appendFractionOfSecond(69288529, 34);
        boolean boolean57 = property9.equals((java.lang.Object) 34);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69628402 + "'", int1 == 69628402);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test12570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12570");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withPeriodAdded(readablePeriod7, 38);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(25);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfEra(54202800);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears(2000);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(69247318);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        int int19 = localDateTime18.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks(191509);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        int int27 = localDateTime25.getYear();
        int int28 = localDateTime25.size();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths(69225355);
        int int31 = localDateTime30.getDayOfYear();
        boolean boolean32 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69628425 + "'", int19 == 69628425);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5692 + "'", int27 == 5692);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 301 + "'", int31 == 301);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test12571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12571");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withZone(dateTimeZone5);
        java.util.TimeZone timeZone13 = dateTimeZone5.toTimeZone();
        int int14 = timeZone13.getRawOffset();
        java.util.TimeZone.setDefault(timeZone13);
        boolean boolean16 = timeZone0.hasSameRules(timeZone13);
        timeZone0.setID("");
        java.util.TimeZone.setDefault(timeZone0);
        int int20 = timeZone0.getRawOffset();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset(69219412);
        int int25 = timeZone0.getOffset((long) 69340122);
        java.lang.String str26 = timeZone0.getID();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+19:13");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 360600000 + "'", int1 == 360600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 360600000 + "'", int14 == 360600000);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 360600000 + "'", int20 == 360600000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 69219412 + "'", int25 == 69219412);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test12572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12572");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setRegion("00000000000000000000000000000000026dimanche01088211");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 00000000000000000000000000000000026dimanche01088211 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test12573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12573");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set("70");
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfEra();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology14, locale16, (java.lang.Integer) 54202800);
        java.util.Locale locale19 = dateTimeParserBucket18.getLocale();
        long long20 = dateTimeParserBucket18.computeMillis();
        long long21 = dateTimeParserBucket18.computeMillis();
        long long24 = dateTimeParserBucket18.computeMillis(false, "minutes");
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone26);
        mutableDateTime27.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.yearOfCentury();
        mutableDateTime32.addDays((int) (short) -1);
        int int36 = mutableDateTime32.getYear();
        boolean boolean37 = mutableDateTime27.isEqual((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.monthOfYear();
        int int42 = mutableDateTime40.getWeekOfWeekyear();
        mutableDateTime40.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean46 = mutableDateTime40.isSupported(dateTimeFieldType45);
        boolean boolean47 = mutableDateTime32.isSupported(dateTimeFieldType45);
        java.util.Locale locale49 = java.util.Locale.PRC;
        dateTimeParserBucket18.saveField(dateTimeFieldType45, "GMT+:0:10", locale49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.monthOfYear();
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str56 = locale55.getISO3Language();
        int int57 = property54.getMaximumShortTextLength(locale55);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale58);
        java.lang.String str60 = locale55.getDisplayName(locale58);
        java.lang.String str61 = locale58.getISO3Country();
        java.lang.String str63 = locale58.getUnicodeLocaleType("10");
        java.lang.String str64 = locale49.getDisplayLanguage(locale58);
        java.util.Locale.Builder builder65 = builder12.setLocale(locale49);
        java.util.Locale.Builder builder66 = builder65.clear();
        java.util.Locale locale67 = builder65.build();
        java.lang.String str68 = property10.getAsText(locale67);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-291396175L) + "'", long20 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-291396175L) + "'", long21 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-291396175L) + "'", long24 == (-291396175L));
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fra" + "'", str56, "fra");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fran\347ais (Canada)" + "'", str60, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "FRA" + "'", str61, "FRA");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "chinois" + "'", str64, "chinois");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970" + "'", str68, "1970");
    }

    @Test
    public void test12574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12574");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        int int21 = dateTimeField19.getMaximumShortTextLength(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean35 = strSet33.isEmpty();
        boolean boolean36 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet33);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap42 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendTimeZoneShortName(strMap42);
        boolean boolean44 = dateTimeZone40.equals((java.lang.Object) strMap42);
        boolean boolean46 = dateTimeZone40.isStandardOffset((long) (byte) -1);
        long long49 = dateTimeZone40.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str50 = dateTimeZone40.getID();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone40);
        int int52 = localDate51.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property54 = localDate51.property(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType53.getField(chronology55);
        java.util.Locale locale57 = java.util.Locale.getDefault();
        int int58 = dateTimeField56.getMaximumShortTextLength(locale57);
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        int int60 = strSet59.size();
        java.lang.Object[] objArray61 = strSet59.toArray();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(69240429);
        boolean boolean65 = strSet59.contains((java.lang.Object) dateTime62);
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str67 = locale66.getISO3Language();
        java.lang.String str68 = locale66.getISO3Language();
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleAttributes();
        boolean boolean70 = strSet59.containsAll((java.util.Collection<java.lang.String>) strSet69);
        boolean boolean71 = strSet33.containsAll((java.util.Collection<java.lang.String>) strSet59);
        int int72 = strSet33.size();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-360599990L) + "'", long49 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+100:10" + "'", str50, "+100:10");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fra" + "'", str67, "fra");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fra" + "'", str68, "fra");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
    }

    @Test
    public void test12575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12575");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFractionOfDay(69218643, 69207900);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder14.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder14.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder17.appendSignedDecimal(dateTimeFieldType18, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder24.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder24.append(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder10.append(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder29.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder29.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder32.appendSignedDecimal(dateTimeFieldType33, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendMillisOfSecond(9);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap44 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder43.appendTimeZoneShortName(strMap44);
        boolean boolean46 = dateTimeZone42.equals((java.lang.Object) strMap44);
        boolean boolean48 = dateTimeZone42.isStandardOffset((long) (byte) -1);
        long long51 = dateTimeZone42.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str52 = dateTimeZone42.getID();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone42);
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight55 = localDate53.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        boolean boolean58 = dateMidnight55.isSupported(dateTimeFieldType56);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder38.appendFraction(dateTimeFieldType56, 69206920, 69212644);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder10.appendFixedDecimal(dateTimeFieldType56, 69286044);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder10.appendClockhourOfDay(69233168);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder65.appendYearOfEra(69357994, 69509888);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-360599990L) + "'", long51 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+100:10" + "'", str52, "+100:10");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
    }

    @Test
    public void test12576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12576");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        int int10 = localTime3.size();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        java.lang.String str21 = dateTimeZone13.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime22 = localTime3.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime24 = dateTime22.minus((long) 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readableDuration25);
        org.joda.time.DateTime dateTime28 = dateTime22.minusWeeks(69251366);
        org.joda.time.DateTime.Property property29 = dateTime22.minuteOfHour();
        org.joda.time.DateTime.Property property30 = dateTime22.minuteOfHour();
        int int31 = dateTime22.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test12577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12577");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDate.Property property27 = localDate22.weekyear();
        org.joda.time.LocalDate localDate28 = property27.withMinimumValue();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths(2);
        int int31 = localDate28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone33);
        mutableDateTime34.setTime((long) (short) -1);
        mutableDateTime34.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str40 = mutableDateTime34.toString(dateTimeFormatter39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.monthOfYear();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime43.minuteOfDay();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.dayOfYear();
        org.joda.time.DurationField durationField47 = property46.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime49 = property46.set("70");
        int int50 = mutableDateTime49.getYearOfEra();
        boolean boolean51 = mutableDateTime34.equals((java.lang.Object) int50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap56 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder55.appendTimeZoneShortName(strMap56);
        boolean boolean58 = dateTimeZone54.equals((java.lang.Object) strMap56);
        boolean boolean60 = dateTimeZone54.isStandardOffset((long) (byte) -1);
        java.lang.String str62 = dateTimeZone54.getShortName((long) 69203825);
        mutableDateTime34.setZoneRetainFields(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight64 = localDate28.toDateMidnight(dateTimeZone54);
        long long67 = dateTimeZone54.convertLocalToUTC((long) 52, false);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((-1L), dateTimeZone54);
        org.joda.time.LocalDate localDate69 = org.joda.time.LocalDate.now(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 56 + "'", int31 == 56);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "00" + "'", str40, "00");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+100:10" + "'", str62, "+100:10");
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-360599948L) + "'", long67 == (-360599948L));
        org.junit.Assert.assertNotNull(localDate69);
    }

    @Test
    public void test12578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12578");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds((-26));
        org.joda.time.LocalTime localTime13 = localTime9.plusMinutes(69234516);
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        int int15 = localTime13.getSecondOfMinute();
        org.joda.time.DateTime dateTime16 = localTime13.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test12579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12579");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType13, (int) '4', 69204394);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendDayOfWeek((int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder16.appendTwoDigitWeekyear(69258477, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder16.appendClockhourOfDay(69218887);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder16.appendYearOfCentury(69569251, 69337759);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
    }

    @Test
    public void test12580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12580");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.getEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusDays(69324993);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test12581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12581");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property26 = localDate23.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        long long39 = dateTimeZone30.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone30.getID();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone30);
        int int42 = localDate41.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property44 = localDate41.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType43.getField(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) chronology45, chronology47);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.minutes();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType25.getField(chronology49);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = locale52.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology49, locale52, (java.lang.Integer) 0, 54202800);
        boolean boolean57 = strList5.remove((java.lang.Object) chronology49);
        org.joda.time.DateTimeField dateTimeField58 = chronology49.weekyearOfCentury();
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(chronology49);
        org.joda.time.LocalDate localDate61 = localDate59.plusYears(0);
        org.joda.time.DateTime dateTime62 = localDate61.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-360599990L) + "'", long39 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:10" + "'", str40, "+100:10");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test12582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12582");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder8.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder8.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatterBuilder12.toParser();
        boolean boolean14 = dateTimeFormatterBuilder12.canBuildParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatterBuilder12.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder16.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendSignedDecimal(dateTimeFieldType20, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder23.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendTimeZoneId();
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatterBuilder26.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder0.append(dateTimePrinter15, dateTimeParser30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder0.appendTimeZoneOffset("GMT+19:13", true, 69246630, 69278263);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        boolean boolean38 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter37.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        boolean boolean41 = dateTimeFormatter40.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser42 = dateTimeFormatter40.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder0.append(dateTimePrinter39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeParser13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeParser30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeParser42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
    }

    @Test
    public void test12583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12583");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.minus(readablePeriod2);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder4.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendSignedDecimal(dateTimeFieldType8, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder14.appendTimeZoneOffset("610", "-2000-02-25T19:13:50.545", true, 65685, 69258822);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale24 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology22, locale24, (java.lang.Integer) 54202800);
        java.util.Locale locale27 = dateTimeParserBucket26.getLocale();
        java.util.Locale locale28 = dateTimeParserBucket26.getLocale();
        dateTimeParserBucket26.setPivotYear((java.lang.Integer) 69221500);
        long long31 = dateTimeParserBucket26.computeMillis();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) "-2000-02-25T19:13:50.545", chronology32);
        org.joda.time.DateTimeField dateTimeField36 = chronology32.hourOfDay();
        org.joda.time.DurationField durationField37 = chronology32.seconds();
        org.joda.time.DateTime dateTime38 = dateTime1.toDateTime(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology32.getDateTimeMillis(69542902, 2070000000, 69315360, 69299081);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2070000000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-291396175L) + "'", long31 == (-291396175L));
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test12584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12584");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.LocalDate localDate29 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate31 = property26.addWrapFieldToCopy(69330934);
        org.joda.time.LocalDate localDate32 = property26.getLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test12585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12585");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(65615);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65615 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test12586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12586");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.LocalDate localDate29 = property26.withMaximumValue();
        java.util.Date date30 = localDate29.toDate();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate localDate35 = localDate33.withYear(69208090);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays(19);
        int int38 = localDate29.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Feb 22 00:00:00 GMT+19:13 292278993");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test12587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12587");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.plusWeeks(0);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        org.joda.time.Instant instant38 = dateTime37.toInstant();
        boolean boolean40 = instant38.equals((java.lang.Object) 69508927);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test12588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12588");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("4518918-07-25T19:14:56.164");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test12589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12589");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        mutableDateTime2.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.add((long) 1154);
        org.joda.time.MutableDateTime mutableDateTime12 = property8.add((long) 69395772);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test12590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12590");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMaximumValue();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69628834 + "'", int1 == 69628834);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test12591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12591");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        java.util.Date date15 = localDateTime0.toDate();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime0.plusWeeks(69233168);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime0.minusSeconds(69213798);
        int int20 = localDateTime19.getYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 25 19:20:29 GMT+19:13 2022");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2019 + "'", int20 == 2019);
    }

    @Test
    public void test12592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12592");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundHalfEven();
        mutableDateTime7.addMinutes(146382);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test12593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12593");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime localTime15 = localTime13.withSecondOfMinute(22);
        org.joda.time.LocalTime.Property property16 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime18 = property16.addWrapFieldToCopy(69287258);
        org.joda.time.LocalTime localTime20 = property16.addCopy(69245210);
        org.joda.time.LocalTime localTime21 = property16.roundFloorCopy();
        org.joda.time.LocalTime localTime22 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = localTime22.toDateTimeToday();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        boolean boolean26 = localDateTime24.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears(1);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("-2000-02-25T19:13:31.786");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) "-2000-02-25T19:13:31.786", dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.property(dateTimeFieldType36);
        java.lang.String str39 = dateTimeFieldType36.getName();
        int int40 = localDateTime28.get(dateTimeFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = localTime22.withField(dateTimeFieldType36, 69361045);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69361045 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "secondOfMinute" + "'", str39, "secondOfMinute");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 28 + "'", int40 == 28);
    }

    @Test
    public void test12594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12594");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        int int6 = mutableDateTime2.getYear();
        org.joda.time.Instant instant7 = mutableDateTime2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        mutableDateTime2.setZoneRetainFields(dateTimeZone10);
        int int12 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime2.add(readableDuration15);
        java.lang.String str17 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.weekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-04T04:10:00.001+100:10" + "'", str17, "1970-01-04T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test12595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12595");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 5, chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((-2022));
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime37 = dateTime31.plusMonths(1);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis(69322634);
        org.joda.time.DateTime dateTime42 = dateTime38.minusSeconds(69585547);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test12596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12596");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        boolean boolean9 = strList7.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        boolean boolean19 = strList17.equals((java.lang.Object) (-1));
        boolean boolean20 = strList7.retainAll((java.util.Collection<java.lang.String>) strList17);
        strList7.clear();
        boolean boolean23 = strList7.equals((java.lang.Object) 41);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        int int25 = localDateTime24.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withWeekyear((int) (short) 100);
        int int30 = localDateTime24.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.plusDays(69250171);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withMillisOfDay(8);
        boolean boolean36 = strList7.contains((java.lang.Object) 8);
        strList7.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 69628925 + "'", int25 == 69628925);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12597");
        java.util.Locale locale3 = new java.util.Locale("", "1969-12-04T04:10:00.001+100:10", "java.io.IOException: 00:00");
        org.junit.Assert.assertEquals(locale3.toString(), "_1969-12-04T04:10:00.001+100:10_java.io.IOException: 00:00");
    }

    @Test
    public void test12598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12598");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addCopy((long) 44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology13);
        java.lang.String str15 = dateTimeFormatter11.print((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime.Property property16 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime20 = property16.addCopy((long) 10);
        org.joda.time.LocalTime localTime22 = property16.addWrapFieldToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int24 = localTime22.get(dateTimeFieldType23);
        int int25 = localTime10.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = localTime10.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.monthOfYear();
        org.joda.time.DurationField durationField30 = chronology26.hours();
        org.joda.time.Chronology chronology31 = chronology26.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test12599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12599");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(69218047);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(69282741);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMonthOfYear(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69628982 + "'", int1 == 69628982);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test12600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12600");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.clear();
        java.util.Locale.Builder builder9 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguageTag("5777058235T182012+10010");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 5777058235T182012+10010 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12601");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        strSet1.clear();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean15 = strSet13.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendTimeZoneShortName(strMap21);
        boolean boolean23 = dateTimeZone19.equals((java.lang.Object) strMap21);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (byte) -1);
        long long28 = dateTimeZone19.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str29 = dateTimeZone19.getID();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone19);
        int int31 = localDate30.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property33 = localDate30.property(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType32.getField(chronology34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        int int37 = dateTimeField35.getMaximumShortTextLength(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.lang.String[] strArray48 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean51 = strSet49.isEmpty();
        boolean boolean52 = strSet38.removeAll((java.util.Collection<java.lang.String>) strSet49);
        java.lang.Object[] objArray53 = strSet49.toArray();
        boolean boolean54 = strSet13.retainAll((java.util.Collection<java.lang.String>) strSet49);
        boolean boolean56 = strSet13.add("2022-01-25T17:35:57.249");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = strSet1.addAll((java.util.Collection<java.lang.String>) strSet13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360599990L) + "'", long28 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test12602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12602");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 59, dateTimeZone34);
        boolean boolean36 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime35.withHourOfDay(69277568);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69277568 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12603");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1969L, 0);
        org.joda.time.DateTime dateTime19 = dateTime14.withYearOfEra(69206920);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime14.getZone();
        org.joda.time.Chronology chronology21 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime14.plusMinutes(69289203);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test12604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12604");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DurationField durationField26 = durationFieldType0.getField(chronology23);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendTimeZoneShortName(strMap33);
        boolean boolean35 = dateTimeZone31.equals((java.lang.Object) strMap33);
        boolean boolean37 = dateTimeZone31.isStandardOffset((long) (byte) -1);
        long long40 = dateTimeZone31.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str41 = dateTimeZone31.getID();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone31);
        int int43 = localDate42.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property45 = localDate42.property(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType44.getField(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) chronology46, chronology48);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.Chronology chronology57 = chronology50.withZone(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = localDate27.toDateTimeAtStartOfDay(dateTimeZone55);
        int int62 = dateTimeZone55.getStandardOffset((long) 69488468);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-360599990L) + "'", long40 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+100:10" + "'", str41, "+100:10");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 360600000 + "'", int62 == 360600000);
    }

    @Test
    public void test12605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12605");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap30);
        boolean boolean32 = dateTimeZone28.equals((java.lang.Object) strMap30);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter25.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = localDate22.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours(69205127);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime42 = dateTime39.plusMinutes(69212644);
        org.joda.time.DateTime dateTime44 = dateTime39.withMillis((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime39.plusMonths(69221560);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes(69262398);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property50 = dateTime48.secondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test12606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12606");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.weekyear();
        org.joda.time.LocalDate localDate19 = property17.setCopy((-5));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDate19.getFieldTypes();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property22.addToCopy(69246442);
        org.joda.time.LocalDate localDate25 = localDate19.withFields((org.joda.time.ReadablePartial) localDate24);
        int int26 = localDate24.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69248464 + "'", int26 == 69248464);
    }

    @Test
    public void test12607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12607");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean27 = strList25.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList33);
        boolean boolean37 = strList35.equals((java.lang.Object) (-1));
        boolean boolean38 = strList25.retainAll((java.util.Collection<java.lang.String>) strList35);
        boolean boolean39 = strSet16.retainAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean40 = strList10.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        boolean boolean43 = strSet16.add("clockhourOfHalfday");
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap49 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder48.appendTimeZoneShortName(strMap49);
        boolean boolean51 = dateTimeZone47.equals((java.lang.Object) strMap49);
        boolean boolean53 = dateTimeZone47.isStandardOffset((long) (byte) -1);
        long long56 = dateTimeZone47.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str57 = dateTimeZone47.getID();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone47);
        org.joda.time.LocalDate.Property property59 = localDate58.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight60 = localDate58.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        boolean boolean68 = dateTimeZone64.equals((java.lang.Object) strMap66);
        boolean boolean70 = dateTimeZone64.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter61.withZone(dateTimeZone64);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.DateTime dateTime73 = localDate58.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.DateTime dateTime75 = dateTime73.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime77 = dateTime73.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property78 = dateTime73.minuteOfHour();
        java.util.GregorianCalendar gregorianCalendar79 = dateTime73.toGregorianCalendar();
        int int80 = dateTime73.getMinuteOfDay();
        long long81 = dateTime73.getMillis();
        boolean boolean82 = strSet16.remove((java.lang.Object) dateTime73);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-360599990L) + "'", long56 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+100:10" + "'", str57, "+100:10");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(gregorianCalendar79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1160 + "'", int80 == 1160);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 54629171L + "'", long81 == 54629171L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test12608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12608");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withDurationAdded(readableDuration5, 1969);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minusDays(54202800);
        int int10 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusDays(31);
        int[] intArray13 = localDateTime0.getValues();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime0.minusMonths(69220671);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime0.withTime(69210315, 69294, 415, 69472872);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69210315 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 29 + "'", int10 == 29);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 25, 69629218]");
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test12609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12609");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder10.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.append(dateTimeFormatter12);
        java.lang.StringBuffer stringBuffer14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone16);
        mutableDateTime17.setTime((long) (short) -1);
        int int20 = mutableDateTime17.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendTimeZoneShortName(strMap26);
        boolean boolean28 = dateTimeZone24.equals((java.lang.Object) strMap26);
        boolean boolean30 = dateTimeZone24.isStandardOffset((long) (byte) -1);
        long long33 = dateTimeZone24.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str34 = dateTimeZone24.getID();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone24);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight37 = localDate35.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter38.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.DateTime dateTime50 = localDate35.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 59, dateTimeZone55);
        boolean boolean57 = dateTime52.isEqual((org.joda.time.ReadableInstant) dateTime56);
        int int58 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime60 = dateTime52.minusSeconds(69205874);
        org.joda.time.DateTime dateTime61 = dateTime52.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(stringBuffer14, (org.joda.time.ReadableInstant) dateTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-360599990L) + "'", long33 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:10" + "'", str34, "+100:10");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test12610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12610");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.minuteOfHour();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfDay();
        org.joda.time.Interval interval29 = property28.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = property28.setCopy(69305441);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69305441 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test12611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12611");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone11);
        mutableDateTime12.setTime((long) (short) -1);
        org.joda.time.Chronology chronology15 = mutableDateTime12.getChronology();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 69206325, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = dateTimeFormatter19.parseMutableDateTime("\ufffd\ufffd0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?AM?0\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test12612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12612");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int[] intArray18 = localDate14.getValues();
        org.joda.time.LocalDate.Property property19 = localDate14.weekyear();
        org.joda.time.LocalDate localDate21 = property19.addWrapFieldToCopy(69221560);
        int int22 = localDate21.size();
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 5]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test12613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12613");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DurationField durationField26 = durationFieldType0.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone27 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.weekyear();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test12614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12614");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology2, locale4, (java.lang.Integer) 54202800);
        java.util.Locale locale7 = dateTimeParserBucket6.getLocale();
        java.util.Locale locale8 = dateTimeParserBucket6.getLocale();
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 69221500);
        long long11 = dateTimeParserBucket6.computeMillis();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.seconds();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 41, chronology12);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-291396175L) + "'", long11 == (-291396175L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test12615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12615");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        mutableDateTime2.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.era();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        mutableDateTime13.setTime((long) (short) -1);
        org.joda.time.Chronology chronology16 = mutableDateTime13.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 69206325, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.secondOfDay();
        mutableDateTime2.setChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.monthOfYear();
        org.joda.time.DurationField durationField21 = dateTimeField20.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendTimeZoneShortName(strMap27);
        boolean boolean29 = dateTimeZone25.equals((java.lang.Object) strMap27);
        boolean boolean31 = dateTimeZone25.isStandardOffset((long) (byte) -1);
        long long34 = dateTimeZone25.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str35 = dateTimeZone25.getID();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone25);
        int int37 = localDate36.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property39 = localDate36.property(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType38.getField(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) chronology40, chronology42);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate47 = localDate43.withPeriodAdded(readablePeriod45, (int) '#');
        org.joda.time.LocalDate.Property property48 = localDate43.weekyear();
        int int49 = property48.getLeapAmount();
        org.joda.time.LocalDate localDate50 = property48.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate52 = localDate50.plusMonths(1336);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        int int55 = localDateTime54.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = localDateTime54.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.plusSeconds(360600000);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime54.plusDays(69213082);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minus(readableDuration63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusYears((int) (byte) -1);
        int[] intArray67 = localDateTime66.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField20.addWrapPartial((org.joda.time.ReadablePartial) localDate50, (-412244), intArray67, 69290067);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -412244");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-360599990L) + "'", long34 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+100:10" + "'", str35, "+100:10");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 69629338 + "'", int55 == 69629338);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[191522, 2, 19, 69629338]");
    }

    @Test
    public void test12616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12616");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction();
        boolean boolean1 = dateTimeFormatter0.isParser();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = dateTimeFormatter0.parseLocalDateTime("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-25T??:??:??.000\" is malformed at \"22-02-25T??:??:??.000\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNull(chronology2);
    }

    @Test
    public void test12617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12617");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendHourOfDay(69215043);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendSecondOfDay(33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendDayOfYear(69525003);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
    }

    @Test
    public void test12618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12618");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime29.minuteOfHour();
        java.util.GregorianCalendar gregorianCalendar35 = dateTime29.toGregorianCalendar();
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone38);
        mutableDateTime39.setTime((long) (short) -1);
        mutableDateTime39.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str45 = mutableDateTime39.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.monthOfYear();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime48.minuteOfDay();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.dayOfYear();
        org.joda.time.DurationField durationField52 = property51.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime54 = property51.set("70");
        int int55 = mutableDateTime54.getYearOfEra();
        boolean boolean56 = mutableDateTime39.equals((java.lang.Object) int55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap61 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder60.appendTimeZoneShortName(strMap61);
        boolean boolean63 = dateTimeZone59.equals((java.lang.Object) strMap61);
        boolean boolean65 = dateTimeZone59.isStandardOffset((long) (byte) -1);
        java.lang.String str67 = dateTimeZone59.getShortName((long) 69203825);
        mutableDateTime39.setZoneRetainFields(dateTimeZone59);
        org.joda.time.Interval interval69 = localDate36.toInterval(dateTimeZone59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate71 = localDate36.withDayOfWeek(69296708);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69296708 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "00" + "'", str45, "00");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+100:10" + "'", str67, "+100:10");
        org.junit.Assert.assertNotNull(interval69);
    }

    @Test
    public void test12619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12619");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-01-25T17:33:32.644");
        org.joda.time.DateTime.Property property2 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime3 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(69255694);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime3.withDayOfWeek(69514485);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69514485 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test12620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12620");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(69243332);
        int int11 = localTime10.size();
        org.joda.time.LocalTime localTime13 = localTime10.plusHours(69406912);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test12621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12621");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        int int4 = mutableDateTime2.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfMonth();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.secondOfMinute();
        mutableDateTime2.setTime((long) 'u');
        mutableDateTime2.addSeconds(69338778);
        java.util.GregorianCalendar gregorianCalendar11 = mutableDateTime2.toGregorianCalendar();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
    }

    @Test
    public void test12622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12622");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime11 = localTime8.withMillisOfDay(69280970);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test12623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12623");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.minus(readablePeriod12);
        int int14 = localTime11.getMillisOfDay();
        org.joda.time.LocalTime localTime16 = localTime11.plusHours((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localTime11.getFields();
        org.joda.time.LocalTime localTime19 = localTime11.plusHours(69376104);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType21 = localTime19.getFieldType(69440220);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69440220");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10010 + "'", int14 == 10010);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test12624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12624");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(65934, 69344227, 69249588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65934 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12625");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.property(dateTimeFieldType12);
        java.lang.String str15 = dateTimeFieldType12.toString();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        boolean boolean18 = localDateTime16.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDayOfMonth((int) (byte) 1);
        int int21 = localDateTime16.getEra();
        org.joda.time.Chronology chronology22 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology22);
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology22);
        org.joda.time.DurationField durationField26 = chronology22.centuries();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfYear" + "'", str15, "dayOfYear");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test12626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12626");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime9 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime10 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test12627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12627");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime7.add(readablePeriod23, 69316418);
        java.lang.String str26 = mutableDateTime7.toString();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime7.add(readableDuration27);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-04T04:10:00.001+100:10" + "'", str26, "1970-01-04T04:10:00.001+100:10");
    }

    @Test
    public void test12628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12628");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addCopy((long) 44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology13);
        java.lang.String str15 = dateTimeFormatter11.print((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime.Property property16 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime20 = property16.addCopy((long) 10);
        org.joda.time.LocalTime localTime22 = property16.addWrapFieldToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int24 = localTime22.get(dateTimeFieldType23);
        int int25 = localTime10.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = localTime10.getChronology();
        org.joda.time.LocalTime localTime28 = localTime10.minusMillis(69220671);
        org.joda.time.LocalTime.Property property29 = localTime28.secondOfMinute();
        org.joda.time.LocalTime localTime30 = property29.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test12629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12629");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight18 = localDate16.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter19.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTime dateTime31 = localDate16.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property34 = dateTime31.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime37 = dateTime31.withDurationAdded(readableDuration35, 69213992);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) '4', dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime37.withZoneRetainFields(dateTimeZone40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter1.withZone(dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.parse("2022-02-21T15:05:08.846Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T15:05:08.846Z\" is malformed at \"-02-21T15:05:08.846Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test12630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12630");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 69207900);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        mutableDateTime4.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfCentury();
        mutableDateTime9.addDays((int) (short) -1);
        int int13 = mutableDateTime9.getYear();
        boolean boolean14 = mutableDateTime4.isEqual((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.monthOfYear();
        int int19 = mutableDateTime17.getWeekOfWeekyear();
        mutableDateTime17.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean23 = mutableDateTime17.isSupported(dateTimeFieldType22);
        boolean boolean24 = mutableDateTime9.isSupported(dateTimeFieldType22);
        int int25 = mutableDateTime9.getEra();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime9.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime9.getZone();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        int int30 = dateTimeZone27.getOffset((long) 57);
        org.joda.time.DateTime dateTime31 = localTime1.toDateTimeToday(dateTimeZone27);
        int int33 = dateTimeZone27.getOffsetFromLocal((long) 69342999);
        java.lang.String str35 = dateTimeZone27.getNameKey((long) 69551546);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 360600000 + "'", int30 == 360600000);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 360600000 + "'", int33 == 360600000);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test12631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12631");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        long long7 = dateTimeParserBucket5.computeMillis();
        long long8 = dateTimeParserBucket5.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        long long22 = dateTimeZone13.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str23 = dateTimeZone13.getID();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone13);
        int int25 = localDate24.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property27 = localDate24.property(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType26.getField(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) chronology28, chronology30);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.minutes();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap40 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendTimeZoneShortName(strMap40);
        boolean boolean42 = dateTimeZone38.equals((java.lang.Object) strMap40);
        boolean boolean44 = dateTimeZone38.isStandardOffset((long) (byte) -1);
        long long47 = dateTimeZone38.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str48 = dateTimeZone38.getID();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone38);
        int int50 = localDate49.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property52 = localDate49.property(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType51.getField(chronology53);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        int int56 = dateTimeField54.getMaximumShortTextLength(locale55);
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        int int58 = dateTimeField54.getMaximumTextLength(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology32, locale57, (java.lang.Integer) 2022, 0);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        boolean boolean68 = dateTimeZone64.equals((java.lang.Object) strMap66);
        dateTimeParserBucket61.setZone(dateTimeZone64);
        dateTimeParserBucket5.setZone(dateTimeZone64);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 6);
        java.lang.Object obj73 = dateTimeParserBucket5.saveState();
        java.lang.Object obj74 = dateTimeParserBucket5.saveState();
        int int75 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-291396175L) + "'", long7 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-291396175L) + "'", long8 == (-291396175L));
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-360599990L) + "'", long22 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+100:10" + "'", str23, "+100:10");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-360599990L) + "'", long47 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+100:10" + "'", str48, "+100:10");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
    }

    @Test
    public void test12632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12632");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        java.lang.String str12 = timeZone11.getID();
        int int14 = timeZone11.getOffset(3L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter15.withZone(dateTimeZone18);
        java.util.TimeZone timeZone26 = dateTimeZone18.toTimeZone();
        java.lang.String str27 = timeZone26.getID();
        boolean boolean28 = timeZone11.hasSameRules(timeZone26);
        java.lang.String str29 = timeZone11.getID();
        timeZone11.setID("5777058235T181532+10010");
        java.lang.Object obj32 = timeZone11.clone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:10" + "'", str12, "+100:10");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 360600000 + "'", int14 == 360600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:10" + "'", str27, "+100:10");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "java.util.SimpleTimeZone[id=5777058235T181532+10010,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "java.util.SimpleTimeZone[id=5777058235T181532+10010,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "java.util.SimpleTimeZone[id=5777058235T181532+10010,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test12633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12633");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone4.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter15.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long28 = dateTimeZone4.getMillisKeepLocal(dateTimeZone18, (long) 10);
        boolean boolean29 = dateTime1.equals((java.lang.Object) dateTimeZone18);
        java.lang.String str30 = dateTime1.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone34.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap50 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder49.appendTimeZoneShortName(strMap50);
        boolean boolean52 = dateTimeZone48.equals((java.lang.Object) strMap50);
        boolean boolean54 = dateTimeZone48.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter45.withZone(dateTimeZone48);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        long long58 = dateTimeZone34.getMillisKeepLocal(dateTimeZone48, (long) 10);
        long long61 = dateTimeZone34.convertLocalToUTC((long) 69222959, true);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) 69208090, dateTimeZone34);
        org.joda.time.DateTime dateTime64 = dateTime1.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime66 = dateTime64.minusHours(69207465);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599999L) + "'", long14 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-05T04:10:00.000+100:10" + "'", str30, "1970-01-05T04:10:00.000+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599999L) + "'", long44 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-291377041L) + "'", long61 == (-291377041L));
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test12634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12634");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay(228720305);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 228720305 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69629682 + "'", int1 == 69629682);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test12635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12635");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        java.util.TimeZone timeZone30 = dateTimeZone20.toTimeZone();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("-2000-02-25T19:13:31.786");
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        int int35 = timeZone34.getRawOffset();
        boolean boolean36 = timeZone32.hasSameRules(timeZone34);
        int int38 = timeZone34.getOffset((long) 69375197);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = timeZone34.getDisplayName(locale39);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+19:13");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 69219412 + "'", int35 == 69219412);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 69219412 + "'", int38 == 69219412);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GMT+19:13" + "'", str41, "GMT+19:13");
    }

    @Test
    public void test12636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12636");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        int int18 = localDate14.size();
        org.joda.time.DateMidnight dateMidnight19 = localDate14.toDateMidnight();
        java.util.Date date20 = localDate14.toDate();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date20);
        int int22 = localDate21.getMonthOfYear();
        int int23 = localDate21.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Mon Jan 05 00:00:00 GMT+19:13 1970");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
    }

    @Test
    public void test12637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12637");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getYearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.minusDays(69299319);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(69364065);
        int int6 = localDate5.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 18 + "'", int6 == 18);
    }

    @Test
    public void test12638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12638");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.add(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap16);
        boolean boolean18 = dateTimeZone14.equals((java.lang.Object) strMap16);
        boolean boolean20 = dateTimeZone14.isStandardOffset((long) (byte) -1);
        long long23 = dateTimeZone14.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str24 = dateTimeZone14.getID();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone14);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight27 = localDate25.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendTimeZoneShortName(strMap33);
        boolean boolean35 = dateTimeZone31.equals((java.lang.Object) strMap33);
        boolean boolean37 = dateTimeZone31.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter28.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = localDate25.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withDurationAdded(readableDuration41, (int) (byte) 10);
        int int44 = dateTime40.getDayOfWeek();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 5, chronology46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.plus(readableDuration48);
        org.joda.time.DateTime dateTime51 = dateTime47.minusHours((-2022));
        org.joda.time.DateTime.Property property52 = dateTime51.centuryOfEra();
        org.joda.time.DateTime dateTime53 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate54 = dateTime53.toLocalDate();
        org.joda.time.Chronology chronology55 = dateTime53.getChronology();
        org.joda.time.DateTime.Property property56 = dateTime53.millisOfSecond();
        boolean boolean57 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property58 = dateTime53.dayOfWeek();
        mutableDateTime10.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime10.add(readableDuration60, 69344360);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360599990L) + "'", long23 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:10" + "'", str24, "+100:10");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test12639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12639");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        long long38 = dateTimeZone29.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str39 = dateTimeZone29.getID();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone29);
        int int41 = localDate40.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property43 = localDate40.property(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType42.getField(chronology44);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        int int47 = dateTimeField45.getMaximumShortTextLength(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        int int49 = dateTimeField45.getMaximumTextLength(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology23, locale48, (java.lang.Integer) 2022, 0);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap57 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder56.appendTimeZoneShortName(strMap57);
        boolean boolean59 = dateTimeZone55.equals((java.lang.Object) strMap57);
        dateTimeParserBucket52.setZone(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        mutableDateTime61.add(1645456104005L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-360599990L) + "'", long38 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:10" + "'", str39, "+100:10");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test12640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12640");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.append(dateTimeFormatter11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendWeekyear((int) (short) 10, 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder16.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder16.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatterBuilder16.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder15.appendOptional(dateTimeParser21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder15.appendYearOfCentury(0, 69210934);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder15.appendMinuteOfDay((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList34);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long50 = dateTimeZone41.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str51 = dateTimeZone41.getID();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone41);
        int int53 = localDate52.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property55 = localDate52.property(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap61 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder60.appendTimeZoneShortName(strMap61);
        boolean boolean63 = dateTimeZone59.equals((java.lang.Object) strMap61);
        boolean boolean65 = dateTimeZone59.isStandardOffset((long) (byte) -1);
        long long68 = dateTimeZone59.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str69 = dateTimeZone59.getID();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone59);
        int int71 = localDate70.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property73 = localDate70.property(dateTimeFieldType72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType72.getField(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((java.lang.Object) chronology74, chronology76);
        org.joda.time.Chronology chronology78 = localDate77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.minutes();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType54.getField(chronology78);
        java.util.Locale locale81 = java.util.Locale.JAPAN;
        java.lang.String str82 = locale81.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology78, locale81, (java.lang.Integer) 0, 54202800);
        boolean boolean86 = strList34.remove((java.lang.Object) chronology78);
        boolean boolean87 = dateTimeFieldType28.isSupported(chronology78);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder88 = dateTimeFormatterBuilder27.appendText(dateTimeFieldType28);
        boolean boolean89 = dateTimeFormatterBuilder88.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder90 = dateTimeFormatterBuilder88.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder93 = dateTimeFormatterBuilder90.appendFractionOfDay(69287068, 65685);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder96 = dateTimeFormatterBuilder90.appendFractionOfHour(13244, 1972);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-360599990L) + "'", long50 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+100:10" + "'", str51, "+100:10");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-360599990L) + "'", long68 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+100:10" + "'", str69, "+100:10");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder90);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder93);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder96);
    }

    @Test
    public void test12641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12641");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property6.addToCopy(69269079);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(69274921);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusHours(0);
        int int14 = localDateTime13.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69629815 + "'", int1 == 69629815);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 28769815 + "'", int14 == 28769815);
    }

    @Test
    public void test12642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12642");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        boolean boolean5 = mutableDateTime2.isEqualNow();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.weekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test12643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12643");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.minuteOfHour();
        long long29 = dateTimeField27.roundFloor(31574220000L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 31574220000L + "'", long29 == 31574220000L);
    }

    @Test
    public void test12644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12644");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime9 = property3.add((long) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone11);
        mutableDateTime12.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addDays((int) (short) -1);
        int int21 = mutableDateTime17.getYear();
        boolean boolean22 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.monthOfYear();
        long long27 = mutableDateTime25.getMillis();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime25.add(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap35 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder34.appendTimeZoneShortName(strMap35);
        boolean boolean37 = dateTimeZone33.equals((java.lang.Object) strMap35);
        boolean boolean39 = dateTimeZone33.isStandardOffset((long) (byte) -1);
        long long42 = dateTimeZone33.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str43 = dateTimeZone33.getID();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime25.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int47 = mutableDateTime25.get(dateTimeFieldType46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType46.getField(chronology48);
        boolean boolean50 = mutableDateTime17.isSupported(dateTimeFieldType46);
        long long51 = mutableDateTime17.getMillis();
        int int52 = mutableDateTime17.getSecondOfMinute();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) mutableDateTime17);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-360599990L) + "'", long42 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+100:10" + "'", str43, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-86399999L) + "'", long51 == (-86399999L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test12645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12645");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate14.year();
        org.joda.time.LocalDate localDate19 = property18.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.plus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate19.plusWeeks(69203825);
        org.joda.time.LocalDate localDate25 = localDate19.plusDays(69255088);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder26.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendDayOfWeekShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder29.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder29.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder32.appendSignedDecimal(dateTimeFieldType33, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder36.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendLiteral('4');
        boolean boolean42 = dateTimeFormatterBuilder41.canBuildParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder41.appendShortText(dateTimeFieldType43);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder26.appendDecimal(dateTimeFieldType43, 69210315, 69203038);
        org.joda.time.LocalDate.Property property48 = localDate19.property(dateTimeFieldType43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = property48.setCopy("\ufffd\ufffd");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test12646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12646");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(59);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusHours(69218807);
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test12647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12647");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.append(dateTimeFormatter11);
        boolean boolean13 = dateTimeFormatterBuilder10.canBuildPrinter();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList19);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        long long35 = dateTimeZone26.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str36 = dateTimeZone26.getID();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone26);
        int int38 = localDate37.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property40 = localDate37.property(dateTimeFieldType39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap46 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendTimeZoneShortName(strMap46);
        boolean boolean48 = dateTimeZone44.equals((java.lang.Object) strMap46);
        boolean boolean50 = dateTimeZone44.isStandardOffset((long) (byte) -1);
        long long53 = dateTimeZone44.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str54 = dateTimeZone44.getID();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone44);
        int int56 = localDate55.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property58 = localDate55.property(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType57.getField(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) chronology59, chronology61);
        org.joda.time.Chronology chronology63 = localDate62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.minutes();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType39.getField(chronology63);
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.lang.String str67 = locale66.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology63, locale66, (java.lang.Integer) 0, 54202800);
        boolean boolean71 = strList19.remove((java.lang.Object) chronology63);
        org.joda.time.DateTimeField dateTimeField72 = chronology63.clockhourOfDay();
        org.joda.time.DurationField durationField73 = chronology63.months();
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.now(chronology63);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder79 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap80 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder81 = dateTimeFormatterBuilder79.appendTimeZoneShortName(strMap80);
        boolean boolean82 = dateTimeZone78.equals((java.lang.Object) strMap80);
        boolean boolean84 = dateTimeZone78.isStandardOffset((long) (byte) -1);
        long long87 = dateTimeZone78.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str88 = dateTimeZone78.getID();
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone78);
        int int90 = localDate89.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property92 = localDate89.property(dateTimeFieldType91);
        org.joda.time.MutableDateTime.Property property93 = mutableDateTime74.property(dateTimeFieldType91);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder94 = dateTimeFormatterBuilder10.appendText(dateTimeFieldType91);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder96 = dateTimeFormatterBuilder94.appendClockhourOfDay(0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-360599990L) + "'", long35 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+100:10" + "'", str36, "+100:10");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-360599990L) + "'", long53 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+100:10" + "'", str54, "+100:10");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-360599990L) + "'", long87 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+100:10" + "'", str88, "+100:10");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1970 + "'", int90 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder94);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder96);
    }

    @Test
    public void test12648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12648");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime33 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime29.minus(readablePeriod34);
        org.joda.time.LocalDate localDate36 = dateTime29.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test12649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12649");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(69208701);
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMillis((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withFieldAdded(durationFieldType23, 69247959);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder28.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder28.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendMillisOfSecond(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder34.appendSignedDecimal(dateTimeFieldType35, 69272918, 0);
        int int40 = localDateTime27.get(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime27.plusMillis(69370698);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 191509 + "'", int17 == 191509);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 29 + "'", int22 == 29);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test12650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12650");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.centuryOfEra();
        long long22 = dateTimeField19.addWrapField((long) 69227954, 69415812);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField19.add((long) 70, (long) 69597664);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 6959766400");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 6916154139630827954L + "'", long22 == 6916154139630827954L);
    }

    @Test
    public void test12651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12651");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths(2);
        int int30 = localDate27.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone32);
        mutableDateTime33.setTime((long) (short) -1);
        mutableDateTime33.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str39 = mutableDateTime33.toString(dateTimeFormatter38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.monthOfYear();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime42.minuteOfDay();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.dayOfYear();
        org.joda.time.DurationField durationField46 = property45.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime48 = property45.set("70");
        int int49 = mutableDateTime48.getYearOfEra();
        boolean boolean50 = mutableDateTime33.equals((java.lang.Object) int49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap55 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder54.appendTimeZoneShortName(strMap55);
        boolean boolean57 = dateTimeZone53.equals((java.lang.Object) strMap55);
        boolean boolean59 = dateTimeZone53.isStandardOffset((long) (byte) -1);
        java.lang.String str61 = dateTimeZone53.getShortName((long) 69203825);
        mutableDateTime33.setZoneRetainFields(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight63 = localDate27.toDateMidnight(dateTimeZone53);
        org.joda.time.LocalDate localDate65 = localDate27.minusMonths(0);
        int int66 = localDate27.getYear();
        int int67 = localDate27.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 56 + "'", int30 == 56);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "00" + "'", str39, "00");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+100:10" + "'", str61, "+100:10");
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-292275054) + "'", int66 == (-292275054));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-292275054) + "'", int67 == (-292275054));
    }

    @Test
    public void test12652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12652");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology23 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendTimeZoneShortName(strMap29);
        boolean boolean31 = dateTimeZone27.equals((java.lang.Object) strMap29);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        long long36 = dateTimeZone27.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str37 = dateTimeZone27.getID();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone27);
        int int39 = localDate38.getYearOfEra();
        org.joda.time.LocalDate.Property property40 = localDate38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        mutableDateTime7.setRounding(dateTimeField41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime7.add(readableDuration43, 69301812);
        mutableDateTime7.addMillis(69592842);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-360599990L) + "'", long36 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:10" + "'", str37, "+100:10");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test12653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12653");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        long long21 = dateTimeField19.roundCeiling((long) (short) 0);
        long long24 = dateTimeField19.addWrapField(725846400000L, 69243252);
        long long27 = dateTimeField19.addWrapField((long) 69385903, 69431932);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = dateTimeField19.getDifferenceAsLong((long) 69563726, (long) 116);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036494175807L + "'", long21 == 9223372036494175807L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 725846400000L + "'", long24 == 725846400000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 69385903L + "'", long27 == 69385903L);
    }

    @Test
    public void test12654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12654");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        boolean boolean17 = strList15.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean27 = strList25.equals((java.lang.Object) (-1));
        boolean boolean28 = strList15.retainAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean29 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15, filteringMode30);
        boolean boolean33 = strList15.add("70");
        java.util.stream.Stream<java.lang.String> strStream34 = strList15.stream();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone36);
        mutableDateTime37.setTime((long) (short) -1);
        int int40 = mutableDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean42 = mutableDateTime37.isSupported(dateTimeFieldType41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime37.dayOfMonth();
        boolean boolean44 = strList15.equals((java.lang.Object) property43);
        org.joda.time.MutableDateTime mutableDateTime46 = property43.addWrapField(69238499);
        org.joda.time.MutableDateTime mutableDateTime48 = property43.add((long) 69281786);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = org.joda.time.format.ISODateTimeFormat.hour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfCentury();
        mutableDateTime53.setMillisOfDay((int) '#');
        int int59 = dateTimeFormatter50.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime53, "1", (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime53.toMutableDateTime();
        long long61 = mutableDateTime53.getMillis();
        java.lang.String str62 = dateTimeFormatter49.print((org.joda.time.ReadableInstant) mutableDateTime53);
        java.lang.String str63 = mutableDateTime53.toString();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime53.millisOfSecond();
        mutableDateTime48.setTime((org.joda.time.ReadableInstant) mutableDateTime53);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime48.setMonthOfYear(21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-2) + "'", int59 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-62135352599965L) + "'", long61 == (-62135352599965L));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "00" + "'", str62, "00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0001-01-08T00:00:00.035+100:10" + "'", str63, "0001-01-08T00:00:00.035+100:10");
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test12655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12655");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        int int5 = dateTime2.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
    }

    @Test
    public void test12656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12656");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 69252881);
    }

    @Test
    public void test12657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12657");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, 37);
        int int4 = dateTimeZone2.getOffsetFromLocal((long) 69218643);
        long long7 = dateTimeZone2.adjustOffset((long) 69206587, true);
        java.lang.String str8 = dateTimeZone2.toString();
        long long10 = dateTimeZone2.nextTransition(1645455844232L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        mutableDateTime13.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfCentury();
        mutableDateTime18.addDays((int) (short) -1);
        int int22 = mutableDateTime18.getYear();
        boolean boolean23 = mutableDateTime13.isEqual((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.monthOfYear();
        int int28 = mutableDateTime26.getWeekOfWeekyear();
        mutableDateTime26.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean32 = mutableDateTime26.isSupported(dateTimeFieldType31);
        boolean boolean33 = mutableDateTime18.isSupported(dateTimeFieldType31);
        int int34 = mutableDateTime18.getEra();
        int int35 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 38220000 + "'", int4 == 38220000);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 69206587L + "'", long7 == 69206587L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:37" + "'", str8, "+10:37");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645455844232L + "'", long10 == 1645455844232L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 38220000 + "'", int35 == 38220000);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test12658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12658");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfYear();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.set("70");
        int int18 = mutableDateTime17.getYearOfEra();
        boolean boolean19 = mutableDateTime2.equals((java.lang.Object) int18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        java.lang.String str30 = dateTimeZone22.getShortName((long) 69203825);
        mutableDateTime2.setZoneRetainFields(dateTimeZone22);
        int int32 = mutableDateTime2.getEra();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList38);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap47 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder46.appendTimeZoneShortName(strMap47);
        boolean boolean49 = dateTimeZone45.equals((java.lang.Object) strMap47);
        boolean boolean51 = dateTimeZone45.isStandardOffset((long) (byte) -1);
        long long54 = dateTimeZone45.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str55 = dateTimeZone45.getID();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone45);
        int int57 = localDate56.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property59 = localDate56.property(dateTimeFieldType58);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap65 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder64.appendTimeZoneShortName(strMap65);
        boolean boolean67 = dateTimeZone63.equals((java.lang.Object) strMap65);
        boolean boolean69 = dateTimeZone63.isStandardOffset((long) (byte) -1);
        long long72 = dateTimeZone63.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str73 = dateTimeZone63.getID();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone63);
        int int75 = localDate74.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property77 = localDate74.property(dateTimeFieldType76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType76.getField(chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((java.lang.Object) chronology78, chronology80);
        org.joda.time.Chronology chronology82 = localDate81.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.minutes();
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType58.getField(chronology82);
        java.util.Locale locale85 = java.util.Locale.JAPAN;
        java.lang.String str86 = locale85.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology82, locale85, (java.lang.Integer) 0, 54202800);
        boolean boolean90 = strList38.remove((java.lang.Object) chronology82);
        org.joda.time.DateTime dateTime91 = mutableDateTime2.toDateTime(chronology82);
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime2.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:10" + "'", str30, "+100:10");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-360599990L) + "'", long54 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+100:10" + "'", str55, "+100:10");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-360599990L) + "'", long72 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+100:10" + "'", str73, "+100:10");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test12659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12659");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDate.Property property27 = localDate22.weekyear();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        boolean boolean31 = durationFieldType0.isSupported(chronology28);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology28.add(readablePeriod32, (long) 28, 69231692);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = chronology28.getDateTimeMillis(41857687872000059L, 69356660, 69518390, 69473644, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69356660 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 28L + "'", long35 == 28L);
    }

    @Test
    public void test12660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12660");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.property(dateTimeFieldType12);
        java.util.Date date15 = localDateTime0.toDate();
        org.joda.time.LocalDateTime.Property property16 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime0.minusYears(69223981);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone20);
        mutableDateTime21.setTime((long) (short) -1);
        mutableDateTime21.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str27 = mutableDateTime21.toString(dateTimeFormatter26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.monthOfYear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime30.minuteOfDay();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.dayOfYear();
        org.joda.time.DurationField durationField34 = property33.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime36 = property33.set("70");
        int int37 = mutableDateTime36.getYearOfEra();
        boolean boolean38 = mutableDateTime21.equals((java.lang.Object) int37);
        java.lang.Object obj39 = mutableDateTime21.clone();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean42 = mutableDateTime21.isSupported(dateTimeFieldType41);
        boolean boolean43 = localDateTime18.isSupported(dateTimeFieldType41);
        int int44 = localDateTime18.size();
        org.joda.time.LocalDateTime.Property property45 = localDateTime18.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.ISODateTimeFormat.basicTTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.monthOfYear();
        mutableDateTime52.setMillis((org.joda.time.ReadableInstant) mutableDateTime56);
        mutableDateTime56.addMinutes(72);
        int int63 = dateTimeFormatter46.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime56, "", 69220671);
        org.joda.time.Chronology chronology64 = dateTimeFormatter46.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder70 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap71 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder70.appendTimeZoneShortName(strMap71);
        boolean boolean73 = dateTimeZone69.equals((java.lang.Object) strMap71);
        boolean boolean75 = dateTimeZone69.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter66.withZone(dateTimeZone69);
        java.util.TimeZone timeZone77 = dateTimeZone69.toTimeZone();
        java.lang.String str78 = dateTimeZone69.getID();
        java.lang.String str80 = dateTimeZone69.getNameKey((-360534359L));
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) 69229151, dateTimeZone69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter46.withZone(dateTimeZone69);
        boolean boolean83 = property45.equals((java.lang.Object) dateTimeZone69);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 25 19:20:30 GMT+19:13 2022");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "00" + "'", str27, "00");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-69220672) + "'", int63 == (-69220672));
        org.junit.Assert.assertNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+100:10" + "'", str78, "+100:10");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test12661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12661");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(69218047);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(69282741);
        java.util.Date date10 = localDateTime3.toDate();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69630363 + "'", int1 == 69630363);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 25 19:20:30 GMT+19:13 2022");
    }

    @Test
    public void test12662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12662");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder6.appendFractionOfMinute(69210179, 69218943);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder9.appendFixedDecimal(dateTimeFieldType10, 69209230);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder12.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendClockhourOfHalfday(69500669);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
    }

    @Test
    public void test12663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12663");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear(69210934);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(69218807);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusMinutes(65709);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test12664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12664");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.getEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        int int8 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
    }

    @Test
    public void test12665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12665");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendDayOfMonth(69203038);
        boolean boolean15 = dateTimeFormatterBuilder12.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder12.appendDayOfMonth(69220682);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder18.appendDayOfWeekShortText();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneName(strMap20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
    }

    @Test
    public void test12666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12666");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(59);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusHours(69218807);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withWeekyear(69249588);
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.monthOfYear();
        int int10 = property9.get();
        org.joda.time.LocalDateTime localDateTime12 = property9.addToCopy((long) (-69204950));
        org.joda.time.LocalDateTime localDateTime13 = property9.roundFloorCopy();
        java.util.Locale locale18 = new java.util.Locale("", "-2000-02-25T19:13:50.545", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = property9.setCopy("2022-02-25T19:18:08.628", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-25T19:18:08.628\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
    }

    @Test
    public void test12667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12667");
        java.io.IOException iOException1 = new java.io.IOException("java.io.IOException: java.io.IOException: 1");
    }

    @Test
    public void test12668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12668");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(69448233, 69455683, 17, 69356523, 69388140, 69353254);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69356523 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12669");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setUnicodeLocaleKeyword("69245210-02-25", "1970-01-05T19:17:49.914+100:10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 69245210-02-25 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test12670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12670");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(365);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test12671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12671");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeZone dateTimeZone49 = chronology41.getZone();
        org.joda.time.DurationField durationField50 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology41.hourOfHalfday();
        int int54 = dateTimeField52.getMinimumValue((long) 69260705);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = dateTimeField52.set((long) 64, 69229172);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69229172 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test12672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12672");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology9, locale11, (java.lang.Integer) 54202800);
        java.util.Locale locale14 = dateTimeParserBucket13.getLocale();
        java.util.Locale locale15 = dateTimeParserBucket13.getLocale();
        dateTimeParserBucket13.setPivotYear((java.lang.Integer) 69221500);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        java.lang.String str28 = dateTimeZone20.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        dateTimeParserBucket13.setZone(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.withDurationAdded(readableDuration32, 69208701);
        org.joda.time.DateTime.Property property35 = dateTime31.secondOfDay();
        org.joda.time.DateTime dateTime36 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime36.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+100:10" + "'", str28, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test12673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12673");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("GMT+:0:10");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId2);
        timeZone5.setRawOffset((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeZone5.getOffset(69367812, 69588096, 69240504, 65685, 69478273, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Heure de Greenwich");
    }

    @Test
    public void test12674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12674");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime localTime15 = localTime11.plusMinutes((int) (short) -1);
        org.joda.time.LocalTime.Property property16 = localTime15.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        mutableDateTime19.setMillisOfDay((int) '#');
        int int23 = mutableDateTime19.getYearOfCentury();
        boolean boolean24 = localTime15.equals((java.lang.Object) int23);
        org.joda.time.LocalTime.Property property25 = localTime15.secondOfMinute();
        org.joda.time.LocalTime localTime26 = property25.withMaximumValue();
        org.joda.time.LocalTime localTime28 = localTime26.plusMinutes(69235001);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime28.minus(readablePeriod29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = localTime28.withSecondOfMinute(69569583);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69569583 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT005000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT005000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 70 + "'", int23 == 70);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test12675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12675");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        java.lang.String str4 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths((int) (short) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-16T05:00:00.000" + "'", str4, "1970-01-16T05:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test12676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12676");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localTime2.getFieldTypes();
        int int4 = localTime2.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder5.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder9.appendTimeZoneName();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder10.appendSignedDecimal(dateTimeFieldType11, 44, 444);
        org.joda.time.LocalTime.Property property15 = localTime2.property(dateTimeFieldType11);
        org.joda.time.LocalTime localTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime19 = property17.addCopy((long) 69291156);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test12677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12677");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) 69206920);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = property6.set("00");
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime10.getZone();
        org.joda.time.DateTime dateTime12 = localTime2.toDateTimeToday(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) -1, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.addWrapField(69282562);
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundHalfFloor();
        boolean boolean19 = property14.equals((java.lang.Object) 65878);
        java.lang.String str20 = property14.getAsShortText();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "561" + "'", str20, "561");
    }

    @Test
    public void test12678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12678");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.basicTime();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder7.append(dateTimeFormatter11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder13.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder16.appendSignedDecimal(dateTimeFieldType17, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder20.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter24.getPrinter();
        int int26 = dateTimePrinter25.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder20.append(dateTimePrinter25);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder7.append(dateTimePrinter25);
        java.lang.StringBuffer stringBuffer29 = null;
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        int int31 = localDateTime30.getMillisOfDay();
        int int32 = localDateTime30.getYear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMillis(69240429);
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = new java.util.Locale("hi!");
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale43 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology41, locale43, (java.lang.Integer) 54202800);
        java.lang.String str46 = locale37.getDisplayCountry(locale43);
        java.lang.String str49 = nameProvider35.getShortName(locale43, "-2000-02-25T19:13:31.786", "fra");
        java.lang.String str50 = locale43.getLanguage();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap56 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder55.appendTimeZoneShortName(strMap56);
        boolean boolean58 = dateTimeZone54.equals((java.lang.Object) strMap56);
        boolean boolean60 = dateTimeZone54.isStandardOffset((long) (byte) -1);
        long long63 = dateTimeZone54.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str64 = dateTimeZone54.getID();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone54);
        int int66 = localDate65.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property68 = localDate65.property(dateTimeFieldType67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType67.getField(chronology69);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        int int72 = dateTimeField70.getMaximumShortTextLength(locale71);
        boolean boolean73 = locale71.hasExtensions();
        java.lang.String str75 = locale71.getExtension('a');
        java.lang.String str76 = locale43.getDisplayScript(locale71);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter25.printTo(stringBuffer29, (org.joda.time.ReadablePartial) localDateTime34, locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimePrinter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 39 + "'", int26 == 39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 72630641 + "'", int31 == 72630641);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(nameProvider35);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-360599990L) + "'", long63 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+100:10" + "'", str64, "+100:10");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test12679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12679");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean15 = strSet13.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean25 = strList23.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList31);
        boolean boolean35 = strList33.equals((java.lang.Object) (-1));
        boolean boolean36 = strList23.retainAll((java.util.Collection<java.lang.String>) strList33);
        boolean boolean37 = strSet13.addAll((java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList23);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList44);
        java.util.stream.Stream<java.lang.String> strStream47 = strList46.stream();
        java.util.Locale locale49 = new java.util.Locale("hi!");
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = localTime55.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = strSet52.toArray(dateTimeFieldTypeArray56);
        boolean boolean58 = strList46.containsAll((java.util.Collection<java.lang.String>) strSet52);
        boolean boolean59 = strList23.containsAll((java.util.Collection<java.lang.String>) strSet52);
        int int60 = strSet52.size();
        java.lang.Object obj61 = null;
        boolean boolean62 = strSet52.equals(obj61);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test12680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12680");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = property32.roundCeilingCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.plus((long) 69214639);
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears(69206325);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withPeriodAdded(readablePeriod39, 69403248);
        org.joda.time.DateTime.Property property42 = dateTime41.year();
        org.joda.time.DateTime dateTime44 = property42.addToCopy(69334272);
        org.joda.time.DateTime dateTime46 = property42.setCopy(69208701);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test12681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12681");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.DurationField durationField3 = property1.getRangeDurationField();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test12682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12682");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime30 = localDate15.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(69205127);
        org.joda.time.DateTime.Property property33 = dateTime32.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap44 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder43.appendTimeZoneShortName(strMap44);
        boolean boolean46 = dateTimeZone42.equals((java.lang.Object) strMap44);
        boolean boolean48 = dateTimeZone42.isStandardOffset((long) (byte) -1);
        mutableDateTime36.setZoneRetainFields(dateTimeZone42);
        boolean boolean50 = dateTime32.isBefore((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime32.minus(readableDuration51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap58 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder57.appendTimeZoneShortName(strMap58);
        boolean boolean60 = dateTimeZone56.equals((java.lang.Object) strMap58);
        boolean boolean62 = dateTimeZone56.isStandardOffset((long) (byte) -1);
        long long65 = dateTimeZone56.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str66 = dateTimeZone56.getID();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone56);
        int int68 = localDate67.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property70 = localDate67.property(dateTimeFieldType69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType69.getField(chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((java.lang.Object) chronology71, chronology73);
        org.joda.time.Chronology chronology75 = localDate74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.minutes();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.weekyear();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone80);
        org.joda.time.Chronology chronology82 = chronology75.withZone(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime83 = org.joda.time.MutableDateTime.now(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime(dateTimeZone80);
        org.joda.time.DateTime dateTime85 = dateTime52.toDateTime(dateTimeZone80);
        org.joda.time.DateTime.Property property86 = dateTime52.yearOfCentury();
        org.joda.time.DateTime dateTime88 = dateTime52.withMillisOfDay(0);
        org.joda.time.Chronology chronology89 = dateTime88.getChronology();
        boolean boolean90 = dateTimeFieldType0.isSupported(chronology89);
        long long94 = chronology89.add((long) 69559472, (long) 69604902, 69388346);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-360599990L) + "'", long65 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+100:10" + "'", str66, "+100:10");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 4829769092831564L + "'", long94 == 4829769092831564L);
    }

    @Test
    public void test12683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12683");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendClockhourOfDay(69213798);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter23.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = localDate20.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(69205127);
        org.joda.time.DateTime.Property property38 = dateTime37.monthOfYear();
        org.joda.time.DateTime dateTime40 = dateTime37.withYearOfCentury(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime43 = dateTime37.withField(dateTimeFieldType41, 70);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType41.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType41, 69233402, (int) (short) 0);
        java.lang.String str48 = dateTimeFieldType41.getName();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone51);
        mutableDateTime52.setTime((long) (short) -1);
        org.joda.time.Chronology chronology55 = mutableDateTime52.getChronology();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 69206325, chronology55);
        org.joda.time.DurationField durationField57 = chronology55.years();
        org.joda.time.DurationField durationField58 = chronology55.minutes();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType41.getField(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "yearOfEra" + "'", str48, "yearOfEra");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test12684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12684");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate.Property property16 = localDate14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.LocalDate localDate18 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = property16.setCopy(69230879);
        org.joda.time.LocalDate localDate21 = property16.roundFloorCopy();
        org.joda.time.Interval interval22 = localDate21.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test12685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12685");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.minusMinutes(69207073);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours(69218807);
        org.joda.time.LocalTime localTime7 = localTime5.plusMinutes(69207900);
        org.joda.time.LocalTime localTime9 = localTime5.plusMinutes(69208701);
        java.lang.String str10 = localTime9.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23:28:30.824" + "'", str10, "23:28:30.824");
    }

    @Test
    public void test12686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12686");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 69206920);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        boolean boolean3 = property2.isLeap();
        org.joda.time.LocalTime localTime5 = property2.addCopy(15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = property2.setCopy(69219574);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69219574 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test12687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12687");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1969L, 0);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds(99);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis(69319367);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test12688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12688");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology22.add(readablePeriod24, (long) 69240895, 69223061);
        org.joda.time.DurationField durationField28 = chronology22.months();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 69240895L + "'", long27 == 69240895L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test12689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12689");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDate.Property property27 = localDate22.weekyear();
        org.joda.time.LocalDate localDate28 = property27.withMinimumValue();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.LocalDate localDate30 = property27.roundFloorCopy();
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra(69233211);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap40 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendTimeZoneShortName(strMap40);
        boolean boolean42 = dateTimeZone38.equals((java.lang.Object) strMap40);
        boolean boolean44 = dateTimeZone38.isStandardOffset((long) (byte) -1);
        long long47 = dateTimeZone38.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str48 = dateTimeZone38.getID();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone38);
        int int50 = localDate49.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property52 = localDate49.property(dateTimeFieldType51);
        org.joda.time.LocalDate localDate54 = localDate49.minusYears(69206920);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate56 = localDate54.minus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate59 = localDate56.withPeriodAdded(readablePeriod57, 69210165);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone61);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableDateTime62.add(readablePeriod64);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap70 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder69.appendTimeZoneShortName(strMap70);
        boolean boolean72 = dateTimeZone68.equals((java.lang.Object) strMap70);
        boolean boolean74 = dateTimeZone68.isStandardOffset((long) (byte) -1);
        long long77 = dateTimeZone68.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime62.setZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime79 = localDate56.toDateTimeAtStartOfDay(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight80 = localDate32.toDateMidnight(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) 312, dateTimeZone68);
        java.lang.String str83 = localDate82.toString();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-360599990L) + "'", long47 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+100:10" + "'", str48, "+100:10");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-360599990L) + "'", long77 == (-360599990L));
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-05" + "'", str83, "1970-01-05");
    }

    @Test
    public void test12690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12690");
        java.lang.String[] strArray9 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        boolean boolean12 = strSet10.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap18);
        boolean boolean20 = dateTimeZone16.equals((java.lang.Object) strMap18);
        boolean boolean22 = dateTimeZone16.isStandardOffset((long) (byte) -1);
        long long25 = dateTimeZone16.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str26 = dateTimeZone16.getID();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone16);
        int int28 = localDate27.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property30 = localDate27.property(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType29.getField(chronology31);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        int int34 = dateTimeField32.getMaximumShortTextLength(locale33);
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        int int36 = strSet35.size();
        boolean boolean37 = strSet10.containsAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList43);
        strList45.clear();
        boolean boolean47 = strSet10.retainAll((java.util.Collection<java.lang.String>) strList45);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-360599990L) + "'", long25 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+100:10" + "'", str26, "+100:10");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test12691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12691");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("months");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) provider0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.ZoneInfoProvider");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test12692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12692");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        long long21 = dateTimeField19.roundHalfEven((long) 69207019);
        int int23 = dateTimeField19.getLeapAmount((long) 69218943);
        boolean boolean25 = dateTimeField19.isLeap((long) 69206843);
        long long27 = dateTimeField19.roundHalfFloor(1645455969547L);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = dateTimeField19.add((long) 69226804, 65870);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-62135957400000L) + "'", long21 == (-62135957400000L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62135957400000L) + "'", long27 == (-62135957400000L));
    }

    @Test
    public void test12693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12693");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(69284707, 9, 69480067, 695, 131);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 695 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12694");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        int int5 = mutableDateTime2.getYear();
        java.util.Date date6 = mutableDateTime2.toDate();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime2.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar12 = mutableDateTime10.toGregorianCalendar();
        java.lang.String str13 = mutableDateTime10.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap18);
        boolean boolean20 = dateTimeZone16.equals((java.lang.Object) strMap18);
        long long22 = dateTimeZone16.nextTransition((long) 1969);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean24 = mutableDateTime10.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        boolean boolean27 = localDateTime25.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean31 = localDateTime29.isSupported(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        java.lang.String str33 = durationFieldType32.getName();
        mutableDateTime10.add(durationFieldType32, 69229172);
        org.joda.time.Chronology chronology36 = mutableDateTime10.getChronology();
        int int37 = mutableDateTime10.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder38.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder38.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatterBuilder38.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder38.appendHalfdayOfDayText();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        int int46 = localDateTime45.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.withWeekyear((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int52 = localDateTime45.get(dateTimeFieldType51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder44.appendShortText(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType51.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime10.property(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType51.getDurationType();
        java.lang.String str57 = durationFieldType56.getName();
        mutableDateTime7.add(durationFieldType56, 69239223);
        java.lang.String str60 = durationFieldType56.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 19:13:39 GMT+19:13 1970");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str13, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1969L + "'", long22 == 1969L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "days" + "'", str33, "days");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeParser43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 69631001 + "'", int46 == 69631001);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hours" + "'", str57, "hours");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hours" + "'", str60, "hours");
    }

    @Test
    public void test12695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12695");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear(69210934);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours(0);
        java.lang.String str17 = localDateTime15.toString("\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str17, "\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test12696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12696");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        long long45 = dateTimeZone36.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str46 = dateTimeZone36.getID();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone36);
        org.joda.time.LocalDate.Property property48 = localDate47.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight49 = localDate47.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap55 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder54.appendTimeZoneShortName(strMap55);
        boolean boolean57 = dateTimeZone53.equals((java.lang.Object) strMap55);
        boolean boolean59 = dateTimeZone53.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter50.withZone(dateTimeZone53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.joda.time.DateTime dateTime62 = localDate47.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.DateTime dateTime64 = dateTime62.minusSeconds((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getRangeDurationType();
        org.joda.time.DateTime dateTime68 = dateTime62.withFieldAdded(durationFieldType66, 365);
        org.joda.time.DateTime dateTime70 = dateTime31.withFieldAdded(durationFieldType66, 2);
        org.joda.time.DateTime dateTime73 = dateTime70.withDurationAdded((long) 69234251, 69218047);
        org.joda.time.DateTime.Property property74 = dateTime73.millisOfDay();
        boolean boolean75 = property74.isLeap();
        java.lang.String str76 = property74.getName();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-360599990L) + "'", long45 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+100:10" + "'", str46, "+100:10");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "millisOfDay" + "'", str76, "millisOfDay");
    }

    @Test
    public void test12697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12697");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.monthOfYear();
        org.joda.time.LocalDate localDate28 = localDate21.minusDays(25);
        org.joda.time.LocalDate localDate30 = localDate21.minusWeeks(69215043);
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfEra();
        int int32 = localDate30.getDayOfYear();
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime34 = localDate33.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long50 = dateTimeZone41.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str51 = dateTimeZone41.getID();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone41);
        int int53 = localDate52.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property55 = localDate52.property(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType54.getField(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) chronology56, chronology58);
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekyear();
        java.util.Locale locale64 = new java.util.Locale("hi!");
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale70 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology68, locale70, (java.lang.Integer) 54202800);
        java.lang.String str73 = locale64.getDisplayCountry(locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 19, chronology60, locale70);
        org.joda.time.DateTime dateTime75 = dateTime36.withChronology(chronology60);
        org.joda.time.DateTime.Property property76 = dateTime75.hourOfDay();
        boolean boolean77 = localDate30.equals((java.lang.Object) dateTime75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField79 = localDate30.getField(69354469);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69354469");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 254 + "'", int32 == 254);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-360599990L) + "'", long50 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+100:10" + "'", str51, "+100:10");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test12698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12698");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (-2001));
    }

    @Test
    public void test12699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12699");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMillis(69382334);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology4, locale6, (java.lang.Integer) 54202800);
        java.util.Locale locale9 = dateTimeParserBucket8.getLocale();
        long long10 = dateTimeParserBucket8.computeMillis();
        long long11 = dateTimeParserBucket8.computeMillis();
        long long14 = dateTimeParserBucket8.computeMillis(false, "minutes");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder15.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendHourOfDay(69215043);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendMillisOfDay(19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder21.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder21.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatterBuilder21.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder21.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder21.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder21.appendClockhourOfHalfday(100);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        boolean boolean36 = localDateTime34.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int42 = localDateTime40.get(dateTimeFieldType41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder21.appendDecimal(dateTimeFieldType41, 0, 69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder20.appendFixedSignedDecimal(dateTimeFieldType41, 25);
        dateTimeParserBucket8.saveField(dateTimeFieldType41, 21);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType41.getDurationType();
        boolean boolean51 = localDateTime2.isSupported(durationFieldType50);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-291396175L) + "'", long10 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-291396175L) + "'", long11 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-291396175L) + "'", long14 == (-291396175L));
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeParser26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test12700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12700");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        int int18 = localDate14.size();
        org.joda.time.Interval interval19 = localDate14.toInterval();
        int int20 = localDate14.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test12701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12701");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, 5);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology52.getZone();
        long long55 = dateTimeZone53.previousTransition((long) 69421016);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 69421016L + "'", long55 == 69421016L);
    }

    @Test
    public void test12702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12702");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        mutableDateTime2.setMinuteOfDay((int) (short) 0);
        int int7 = mutableDateTime2.getWeekyear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime2.add(readableDuration8, 54202800);
        boolean boolean12 = mutableDateTime2.isEqual((long) 54588992);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test12703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12703");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localTime2.getFieldTypes();
        org.joda.time.LocalTime localTime5 = localTime2.plusMillis(444);
        int int6 = localTime2.getHourOfDay();
        org.joda.time.LocalTime localTime8 = localTime2.plusMillis(69493598);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test12704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12704");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.setMillisOfDay((int) '#');
        int int10 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "1", (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime4.toMutableDateTime();
        long long12 = mutableDateTime4.getMillis();
        java.lang.String str13 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        java.lang.String str14 = mutableDateTime4.toString();
        org.joda.time.DateTimeField dateTimeField15 = mutableDateTime4.getRoundingField();
        mutableDateTime4.add((long) 69240944);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        long long30 = dateTimeZone21.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str31 = dateTimeZone21.getID();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone21);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight34 = localDate32.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap40 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendTimeZoneShortName(strMap40);
        boolean boolean42 = dateTimeZone38.equals((java.lang.Object) strMap40);
        boolean boolean44 = dateTimeZone38.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter35.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = localDate32.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours(69205127);
        org.joda.time.DateTime.Property property50 = dateTime49.monthOfYear();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property53 = dateTime52.year();
        org.joda.time.DateTime dateTime55 = dateTime52.plusDays(39);
        org.joda.time.DateTime dateTime57 = dateTime55.plus((long) 69272);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime60 = dateTime55.plusMinutes(69420000);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62135352599965L) + "'", long12 == (-62135352599965L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00" + "'", str13, "00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0001-01-08T00:00:00.035+100:10" + "'", str14, "0001-01-08T00:00:00.035+100:10");
        org.junit.Assert.assertNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360599990L) + "'", long30 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:10" + "'", str31, "+100:10");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test12705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12705");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        boolean boolean17 = strList15.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean27 = strList25.equals((java.lang.Object) (-1));
        boolean boolean28 = strList15.retainAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean29 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15, filteringMode30);
        boolean boolean33 = strList15.add("70");
        java.util.stream.Stream<java.lang.String> strStream34 = strList15.stream();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone36);
        mutableDateTime37.setTime((long) (short) -1);
        int int40 = mutableDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean42 = mutableDateTime37.isSupported(dateTimeFieldType41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime37.dayOfMonth();
        boolean boolean44 = strList15.equals((java.lang.Object) property43);
        org.joda.time.DurationField durationField45 = property43.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime46 = property43.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar51 = mutableDateTime49.toGregorianCalendar();
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar51);
        org.joda.time.LocalDate.Property property53 = localDate52.yearOfEra();
        int int54 = localDate52.getDayOfYear();
        org.joda.time.DateTime dateTime55 = localDate52.toDateTimeAtCurrentTime();
        int int56 = property43.compareTo((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate58 = localDate52.plus(readablePeriod57);
        int int59 = localDate52.getYear();
        int[] intArray60 = localDate52.getValues();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(durationField45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 5]");
    }

    @Test
    public void test12706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12706");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        int int4 = mutableDateTime2.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfMonth();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(69224009);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime8.add(readablePeriod9, 350);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setDateTime(69554569, 0, 841, 69537625, 248, 69627593, 69266512);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69537625 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test12707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12707");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localTime2.getFieldTypes();
        int int4 = localTime2.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder5.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder9.appendTimeZoneName();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder10.appendSignedDecimal(dateTimeFieldType11, 44, 444);
        org.joda.time.LocalTime.Property property15 = localTime2.property(dateTimeFieldType11);
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.LocalTime localTime17 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime18 = property15.getLocalTime();
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime20 = property19.getLocalTime();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test12708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12708");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        java.lang.String str14 = mutableDateTime13.toString();
        int int15 = mutableDateTime13.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setHourOfDay(69322906);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69322906 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str14, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test12709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12709");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(69374131, 69304577, 69488258);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69304577 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12710");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int[] intArray18 = localDate14.getValues();
        org.joda.time.LocalDate.Property property19 = localDate14.weekyear();
        org.joda.time.LocalDate localDate21 = property19.addWrapFieldToCopy(69221560);
        org.joda.time.LocalDate localDate22 = property19.getLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 5]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test12711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12711");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.secondOfMinute();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        boolean boolean16 = property13.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale15.getDisplayName();
        java.lang.String str18 = locale15.getScript();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test12712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12712");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        java.util.Date date15 = localDateTime0.toDate();
        org.joda.time.LocalDateTime.Property property16 = localDateTime0.year();
        org.joda.time.Chronology chronology17 = localDateTime0.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 25 19:20:32 GMT+19:13 2022");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test12713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12713");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendTimeZoneShortName(strMap8);
        boolean boolean10 = dateTimeZone6.equals((java.lang.Object) strMap8);
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) (byte) -1);
        long long15 = dateTimeZone6.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str16 = dateTimeZone6.getID();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone6);
        int int18 = localDate17.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property20 = localDate17.property(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType19.getField(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) chronology21, chronology23);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate24.withPeriodAdded(readablePeriod26, (int) '#');
        org.joda.time.LocalDate.Property property29 = localDate24.weekyear();
        org.joda.time.LocalDate localDate30 = property29.withMinimumValue();
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone35.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone35);
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property49 = localDate46.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType48.getField(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) chronology50, chronology52);
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.LocalDate localDate56 = localDate53.minusMonths(10);
        int int57 = localDate53.getDayOfMonth();
        int[] intArray59 = chronology31.get((org.joda.time.ReadablePartial) localDate53, 69210934L);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        boolean boolean68 = dateTimeZone64.equals((java.lang.Object) strMap66);
        boolean boolean70 = dateTimeZone64.isStandardOffset((long) (byte) -1);
        long long73 = dateTimeZone64.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str74 = dateTimeZone64.getID();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone64);
        int int76 = localDate75.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property78 = localDate75.property(dateTimeFieldType77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType77.getField(chronology79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((java.lang.Object) chronology79, chronology81);
        org.joda.time.Chronology chronology83 = localDate82.getChronology();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDate localDate86 = localDate82.withPeriodAdded(readablePeriod84, (int) '#');
        org.joda.time.LocalDate.Property property87 = localDate82.weekyear();
        int int88 = localDate82.getEra();
        org.joda.time.LocalDate localDate90 = localDate82.plusMonths(69236559);
        org.joda.time.LocalDate localDate92 = localDate82.plusDays(65640);
        long long94 = chronology31.set((org.joda.time.ReadablePartial) localDate82, 249138511514377L);
        org.joda.time.DateTimeField dateTimeField95 = chronology31.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate96 = new org.joda.time.LocalDate(69389226, 69506053, 69271135, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69506053 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-360599990L) + "'", long15 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:10" + "'", str16, "+100:10");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599990L) + "'", long44 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 25 + "'", int57 == 25);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-360599990L) + "'", long73 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+100:10" + "'", str74, "+100:10");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1645797914377L + "'", long94 == 1645797914377L);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test12714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12714");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        long long25 = dateTimeZone10.adjustOffset((long) 69628834, false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 69628834L + "'", long25 == 69628834L);
    }

    @Test
    public void test12715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12715");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval2 = localDate0.toInterval();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate5 = localDate0.withPeriodAdded(readablePeriod3, 12);
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate8 = property6.addToCopy(69383002);
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDate8.compareTo(readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test12716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12716");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime3.property(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = localTime3.withMillisOfDay(2022);
        int int9 = localTime3.getSecondOfMinute();
        java.lang.String str11 = localTime3.toString("1");
        int int12 = localTime3.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "000000.010" + "'", str4, "000000.010");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test12717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12717");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.yearOfCentury();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        boolean boolean38 = dateTimeField37.isLenient();
        int int39 = dateTime29.get(dateTimeField37);
        org.joda.time.DateTime.Property property40 = dateTime29.era();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = dateTime29.toString("2022-01-25T17:36:28.618");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test12718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12718");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1969L, 0);
        org.joda.time.DateTime dateTime19 = dateTime14.withYearOfEra(69206920);
        org.joda.time.DateTime dateTime20 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property21 = dateTime14.weekOfWeekyear();
        org.joda.time.DateTime.Property property22 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime24 = dateTime14.minusYears(69269588);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(327);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test12719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12719");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1969L, 0);
        org.joda.time.DateTime dateTime19 = dateTime14.withYearOfEra(69206920);
        int int20 = dateTime19.getYearOfEra();
        org.joda.time.DateTime.Property property21 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfSecond(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime22.withEra(69601161);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69601161 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 69206920 + "'", int20 == 69206920);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test12720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12720");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusWeeks(191509);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        int int9 = localDateTime7.getYear();
        int int10 = localDateTime7.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minusSeconds(69291615);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withPeriodAdded(readablePeriod14, 69239765);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        boolean boolean19 = localDateTime17.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.monthOfYear();
        int int26 = mutableDateTime24.getWeekOfWeekyear();
        mutableDateTime24.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean30 = mutableDateTime24.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime17.property(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy(69208701);
        int int34 = localDateTime33.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusMillis((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.yearOfCentury();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder38.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder38.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.monthOfYear();
        long long47 = mutableDateTime45.getMillis();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime45.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        int int51 = mutableDateTime45.get(dateTimeFieldType50);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder38.appendFixedDecimal(dateTimeFieldType50, 69217826);
        boolean boolean54 = localDateTime33.isSupported(dateTimeFieldType50);
        org.joda.time.LocalDateTime.Property property55 = localDateTime7.property(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime56 = property55.withMinimumValue();
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69631601 + "'", int1 == 69631601);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5692 + "'", int9 == 5692);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 191509 + "'", int34 == 191509);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test12721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12721");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-26T14:32:37.057+100:10");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-26T14:32:37.057+100:10\" is malformed at \"+100:10\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12722");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        boolean boolean33 = property32.isLeap();
        org.joda.time.DateTime dateTime35 = property32.addWrapFieldToCopy(69213798);
        org.joda.time.DateTime dateTime37 = dateTime35.plusDays(251);
        org.joda.time.DateTime.Property property38 = dateTime35.secondOfMinute();
        org.joda.time.DateTime dateTime41 = dateTime35.withDurationAdded((long) 69424251, 69353407);
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test12723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12723");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology22.withZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone27);
        int int32 = mutableDateTime31.getSecondOfDay();
        mutableDateTime31.addMonths(69233168);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime31.year();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap42 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendTimeZoneShortName(strMap42);
        boolean boolean44 = dateTimeZone40.equals((java.lang.Object) strMap42);
        boolean boolean46 = dateTimeZone40.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter37.withZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder49.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder49.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser54 = dateTimeFormatterBuilder49.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder49.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder49.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder49.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeParser dateTimeParser61 = dateTimeFormatterBuilder60.toParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder60.appendFixedDecimal(dateTimeFieldType62, 69215043);
        mutableDateTime48.set(dateTimeFieldType62, 69239408);
        int int67 = mutableDateTime48.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime48.minuteOfDay();
        mutableDateTime36.setMillis((org.joda.time.ReadableInstant) mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69631 + "'", int32 == 69631);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeParser54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeParser61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test12724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12724");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 69412987, dateTimeZone1);
    }

    @Test
    public void test12725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12725");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(69206284);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, 69233625);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.plus(readableDuration13);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69631763 + "'", int1 == 69631763);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test12726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12726");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        boolean boolean4 = localDateTime2.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDayOfMonth((int) (byte) 1);
        int int7 = localDateTime2.size();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime15 = property11.set("00");
        org.joda.time.DateTime dateTime16 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(1969L, 0);
        org.joda.time.DateTime dateTime21 = dateTime16.withYearOfEra(69206920);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime16.getZone();
        org.joda.time.Chronology chronology23 = dateTime16.getChronology();
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 69206325, chronology23, locale25);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.year();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 69258541, chronology23);
        org.joda.time.DateTimeField dateTimeField30 = chronology23.hourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test12727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12727");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1969-02-21T19:14:06.442");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
    }

    @Test
    public void test12728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12728");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(69210496);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        mutableDateTime7.setTime((long) (short) -1);
        mutableDateTime7.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str13 = mutableDateTime7.toString(dateTimeFormatter12);
        java.util.Date date14 = mutableDateTime7.toDate();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime7.year();
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) mutableDateTime7);
        java.lang.String str17 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(69488468);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears((-19));
        java.lang.String str26 = dateTimeFormatter19.print((org.joda.time.ReadablePartial) localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 56 + "'", int4 == 56);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00" + "'", str13, "00");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 19:13:39 GMT+19:13 1970");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02" + "'", str17, "2022-02");
        org.junit.Assert.assertNotNull(dateTimePrinter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1329749-05" + "'", str26, "-1329749-05");
    }

    @Test
    public void test12729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12729");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) chronology1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        int int22 = localDate21.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property24 = localDate21.property(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType23.getField(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) chronology25, chronology27);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate28.withPeriodAdded(readablePeriod30, (int) '#');
        org.joda.time.LocalDate.Property property33 = localDate28.weekyear();
        org.joda.time.LocalDate localDate34 = property33.withMinimumValue();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths(2);
        int int37 = localDate36.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long50 = dateTimeZone41.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str51 = dateTimeZone41.getID();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone41);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = localDate52.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getDurationType();
        boolean boolean57 = dateMidnight54.isSupported(dateTimeFieldType55);
        boolean boolean58 = localDate36.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate36.toDateTimeAtStartOfDay(dateTimeZone61);
        long long67 = dateTimeZone61.convertLocalToUTC((long) 69244152, true, (-291385419L));
        mutableDateTime6.setZone(dateTimeZone61);
        boolean boolean69 = mutableDateTime6.isAfterNow();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-360599990L) + "'", long50 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+100:10" + "'", str51, "+100:10");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-291355848L) + "'", long67 == (-291355848L));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test12730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12730");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        mutableDateTime1.addHours(69207900);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str9 = locale8.getISO3Language();
        int int10 = property7.getMaximumShortTextLength(locale8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.yearOfCentury();
        int int18 = property7.getDifference((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime mutableDateTime20 = property7.add(69210165);
        org.joda.time.MutableDateTime mutableDateTime21 = property7.roundHalfCeiling();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime21);
        int int23 = mutableDateTime21.getDayOfYear();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap30);
        boolean boolean32 = dateTimeZone28.equals((java.lang.Object) strMap30);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) -1);
        long long38 = dateTimeZone28.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap44 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder43.appendTimeZoneShortName(strMap44);
        boolean boolean46 = dateTimeZone42.equals((java.lang.Object) strMap44);
        boolean boolean48 = dateTimeZone42.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter39.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        long long52 = dateTimeZone28.getMillisKeepLocal(dateTimeZone42, (long) 10);
        boolean boolean53 = dateTime25.equals((java.lang.Object) dateTimeZone42);
        org.joda.time.DateTime dateTime55 = dateTime25.withYear(39);
        org.joda.time.YearMonthDay yearMonthDay56 = dateTime55.toYearMonthDay();
        boolean boolean57 = mutableDateTime21.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fra" + "'", str9, "fra");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 274 + "'", int23 == 274);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-360599999L) + "'", long38 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test12731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12731");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology22.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology29.add(readablePeriod32, (long) 69274066, 69259550);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.era();
        boolean boolean38 = dateTimeField36.isLeap((long) 69305441);
        int int39 = dateTimeField36.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = dateTimeField36.getDifference((long) 65972, (long) 69439406);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 69274066L + "'", long35 == 69274066L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test12732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12732");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Collection<java.lang.String> strCollection4 = null;
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strCollection4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        int int21 = localDate20.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property23 = localDate20.property(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType22.getField(chronology24);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        int int27 = dateTimeField25.getMaximumShortTextLength(locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        int int29 = strSet28.size();
        int int30 = strSet28.size();
        strSet28.clear();
        java.util.Spliterator<java.lang.String> strSpliterator32 = strSet28.spliterator();
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet28, filteringMode33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.monthOfYear();
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale49.getISO3Language();
        int int51 = property48.getMaximumShortTextLength(locale49);
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.util.Locale locale59 = java.util.Locale.getDefault();
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale60.getISO3Language();
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale62.getDisplayVariant();
        java.util.Locale locale65 = new java.util.Locale("hi!");
        java.util.Locale locale67 = new java.util.Locale("hi!");
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale49, locale52, locale56, locale58, locale59, locale60, locale62, locale65, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter(languageRangeList36, (java.util.Collection<java.util.Locale>) localeList69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode33.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fra" + "'", str50, "fra");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fra" + "'", str53, "fra");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fra" + "'", str61, "fra");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals(locale65.toString(), "hi!");
        org.junit.Assert.assertEquals(locale67.toString(), "hi!");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNotNull(localeList72);
    }

    @Test
    public void test12733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12733");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        boolean boolean2 = dateTimeFormatter0.isOffsetParsed();
        boolean boolean3 = dateTimeFormatter0.isOffsetParsed();
        java.lang.Appendable appendable4 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        boolean boolean14 = dateTimeZone8.isStandardOffset((long) (byte) -1);
        long long17 = dateTimeZone8.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone8.getID();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone8);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate22 = localDate19.plusWeeks(69222463);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfWeek();
        int int24 = localDate22.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable4, (org.joda.time.ReadablePartial) localDate22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-360599990L) + "'", long17 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+100:10" + "'", str18, "+100:10");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 248 + "'", int24 == 248);
    }

    @Test
    public void test12734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12734");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime9 = property3.add((long) '#');
        int int10 = mutableDateTime9.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime9.add(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime9.add(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime9.getZone();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        boolean boolean18 = localDateTime16.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withYearOfCentury((int) (short) 0);
        int int21 = localDateTime16.getYear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusWeeks(69206325);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder24.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder24.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatterBuilder24.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder24.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder24.appendFractionOfHour(100, 5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder35.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder35.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder38.appendSignedDecimal(dateTimeFieldType39, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder24.appendText(dateTimeFieldType39);
        int int44 = localDateTime16.get(dateTimeFieldType39);
        boolean boolean45 = mutableDateTime9.isSupported(dateTimeFieldType39);
        int int46 = mutableDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        boolean boolean50 = localDateTime48.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withDayOfMonth((int) (byte) 1);
        int int53 = localDateTime48.size();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime59 = property57.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime61 = property57.set("00");
        org.joda.time.DateTime dateTime62 = localDateTime48.toDateTime((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime48.withMinuteOfHour(6);
        int int65 = localDateTime64.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean67 = localDateTime64.isSupported(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType66.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone70);
        mutableDateTime71.setTime((long) (short) -1);
        mutableDateTime71.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str77 = mutableDateTime71.toString(dateTimeFormatter76);
        org.joda.time.Chronology chronology78 = mutableDateTime71.getChronology();
        boolean boolean79 = durationFieldType68.isSupported(chronology78);
        org.joda.time.DurationField durationField80 = chronology78.days();
        java.util.Locale locale81 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 69227753, chronology78, locale81, (java.lang.Integer) 65912, 69222463);
        mutableDateTime9.setChronology(chronology78);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 72 + "'", int10 == 72);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 56 + "'", int44 == 56);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "00" + "'", str77, "00");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it");
    }

    @Test
    public void test12735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12735");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(69243332);
        org.joda.time.LocalTime localTime12 = localTime8.plusMinutes(69225355);
        org.joda.time.LocalTime localTime14 = localTime12.plusSeconds(65615);
        org.joda.time.LocalTime localTime16 = localTime12.plusMillis(69424151);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test12736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12736");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYear(69204037);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12737");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        boolean boolean33 = property32.isLeap();
        org.joda.time.DateTime dateTime35 = property32.addWrapFieldToCopy(69213798);
        org.joda.time.DateTime dateTime36 = property32.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.year();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.lang.String str42 = property37.getAsText(locale38);
        org.joda.time.DateTime dateTime43 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded((long) 69231663, 69309637);
        org.joda.time.DateTime.Property property47 = dateTime43.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        boolean boolean49 = dateTimeFormatter48.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap55 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder54.appendTimeZoneShortName(strMap55);
        boolean boolean57 = dateTimeZone53.equals((java.lang.Object) strMap55);
        boolean boolean59 = dateTimeZone53.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter50.withZone(dateTimeZone53);
        java.util.TimeZone timeZone61 = dateTimeZone53.toTimeZone();
        java.lang.String str62 = dateTimeZone53.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter48.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime64 = dateTime43.toDateTime(dateTimeZone53);
        int int66 = dateTimeZone53.getOffsetFromLocal((long) 69594758);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9864" + "'", str42, "9864");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+100:10" + "'", str62, "+100:10");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 360600000 + "'", int66 == 360600000);
    }

    @Test
    public void test12738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12738");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withPeriodAdded(readablePeriod7, 38);
        java.util.Date date10 = localDateTime9.toDate();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromDateFields(date10);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 25 19:20:32 GMT+19:13 2000");
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12739");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDate localDate17 = property15.getLocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.centuryOfEra();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate20 = property18.roundHalfEvenCopy();
        int int21 = localDate20.size();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
    }

    @Test
    public void test12740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12740");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.withMinuteOfHour(6);
        int int17 = localDateTime16.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        int int19 = localDateTime18.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        int int26 = localDateTime25.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.secondOfMinute();
        int int32 = localDateTime30.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withDurationAdded(readableDuration33, 69207484);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime30);
        int int37 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime16.era();
        int int39 = property38.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69632111 + "'", int19 == 69632111);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69632111 + "'", int26 == 69632111);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test12741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12741");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(69430459);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12742");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        int int12 = timeZone11.getRawOffset();
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        boolean boolean21 = dateTimeZone17.equals((java.lang.Object) strMap19);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter14.withZone(dateTimeZone17);
        java.util.TimeZone timeZone25 = dateTimeZone17.toTimeZone();
        java.lang.String str26 = timeZone25.getID();
        int int28 = timeZone25.getOffset(3L);
        boolean boolean29 = timeZone11.hasSameRules(timeZone25);
        timeZone11.setID("69206920W087");
        boolean boolean32 = timeZone11.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId33 = timeZone11.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 69206920W087");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 360600000 + "'", int12 == 360600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+100:10" + "'", str26, "+100:10");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 360600000 + "'", int28 == 360600000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test12743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12743");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays(0);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate26 = localDate23.plusWeeks(0);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks(0);
        org.joda.time.LocalDate localDate30 = localDate26.plusYears(69206284);
        org.joda.time.LocalDate localDate32 = localDate26.withWeekyear(69300104);
        org.joda.time.DateTime dateTime33 = localDate32.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate35 = localDate32.withYear(69399344);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfWeek();
        int int37 = localDate35.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = localDate35.toString("jeu.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
    }

    @Test
    public void test12744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12744");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder8.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder8.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatterBuilder12.toParser();
        boolean boolean14 = dateTimeFormatterBuilder12.canBuildParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatterBuilder12.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder16.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendSignedDecimal(dateTimeFieldType20, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder23.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendTimeZoneId();
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatterBuilder26.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder0.append(dateTimePrinter15, dateTimeParser30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder0.appendFractionOfHour(69315446, 69550766);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder0.appendSecondOfMinute(65841);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeParser13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeParser30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
    }

    @Test
    public void test12745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12745");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        java.util.TimeZone timeZone15 = dateTimeZone3.toTimeZone();
        boolean boolean16 = timeZone15.observesDaylightTime();
        java.lang.String str17 = timeZone15.getID();
        boolean boolean18 = timeZone15.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+100:10" + "'", str17, "+100:10");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test12746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12746");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(69221560);
        org.joda.time.Chronology chronology11 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DurationField durationField14 = chronology11.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology11.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test12747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12747");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withDurationAdded(readableDuration5, 1969);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minusDays(54202800);
        int int10 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusDays(31);
        int[] intArray13 = localDateTime0.getValues();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime0.minusMonths(69220671);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime0.plusMonths(69239192);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMinutes(69352460);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 25, 69632239]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test12748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12748");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 69288576);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        mutableDateTime1.add(readablePeriod2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test12749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12749");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime35 = property34.getDateTime();
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone40);
        mutableDateTime41.setTime((long) (short) -1);
        int int44 = mutableDateTime41.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean46 = mutableDateTime41.isSupported(dateTimeFieldType45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime41.dayOfMonth();
        boolean boolean48 = mutableDateTime41.isEqualNow();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime41.yearOfCentury();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime41.minuteOfDay();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale51.getDisplayVariant();
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale61 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology59, locale61, (java.lang.Integer) 54202800);
        java.lang.String str64 = locale55.getDisplayCountry(locale61);
        java.lang.String str65 = locale51.getDisplayName(locale55);
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale66);
        java.lang.String str68 = locale51.getDisplayLanguage(locale66);
        java.lang.String str69 = property50.getAsShortText(locale66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTimeField37.getAsShortText(69247268, locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69247268");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 59 + "'", int44 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "German" + "'", str65, "German");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "allemand" + "'", str68, "allemand");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1439" + "'", str69, "1439");
    }

    @Test
    public void test12750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12750");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology22.withZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfWeek();
        long long34 = mutableDateTime32.getMillis();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38, 0);
        mutableDateTime37.setMillisOfDay(4);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime37.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime37.getZone();
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645456232326L + "'", long34 == 1645456232326L);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test12751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12751");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("halfdayOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"halfdayOfDay\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12752");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime localDateTime9 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime(dateTimeZone11);
        int int13 = dateTime12.getWeekOfWeekyear();
        java.lang.String str14 = dateTime12.toString();
        org.joda.time.DateTime.Property property15 = dateTime12.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69632350 + "'", int1 == 69632350);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-25T19:20:32.350+35:00" + "'", str14, "2022-02-25T19:20:32.350+35:00");
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test12753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12753");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = dateTime31.plusMinutes(69212644);
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = property35.withMaximumValue();
        org.joda.time.DateTime dateTime38 = dateTime36.plus((long) 65615);
        int int39 = dateTime38.getMinuteOfHour();
        org.joda.time.DateTime.Property property40 = dateTime38.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = property40.setCopy("00:00:10.010");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"00:00:10.010\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 25 + "'", int39 == 25);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test12754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12754");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(69598207, 54535, 69610980, 69408888, 69298988);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69408888 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12755");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        java.lang.String str12 = mutableDateTime9.toString();
        mutableDateTime9.setTime((long) 69204394);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime9.dayOfMonth();
        mutableDateTime9.setYear(4);
        org.joda.time.Chronology chronology19 = mutableDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.era();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology19);
        int int23 = mutableDateTime22.getWeekOfWeekyear();
        boolean boolean24 = mutableDateTime22.isAfterNow();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setMinuteOfHour(69430901);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69430901 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str12, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12756");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.secondOfMinute();
        int int14 = property13.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.addWrapField(69206843);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = mutableDateTime16.getRoundingField();
        int int19 = mutableDateTime16.getSecondOfDay();
        mutableDateTime16.setMillis((long) 69497047);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15023 + "'", int19 == 15023);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test12757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12757");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateParser();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser2 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = dateTimeParser2.parseInto(dateTimeParserBucket3, "Korean", 69309637);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeParser2);
    }

    @Test
    public void test12758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12758");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime.Property property26 = dateTime24.dayOfWeek();
        boolean boolean28 = dateTime24.isBefore((long) 69250339);
        org.joda.time.DateTime dateTime31 = dateTime24.withDurationAdded((long) 69319562, 2922750);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfEra(69240807);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime35.withHourOfDay(69415579);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69415579 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test12759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12759");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        boolean boolean10 = localDateTime8.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean14 = localDateTime12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusDays(69218383);
        boolean boolean17 = property7.equals((java.lang.Object) 69218383);
        org.joda.time.DateTime dateTime18 = property7.getDateTime();
        int int19 = property7.getMinimumValueOverall();
        org.joda.time.DateTime dateTime20 = property7.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test12760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12760");
        java.lang.String[] strArray13 = new java.lang.String[] { "2022-02-21T15:04:24.674Z", "2022-02-25T19:14:27.970+100:10", "2022-01-25T17:33:45.701", "era", "1970-01-05T00:00:00.001+100:10", "-2000-02-25T19:14:12.363", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000)", "15000000", "f\351vr.", "1970", "fra", "2022-02-25", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology17, locale19, (java.lang.Integer) 54202800);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, 4);
        dateTimeParserBucket21.setOffset((java.lang.Integer) 69210165);
        dateTimeParserBucket21.setOffset((java.lang.Integer) 69230879);
        dateTimeParserBucket21.setPivotYear((java.lang.Integer) 69256363);
        boolean boolean31 = strSet14.remove((java.lang.Object) dateTimeParserBucket21);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.parse("2022-01-25T17:33:32.644");
        boolean boolean34 = strSet14.remove((java.lang.Object) "2022-01-25T17:33:32.644");
        boolean boolean36 = strSet14.contains((java.lang.Object) 69263005);
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        boolean boolean39 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet38);
        java.lang.Object[] objArray40 = strSet14.toArray();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000), 15000000, f\351vr., 1970, fra, 2022-02-25, +00:00]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000), 15000000, f\351vr., 1970, fra, 2022-02-25, +00:00]");
    }

    @Test
    public void test12761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12761");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        int int4 = localDateTime0.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(54202757);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMinuteOfHour((int) (byte) 1);
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(65681);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withDayOfWeek(69326820);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69326820 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69632482 + "'", int1 == 69632482);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12762");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfCentury();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        boolean boolean14 = mutableDateTime9.isSupported(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder3.appendText(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendFractionOfHour((int) (byte) 100, 69210404);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendFixedDecimal(dateTimeFieldType19, 69206843);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.append(dateTimeFormatter27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder26.appendDayOfMonth(69205091);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendHourOfHalfday(69234598);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder30.appendDayOfMonth(69304014);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder35.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder35.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder38.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder39.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter41.getPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder40.append(dateTimePrinter42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder30.append(dateTimePrinter42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder18.append(dateTimePrinter42);
        int int46 = dateTimePrinter42.estimatePrintedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimePrinter42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
    }

    @Test
    public void test12763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12763");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(59);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekOfWeekyear((int) '#');
        int int7 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfDay();
        int int9 = localDateTime0.getMillisOfDay();
        int int10 = localDateTime0.getWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.withMillisOfDay(69364425);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        boolean boolean14 = localDateTime0.isSupported(durationFieldType13);
        int int15 = localDateTime0.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69632549 + "'", int9 == 69632549);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 25 + "'", int15 == 25);
    }

    @Test
    public void test12764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12764");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        int int23 = mutableDateTime2.getRoundingMode();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        long long38 = dateTimeZone29.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str39 = dateTimeZone29.getID();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone29);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight42 = localDate40.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap48 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder47.appendTimeZoneShortName(strMap48);
        boolean boolean50 = dateTimeZone46.equals((java.lang.Object) strMap48);
        boolean boolean52 = dateTimeZone46.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter43.withZone(dateTimeZone46);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.DateTime dateTime55 = localDate40.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(69205127);
        org.joda.time.DateTime.Property property58 = dateTime57.monthOfYear();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property61 = dateTime60.year();
        org.joda.time.DateTime dateTime62 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime64 = dateTime60.plusWeeks(69210165);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap69 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder70 = dateTimeFormatterBuilder68.appendTimeZoneShortName(strMap69);
        boolean boolean71 = dateTimeZone67.equals((java.lang.Object) strMap69);
        boolean boolean73 = dateTimeZone67.isStandardOffset((long) (byte) -1);
        long long77 = dateTimeZone67.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.DateTime dateTime78 = dateTime64.toDateTime(dateTimeZone67);
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now(dateTimeZone67);
        mutableDateTime25.setZoneRetainFields(dateTimeZone67);
        int int81 = mutableDateTime25.getRoundingMode();
        mutableDateTime25.addWeekyears(69365201);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-360599990L) + "'", long38 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:10" + "'", str39, "+100:10");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-360599999L) + "'", long77 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test12765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12765");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 69484562);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12766");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category1, locale4);
        java.lang.String str7 = locale4.getScript();
        java.lang.String str10 = nameProvider0.getShortName(locale4, "2022-01-25T17:35:51.217", "f\351vrier");
        java.util.Locale locale14 = new java.util.Locale("", "-2000-02-25T19:13:50.545", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getScript();
        java.lang.String str19 = nameProvider0.getShortName(locale14, "hours", "2101-10-06T04:21:43.761+100:10");
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale23 = builder20.build();
        java.lang.String str26 = nameProvider0.getName(locale23, "", "2022-01-25T17:33:41.666");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str10);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000)" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test12767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12767");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime9 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property5.setCopy(69472872);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test12768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12768");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("hi!", (double) 65741);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=65741.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12769");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "69226168");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.setLanguage("Italy");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test12770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12770");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendTwoDigitWeekyear(69214930);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder3.appendDayOfWeekShortText();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar15 = mutableDateTime13.toGregorianCalendar();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.monthOfYear();
        long long21 = mutableDateTime19.getMillis();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime19.add(readableDuration22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendTimeZoneShortName(strMap29);
        boolean boolean31 = dateTimeZone27.equals((java.lang.Object) strMap29);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        long long36 = dateTimeZone27.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str37 = dateTimeZone27.getID();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime19.toMutableDateTime(dateTimeZone27);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now(dateTimeZone27);
        org.joda.time.DateTime dateTime41 = localDate16.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths(0);
        org.joda.time.LocalDate localDate44 = dateTime41.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = localDate44.getFieldType(2);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder3.appendText(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-360599990L) + "'", long36 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:10" + "'", str37, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
    }

    @Test
    public void test12771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12771");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.Instant instant4 = mutableDateTime3.toInstant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime5.add(readablePeriod6, 69240504);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test12772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12772");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYearOfEra(1970);
        org.joda.time.Chronology chronology7 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.monthOfYear();
        int int9 = localDateTime0.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69632723 + "'", int1 == 69632723);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
    }

    @Test
    public void test12773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12773");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfCentury();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        boolean boolean14 = mutableDateTime9.isSupported(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder3.appendText(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendFractionOfHour((int) (byte) 100, 69210404);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendFixedDecimal(dateTimeFieldType19, 69206843);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendClockhourOfDay(32170756);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder21.appendFraction(dateTimeFieldType24, 41, 69324975);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder21.appendDayOfWeekText();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap34 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendTimeZoneShortName(strMap34);
        boolean boolean36 = dateTimeZone32.equals((java.lang.Object) strMap34);
        boolean boolean38 = dateTimeZone32.isStandardOffset((long) (byte) -1);
        long long41 = dateTimeZone32.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str42 = dateTimeZone32.getID();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone32);
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight45 = localDate43.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap51 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder50.appendTimeZoneShortName(strMap51);
        boolean boolean53 = dateTimeZone49.equals((java.lang.Object) strMap51);
        boolean boolean55 = dateTimeZone49.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter46.withZone(dateTimeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.DateTime dateTime58 = localDate43.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.DateTime dateTime60 = dateTime58.plusHours(69205127);
        int int61 = dateTime60.getSecondOfDay();
        org.joda.time.DateTime.Property property62 = dateTime60.millisOfSecond();
        org.joda.time.DateTime dateTime63 = property62.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property62.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder21.appendShortText(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-360599990L) + "'", long41 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+100:10" + "'", str42, "+100:10");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 66032 + "'", int61 == 66032);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
    }

    @Test
    public void test12774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12774");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.plus(readableDuration5);
        boolean boolean8 = dateTime4.isBefore(69218643L);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withPeriodAdded(readablePeriod9, 69209140);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, 69253738);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(69457497);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69457497 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test12775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12775");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(69206284);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, 69233625);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 69358122);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69632762 + "'", int1 == 69632762);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test12776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12776");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(100);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        boolean boolean15 = localDateTime13.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int21 = localDateTime19.get(dateTimeFieldType20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType20, 0, 69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder25.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder25.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatterBuilder25.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder25.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder25.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder25.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder36.appendMonthOfYearText();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        boolean boolean40 = localDateTime38.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plusYears(59);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withWeekOfWeekyear((int) '#');
        int int45 = localDateTime38.size();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.withYear(54202757);
        org.joda.time.LocalDateTime.Property property48 = localDateTime38.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property48.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder37.appendText(dateTimeFieldType49);
        java.lang.String str51 = dateTimeFieldType49.getName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder24.appendShortText(dateTimeFieldType49);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder24.appendPattern("69230182");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeParser30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "centuryOfEra" + "'", str51, "centuryOfEra");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
    }

    @Test
    public void test12777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12777");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("months");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("10");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test12778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12778");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1970-01-05T23:59:59.999+100:10");
        int int2 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test12779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12779");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        int int8 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone11);
        mutableDateTime12.setTime((long) (short) -1);
        mutableDateTime12.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str18 = mutableDateTime12.toString(dateTimeFormatter17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.monthOfYear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.minuteOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.dayOfYear();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime27 = property24.set("70");
        int int28 = mutableDateTime27.getYearOfEra();
        boolean boolean29 = mutableDateTime12.equals((java.lang.Object) int28);
        java.lang.Object obj30 = mutableDateTime12.clone();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime12.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.addWrapField(69222520);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromMillisOfDay((long) 69206920);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime44 = property40.set("00");
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime44.getZone();
        org.joda.time.DateTime dateTime46 = localTime36.toDateTimeToday(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) -1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableDateTime47.add(readablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap54 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder53.appendTimeZoneShortName(strMap54);
        boolean boolean56 = dateTimeZone52.equals((java.lang.Object) strMap54);
        boolean boolean58 = dateTimeZone52.isStandardOffset((long) (byte) -1);
        java.lang.String str60 = dateTimeZone52.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone52);
        mutableDateTime47.setZone(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime33.toMutableDateTime(dateTimeZone52);
        int int66 = dateTimeZone52.getOffset((long) 69227753);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime6.toMutableDateTime(dateTimeZone52);
        long long71 = dateTimeZone52.adjustOffset((long) 69556408, false);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "00" + "'", str18, "00");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+100:10" + "'", str60, "+100:10");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 360600000 + "'", int66 == 360600000);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 69556408L + "'", long71 == 69556408L);
    }

    @Test
    public void test12780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12780");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("JPN");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jpn" + "'", str4, "jpn");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "jpn" + "'", str5, "jpn");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "jpn" + "'", str6, "jpn");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test12781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12781");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 10);
        org.joda.time.LocalTime localTime11 = property5.addNoWrapToCopy((int) (short) 1);
        int int12 = localTime11.size();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime15 = localTime11.withPeriodAdded(readablePeriod13, 233);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localTime15.getValue(69569100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69569100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test12782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12782");
        java.util.Locale locale1 = new java.util.Locale("-0001-01-11");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor3 = strSet2.iterator();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        int int11 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusWeeks(69222873);
        int int16 = localDateTime15.getMinuteOfHour();
        boolean boolean17 = strSet2.contains((java.lang.Object) int16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 5, chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime20.minusHours((-2022));
        org.joda.time.DateTime.Property property25 = dateTime24.centuryOfEra();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = property25.addWrapFieldToCopy(69222959);
        org.joda.time.DateTime dateTime29 = property25.roundFloorCopy();
        boolean boolean30 = strSet2.remove((java.lang.Object) property25);
        org.joda.time.DateTime dateTime31 = property25.getDateTime();
        org.junit.Assert.assertEquals(locale1.toString(), "-0001-01-11");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 69632852 + "'", int5 == 69632852);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test12783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12783");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property5.addCopy(69207484);
        org.joda.time.LocalTime localTime10 = property5.setCopy(69253140);
        org.joda.time.LocalTime localTime12 = property5.addNoWrapToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localTime12.getValue(69244152);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69244152");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test12784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12784");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int int18 = localDate17.getWeekOfWeekyear();
        int[] intArray19 = localDate17.getValues();
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate23 = localDate17.withFieldAdded(durationFieldType21, 13248);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, 69340431);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 5]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test12785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12785");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        boolean boolean5 = locale1.hasExtensions();
        java.util.Locale locale6 = locale1.stripExtensions();
        java.lang.String str7 = locale6.getDisplayVariant();
        java.lang.String str8 = locale6.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test12786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12786");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test12787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12787");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        int int4 = localDateTime0.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMonths(54202757);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusWeeks(69233410);
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.year();
        int int10 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.plusMinutes(54);
        int int13 = localDateTime0.getYear();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69632923 + "'", int1 == 69632923);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
    }

    @Test
    public void test12788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12788");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime dateTime33 = dateTime29.plusWeeks(69206284);
        java.util.Date date34 = dateTime29.toDate();
        org.joda.time.DateTime dateTime36 = dateTime29.minusSeconds(11);
        boolean boolean37 = dateTime29.isEqualNow();
        org.joda.time.DateTime dateTime40 = dateTime29.withDurationAdded((long) 69278417, 69424895);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap47 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder46.appendTimeZoneShortName(strMap47);
        boolean boolean49 = dateTimeZone45.equals((java.lang.Object) strMap47);
        boolean boolean51 = dateTimeZone45.isStandardOffset((long) (byte) -1);
        long long54 = dateTimeZone45.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str55 = dateTimeZone45.getID();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone45);
        int int57 = localDate56.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property59 = localDate56.property(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType58.getField(chronology60);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        int int63 = dateTimeField61.getMaximumShortTextLength(locale62);
        int int65 = dateTimeField61.getLeapAmount((long) 69218773);
        int int67 = dateTimeField61.get((-360408421L));
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("Italy");
        int int70 = dateTimeField61.getMaximumShortTextLength(locale69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = dateTime40.toString("2022-01-25T17:36:28.346", locale69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Jan 05 19:20:32 GMT+:0:10 1970");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-360599990L) + "'", long54 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+100:10" + "'", str55, "+100:10");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "italy");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test12789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12789");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int int18 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property19 = localDate17.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.DateTimeField dateTimeField22 = property19.getField();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField22.getAsShortText(69229864, locale24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.yearOfCentury();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        long long46 = dateTimeZone37.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str47 = dateTimeZone37.getID();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone37);
        int int49 = localDate48.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property51 = localDate48.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType50.getField(chronology52);
        int int54 = dateTimeField53.getMinimumValue();
        mutableDateTime31.setRounding(dateTimeField53);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime31.copy();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57);
        java.util.GregorianCalendar gregorianCalendar59 = mutableDateTime56.toGregorianCalendar();
        org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar59);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        java.util.TimeZone timeZone65 = dateTimeZone63.toTimeZone();
        boolean boolean67 = dateTimeZone63.equals((java.lang.Object) 69250339);
        org.joda.time.DateTime dateTime68 = localDate60.toDateTimeAtStartOfDay(dateTimeZone63);
        int int69 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.Interval interval70 = localDate60.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "19" + "'", str21, "19");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "69229864" + "'", str25, "69229864");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-360599990L) + "'", long46 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+100:10" + "'", str47, "+100:10");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2922789 + "'", int69 == 2922789);
        org.junit.Assert.assertNotNull(interval70);
    }

    @Test
    public void test12790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12790");
        java.util.Locale locale2 = new java.util.Locale("1972-03-15T12:22", "2022-02-25T19:14:27.552");
        org.junit.Assert.assertEquals(locale2.toString(), "1972-03-15t12:22_2022-02-25T19:14:27.552");
    }

    @Test
    public void test12791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12791");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYear(69204037);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        org.joda.time.DurationField durationField12 = chronology9.hours();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test12792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12792");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDate localDate17 = property15.getLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks(69206920);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendTimeZoneShortName(strMap25);
        boolean boolean27 = dateTimeZone23.equals((java.lang.Object) strMap25);
        boolean boolean29 = dateTimeZone23.isStandardOffset((long) (byte) -1);
        long long33 = dateTimeZone23.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 69206587, dateTimeZone23);
        boolean boolean35 = localDate19.isBefore((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate34.withYearOfEra(69301);
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-360599999L) + "'", long33 == (-360599999L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test12793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12793");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMinutes(0);
        int int15 = localDateTime8.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime8.withMinuteOfHour(69229151);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69229151 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69633006 + "'", int1 == 69633006);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test12794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12794");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        int int21 = localDate20.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property23 = localDate20.property(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType22.getField(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) chronology24, chronology26);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.weekyear();
        org.joda.time.DurationField durationField34 = chronology28.days();
        org.joda.time.DurationField durationField35 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(69206306, 69481268, 69607748, 69415466, 69268034, 65641, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69415466 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test12795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12795");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.roundCeilingCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.plusDays(80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime35.withTime(69293123, 0, 69427551, 69491568);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69293123 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test12796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12796");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime3.add(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone9);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology27, locale29, (java.lang.Integer) 54202800);
        java.lang.String str32 = locale23.getDisplayCountry(locale29);
        java.lang.String str33 = dateTimeZone9.getShortName((long) 69230879, locale23);
        java.lang.String str34 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime35 = localDate0.toDateTimeAtStartOfDay(dateTimeZone9);
        int int36 = localDate0.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap42 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendTimeZoneShortName(strMap42);
        boolean boolean44 = dateTimeZone40.equals((java.lang.Object) strMap42);
        boolean boolean46 = dateTimeZone40.isStandardOffset((long) (byte) -1);
        long long49 = dateTimeZone40.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str50 = dateTimeZone40.getID();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone40);
        int int52 = localDate51.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property54 = localDate51.property(dateTimeFieldType53);
        org.joda.time.LocalDate localDate56 = localDate51.minusYears(69206920);
        int int57 = localDate56.getDayOfYear();
        org.joda.time.LocalDate.Property property58 = localDate56.year();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDate localDate61 = localDate56.withPeriodAdded(readablePeriod59, 69253158);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder62.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder62.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder65.appendSignedDecimal(dateTimeFieldType66, (int) (byte) 10, (int) (short) 10);
        boolean boolean70 = localDate56.isSupported(dateTimeFieldType66);
        boolean boolean71 = localDate0.isSupported(dateTimeFieldType66);
        java.lang.String str72 = dateTimeFieldType66.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:10" + "'", str33, "+100:10");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:10" + "'", str34, "+100:10");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-360599990L) + "'", long49 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+100:10" + "'", str50, "+100:10");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "dayOfYear" + "'", str72, "dayOfYear");
    }

    @Test
    public void test12797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12797");
        java.io.IOException iOException2 = new java.io.IOException("hi!");
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("hi!");
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException8 = new java.io.IOException("2022-02-25T19:18:57.697", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray9 = iOException8.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test12798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12798");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        mutableDateTime9.setZoneRetainFields(dateTimeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone16.toTimeZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, 6);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekyear(22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(575);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(69241950);
        boolean boolean30 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.weekOfWeekyear();
        boolean boolean32 = dateTimeZone16.equals((java.lang.Object) localDateTime27);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = new java.util.Locale("69236146");
        java.util.Locale.setDefault(category34, locale36);
        java.lang.String str38 = dateTimeZone16.getShortName((long) 69470184, locale36);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale36.toString(), "69236146");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+100:10" + "'", str38, "+100:10");
    }

    @Test
    public void test12799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12799");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        java.lang.Object obj5 = timeZone4.clone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test12800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12800");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDate.Property property27 = localDate22.weekyear();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 191509, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.secondOfMinute();
        long long33 = dateTimeField31.roundCeiling((long) 65770);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 66000L + "'", long33 == 66000L);
    }

    @Test
    public void test12801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12801");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone15.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str25 = dateTimeZone15.getID();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone15);
        java.util.TimeZone timeZone27 = dateTimeZone15.toTimeZone();
        boolean boolean28 = timeZone11.hasSameRules(timeZone27);
        boolean boolean29 = timeZone27.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360599990L) + "'", long24 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:10" + "'", str25, "+100:10");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test12802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12802");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        int int5 = mutableDateTime2.getCenturyOfEra();
        int int6 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime2.add(readableDuration7);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test12803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12803");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        boolean boolean2 = dateTimeFormatter1.isOffsetParsed();
        boolean boolean3 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        java.lang.String str7 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.era();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getDisplayScript();
        java.lang.String str18 = locale14.getDisplayCountry(locale15);
        java.lang.String str19 = locale15.getISO3Language();
        java.lang.String str20 = locale12.getDisplayLanguage(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 69223173, chronology6, locale12, (java.lang.Integer) 69478265, 69329212);
        org.joda.time.DateTimeField dateTimeField24 = chronology6.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Francia" + "'", str18, "Francia");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ita" + "'", str19, "ita");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test12804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12804");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale7);
        java.lang.String str9 = locale4.getDisplayName(locale7);
        java.lang.String str10 = locale7.getISO3Country();
        java.lang.String str12 = locale7.getUnicodeLocaleType("10");
        java.lang.String str13 = locale7.getDisplayVariant();
        java.util.Set<java.lang.String> strSet14 = locale7.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray15 = strSet14.toArray();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais (Canada)" + "'", str9, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FRA" + "'", str10, "FRA");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test12805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12805");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        long long7 = dateTimeParserBucket5.computeMillis();
        long long8 = dateTimeParserBucket5.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long13 = dateTimeZone10.adjustOffset((long) 69254908, true);
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        boolean boolean20 = locale16.hasExtensions();
        java.util.Locale locale21 = locale16.stripExtensions();
        java.lang.String str22 = dateTimeZone10.getName((long) 69309040, locale21);
        int int24 = dateTimeZone10.getOffsetFromLocal((long) 69298300);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) long8, dateTimeZone10);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-291396175L) + "'", long7 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-291396175L) + "'", long8 == (-291396175L));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 69254908L + "'", long13 == 69254908L);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test12806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12806");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendTimeZoneShortName(strMap3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendClockhourOfHalfday(69206284);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        mutableDateTime9.setTime((long) (short) -1);
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean14 = mutableDateTime9.isSupported(dateTimeFieldType13);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder6.appendText(dateTimeFieldType13);
        int int16 = localDateTime0.indexOf(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getRangeDurationType();
        java.lang.String str19 = durationFieldType18.getName();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime0.withFieldAdded(durationFieldType18, 65762);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.lang.String str25 = locale24.getDisplayVariant();
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale24.getDisplayScript(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter22.withLocale(locale24);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.monthOfYear();
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale37.getISO3Language();
        int int39 = property36.getMaximumShortTextLength(locale37);
        java.lang.String str40 = dateTimeZone31.getShortName((long) 69213298, locale37);
        long long42 = dateTimeZone31.convertUTCToLocal((long) 69218643);
        boolean boolean44 = dateTimeZone31.equals((java.lang.Object) 69216412);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter22.withZone(dateTimeZone31);
        java.lang.String str46 = localDateTime21.toString(dateTimeFormatter22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime21.withHourOfDay(65904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65904 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69633352 + "'", int1 == 69633352);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "minutes" + "'", str19, "minutes");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 69218643L + "'", long42 == 69218643L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-102" + "'", str46, "2022-102");
    }

    @Test
    public void test12807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12807");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property3.getLocalDateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, 69607188);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69633376 + "'", int1 == 69633376);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12808");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime localTime15 = localTime11.plusMinutes((int) (short) -1);
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes(69207366);
        org.joda.time.LocalTime localTime19 = localTime17.minusMinutes(6);
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.LocalTime.Property property21 = localTime19.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = localTime19.toString("2022-01-25T19:15:57.391");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test12809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12809");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.minus(readableDuration37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) (-26));
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfWeek(3);
        org.joda.time.DateTime dateTime45 = dateTime41.minusMillis(0);
        org.joda.time.DateTime.Property property46 = dateTime45.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test12810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12810");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        boolean boolean2 = dateTime1.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay3 = dateTime1.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendTimeZoneShortName(strMap9);
        boolean boolean11 = dateTimeZone7.equals((java.lang.Object) strMap9);
        boolean boolean13 = dateTimeZone7.isStandardOffset((long) (byte) -1);
        long long16 = dateTimeZone7.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str17 = dateTimeZone7.getID();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone7);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight20 = localDate18.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendTimeZoneShortName(strMap26);
        boolean boolean28 = dateTimeZone24.equals((java.lang.Object) strMap26);
        boolean boolean30 = dateTimeZone24.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter21.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime33 = localDate18.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours(69205127);
        org.joda.time.DateTime.Property property36 = dateTime35.monthOfYear();
        org.joda.time.DateTime dateTime38 = property36.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property39 = dateTime38.year();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateMidnight dateMidnight41 = dateTime38.toDateMidnight();
        org.joda.time.DateTime dateTime42 = dateTime38.withEarlierOffsetAtOverlap();
        java.util.Locale locale43 = null;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        boolean boolean45 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime48 = dateTime1.withPeriodAdded(readablePeriod46, 56);
        org.joda.time.DateTime.Property property49 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime50 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime51 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths(69288257);
        org.joda.time.DateTime dateTime55 = dateTime53.minusWeeks(69247268);
        java.lang.String str56 = dateTime53.toString();
        org.joda.time.DateTime dateTime58 = dateTime53.withMillis((long) 69336501);
        org.joda.time.DateTime dateTime60 = dateTime53.plusMillis(69339874);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = dateTime53.withMonthOfYear(69621390);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69621390 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-360599990L) + "'", long16 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+100:10" + "'", str17, "+100:10");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=182244194748633426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=5777058,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=235,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=20,SECOND=33,MILLISECOND=426,ZONE_OFFSET=360600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "5775991-06-05T00:00:00.000+100:10" + "'", str56, "5775991-06-05T00:00:00.000+100:10");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test12811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12811");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        int int18 = localDate14.size();
        org.joda.time.DateMidnight dateMidnight19 = localDate14.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate14.withPeriodAdded(readablePeriod20, 69243332);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.monthOfYear();
        long long27 = mutableDateTime25.getMillis();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime25.add(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap35 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder34.appendTimeZoneShortName(strMap35);
        boolean boolean37 = dateTimeZone33.equals((java.lang.Object) strMap35);
        boolean boolean39 = dateTimeZone33.isStandardOffset((long) (byte) -1);
        long long42 = dateTimeZone33.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str43 = dateTimeZone33.getID();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime25.toMutableDateTime(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime45.add(readablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime45.getZone();
        org.joda.time.DateTime dateTime50 = localDate22.toDateTimeAtStartOfDay(dateTimeZone49);
        org.joda.time.Instant instant51 = dateTime50.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-360599990L) + "'", long42 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+100:10" + "'", str43, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(instant51);
    }

    @Test
    public void test12812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12812");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(69476625, 999, 1997, 69596473, (-26), 66004, 69430603);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69596473 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime10 = property7.addWrapFieldToCopy(69222959);
        int int11 = property7.getMaximumValue();
        org.joda.time.DateTime dateTime12 = property7.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2922789 + "'", int11 == 2922789);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test12814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12814");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendTimeZoneShortName(strMap9);
        boolean boolean11 = dateTimeZone7.equals((java.lang.Object) strMap9);
        boolean boolean13 = dateTimeZone7.isStandardOffset((long) (byte) -1);
        long long16 = dateTimeZone7.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str17 = dateTimeZone7.getID();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone7);
        int int19 = localDate18.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property21 = localDate18.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType20.getField(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) chronology22, chronology24);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.minutes();
        org.joda.time.Chronology chronology28 = chronology26.withUTC();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.dayOfWeek();
        long long37 = chronology28.add(0L, (long) 69293347, 69336607);
        org.joda.time.DurationField durationField38 = chronology28.weeks();
        org.joda.time.DateTimeField dateTimeField39 = chronology28.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(0, 0, 69384073, 69547980, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69384073 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-360599990L) + "'", long16 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+100:10" + "'", str17, "+100:10");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4804565568653629L + "'", long37 == 4804565568653629L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test12815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12815");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone3.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 69206587, dateTimeZone3);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599999L) + "'", long13 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test12816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12816");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendSecondOfDay(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder12.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatterBuilder16.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder11.appendOptional(dateTimeParser17);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendDayOfMonth((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter21.getPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder23.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder23.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatterBuilder23.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder23.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder30.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.append(dateTimeFormatter34);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder35.appendWeekyear((int) (short) 10, 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder39.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder39.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatterBuilder39.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder38.appendOptional(dateTimeParser44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder46.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder46.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatterBuilder50.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder52.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder52.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser57 = dateTimeFormatterBuilder52.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder58.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder58.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser63 = dateTimeFormatterBuilder62.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder64.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder64.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser69 = dateTimeFormatterBuilder64.toParser();
        org.joda.time.format.DateTimeParser[] dateTimeParserArray70 = new org.joda.time.format.DateTimeParser[] { dateTimeParser44, dateTimeParser51, dateTimeParser57, dateTimeParser63, dateTimeParser69 };
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder18.append(dateTimePrinter22, dateTimeParserArray70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = dateTimeFormatterBuilder71.appendMillisOfSecond(51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder74 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder74.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder79 = dateTimeFormatterBuilder77.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder81 = dateTimeFormatterBuilder77.appendDayOfWeek(69224426);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone83);
        mutableDateTime84.setTime((long) (short) -1);
        mutableDateTime84.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str90 = mutableDateTime84.toString(dateTimeFormatter89);
        org.joda.time.format.DateTimeParser dateTimeParser91 = dateTimeFormatter89.getParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder92 = dateTimeFormatterBuilder77.appendOptional(dateTimeParser91);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder93 = dateTimeFormatterBuilder73.appendOptional(dateTimeParser91);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeParser17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeParser51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeParser57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertNotNull(dateTimeParser63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeParser69);
        org.junit.Assert.assertNotNull(dateTimeParserArray70);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder73);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder79);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder81);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "00" + "'", str90, "00");
        org.junit.Assert.assertNotNull(dateTimeParser91);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder92);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder93);
    }

    @Test
    public void test12817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12817");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, 6);
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test12818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12818");
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        int int23 = localDate22.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property25 = localDate22.property(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType24.getField(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) chronology26, chronology28);
        org.joda.time.LocalDate localDate31 = localDate29.minusDays(0);
        org.joda.time.LocalDate.Property property32 = localDate31.weekyear();
        boolean boolean34 = property32.equals((java.lang.Object) "secondOfMinute");
        org.joda.time.LocalDate localDate36 = property32.addWrapFieldToCopy(69210404);
        org.joda.time.LocalDate localDate38 = localDate36.minusDays(0);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(429818773L, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.Chronology chronology42 = chronology39.withUTC();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(69295725, 86399999, 69440220, 69218709, 69350819, 69336999, 69305834, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69218709 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test12819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12819");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfCentury();
        int int14 = property3.getDifference((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime16 = property3.add(69210165);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone18);
        mutableDateTime19.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfCentury();
        mutableDateTime24.addDays((int) (short) -1);
        int int28 = mutableDateTime24.getYear();
        boolean boolean29 = mutableDateTime19.isEqual((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.monthOfYear();
        int int34 = mutableDateTime32.getWeekOfWeekyear();
        mutableDateTime32.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean38 = mutableDateTime32.isSupported(dateTimeFieldType37);
        boolean boolean39 = mutableDateTime24.isSupported(dateTimeFieldType37);
        int int40 = mutableDateTime24.getEra();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime24.minuteOfDay();
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime24);
        java.util.GregorianCalendar gregorianCalendar43 = mutableDateTime16.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar43);
        int int45 = localDateTime44.size();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusMillis(69402676);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(gregorianCalendar43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test12820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12820");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 5, chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((-2022));
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime31.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.minus(readablePeriod35);
        org.joda.time.DateTime dateTime38 = dateTime31.plusYears(69304303);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test12821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12821");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        int int5 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter23.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = localDate20.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 59, dateTimeZone40);
        boolean boolean42 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime41);
        int int43 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime37);
        mutableDateTime2.setYear(13254);
        int int46 = mutableDateTime2.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setHourOfDay(250);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 250 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1439 + "'", int46 == 1439);
    }

    @Test
    public void test12822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12822");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int2 = localDate0.indexOf(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withCenturyOfEra(3);
        int int5 = localDate0.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localDate0.get(dateTimeFieldType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
    }

    @Test
    public void test12823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12823");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1969L, 0);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds(99);
        int int20 = dateTime19.getMillisOfSecond();
        boolean boolean21 = dateTime19.isBeforeNow();
        boolean boolean22 = dateTime19.isBeforeNow();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 709 + "'", int20 == 709);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test12824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12824");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 10);
        org.joda.time.LocalTime localTime11 = property5.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime13 = property5.addNoWrapToCopy(69236559);
        int int14 = localTime13.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = localTime13.getField(69574104);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69574104");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 56 + "'", int14 == 56);
    }

    @Test
    public void test12825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12825");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType18.getField(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) chronology20, chronology22);
        org.joda.time.LocalDate localDate25 = localDate23.minusDays(0);
        org.joda.time.LocalDate.Property property26 = localDate25.weekyear();
        boolean boolean28 = property26.equals((java.lang.Object) "secondOfMinute");
        org.joda.time.LocalDate localDate30 = property26.addWrapFieldToCopy(69210404);
        org.joda.time.LocalDate localDate32 = localDate30.minusDays(0);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(429818773L, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 65631, chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.minuteOfHour();
        long long39 = dateTimeField37.roundHalfFloor((long) 69465961);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 69480000L + "'", long39 == 69480000L);
    }

    @Test
    public void test12826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12826");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundFloorCopy();
        int int10 = localDateTime9.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69633751 + "'", int1 == 69633751);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test12827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12827");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.append(dateTimeFormatter5);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder6.appendFractionOfDay(69305049, 69392585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder6.appendMinuteOfDay(65657);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendTwoDigitYear(69533475, false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
    }

    @Test
    public void test12828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12828");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.getEra();
        org.joda.time.Chronology chronology6 = localDateTime0.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.year();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12829");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder1.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder1.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendSignedDecimal(dateTimeFieldType5, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendTimeZoneId();
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatterBuilder11.toParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser15);
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(writer17, (long) 69278810);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeParser15);
    }

    @Test
    public void test12830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12830");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = locale9.getDisplayVariant();
        java.lang.String str12 = property5.getAsText(locale9);
        org.joda.time.LocalTime localTime13 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime14 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime16 = property5.addCopy(69231758);
        java.lang.String str17 = property5.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10" + "'", str17, "10");
    }

    @Test
    public void test12831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12831");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        int int6 = mutableDateTime2.getYear();
        org.joda.time.Instant instant7 = mutableDateTime2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        mutableDateTime2.setZoneRetainFields(dateTimeZone10);
        int int12 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.yearOfCentury();
        int int14 = mutableDateTime2.getEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test12832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12832");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusHours(20);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test12833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12833");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone2.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap18);
        boolean boolean20 = dateTimeZone16.equals((java.lang.Object) strMap18);
        boolean boolean22 = dateTimeZone16.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter13.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long26 = dateTimeZone2.getMillisKeepLocal(dateTimeZone16, (long) 10);
        long long29 = dateTimeZone2.convertLocalToUTC((long) 69222959, true);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        long long46 = dateTimeZone37.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str47 = dateTimeZone37.getID();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone37);
        int int49 = localDate48.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property51 = localDate48.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType50.getField(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) chronology52, chronology54);
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.months();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology56);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.minuteOfHour();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology56);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 69207366, chronology56);
        org.joda.time.LocalDate.Property property63 = localDate62.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.yearOfCentury();
        mutableDateTime66.addDays((int) (short) -1);
        mutableDateTime66.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime66.hourOfDay();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime66.era();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone75);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime76.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime79 = property77.add((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone81);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.monthOfYear();
        java.util.Locale locale84 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str85 = locale84.getISO3Language();
        int int86 = property83.getMaximumShortTextLength(locale84);
        java.lang.String str87 = property77.getAsText(locale84);
        java.lang.String str88 = locale84.getLanguage();
        int int89 = property73.getMaximumTextLength(locale84);
        java.lang.String str90 = property63.getAsShortText(locale84);
        java.util.Locale locale91 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet92 = locale91.getExtensionKeys();
        java.util.Locale locale93 = java.util.Locale.FRENCH;
        java.lang.String str94 = locale91.getDisplayScript(locale93);
        java.lang.String str95 = locale84.getDisplayCountry(locale93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime96 = property31.set("2022-01-25T17:33:49.050", locale84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-01-25T17:33:49.050\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599999L) + "'", long12 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-291377041L) + "'", long29 == (-291377041L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-360599990L) + "'", long46 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+100:10" + "'", str47, "+100:10");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fra" + "'", str85, "fra");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "70" + "'", str87, "70");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "fr" + "'", str88, "fr");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "jeu." + "'", str90, "jeu.");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Canada" + "'", str95, "Canada");
    }

    @Test
    public void test12834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12834");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendTimeZoneShortName(strMap8);
        boolean boolean10 = dateTimeZone6.equals((java.lang.Object) strMap8);
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) (byte) -1);
        long long15 = dateTimeZone6.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str16 = dateTimeZone6.getID();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone6);
        int int18 = localDate17.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property20 = localDate17.property(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType19.getField(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) chronology21, chronology23);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime2.toMutableDateTime(chronology25);
        mutableDateTime2.setSecondOfDay((int) '4');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime2.weekyear();
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList35);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap44 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder43.appendTimeZoneShortName(strMap44);
        boolean boolean46 = dateTimeZone42.equals((java.lang.Object) strMap44);
        boolean boolean48 = dateTimeZone42.isStandardOffset((long) (byte) -1);
        long long51 = dateTimeZone42.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str52 = dateTimeZone42.getID();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone42);
        int int54 = localDate53.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property56 = localDate53.property(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap62 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder61.appendTimeZoneShortName(strMap62);
        boolean boolean64 = dateTimeZone60.equals((java.lang.Object) strMap62);
        boolean boolean66 = dateTimeZone60.isStandardOffset((long) (byte) -1);
        long long69 = dateTimeZone60.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str70 = dateTimeZone60.getID();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone60);
        int int72 = localDate71.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property74 = localDate71.property(dateTimeFieldType73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType73.getField(chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) chronology75, chronology77);
        org.joda.time.Chronology chronology79 = localDate78.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.minutes();
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType55.getField(chronology79);
        java.util.Locale locale82 = java.util.Locale.JAPAN;
        java.lang.String str83 = locale82.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology79, locale82, (java.lang.Integer) 0, 54202800);
        boolean boolean87 = strList35.remove((java.lang.Object) chronology79);
        org.joda.time.DateTimeField dateTimeField88 = chronology79.clockhourOfDay();
        org.joda.time.DurationField durationField89 = chronology79.months();
        mutableDateTime2.setChronology(chronology79);
        org.joda.time.DateTimeZone dateTimeZone91 = null;
        org.joda.time.Chronology chronology92 = chronology79.withZone(dateTimeZone91);
        org.joda.time.DurationField durationField93 = chronology92.weekyears();
        org.joda.time.MutableDateTime mutableDateTime94 = new org.joda.time.MutableDateTime(chronology92);
        mutableDateTime94.addMonths(69330097);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-360599990L) + "'", long15 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:10" + "'", str16, "+100:10");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-360599990L) + "'", long51 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+100:10" + "'", str52, "+100:10");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-360599990L) + "'", long69 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+100:10" + "'", str70, "+100:10");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test12835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12835");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval2 = localDate0.toInterval();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate5 = localDate0.withPeriodAdded(readablePeriod3, 12);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate0.plus(readablePeriod6);
        int int8 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property9 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate11 = localDate0.plusYears(69206284);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone13);
        mutableDateTime14.setTime((long) (short) -1);
        mutableDateTime14.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str20 = mutableDateTime14.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.monthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.minuteOfDay();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfYear();
        org.joda.time.DurationField durationField27 = property26.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.set("70");
        int int30 = mutableDateTime29.getYearOfEra();
        boolean boolean31 = mutableDateTime14.equals((java.lang.Object) int30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        java.lang.String str42 = dateTimeZone34.getShortName((long) 69203825);
        mutableDateTime14.setZoneRetainFields(dateTimeZone34);
        java.lang.String str45 = dateTimeZone34.getShortName((long) 69219412);
        org.joda.time.Interval interval46 = localDate11.toInterval(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar51 = mutableDateTime49.toGregorianCalendar();
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.monthOfYear();
        long long57 = mutableDateTime55.getMillis();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime55.add(readableDuration58);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap65 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder64.appendTimeZoneShortName(strMap65);
        boolean boolean67 = dateTimeZone63.equals((java.lang.Object) strMap65);
        boolean boolean69 = dateTimeZone63.isStandardOffset((long) (byte) -1);
        long long72 = dateTimeZone63.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str73 = dateTimeZone63.getID();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime75 = mutableDateTime55.toMutableDateTime(dateTimeZone63);
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.now(dateTimeZone63);
        org.joda.time.DateTime dateTime77 = localDate52.toDateTimeAtMidnight(dateTimeZone63);
        org.joda.time.DateTime dateTime78 = localDate11.toDateTimeAtMidnight(dateTimeZone63);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.plus(readablePeriod79);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00" + "'", str20, "00");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+100:10" + "'", str42, "+100:10");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-360599990L) + "'", long72 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+100:10" + "'", str73, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test12836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12836");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        mutableDateTime9.setTime((long) (short) -1);
        mutableDateTime9.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str15 = mutableDateTime9.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology16 = mutableDateTime9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime5.toMutableDateTime(chronology16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime5.plus(readableDuration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.monthOfYear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.minuteOfDay();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.dayOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.secondOfMinute();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.era();
        mutableDateTime22.setYear(69209140);
        boolean boolean30 = dateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTime.Property property31 = dateTime5.dayOfYear();
        int int32 = dateTime5.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "00" + "'", str15, "00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 25 + "'", int32 == 25);
    }

    @Test
    public void test12837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12837");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withDefaultYear(69422523);
        java.lang.StringBuffer stringBuffer5 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfWeek();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYear(69264803);
        int int25 = localDate22.size();
        int int26 = localDate22.getDayOfWeek();
        int int27 = localDate22.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer5, (org.joda.time.ReadablePartial) localDate22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
    }

    @Test
    public void test12838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12838");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays(0);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate26 = localDate23.plusWeeks(0);
        int int27 = localDate26.getYearOfEra();
        int int28 = localDate26.getDayOfYear();
        org.joda.time.LocalDate.Property property29 = localDate26.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.ISODateTimeFormat.time();
        org.joda.time.Chronology chronology31 = dateTimeFormatter30.getChronolgy();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(10L);
        org.joda.time.DateMidnight dateMidnight34 = localDate33.toDateMidnight();
        java.lang.String str35 = dateTimeFormatter30.print((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        long long38 = dateTimeZone36.nextTransition((long) 69290717);
        java.lang.String str39 = dateTimeZone36.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter30.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = localDate26.toDateTimeAtStartOfDay(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(69491568);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69491568 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 56 + "'", int28 == 56);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "00:00:00.000+100:10" + "'", str35, "00:00:00.000+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 69290717L + "'", long38 == 69290717L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:10" + "'", str39, "+100:10");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test12839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12839");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((int) (short) 100);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        int int10 = localDateTime3.getEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.plusSeconds(10);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69634123 + "'", int1 == 69634123);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test12840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12840");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendTwoDigitWeekyear(69214930);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder9.appendTimeZoneName();
        boolean boolean11 = dateTimeFormatterBuilder10.canBuildFormatter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test12841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12841");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType23.getField(chronology25);
        org.joda.time.DurationField durationField27 = dateTimeField26.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendTimeZoneShortName(strMap33);
        boolean boolean35 = dateTimeZone31.equals((java.lang.Object) strMap33);
        boolean boolean37 = dateTimeZone31.isStandardOffset((long) (byte) -1);
        long long40 = dateTimeZone31.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str41 = dateTimeZone31.getID();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone31);
        int int43 = localDate42.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property45 = localDate42.property(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType44.getField(chronology46);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        int int49 = dateTimeField47.getMaximumShortTextLength(locale48);
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        int int51 = dateTimeField47.getMaximumTextLength(locale50);
        java.util.Locale locale52 = locale50.stripExtensions();
        java.lang.String str53 = locale50.toLanguageTag();
        int int54 = dateTimeField26.getMaximumShortTextLength(locale50);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap60 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder59.appendTimeZoneShortName(strMap60);
        boolean boolean62 = dateTimeZone58.equals((java.lang.Object) strMap60);
        boolean boolean64 = dateTimeZone58.isStandardOffset((long) (byte) -1);
        long long67 = dateTimeZone58.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str68 = dateTimeZone58.getID();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone58);
        int int70 = localDate69.getYearOfEra();
        org.joda.time.LocalDate localDate72 = localDate69.withYearOfCentury(70);
        int int73 = localDate72.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property74 = localDate72.centuryOfEra();
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.lang.String str76 = property74.getAsText(locale75);
        int int77 = dateTimeField26.getMaximumShortTextLength(locale75);
        java.lang.String str78 = locale75.getDisplayScript();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-360599990L) + "'", long40 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+100:10" + "'", str41, "+100:10");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fr-CA" + "'", str53, "fr-CA");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-360599990L) + "'", long67 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+100:10" + "'", str68, "+100:10");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "19" + "'", str76, "19");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test12842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12842");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        long long45 = dateTimeZone36.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str46 = dateTimeZone36.getID();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone36);
        int int48 = localDate47.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property50 = localDate47.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType49.getField(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) chronology51, chronology53);
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        org.joda.time.Chronology chronology62 = chronology55.withZone(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime29.toMutableDateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime65 = property64.roundHalfFloorCopy();
        org.joda.time.Instant instant66 = dateTime65.toInstant();
        org.joda.time.DateTime dateTime67 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime69 = dateTime65.plusDays(245);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-360599990L) + "'", long45 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+100:10" + "'", str46, "+100:10");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test12843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12843");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendMonthOfYear(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendLiteral("English (United States)");
        boolean boolean8 = dateTimeFormatterBuilder5.canBuildFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder5.appendTimeZoneId();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
    }

    @Test
    public void test12844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12844");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(69218047);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(69282741);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths(69336501);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69634226 + "'", int1 == 69634226);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12845");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, 5);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.minutes();
        org.joda.time.DurationField durationField54 = chronology52.millis();
        org.joda.time.DurationField durationField55 = chronology52.centuries();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.dayOfMonth();
        java.lang.String str59 = dateTimeField57.getAsShortText((long) 69318354);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
    }

    @Test
    public void test12846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12846");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendLiteral('4');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendFixedDecimal(dateTimeFieldType13, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder15.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendDayOfYear(308);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder15.appendWeekOfWeekyear(69440567);
        java.lang.Class<?> wildcardClass21 = dateTimeFormatterBuilder15.getClass();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test12847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12847");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate localDate3 = localDate1.withYear(69208090);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(19);
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property6.withMinimumValue();
        org.joda.time.LocalDate localDate10 = property6.withMaximumValue();
        java.lang.String str11 = property6.getAsShortText();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "5" + "'", str11, "5");
    }

    @Test
    public void test12848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12848");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("Francia", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12849");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        boolean boolean3 = localDateTime1.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusYears(1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((-32));
        org.joda.time.Chronology chronology10 = localDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.monthOfYear();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = locale15.getISO3Language();
        int int17 = property14.getMaximumShortTextLength(locale15);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale18);
        java.lang.String str20 = locale15.getDisplayName(locale18);
        java.lang.String str21 = locale18.getISO3Country();
        java.lang.String str23 = locale18.getUnicodeLocaleType("10");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 86399, chronology10, locale18, (java.lang.Integer) (-69327706), 69290253);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeParserBucket26.saveField(dateTimeFieldType27, 69551485);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fra" + "'", str16, "fra");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais (Canada)" + "'", str20, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FRA" + "'", str21, "FRA");
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test12850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12850");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        boolean boolean9 = strList7.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        boolean boolean19 = strList17.equals((java.lang.Object) (-1));
        boolean boolean20 = strList7.retainAll((java.util.Collection<java.lang.String>) strList17);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendTimeZoneShortName(strMap26);
        boolean boolean28 = dateTimeZone24.equals((java.lang.Object) strMap26);
        boolean boolean30 = dateTimeZone24.isStandardOffset((long) (byte) -1);
        long long33 = dateTimeZone24.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str34 = dateTimeZone24.getID();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone24);
        org.joda.time.LocalDate.Property property36 = localDate35.dayOfWeek();
        java.lang.String str37 = property36.getAsString();
        org.joda.time.LocalDate localDate38 = property36.getLocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.centuryOfEra();
        boolean boolean40 = strList7.remove((java.lang.Object) localDate38);
        org.joda.time.LocalDate localDate42 = localDate38.plusYears(69325009);
        org.joda.time.LocalDate localDate44 = localDate38.withWeekyear(54392);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-360599990L) + "'", long33 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:10" + "'", str34, "+100:10");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test12851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12851");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder2.setLanguageTag("2022-02-25T19:20:00.158+100:10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test12852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12852");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime2.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfMonth((int) (byte) 1);
        int int10 = localDateTime5.size();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = property14.set("00");
        org.joda.time.DateTime dateTime19 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded(1969L, 0);
        int int23 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime22.getDayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
    }

    @Test
    public void test12853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12853");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        int int5 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter23.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = localDate20.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 59, dateTimeZone40);
        boolean boolean42 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime41);
        int int43 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime45 = dateTime37.minusSeconds(69205874);
        org.joda.time.DateTime dateTime46 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.minuteOfDay();
        org.joda.time.DateTime dateTime49 = property47.addWrapFieldToCopy(65627);
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test12854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12854");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(69241950);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusDays(69207019);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, 69229344);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69634426 + "'", int1 == 69634426);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test12855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12855");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.monthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfYear();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.set("70");
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = property9.getAsShortText(locale13);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale13);
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder15.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder15.removeUnicodeLocaleAttribute("1970-W02-1T04:10:00.001+100:10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970-W02-1T04:10:00.001+100:10 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "70" + "'", str14, "70");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
    }

    @Test
    public void test12856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12856");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        boolean boolean8 = mutableDateTime5.isEqual((long) (short) 1);
        mutableDateTime5.setTime((long) 69586025);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test12857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12857");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.setMillisOfDay((int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        long long14 = dateTimeZone8.nextTransition((long) 1969);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime2.toMutableDateTime(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setMonthOfYear(69205091);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69205091 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1969L + "'", long14 == 1969L);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test12858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12858");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.setMillisOfDay((int) '#');
        int int6 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundFloor();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test12859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12859");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        int int18 = localDate14.getEra();
        org.joda.time.LocalDate.Property property19 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate20 = property19.withMaximumValue();
        int int21 = localDate20.getDayOfMonth();
        int int22 = localDate20.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 93 + "'", int22 == 93);
    }

    @Test
    public void test12860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12860");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYearOfEra(1970);
        org.joda.time.Chronology chronology7 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.plusMonths(5692);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusYears(9);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69634505 + "'", int1 == 69634505);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test12861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12861");
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology8, locale10, (java.lang.Integer) 54202800);
        java.util.Locale locale13 = dateTimeParserBucket12.getLocale();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        dateTimeParserBucket12.setPivotYear((java.lang.Integer) 69221500);
        long long17 = dateTimeParserBucket12.computeMillis();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(15000, 69381577, 69499718, 477, 69408632, 69507247, 69331040, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 477 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-291396175L) + "'", long17 == (-291396175L));
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test12862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12862");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime2.toGregorianCalendar();
        java.lang.String str5 = mutableDateTime2.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        long long14 = dateTimeZone8.nextTransition((long) 1969);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean16 = mutableDateTime2.equals((java.lang.Object) dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        boolean boolean19 = localDateTime17.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean23 = localDateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        java.lang.String str25 = durationFieldType24.getName();
        mutableDateTime2.add(durationFieldType24, 69229172);
        org.joda.time.Chronology chronology28 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.hourOfDay();
        org.joda.time.DurationField durationField31 = dateTimeField30.getRangeDurationField();
        long long33 = dateTimeField30.roundFloor((long) 69390828);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        long long46 = dateTimeZone37.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str47 = dateTimeZone37.getID();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone37);
        int int49 = localDate48.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property51 = localDate48.property(dateTimeFieldType50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap57 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder56.appendTimeZoneShortName(strMap57);
        boolean boolean59 = dateTimeZone55.equals((java.lang.Object) strMap57);
        boolean boolean61 = dateTimeZone55.isStandardOffset((long) (byte) -1);
        long long64 = dateTimeZone55.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str65 = dateTimeZone55.getID();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone55);
        int int67 = localDate66.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property69 = localDate66.property(dateTimeFieldType68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType68.getField(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((java.lang.Object) chronology70, chronology72);
        org.joda.time.Chronology chronology74 = localDate73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.minutes();
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType50.getField(chronology74);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.year();
        org.joda.time.DurationField durationField78 = chronology74.centuries();
        org.joda.time.DateTimeZone dateTimeZone79 = chronology74.getZone();
        boolean boolean81 = dateTimeZone79.isStandardOffset((long) 69313247);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((java.lang.Object) dateTimeField30, dateTimeZone79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str5, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1969L + "'", long14 == 1969L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "days" + "'", str25, "days");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 67800000L + "'", long33 == 67800000L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-360599990L) + "'", long46 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+100:10" + "'", str47, "+100:10");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-360599990L) + "'", long64 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+100:10" + "'", str65, "+100:10");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test12863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12863");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTwoDigitYear(69210934);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.property(dateTimeFieldType9);
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime15 = property10.addWrapFieldToCopy((-1));
        org.joda.time.LocalDateTime localDateTime16 = property10.getLocalDateTime();
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology19, locale21, (java.lang.Integer) 54202800);
        java.util.Locale locale24 = dateTimeParserBucket23.getLocale();
        long long25 = dateTimeParserBucket23.computeMillis();
        long long26 = dateTimeParserBucket23.computeMillis();
        long long29 = dateTimeParserBucket23.computeMillis(false, "minutes");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder30.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder30.appendHourOfDay(69215043);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendMillisOfDay(19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder36.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder36.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatterBuilder36.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder36.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder36.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder36.appendClockhourOfHalfday(100);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        boolean boolean51 = localDateTime49.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int57 = localDateTime55.get(dateTimeFieldType56);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder36.appendDecimal(dateTimeFieldType56, 0, 69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder35.appendFixedSignedDecimal(dateTimeFieldType56, 25);
        dateTimeParserBucket23.saveField(dateTimeFieldType56, 21);
        org.joda.time.DateTime.Property property65 = dateTime17.property(dateTimeFieldType56);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder4.appendText(dateTimeFieldType56);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder4.appendDayOfYear(69236220);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder70 = dateTimeFormatterBuilder4.appendSecondOfDay(69305926);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder4.appendMinuteOfDay(68458327);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69634554 + "'", int8 == 69634554);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-291396175L) + "'", long25 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-291396175L) + "'", long26 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-291396175L) + "'", long29 == (-291396175L));
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeParser41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder70);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
    }

    @Test
    public void test12864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12864");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        java.lang.String str10 = dateTimeZone2.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone2);
        java.lang.String str13 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.monthOfYear();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale19.getISO3Language();
        int int21 = property18.getMaximumShortTextLength(locale19);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale19.getDisplayName(locale22);
        java.lang.String str25 = locale22.getVariant();
        java.lang.String str26 = dateTimeZone2.getName((long) 69204394, locale22);
        java.lang.String str27 = locale22.getVariant();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.getDefault(category28);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale.setDefault(category28, locale31);
        java.lang.String str34 = locale22.getDisplayScript(locale31);
        java.util.Set<java.lang.String> strSet35 = locale31.getUnicodeLocaleAttributes();
        strSet35.clear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:10" + "'", str10, "+100:10");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fran\347ais (Canada)" + "'", str24, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+100:10" + "'", str26, "+100:10");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test12865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12865");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder2.appendWeekOfWeekyear(69213298);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder2.appendYearOfCentury(0, 69206843);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone11);
        mutableDateTime12.setTime((long) (short) -1);
        int int15 = mutableDateTime12.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean17 = mutableDateTime12.isSupported(dateTimeFieldType16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder9.appendText(dateTimeFieldType16);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.parse("2023-02-01T19:13:37.076");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder21.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder21.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatterBuilder21.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder21.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder21.appendFractionOfHour(100, 5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder32.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder32.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder35.appendSignedDecimal(dateTimeFieldType36, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder21.appendText(dateTimeFieldType36);
        java.lang.String str41 = dateTimeFieldType36.getName();
        boolean boolean42 = mutableDateTime20.isSupported(dateTimeFieldType36);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder18.appendFixedSignedDecimal(dateTimeFieldType36, 69253057);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder44.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendDayOfMonth(69509790);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeParser26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "dayOfYear" + "'", str41, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
    }

    @Test
    public void test12866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12866");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.clearExtensions();
        java.util.Locale.Builder builder9 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder4.setUnicodeLocaleKeyword("dayOfMonth", "Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: dayOfMonth [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12867");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(44);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12868");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 69379405);
    }

    @Test
    public void test12869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12869");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendYearOfCentury(69221666, 69222520);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap30);
        boolean boolean32 = dateTimeZone28.equals((java.lang.Object) strMap30);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter25.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = localDate22.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime39 = dateTime37.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.DateTime dateTime41 = property40.roundCeilingCopy();
        org.joda.time.DateTime dateTime42 = property40.getDateTime();
        org.joda.time.DateTime dateTime44 = dateTime42.withYear(69207073);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.monthOfYear();
        int int49 = mutableDateTime47.getWeekOfWeekyear();
        mutableDateTime47.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean53 = mutableDateTime47.isSupported(dateTimeFieldType52);
        org.joda.time.DateTime dateTime55 = dateTime42.withField(dateTimeFieldType52, 38);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType52, 69221560);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder4.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder58.appendFractionOfDay(69364093, 69327897);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
    }

    @Test
    public void test12870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12870");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.plusWeeks(69210165);
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfSecond();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks(42);
        org.joda.time.DateTime dateTime42 = dateTime38.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime42.withCenturyOfEra(69439538);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69439538 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test12871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12871");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.minus(readablePeriod2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfEra(69244813);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((long) 69313286);
        int int8 = dateTime3.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 34 + "'", int8 == 34);
    }

    @Test
    public void test12872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12872");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDate localDate17 = property15.withMaximumValue();
        org.joda.time.LocalDate localDate18 = property15.roundFloorCopy();
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test12873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12873");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        java.lang.String str29 = localDate27.toString("00:00");
        org.joda.time.LocalDate localDate31 = localDate27.minusMonths(69207073);
        java.util.Locale locale36 = new java.util.Locale("CAN", "2022-01-25T17:35:09.244", "Property[minuteOfDay]");
        java.lang.String str37 = locale36.getDisplayCountry();
        java.lang.String str38 = localDate27.toString("-5765222-10-25", locale36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate40 = localDate27.withCenturyOfEra(69301480);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69301480 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "00:00" + "'", str29, "00:00");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertEquals(locale36.toString(), "can_2022-01-25T17:35:09.244_Property[minuteOfDay]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-01-25T17:35:09.244" + "'", str37, "2022-01-25T17:35:09.244");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-5765222-10-25" + "'", str38, "-5765222-10-25");
    }

    @Test
    public void test12874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12874");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.property(dateTimeFieldType9);
        int int11 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMonths(54202757);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMinutes(2000);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withMinuteOfHour(0);
        int int20 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMonths(69288576);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusYears(69206920);
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.year();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale27.getDisplayScript(locale29);
        java.lang.String str31 = property25.getAsText(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69634822 + "'", int8 == 69634822);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "4518918" + "'", str31, "4518918");
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test12875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12875");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale4.getUnicodeLocaleType("United States");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: United States");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
    }

    @Test
    public void test12876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12876");
        java.util.Locale locale2 = new java.util.Locale("French", "months");
        java.lang.String str3 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "french_MONTHS");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MONTHS" + "'", str3, "MONTHS");
    }

    @Test
    public void test12877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12877");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder11.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder11.appendFractionOfHour(36, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder11.appendHourOfHalfday(0);
        boolean boolean20 = dateTimeFormatterBuilder11.canBuildPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test12878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12878");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((long) '4');
        org.joda.time.MutableDateTime mutableDateTime10 = property6.add((long) 65612);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap16);
        boolean boolean18 = dateTimeZone14.equals((java.lang.Object) strMap16);
        boolean boolean20 = dateTimeZone14.isStandardOffset((long) (byte) -1);
        long long23 = dateTimeZone14.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str24 = dateTimeZone14.getID();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone14);
        int int26 = localDate25.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property28 = localDate25.property(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType27.getField(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) chronology29, chronology31);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate36 = localDate32.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDate.Property property37 = localDate32.weekyear();
        org.joda.time.Chronology chronology38 = localDate32.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        mutableDateTime10.setRounding(dateTimeField41);
        long long44 = dateTimeField41.roundHalfFloor((long) 69280474);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime51 = property49.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.monthOfYear();
        mutableDateTime51.setMillis((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.year();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime55.secondOfMinute();
        java.util.Locale locale61 = new java.util.Locale("hi!");
        boolean boolean62 = property59.equals((java.lang.Object) locale61);
        java.lang.String str63 = locale61.toLanguageTag();
        java.lang.String str64 = dateTimeField41.getAsText((long) 69335175, locale61);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360599990L) + "'", long23 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:10" + "'", str24, "+100:10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86400000L + "'", long44 == 86400000L);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "und" + "'", str63, "und");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
    }

    @Test
    public void test12879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12879");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime localTime15 = localTime11.plusMinutes((int) (short) -1);
        int int16 = localTime15.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        long long30 = dateTimeZone21.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str31 = dateTimeZone21.getID();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone21);
        int int33 = localDate32.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property35 = localDate32.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType34.getField(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) chronology36, chronology38);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap48 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder47.appendTimeZoneShortName(strMap48);
        boolean boolean50 = dateTimeZone46.equals((java.lang.Object) strMap48);
        boolean boolean52 = dateTimeZone46.isStandardOffset((long) (byte) -1);
        long long55 = dateTimeZone46.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str56 = dateTimeZone46.getID();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone46);
        int int58 = localDate57.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property60 = localDate57.property(dateTimeFieldType59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType59.getField(chronology61);
        java.util.Locale locale63 = java.util.Locale.getDefault();
        int int64 = dateTimeField62.getMaximumShortTextLength(locale63);
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        int int66 = dateTimeField62.getMaximumTextLength(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology40, locale65, (java.lang.Integer) 2022, 0);
        org.joda.time.DateTimeField dateTimeField70 = chronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = chronology40.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((java.lang.Object) localTime15, chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360599990L) + "'", long30 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:10" + "'", str31, "+100:10");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-360599990L) + "'", long55 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+100:10" + "'", str56, "+100:10");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test12880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12880");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology2, locale4, (java.lang.Integer) 54202800);
        java.util.Locale locale7 = dateTimeParserBucket6.getLocale();
        java.util.Locale locale8 = dateTimeParserBucket6.getLocale();
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 69221500);
        long long11 = dateTimeParserBucket6.computeMillis();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.seconds();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter0.withChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfCentury();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        boolean boolean25 = mutableDateTime20.isSupported(dateTimeFieldType23);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime20.minuteOfDay();
        int int29 = dateTimeFormatter14.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime20, "Japanese (Japan)", 528);
        java.lang.StringBuffer stringBuffer30 = null;
        org.joda.time.ReadablePartial readablePartial31 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(stringBuffer30, readablePartial31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-291396175L) + "'", long11 == (-291396175L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-529) + "'", int29 == (-529));
    }

    @Test
    public void test12881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12881");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addCopy((long) 44);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.getLocalTime();
        org.joda.time.LocalTime localTime14 = property11.setCopy("0");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property11.setCopy("Chinese");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Chinese\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test12882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12882");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((int) (short) 100);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        long long17 = chronology9.add((long) 2496, (long) 37, 69258090);
        org.joda.time.DurationField durationField18 = chronology9.hours();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69635012 + "'", int1 == 69635012);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2562551826L + "'", long17 == 2562551826L);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test12883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12883");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfYear();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.set("70");
        int int18 = mutableDateTime17.getYearOfEra();
        boolean boolean19 = mutableDateTime2.equals((java.lang.Object) int18);
        java.lang.Object obj20 = mutableDateTime2.clone();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.monthOfYear();
        boolean boolean22 = mutableDateTime2.isBeforeNow();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.roundHalfCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime25.setMinuteOfHour(69589559);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69589559 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test12884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12884");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.plusWeeks(69210165);
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfSecond();
        org.joda.time.DateTime dateTime41 = property39.addToCopy(69204037);
        org.joda.time.DateTime dateTime42 = property39.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear(69478932);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69478932 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test12885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12885");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 10);
        org.joda.time.LocalTime localTime11 = property5.addWrapFieldToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localTime11.get(dateTimeFieldType12);
        org.joda.time.LocalTime.Property property14 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = property14.setCopy(69412);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69412 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test12886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12886");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withWeekyear(69221500);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusYears(69216412);
        boolean boolean22 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.withWeekyear(12);
        int int25 = localDateTime9.size();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 69635131 + "'", int11 == 69635131);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test12887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12887");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYear(69204037);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute(24);
        int int13 = localDateTime10.getYearOfEra();
        int int14 = localDateTime10.getYearOfCentury();
        int int15 = localDateTime10.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.withDurationAdded(readableDuration16, 69449725);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withDayOfWeek(69234097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69234097 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54635147 + "'", int15 == 54635147);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test12888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12888");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addCopy((long) 44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology13);
        java.lang.String str15 = dateTimeFormatter11.print((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime.Property property16 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime20 = property16.addCopy((long) 10);
        org.joda.time.LocalTime localTime22 = property16.addWrapFieldToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int24 = localTime22.get(dateTimeFieldType23);
        int int25 = localTime10.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = localTime10.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.minuteOfHour();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = localTime30.getField(0);
        int int34 = localTime30.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 54635210 + "'", int34 == 54635210);
    }

    @Test
    public void test12889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12889");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder5.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendDayOfWeekText();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatterBuilder9.toPrinter();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        mutableDateTime13.setTime((long) (short) -1);
        mutableDateTime13.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str19 = mutableDateTime13.toString(dateTimeFormatter18);
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder4.append(dateTimePrinter10, dateTimeParser20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendYearOfCentury(69239590, 69227753);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder25.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder25.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder28.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder29.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatter31.getPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder30.append(dateTimePrinter32);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder34.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder34.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder37.appendSignedDecimal(dateTimeFieldType38, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder41.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder44.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder46.appendDayOfMonth(69203038);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis();
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatter49.getParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder46.appendOptional(dateTimeParser50);
        int int52 = dateTimeParser50.estimateParsedLength();
        int int53 = dateTimeParser50.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder21.append(dateTimePrinter32, dateTimeParser50);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder21.appendTimeZoneOffset("Property[dayOfYear]", false, 36, 69258241);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder59.appendHourOfHalfday(69301420);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder61.appendMinuteOfDay(69405591);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder61.appendPattern("1970-03-26T06:00:00.005Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "00" + "'", str19, "00");
        org.junit.Assert.assertNotNull(dateTimeParser20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeParser50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 28 + "'", int52 == 28);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 28 + "'", int53 == 28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
    }

    @Test
    public void test12890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12890");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFractionOfDay(69218643, 69207900);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder14.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder14.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder17.appendSignedDecimal(dateTimeFieldType18, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder24.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder24.append(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder10.append(dateTimeFormatter26);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendLiteral("69226168");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder28.appendPattern("54279");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
    }

    @Test
    public void test12891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12891");
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        int int23 = localDate22.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property25 = localDate22.property(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType24.getField(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) chronology26, chronology28);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.minutes();
        long long35 = chronology30.add((long) 59, 1L, 2022);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology37, locale39, (java.lang.Integer) 54202800);
        org.joda.time.tz.NameProvider nameProvider42 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str46 = nameProvider42.getName(locale43, "1", "fr");
        java.lang.String str47 = locale39.getDisplayScript(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 69209230, chronology30, locale39, (java.lang.Integer) 69232336);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(69553203, 69498042, 69331127, 69354666, 69235626, 69298920, 69210062, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69354666 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2081L + "'", long35 == 2081L);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(nameProvider42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test12892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12892");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology22.withZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField32 = null;
        mutableDateTime31.setRounding(dateTimeField32);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime31.setDate(283, 2922750, 54310);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922750 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test12893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12893");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((-5));
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((-26));
        org.joda.time.LocalTime.Property property7 = localTime4.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test12894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12894");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDate localDate17 = property15.getLocalDate();
        java.util.Locale locale22 = new java.util.Locale("70", "Frankreich", "2022-01-25T17:35:36.096");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = localDate17.toString("Property[dayOfYear]", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals(locale22.toString(), "70_FRANKREICH_2022-01-25T17:35:36.096");
    }

    @Test
    public void test12895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12895");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.plusWeeks(69210165);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long51 = dateTimeZone41.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.DateTime dateTime52 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.DateTime dateTime55 = dateTime52.minusMillis(69231238);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMillis(0);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillis((long) 69545240);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-360599999L) + "'", long51 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test12896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12896");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.plusWeeks(0);
        org.joda.time.DateTime dateTime37 = dateTime29.withMillisOfDay(69225355);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap44 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder43.appendTimeZoneShortName(strMap44);
        boolean boolean46 = dateTimeZone42.equals((java.lang.Object) strMap44);
        boolean boolean48 = dateTimeZone42.isStandardOffset((long) (byte) -1);
        long long51 = dateTimeZone42.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str52 = dateTimeZone42.getID();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone42);
        int int54 = localDate53.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property56 = localDate53.property(dateTimeFieldType55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType55.getField(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) chronology57, chronology59);
        org.joda.time.Chronology chronology61 = localDate60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.months();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.minuteOfHour();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 69207366, chronology61);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) dateTime29, chronology61);
        org.joda.time.DateTime dateTime70 = dateTime29.withDayOfYear(72);
        org.joda.time.DateTime.Property property71 = dateTime70.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-360599990L) + "'", long51 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+100:10" + "'", str52, "+100:10");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test12897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12897");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        java.lang.String str10 = dateTimeZone2.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone2);
        java.lang.String str13 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.monthOfYear();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale19.getISO3Language();
        int int21 = property18.getMaximumShortTextLength(locale19);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale19.getDisplayName(locale22);
        java.lang.String str25 = locale22.getVariant();
        java.lang.String str26 = dateTimeZone2.getName((long) 69204394, locale22);
        java.lang.String str27 = locale22.getVariant();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.getDefault(category28);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale.setDefault(category28, locale31);
        java.lang.String str34 = locale22.getDisplayScript(locale31);
        java.lang.String str35 = locale22.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:10" + "'", str10, "+100:10");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fran\347ais (Canada)" + "'", str24, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+100:10" + "'", str26, "+100:10");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
    }

    @Test
    public void test12898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12898");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        int int13 = mutableDateTime9.getMonthOfYear();
        org.joda.time.Instant instant14 = mutableDateTime9.toInstant();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test12899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12899");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        boolean boolean25 = durationFieldType0.isSupported(chronology23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = dateTimeField28.set((long) 69586189, 69618809);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69618809 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test12900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12900");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addWrapFieldToCopy(69231663);
        org.joda.time.LocalTime localTime11 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime12 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property5.addCopy((long) 65656);
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds((-412244));
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        mutableDateTime19.addYears(2000);
        mutableDateTime19.add((long) 69344351);
        boolean boolean25 = localTime16.equals((java.lang.Object) 69344351);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test12901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12901");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 69206325);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeParser4);
        org.junit.Assert.assertNull(chronology5);
    }

    @Test
    public void test12902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12902");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendYear(69219549, 38);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder4.appendTwoDigitWeekyear(69218807, false);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder4.appendTimeZoneName(strMap11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder4.appendTwoDigitYear(86350010);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendHourOfDay(69366824);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder14.appendWeekyear(69481227, 69392792);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
    }

    @Test
    public void test12903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12903");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        java.lang.String str10 = localTime9.toString();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime13 = localTime9.withFieldAdded(durationFieldType11, 25);
        org.joda.time.LocalTime localTime15 = localTime9.withMillisOfDay(69238499);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.LocalTime localTime19 = property16.addCopy((long) 69370887);
        org.joda.time.LocalTime.Property property20 = localTime19.minuteOfHour();
        org.joda.time.LocalTime localTime21 = property20.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23:59:50.010" + "'", str10, "23:59:50.010");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test12904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12904");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        boolean boolean5 = mutableDateTime2.isEqualNow();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.era();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime2.setZoneRetainFields(dateTimeZone7);
        int int9 = mutableDateTime2.getRoundingMode();
        int int10 = mutableDateTime2.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap16);
        boolean boolean18 = dateTimeZone14.equals((java.lang.Object) strMap16);
        boolean boolean20 = dateTimeZone14.isStandardOffset((long) (byte) -1);
        long long23 = dateTimeZone14.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str24 = dateTimeZone14.getID();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone14);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight27 = localDate25.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendTimeZoneShortName(strMap33);
        boolean boolean35 = dateTimeZone31.equals((java.lang.Object) strMap33);
        boolean boolean37 = dateTimeZone31.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter28.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = localDate25.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours(69205127);
        org.joda.time.DateTime.Property property43 = dateTime42.monthOfYear();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property46 = dateTime45.year();
        org.joda.time.DateTime dateTime47 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.minus(readableDuration48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime45.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime45.plusYears(2);
        java.lang.String str53 = dateTime45.toString();
        org.joda.time.DateTime dateTime54 = dateTime45.withLaterOffsetAtOverlap();
        int int55 = dateTime54.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property56 = dateTime54.weekyear();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime2.secondOfDay();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime2.secondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360599990L) + "'", long23 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:10" + "'", str24, "+100:10");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "5777058-08-23T18:20:35.595+100:10" + "'", str53, "5777058-08-23T18:20:35.595+100:10");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 34 + "'", int55 == 34);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test12905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12905");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfYear();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.set("70");
        int int18 = mutableDateTime17.getYearOfEra();
        boolean boolean19 = mutableDateTime2.equals((java.lang.Object) int18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        java.lang.String str30 = dateTimeZone22.getShortName((long) 69203825);
        mutableDateTime2.setZoneRetainFields(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.lang.String str34 = dateTimeZone22.getName((long) 69584331);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:10" + "'", str30, "+100:10");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:10" + "'", str34, "+100:10");
    }

    @Test
    public void test12906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12906");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType13, (int) '4', 69204394);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendDayOfWeek((int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder16.appendTwoDigitWeekyear(69258477, true);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        boolean boolean25 = localDateTime23.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDayOfMonth((int) (byte) 1);
        int int28 = localDateTime23.getEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusMonths(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder31.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder31.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder34.appendSignedDecimal(dateTimeFieldType35, (int) (byte) 10, (int) (short) 10);
        int int39 = localDateTime23.get(dateTimeFieldType35);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder16.appendFixedDecimal(dateTimeFieldType35, 10);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType35.getDurationType();
        java.lang.String str43 = durationFieldType42.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 56 + "'", int39 == 56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "days" + "'", str43, "days");
    }

    @Test
    public void test12907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12907");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("CA");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("1970-01-04T04:10:00.000+100:10");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        int int9 = strSet8.size();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime();
        java.util.Date date15 = dateTime14.toDate();
        boolean boolean16 = strSet8.equals((java.lang.Object) date15);
        int int17 = strSet8.size();
        java.util.Spliterator<java.lang.String> strSpliterator18 = strSet8.spliterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 575 + "'", int9 == 575);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 69635679 + "'", int11 == 69635679);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 25 19:20:35 GMT+:0:10 2022");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 575 + "'", int17 == 575);
        org.junit.Assert.assertNotNull(strSpliterator18);
    }

    @Test
    public void test12908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12908");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder4.build();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.lang.String str13 = locale10.getLanguage();
        java.util.Locale.Builder builder14 = builder4.setLocale(locale10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        long long27 = dateTimeZone18.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str28 = dateTimeZone18.getID();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone18);
        int int30 = localDate29.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property32 = localDate29.property(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType31.getField(chronology33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        int int36 = dateTimeField34.getMaximumShortTextLength(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = locale37.getDisplayVariant();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology45, locale47, (java.lang.Integer) 54202800);
        java.lang.String str50 = locale41.getDisplayCountry(locale47);
        java.lang.String str51 = locale37.getDisplayName(locale41);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale52);
        java.lang.String str54 = locale37.getDisplayLanguage(locale52);
        java.lang.String str55 = locale35.getDisplayScript(locale37);
        java.lang.String str56 = locale35.getCountry();
        java.util.Locale.Builder builder57 = builder4.setLocale(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder59 = builder57.setRegion("2022-01-25T17:39:27.958");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-01-25T17:39:27.958 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-360599990L) + "'", long27 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+100:10" + "'", str28, "+100:10");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "German" + "'", str51, "German");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "FR" + "'", str56, "FR");
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test12909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12909");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        int int13 = mutableDateTime9.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        int int16 = localDateTime15.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withWeekyear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        int int23 = localDateTime15.get(dateTimeFieldType21);
        mutableDateTime9.set(dateTimeFieldType21, 66026);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69635726 + "'", int16 == 69635726);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
    }

    @Test
    public void test12910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12910");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.withYear(69264803);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDate18.getValue(69630767);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69630767");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test12911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12911");
        java.io.IOException iOException2 = new java.io.IOException("hi!");
        java.io.IOException iOException3 = new java.io.IOException("hi!", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        java.lang.String str5 = iOException3.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.io.IOException: hi!" + "'", str5, "java.io.IOException: hi!");
    }

    @Test
    public void test12912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12912");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-23T??:??:??.000\" is malformed at \"T??:??:??.000\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12913");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((-124334282775991L));
        mutableDateTime1.addDays(69223258);
        org.joda.time.Instant instant4 = mutableDateTime1.toInstant();
        int int5 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.monthOfYear();
        long long7 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.secondOfDay();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 5856555208424009L + "'", long7 == 5856555208424009L);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test12914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12914");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime localTime15 = localTime13.withSecondOfMinute(22);
        org.joda.time.LocalTime.Property property16 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime18 = property16.addWrapFieldToCopy(69287258);
        org.joda.time.LocalTime localTime20 = property16.addCopy(69245210);
        org.joda.time.LocalTime localTime21 = property16.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField22 = property16.getField();
        org.joda.time.LocalTime localTime23 = property16.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField24 = property16.getField();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test12915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12915");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar31 = mutableDateTime29.toGregorianCalendar();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.monthOfYear();
        long long37 = mutableDateTime35.getMillis();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime35.add(readableDuration38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap45 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder44.appendTimeZoneShortName(strMap45);
        boolean boolean47 = dateTimeZone43.equals((java.lang.Object) strMap45);
        boolean boolean49 = dateTimeZone43.isStandardOffset((long) (byte) -1);
        long long52 = dateTimeZone43.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str53 = dateTimeZone43.getID();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime35.toMutableDateTime(dateTimeZone43);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(dateTimeZone43);
        org.joda.time.DateTime dateTime57 = localDate32.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMonths(0);
        org.joda.time.LocalDate localDate60 = dateTime57.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = localDate60.getFieldType(2);
        int int63 = localDate26.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar68 = mutableDateTime66.toGregorianCalendar();
        java.lang.String str69 = mutableDateTime66.toString();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap74 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder75 = dateTimeFormatterBuilder73.appendTimeZoneShortName(strMap74);
        boolean boolean76 = dateTimeZone72.equals((java.lang.Object) strMap74);
        long long78 = dateTimeZone72.nextTransition((long) 1969);
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone72);
        boolean boolean80 = mutableDateTime66.equals((java.lang.Object) dateTimeZone72);
        long long84 = dateTimeZone72.convertLocalToUTC((long) 69272, false, (long) 69225355);
        org.joda.time.Interval interval85 = localDate26.toInterval(dateTimeZone72);
        java.lang.String str87 = dateTimeZone72.getName((long) 69288257);
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate((long) 69467503, dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-360599990L) + "'", long52 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+100:10" + "'", str53, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(gregorianCalendar68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str69, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1969L + "'", long78 == 1969L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-360530728L) + "'", long84 == (-360530728L));
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+100:10" + "'", str87, "+100:10");
    }

    @Test
    public void test12916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12916");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str9 = locale8.getISO3Language();
        int int10 = property7.getMaximumShortTextLength(locale8);
        java.lang.String str11 = dateTimeZone2.getShortName((long) 69213298, locale8);
        long long13 = dateTimeZone2.convertUTCToLocal((long) 69218643);
        java.util.TimeZone timeZone14 = dateTimeZone2.toTimeZone();
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone(zoneId15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        long long39 = dateTimeZone30.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone30.getID();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone30);
        int int42 = localDate41.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property44 = localDate41.property(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap50 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder49.appendTimeZoneShortName(strMap50);
        boolean boolean52 = dateTimeZone48.equals((java.lang.Object) strMap50);
        boolean boolean54 = dateTimeZone48.isStandardOffset((long) (byte) -1);
        long long57 = dateTimeZone48.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str58 = dateTimeZone48.getID();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone48);
        int int60 = localDate59.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property62 = localDate59.property(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType61.getField(chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) chronology63, chronology65);
        org.joda.time.Chronology chronology67 = localDate66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.minutes();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType43.getField(chronology67);
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.lang.String str71 = locale70.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology67, locale70, (java.lang.Integer) 0, 54202800);
        boolean boolean75 = strList23.remove((java.lang.Object) chronology67);
        org.joda.time.DateTimeField dateTimeField76 = chronology67.weekyearOfCentury();
        org.joda.time.DurationField durationField77 = chronology67.centuries();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 69280605, chronology67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((java.lang.Object) zoneId15, chronology67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.time.ZoneRegion");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fra" + "'", str9, "fra");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 69218643L + "'", long13 == 69218643L);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-360599990L) + "'", long39 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:10" + "'", str40, "+100:10");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-360599990L) + "'", long57 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+100:10" + "'", str58, "+100:10");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test12917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12917");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime2.toGregorianCalendar();
        java.lang.String str5 = mutableDateTime2.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology8);
        java.lang.String str10 = dateTimeFormatter6.print((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime.Property property11 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime15 = property11.addCopy((long) 10);
        org.joda.time.LocalTime localTime17 = property11.addWrapFieldToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localTime17.get(dateTimeFieldType18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime2.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.yearOfEra();
        int int22 = mutableDateTime2.getDayOfWeek();
        int int23 = mutableDateTime2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendTimeZoneShortName(strMap29);
        boolean boolean31 = dateTimeZone27.equals((java.lang.Object) strMap29);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        long long36 = dateTimeZone27.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str37 = dateTimeZone27.getID();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone27);
        int int39 = localDate38.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property41 = localDate38.property(dateTimeFieldType40);
        org.joda.time.LocalDate.Property property42 = localDate38.year();
        org.joda.time.LocalDate.Property property43 = localDate38.weekOfWeekyear();
        org.joda.time.LocalDate localDate45 = property43.addToCopy(69258541);
        org.joda.time.DateTimeField dateTimeField46 = property43.getField();
        int int48 = dateTimeField46.getMaximumValue((long) 69524244);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setRounding(dateTimeField46, 69564879);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 69564879");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str5, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str10, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15000 + "'", int23 == 15000);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-360599990L) + "'", long36 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:10" + "'", str37, "+100:10");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53 + "'", int48 == 53);
    }

    @Test
    public void test12918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12918");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addCopy((long) 44);
        org.joda.time.LocalTime localTime11 = property5.withMinimumValue();
        int int12 = localTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test12919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12919");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone3.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        boolean boolean21 = dateTimeZone17.equals((java.lang.Object) strMap19);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter14.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        long long27 = dateTimeZone3.getMillisKeepLocal(dateTimeZone17, (long) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(0L, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears(69427775);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599999L) + "'", long13 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test12920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12920");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(69354337L);
    }

    @Test
    public void test12921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12921");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(69210496);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendTimeZoneShortName(strMap8);
        boolean boolean10 = dateTimeZone6.equals((java.lang.Object) strMap8);
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withZone(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        long long16 = dateTimeZone6.convertUTCToLocal((long) 69218773);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter0.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long32 = dateTimeZone22.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter33.withZone(dateTimeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        long long46 = dateTimeZone22.getMillisKeepLocal(dateTimeZone36, (long) 10);
        boolean boolean47 = dateTime19.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.DateTime dateTime49 = dateTime19.withYear(39);
        java.lang.String str50 = dateTimeFormatter17.print((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property51 = dateTime49.secondOfDay();
        org.joda.time.DateTime dateTime53 = dateTime49.withWeekyear(69416197);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 429818773L + "'", long16 == 429818773L);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-360599999L) + "'", long32 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0039-01" + "'", str50, "0039-01");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test12922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12922");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.LocalDate localDate24 = localDate21.minusMonths(10);
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) '4', dateTimeZone28);
        org.joda.time.Interval interval30 = localDate24.toInterval(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime33.minuteOfDay();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.dayOfYear();
        org.joda.time.DurationField durationField37 = property36.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime39 = property36.set("70");
        int int40 = mutableDateTime39.getYearOfEra();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap46 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendTimeZoneShortName(strMap46);
        boolean boolean48 = dateTimeZone44.equals((java.lang.Object) strMap46);
        boolean boolean50 = dateTimeZone44.isStandardOffset((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime39.toMutableDateTime(dateTimeZone44);
        long long53 = dateTimeZone28.getMillisKeepLocal(dateTimeZone44, (long) 10);
        java.util.TimeZone timeZone54 = dateTimeZone44.toTimeZone();
        java.lang.Object obj55 = timeZone54.clone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-291392090L) + "'", long53 == (-291392090L));
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test12923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12923");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        boolean boolean6 = dateTimeField5.isLenient();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.property(dateTimeFieldType9);
        int int11 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMonths(54202757);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMinutes(2000);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withMinuteOfHour(0);
        int int20 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMonths(69288576);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYearOfEra(69264455);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra(65951);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69636089 + "'", int8 == 69636089);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test12924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12924");
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        int int22 = localDate21.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property24 = localDate21.property(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType23.getField(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) chronology25, chronology27);
        org.joda.time.LocalDate localDate30 = localDate28.minusDays(0);
        org.joda.time.LocalDate.Property property31 = localDate30.weekyear();
        boolean boolean33 = property31.equals((java.lang.Object) "secondOfMinute");
        org.joda.time.LocalDate localDate35 = property31.addWrapFieldToCopy(69210404);
        org.joda.time.LocalDate localDate37 = localDate35.minusDays(0);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(65923, 69550065, 69329145, 69218807, 69286508, 65709, 69518125, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69218807 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test12925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12925");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        boolean boolean17 = strList15.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean27 = strList25.equals((java.lang.Object) (-1));
        boolean boolean28 = strList15.retainAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean29 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15, filteringMode30);
        boolean boolean33 = strList15.add("70");
        java.util.stream.Stream<java.lang.String> strStream34 = strList15.stream();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone36);
        mutableDateTime37.setTime((long) (short) -1);
        int int40 = mutableDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean42 = mutableDateTime37.isSupported(dateTimeFieldType41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime37.dayOfMonth();
        boolean boolean44 = strList15.equals((java.lang.Object) property43);
        org.joda.time.DurationField durationField45 = property43.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime46 = property43.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar51 = mutableDateTime49.toGregorianCalendar();
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar51);
        org.joda.time.LocalDate.Property property53 = localDate52.yearOfEra();
        int int54 = localDate52.getDayOfYear();
        org.joda.time.DateTime dateTime55 = localDate52.toDateTimeAtCurrentTime();
        int int56 = property43.compareTo((org.joda.time.ReadablePartial) localDate52);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate58 = localDate52.plus(readablePeriod57);
        int int59 = localDate58.getMonthOfYear();
        int int60 = localDate58.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property61 = localDate58.yearOfCentury();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(durationField45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test12926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12926");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "69226168");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setRegion("-2000-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: -2000-01-01T00:00:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test12927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12927");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.append(dateTimeFormatter11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendWeekyear((int) (short) 10, 12);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneName(strMap16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendFractionOfSecond(69289172, 528);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder20.appendTimeZoneOffset("2022-01-25T17:33:45.701", "04:10:00.000", false, 528, 69239154);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        java.lang.String str30 = locale29.getDisplayVariant();
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale29.getDisplayScript(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter27.withLocale(locale29);
        boolean boolean34 = dateTimeFormatter33.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter33.withDefaultYear(65689);
        java.util.Locale locale37 = dateTimeFormatter36.getLocale();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder20.append(dateTimeFormatter36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTimeFormatter36.parseDateTime("GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"GMT+00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
    }

    @Test
    public void test12928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12928");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test12929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12929");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.LocalDate localDate25 = localDate23.plusWeeks(69264455);
        org.joda.time.LocalDate.Property property26 = localDate25.era();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test12930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12930");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusHours(20);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDayOfWeek(69274066);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69274066 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test12931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12931");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        long long7 = dateTimeParserBucket5.computeMillis();
        long long8 = dateTimeParserBucket5.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property26 = localDate23.property(dateTimeFieldType25);
        org.joda.time.DurationField durationField27 = property26.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        dateTimeParserBucket5.saveField(dateTimeField28, 251);
        long long32 = dateTimeField28.roundHalfFloor((long) 69353010);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-291396175L) + "'", long7 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-291396175L) + "'", long8 == (-291396175L));
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-62135596800000L) + "'", long32 == (-62135596800000L));
    }

    @Test
    public void test12932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12932");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatterBuilder11.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder11.appendFractionOfHour(69260345, 251);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder11.appendTimeZoneId();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
    }

    @Test
    public void test12933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12933");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        int int18 = localDate14.size();
        org.joda.time.DateMidnight dateMidnight19 = localDate14.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate14.withPeriodAdded(readablePeriod20, 69243332);
        org.joda.time.LocalDate.Property property23 = localDate14.dayOfYear();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology27, locale29, (java.lang.Integer) 54202800);
        java.util.Locale locale32 = dateTimeParserBucket31.getLocale();
        java.util.Locale locale33 = dateTimeParserBucket31.getLocale();
        dateTimeParserBucket31.setPivotYear((java.lang.Integer) 69221500);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket31.getZone();
        long long38 = dateTimeZone36.previousTransition((long) 69245210);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 69272918, dateTimeZone36);
        long long42 = dateTimeZone36.convertLocalToUTC((long) 69238499, true);
        org.joda.time.Interval interval43 = localDate24.toInterval(dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate45 = localDate24.plus(readablePeriod44);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 69245210L + "'", long38 == 69245210L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-291361501L) + "'", long42 == (-291361501L));
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test12934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12934");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType13, (int) '4', 69204394);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendDayOfWeek((int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendFractionOfHour(69319098, 69244652);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder19.appendMillisOfSecond(69289172);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendHourOfHalfday(69550639);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder24.appendFractionOfDay(69391355, 69409136);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
    }

    @Test
    public void test12935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12935");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendYear(69219549, 38);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder4.appendTwoDigitWeekyear(69218807, false);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder4.appendTimeZoneName(strMap11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder4.appendDayOfWeekText();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        boolean boolean21 = dateTimeZone17.equals((java.lang.Object) strMap19);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) (byte) -1);
        long long26 = dateTimeZone17.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str27 = dateTimeZone17.getID();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone17);
        int int29 = localDate28.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property31 = localDate28.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType30.getField(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) chronology32, chronology34);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate35.withPeriodAdded(readablePeriod37, (int) '#');
        org.joda.time.LocalDate.Property property40 = localDate35.weekyear();
        org.joda.time.LocalDate localDate41 = property40.withMinimumValue();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths(2);
        int int44 = localDate43.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap50 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder49.appendTimeZoneShortName(strMap50);
        boolean boolean52 = dateTimeZone48.equals((java.lang.Object) strMap50);
        boolean boolean54 = dateTimeZone48.isStandardOffset((long) (byte) -1);
        long long57 = dateTimeZone48.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str58 = dateTimeZone48.getID();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone48);
        org.joda.time.LocalDate.Property property60 = localDate59.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight61 = localDate59.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getDurationType();
        boolean boolean64 = dateMidnight61.isSupported(dateTimeFieldType62);
        boolean boolean65 = localDate43.isSupported(dateTimeFieldType62);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType62, 65643);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder67.appendDayOfWeekShortText();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.monthOfYear();
        long long73 = mutableDateTime71.getMillis();
        org.joda.time.ReadableDuration readableDuration74 = null;
        mutableDateTime71.add(readableDuration74);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder80 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap81 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder82 = dateTimeFormatterBuilder80.appendTimeZoneShortName(strMap81);
        boolean boolean83 = dateTimeZone79.equals((java.lang.Object) strMap81);
        boolean boolean85 = dateTimeZone79.isStandardOffset((long) (byte) -1);
        long long88 = dateTimeZone79.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str89 = dateTimeZone79.getID();
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime91 = mutableDateTime71.toMutableDateTime(dateTimeZone79);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int93 = mutableDateTime71.get(dateTimeFieldType92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder95 = dateTimeFormatterBuilder67.appendFixedSignedDecimal(dateTimeFieldType92, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal number of digits: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-360599990L) + "'", long26 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:10" + "'", str27, "+100:10");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-360599990L) + "'", long57 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+100:10" + "'", str58, "+100:10");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-360599990L) + "'", long88 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+100:10" + "'", str89, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test12936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12936");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = dateTimeZone9.getShortName((-360600000L), locale12);
        boolean boolean15 = dateTimeZone9.isFixed();
        long long19 = dateTimeZone9.convertLocalToUTC(429836559L, false, (long) 69321717);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(69385302, 69348249, 69387847, 69326092, 69257572, 69599774, 69535168, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69326092 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 69236559L + "'", long19 == 69236559L);
    }

    @Test
    public void test12937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12937");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '#', chronology23);
        org.joda.time.DurationField durationField27 = chronology23.years();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test12938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12938");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        long long10 = dateTimeZone2.previousTransition((long) 69213298);
        java.lang.String str11 = dateTimeZone2.toString();
        java.util.TimeZone timeZone12 = dateTimeZone2.toTimeZone();
        int int14 = timeZone12.getOffset((long) 69234990);
        java.lang.String str15 = timeZone12.getID();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendTimeZoneShortName(strMap21);
        boolean boolean23 = dateTimeZone19.equals((java.lang.Object) strMap21);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (byte) -1);
        long long28 = dateTimeZone19.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str29 = dateTimeZone19.getID();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone19);
        int int31 = localDate30.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property33 = localDate30.property(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType32.getField(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) chronology34, chronology36);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate41 = localDate37.withPeriodAdded(readablePeriod39, (int) '#');
        org.joda.time.LocalDate.Property property42 = localDate37.weekyear();
        int int43 = property42.getLeapAmount();
        org.joda.time.LocalDate localDate44 = property42.roundHalfFloorCopy();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap51 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder50.appendTimeZoneShortName(strMap51);
        boolean boolean53 = dateTimeZone49.equals((java.lang.Object) strMap51);
        boolean boolean55 = dateTimeZone49.isStandardOffset((long) (byte) -1);
        long long58 = dateTimeZone49.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str59 = dateTimeZone49.getID();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone49);
        int int61 = localDate60.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property63 = localDate60.property(dateTimeFieldType62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType62.getField(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) chronology64, chronology66);
        org.joda.time.Chronology chronology68 = localDate67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.minutes();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekyear();
        org.joda.time.DurationField durationField71 = durationFieldType45.getField(chronology68);
        org.joda.time.DateTimeZone dateTimeZone72 = chronology68.getZone();
        org.joda.time.DateMidnight dateMidnight73 = localDate44.toDateMidnight(dateTimeZone72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((java.lang.Object) str15, dateTimeZone72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+100:10\" is malformed at \":10\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 69213298L + "'", long10 == 69213298L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:10" + "'", str11, "+100:10");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 360600000 + "'", int14 == 360600000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360599990L) + "'", long28 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-360599990L) + "'", long58 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+100:10" + "'", str59, "+100:10");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateMidnight73);
    }

    @Test
    public void test12939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12939");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendDayOfMonth(69203038);
        boolean boolean15 = dateTimeFormatterBuilder12.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendMillisOfDay(69229172);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.timeParser();
        int int20 = dateTimeFormatter19.getDefaultYear();
        org.joda.time.Chronology chronology21 = dateTimeFormatter19.getChronolgy();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder16.append(dateTimeFormatter19);
        java.io.Writer writer23 = null;
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        int int25 = localDateTime24.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime24.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.minusDays(415);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        java.lang.String str43 = dateTimeZone35.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        int int46 = localDateTime45.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusWeeks(191509);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        java.util.Date date54 = localDateTime52.toDate();
        int int55 = localDateTime52.getYear();
        boolean boolean56 = dateTimeZone35.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTime dateTime57 = localDateTime24.toDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime24.minusHours(813);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(writer23, (org.joda.time.ReadablePartial) localDateTime59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2000 + "'", int20 == 2000);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 69636519 + "'", int25 == 69636519);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+100:10" + "'", str43, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 69636519 + "'", int46 == 69636519);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue May 27 19:20:36 GMT+:0:10 5692");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5692 + "'", int55 == 5692);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test12940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12940");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder11.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder11.appendFractionOfHour(36, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder11.appendLiteral('4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder19.appendTimeZoneOffset("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000", true, 65889493, 783);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
    }

    @Test
    public void test12941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12941");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusSeconds(360600000);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusDays(69213082);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(69220682);
        int int13 = localDateTime10.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readableDuration14);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69636609 + "'", int1 == 69636609);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test12942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12942");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        java.lang.String str12 = timeZone11.getID();
        int int14 = timeZone11.getOffset(3L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter15.withZone(dateTimeZone18);
        java.util.TimeZone timeZone26 = dateTimeZone18.toTimeZone();
        java.lang.String str27 = timeZone26.getID();
        boolean boolean28 = timeZone11.hasSameRules(timeZone26);
        java.lang.String str29 = timeZone11.getID();
        timeZone11.setID("5777058235T181532+10010");
        java.lang.String str32 = timeZone11.getID();
        boolean boolean33 = timeZone11.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:10" + "'", str12, "+100:10");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 360600000 + "'", int14 == 360600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:10" + "'", str27, "+100:10");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "5777058235T181532+10010" + "'", str32, "5777058235T181532+10010");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test12943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12943");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        long long21 = dateTimeField19.roundCeiling((long) (short) 0);
        boolean boolean23 = dateTimeField19.isLeap(10L);
        int int24 = dateTimeField19.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap30);
        boolean boolean32 = dateTimeZone28.equals((java.lang.Object) strMap30);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) -1);
        long long37 = dateTimeZone28.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str38 = dateTimeZone28.getID();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone28);
        int int40 = localDate39.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property42 = localDate39.property(dateTimeFieldType41);
        org.joda.time.LocalDate localDate44 = localDate39.minusYears(69206920);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate46 = localDate44.minus(readablePeriod45);
        int[] intArray47 = new int[] {};
        int int48 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate44, intArray47);
        org.joda.time.LocalDate.Property property49 = localDate44.weekyear();
        org.joda.time.LocalDate localDate50 = property49.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036494175807L + "'", long21 == 9223372036494175807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-360599990L) + "'", long37 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+100:10" + "'", str38, "+100:10");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test12944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12944");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withDurationAdded(readableDuration5, 1969);
        java.util.Date date8 = localDateTime7.toDate();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) date8, chronology9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromDateFields(date8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 25 19:20:36 GMT+:0:10 2022");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test12945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12945");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDate localDate34 = dateTime29.toLocalDate();
        org.joda.time.DateTime.Property property35 = dateTime29.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime29.withYearOfCentury(69575012);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69575012 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test12946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12946");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 69206920);
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.withMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "19" + "'", str4, "19");
    }

    @Test
    public void test12947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12947");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter1.withZone(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 999, dateTimeZone4);
        int int14 = localDate13.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDate13.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
    }

    @Test
    public void test12948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12948");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.monthOfYear();
        long long6 = mutableDateTime4.getMillis();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime4.add(readableDuration7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime4.toMutableDateTime(dateTimeZone12);
        long long26 = dateTimeZone12.nextTransition((long) 3);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        java.lang.String str37 = dateTimeZone29.getShortName((long) 69203825);
        long long39 = dateTimeZone29.nextTransition((long) (short) 10);
        long long41 = dateTimeZone12.getMillisKeepLocal(dateTimeZone29, (long) (byte) 0);
        mutableDateTime1.setZone(dateTimeZone29);
        int int45 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime1, "69210934-08-23T18:14:12.992+100:10", 69251195);
        mutableDateTime1.add(0L);
        long long48 = mutableDateTime1.getMillis();
        mutableDateTime1.add((long) 69574944);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3L + "'", long26 == 3L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:10" + "'", str37, "+100:10");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-69251196) + "'", int45 == (-69251196));
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645456236727L + "'", long48 == 1645456236727L);
    }

    @Test
    public void test12949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12949");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        java.lang.String str12 = mutableDateTime9.toString();
        mutableDateTime9.setTime((long) 69204394);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundCeiling();
        mutableDateTime17.setYear(69300944);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setSecondOfDay(69615096);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69615096 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str12, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12950");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(69243332);
        int int11 = localTime10.size();
        org.joda.time.LocalTime localTime13 = localTime10.plusHours(69406912);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        boolean boolean21 = dateTimeZone17.equals((java.lang.Object) strMap19);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) (byte) -1);
        long long26 = dateTimeZone17.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str27 = dateTimeZone17.getID();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone17);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight30 = localDate28.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter31.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.DateTime dateTime43 = localDate28.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateTime dateTime45 = dateTime43.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime47 = dateTime43.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property48 = dateTime43.secondOfDay();
        org.joda.time.DateTime dateTime49 = dateTime43.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear(69206843);
        org.joda.time.DateTime dateTime53 = dateTime49.minusHours(69293777);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.monthOfYear();
        long long58 = mutableDateTime56.getMillis();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime56.add(readableDuration59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        boolean boolean68 = dateTimeZone64.equals((java.lang.Object) strMap66);
        boolean boolean70 = dateTimeZone64.isStandardOffset((long) (byte) -1);
        long long73 = dateTimeZone64.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str74 = dateTimeZone64.getID();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime76 = mutableDateTime56.toMutableDateTime(dateTimeZone64);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int78 = mutableDateTime56.get(dateTimeFieldType77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType77.getField(chronology79);
        boolean boolean81 = dateTime49.isSupported(dateTimeFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime83 = localTime13.withField(dateTimeFieldType77, 69429686);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69429686 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-360599990L) + "'", long26 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:10" + "'", str27, "+100:10");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-360599990L) + "'", long73 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+100:10" + "'", str74, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test12951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12951");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addCopy((long) 44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology13);
        java.lang.String str15 = dateTimeFormatter11.print((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime.Property property16 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime20 = property16.addCopy((long) 10);
        org.joda.time.LocalTime localTime22 = property16.addWrapFieldToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int24 = localTime22.get(dateTimeFieldType23);
        int int25 = localTime10.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = localTime10.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localTime10.getFieldTypes();
        org.joda.time.LocalTime localTime29 = localTime10.plusHours(69533854);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime35 = property33.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = property36.add(100L);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder39.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder39.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatterBuilder39.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder39.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder39.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder39.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatterBuilder50.toParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder50.appendFixedDecimal(dateTimeFieldType52, 69215043);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType52.getDurationType();
        mutableDateTime38.add(durationFieldType55, 69287180);
        boolean boolean58 = localTime29.isSupported(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeParser51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test12952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12952");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        java.lang.String str10 = dateTimeZone2.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:10" + "'", str10, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test12953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12953");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.months();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.minuteOfHour();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 69207366, chronology23);
        org.joda.time.DateTimeField dateTimeField30 = chronology23.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test12954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12954");
        java.io.IOException iOException2 = new java.io.IOException("hi!");
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000", (java.lang.Throwable) iOException2);
        java.io.IOException iOException10 = new java.io.IOException("hi!");
        java.io.IOException iOException11 = new java.io.IOException("hi!", (java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("fra", (java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException("fr_CA", (java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray15 = iOException12.getSuppressed();
        iOException5.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray17 = iOException5.getSuppressed();
        java.lang.String str18 = iOException5.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" + "'", str18, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
    }

    @Test
    public void test12955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12955");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime36 = dateTime29.minusHours(19);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears(9);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.minus(readableDuration40);
        org.joda.time.DateTime dateTime44 = dateTime41.withDurationAdded((long) 69256073, 69362362);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime41.withCenturyOfEra(69567531);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69567531 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test12956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12956");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime3 = localTime1.plusSeconds(69298169);
        int int4 = localTime3.getMillisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localTime3.getFieldTypes();
        org.joda.time.LocalTime.Property property6 = localTime3.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20369010 + "'", int4 == 20369010);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test12957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12957");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendMillisOfSecond(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder6.appendTwoDigitWeekyear(69387847, false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
    }

    @Test
    public void test12958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12958");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.withMinuteOfHour(6);
        int int17 = localDateTime16.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withSecondOfMinute(69530602);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69530602 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
    }

    @Test
    public void test12959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12959");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int int18 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property19 = localDate17.centuryOfEra();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.DateTimeField dateTimeField22 = property19.getField();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeField22.getAsShortText(69229864, locale24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.yearOfCentury();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        long long46 = dateTimeZone37.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str47 = dateTimeZone37.getID();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone37);
        int int49 = localDate48.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property51 = localDate48.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType50.getField(chronology52);
        int int54 = dateTimeField53.getMinimumValue();
        mutableDateTime31.setRounding(dateTimeField53);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime31.copy();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57);
        java.util.GregorianCalendar gregorianCalendar59 = mutableDateTime56.toGregorianCalendar();
        org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar59);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        java.util.TimeZone timeZone65 = dateTimeZone63.toTimeZone();
        boolean boolean67 = dateTimeZone63.equals((java.lang.Object) 69250339);
        org.joda.time.DateTime dateTime68 = localDate60.toDateTimeAtStartOfDay(dateTimeZone63);
        int int69 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.LocalDate localDate71 = localDate60.plusMonths(220);
        java.util.Date date72 = localDate60.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "19" + "'", str21, "19");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "69229864" + "'", str25, "69229864");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-360599990L) + "'", long46 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+100:10" + "'", str47, "+100:10");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2922789 + "'", int69 == 2922789);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Mon Jan 03 00:00:00 GMT+:0:10 1");
    }

    @Test
    public void test12960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12960");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale3.getDisplayScript(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale5);
        java.util.Locale.Builder builder9 = builder7.setRegion("AM");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setVariant("15");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 15 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12961");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.getEra();
        org.joda.time.Chronology chronology6 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.dayOfMonth();
        long long11 = dateTimeField8.getDifferenceAsLong((long) 'u', (long) 69282081);
        long long13 = dateTimeField8.roundFloor((long) 69556458);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test12962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12962");
        java.io.IOException iOException1 = new java.io.IOException("69207073-01-06T14:27:19+100:10");
    }

    @Test
    public void test12963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12963");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        long long28 = chronology22.add((long) 43, (long) 65612, 1969);
        org.joda.time.DateTimeField dateTimeField29 = chronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology22.dayOfWeek();
        long long33 = dateTimeField31.roundHalfEven((long) 2922789);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        int int35 = localDateTime34.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.property(dateTimeFieldType36);
        org.joda.time.DurationField durationField38 = property37.getDurationField();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime41 = property37.roundCeilingCopy();
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology46);
        java.lang.String str48 = dateTimeFormatter44.print((org.joda.time.ReadablePartial) localTime47);
        org.joda.time.LocalTime.Property property49 = localTime47.millisOfDay();
        org.joda.time.LocalTime localTime51 = property49.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime53 = property49.addCopy((long) 70);
        org.joda.time.LocalTime localTime54 = property49.roundHalfFloorCopy();
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale58 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology56, locale58, (java.lang.Integer) 54202800);
        java.util.Set<java.lang.Character> charSet61 = locale58.getExtensionKeys();
        int int62 = property49.getMaximumTextLength(locale58);
        java.util.Locale.setDefault(category43, locale58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime41, 69634595, locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69634595");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 129190071L + "'", long28 == 129190071L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 69637015 + "'", int35 == 69637015);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category43.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str48, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
    }

    @Test
    public void test12964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12964");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        java.lang.String str33 = property32.getName();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "monthOfYear" + "'", str33, "monthOfYear");
    }

    @Test
    public void test12965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12965");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYearOfEra(1970);
        org.joda.time.Chronology chronology7 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69637057 + "'", int1 == 69637057);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test12966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12966");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate9 = dateTime8.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(575);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtStartOfDay(dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.getNameKey(1645456214067L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test12967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12967");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate localDate4 = localDate2.withYear(69208090);
        org.joda.time.LocalDate localDate6 = localDate4.plusDays(19);
        org.joda.time.LocalDate.Property property7 = localDate4.dayOfYear();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks(69281954);
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 69246630, chronology11);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test12968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12968");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("-2000-02-25T19:13:31.786");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) "-2000-02-25T19:13:31.786", dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        boolean boolean14 = dateTimeZone8.isStandardOffset((long) (byte) -1);
        long long17 = dateTimeZone8.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone8.getID();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone8);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight21 = localDate19.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendTimeZoneShortName(strMap27);
        boolean boolean29 = dateTimeZone25.equals((java.lang.Object) strMap27);
        boolean boolean31 = dateTimeZone25.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter22.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.DateTime dateTime34 = localDate19.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.DateTime dateTime36 = dateTime34.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property37 = dateTime34.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long50 = dateTimeZone41.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str51 = dateTimeZone41.getID();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone41);
        int int53 = localDate52.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property55 = localDate52.property(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType54.getField(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) chronology56, chronology58);
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekyear();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.Chronology chronology67 = chronology60.withZone(dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime34.toMutableDateTime(chronology67);
        org.joda.time.Chronology chronology69 = chronology67.withUTC();
        org.joda.time.DateTime dateTime70 = dateTime3.toDateTime(chronology67);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 5, chronology72);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.plus(readableDuration74);
        org.joda.time.DateTime dateTime77 = dateTime73.minusHours((-2022));
        org.joda.time.DateTime.Property property78 = dateTime77.centuryOfEra();
        org.joda.time.DateTime dateTime79 = property78.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime81 = property78.addWrapFieldToCopy(69222959);
        org.joda.time.DateTime dateTime82 = property78.roundHalfEvenCopy();
        long long83 = dateTime82.getMillis();
        boolean boolean84 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Instant instant85 = dateTime82.toInstant();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-360599990L) + "'", long17 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+100:10" + "'", str18, "+100:10");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-360599990L) + "'", long50 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+100:10" + "'", str51, "+100:10");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 946324200000L + "'", long83 == 946324200000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(instant85);
    }

    @Test
    public void test12969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12969");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.minus(readableDuration37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime34.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        mutableDateTime39.addYears(69284779);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.year();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.add((long) 69479276);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test12970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12970");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.LocalDate.Property property17 = localDate14.yearOfCentury();
        java.lang.String str18 = property17.getAsString();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "70" + "'", str18, "70");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test12971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12971");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.plusWeeks(0);
        int int36 = dateTime29.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime29.withEra(69376681);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69376681 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
    }

    @Test
    public void test12972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12972");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        int int23 = mutableDateTime7.getEra();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime7.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        long long38 = dateTimeZone29.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str39 = dateTimeZone29.getID();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone29);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight42 = localDate40.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap48 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder47.appendTimeZoneShortName(strMap48);
        boolean boolean50 = dateTimeZone46.equals((java.lang.Object) strMap48);
        boolean boolean52 = dateTimeZone46.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter43.withZone(dateTimeZone46);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.DateTime dateTime55 = localDate40.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime57 = dateTime55.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property58 = dateTime55.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap64 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder63.appendTimeZoneShortName(strMap64);
        boolean boolean66 = dateTimeZone62.equals((java.lang.Object) strMap64);
        boolean boolean68 = dateTimeZone62.isStandardOffset((long) (byte) -1);
        long long71 = dateTimeZone62.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str72 = dateTimeZone62.getID();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone62);
        int int74 = localDate73.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property76 = localDate73.property(dateTimeFieldType75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType75.getField(chronology77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate((java.lang.Object) chronology77, chronology79);
        org.joda.time.Chronology chronology81 = localDate80.getChronology();
        org.joda.time.DurationField durationField82 = chronology81.minutes();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.weekyear();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone86);
        org.joda.time.Chronology chronology88 = chronology81.withZone(dateTimeZone86);
        org.joda.time.MutableDateTime mutableDateTime89 = dateTime55.toMutableDateTime(chronology88);
        org.joda.time.DateTime.Property property90 = dateTime55.secondOfDay();
        org.joda.time.DateTime.Property property91 = dateTime55.secondOfMinute();
        org.joda.time.DateTime dateTime92 = property91.roundCeilingCopy();
        org.joda.time.DateTime.Property property93 = dateTime92.year();
        int int94 = dateTime92.getDayOfYear();
        mutableDateTime25.setTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime97 = dateTime92.minusMillis(69516424);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-360599990L) + "'", long38 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:10" + "'", str39, "+100:10");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-360599990L) + "'", long71 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+100:10" + "'", str72, "+100:10");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test12973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12973");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        java.util.Date date15 = localDateTime0.toDate();
        int int16 = localDateTime0.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime0.minus(readablePeriod17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(69309637);
        int int21 = localDateTime20.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 25 19:20:37 GMT+:0:10 2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test12974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12974");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(69208701);
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMillis((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withFieldAdded(durationFieldType23, 69247959);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(69209957);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone35.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone35);
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property49 = localDate46.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType48.getField(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) chronology50, chronology52);
        org.joda.time.LocalDate.Property property54 = localDate53.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.monthOfYear();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime57.minuteOfDay();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime57.dayOfYear();
        org.joda.time.DurationField durationField61 = property60.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime63 = property60.set("70");
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = property60.getAsShortText(locale64);
        int int66 = property54.getMaximumShortTextLength(locale64);
        java.lang.String str67 = locale64.getScript();
        java.lang.String str68 = locale64.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime69 = property29.setCopy("mai", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"mai\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 191509 + "'", int17 == 191509);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37 + "'", int22 == 37);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 69209957 + "'", int28 == 69209957);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599990L) + "'", long44 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "70" + "'", str65, "70");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "jpn" + "'", str68, "jpn");
    }

    @Test
    public void test12975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12975");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.append(dateTimePrinter7);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendDayOfYear(69259401);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder10.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendYearOfEra(69306787, 2023);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder11.appendMonthOfYear(69358573);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder16.appendTimeZoneOffset("+35:00", "5777058235t181342+10010", false, 69385302, 69451294);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
    }

    @Test
    public void test12976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12976");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property11.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property11.withMinimumValue();
        java.lang.String str14 = property11.getName();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "secondOfMinute" + "'", str14, "secondOfMinute");
    }

    @Test
    public void test12977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12977");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        java.lang.String str7 = property3.getName();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 5, chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readableDuration11);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        int int14 = property3.getDifference((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property15 = dateTime12.millisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "monthOfYear" + "'", str7, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test12978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12978");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime3.minus(readablePeriod10);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test12979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12979");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        mutableDateTime2.setMinuteOfDay((int) (short) 0);
        java.lang.String str7 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.secondOfDay();
        int int9 = mutableDateTime2.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.centuryOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-05T00:00:00.001+100:10" + "'", str7, "1970-01-05T00:00:00.001+100:10");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test12980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12980");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.getEra();
        org.joda.time.Chronology chronology6 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        java.lang.String str8 = dateTimeField7.getName();
        org.joda.time.DurationField durationField9 = dateTimeField7.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test12981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12981");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.setMillisOfDay((int) '#');
        int int10 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "1", (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime4.toMutableDateTime();
        long long12 = mutableDateTime4.getMillis();
        java.lang.String str13 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        java.lang.String str14 = mutableDateTime4.toString();
        org.joda.time.DateTimeField dateTimeField15 = mutableDateTime4.getRoundingField();
        mutableDateTime4.add((long) 69240944);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        long long30 = dateTimeZone21.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str31 = dateTimeZone21.getID();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone21);
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight34 = localDate32.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap40 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendTimeZoneShortName(strMap40);
        boolean boolean42 = dateTimeZone38.equals((java.lang.Object) strMap40);
        boolean boolean44 = dateTimeZone38.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter35.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = localDate32.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours(69205127);
        org.joda.time.DateTime.Property property50 = dateTime49.monthOfYear();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property53 = dateTime52.year();
        org.joda.time.DateTime dateTime55 = dateTime52.plusDays(39);
        org.joda.time.DateTime dateTime57 = dateTime55.plus((long) 69272);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology59 = mutableDateTime4.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62135352599965L) + "'", long12 == (-62135352599965L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00" + "'", str13, "00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0001-01-08T00:00:00.035+100:10" + "'", str14, "0001-01-08T00:00:00.035+100:10");
        org.junit.Assert.assertNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360599990L) + "'", long30 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:10" + "'", str31, "+100:10");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test12982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12982");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfEra(69226076);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableDateTime38.add(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap46 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendTimeZoneShortName(strMap46);
        boolean boolean48 = dateTimeZone44.equals((java.lang.Object) strMap46);
        boolean boolean50 = dateTimeZone44.isStandardOffset((long) (byte) -1);
        long long53 = dateTimeZone44.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime38.setZoneRetainFields(dateTimeZone44);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone44);
        java.util.TimeZone timeZone56 = dateTimeZone44.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime33.toMutableDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property58 = dateTime33.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-360599990L) + "'", long53 == (-360599990L));
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test12983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12983");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone15.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str25 = dateTimeZone15.getID();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone15);
        java.util.TimeZone timeZone27 = dateTimeZone15.toTimeZone();
        boolean boolean28 = timeZone11.hasSameRules(timeZone27);
        timeZone27.setRawOffset(69205091);
        timeZone27.setID("1970-W02");
        int int33 = timeZone27.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        long long46 = dateTimeZone37.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str47 = dateTimeZone37.getID();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone37);
        java.util.TimeZone timeZone49 = dateTimeZone37.toTimeZone();
        boolean boolean50 = timeZone49.observesDaylightTime();
        int int51 = timeZone49.getRawOffset();
        boolean boolean52 = timeZone27.hasSameRules(timeZone49);
        int int53 = timeZone27.getRawOffset();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360599990L) + "'", long24 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:10" + "'", str25, "+100:10");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+19:13");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 69205091 + "'", int33 == 69205091);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-360599990L) + "'", long46 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+100:10" + "'", str47, "+100:10");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 360600000 + "'", int51 == 360600000);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 69205091 + "'", int53 == 69205091);
    }

    @Test
    public void test12984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12984");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.year();
        boolean boolean2 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.parse("15000000", dateTimeFormatter1);
        java.io.Writer writer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter1.printTo(writer4, (long) 432);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test12985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12985");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.minus(readableDuration37);
        org.joda.time.DateTime.Property property39 = dateTime34.yearOfCentury();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(69288576);
        org.joda.time.DateTime dateTime44 = dateTime42.plusWeeks(69226076);
        boolean boolean46 = dateTime42.isAfter(15000000L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test12986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12986");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.setMillisOfDay((int) '#');
        int int10 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "1", (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime4.toMutableDateTime();
        int int14 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", 4);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        long long27 = dateTimeZone18.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str28 = dateTimeZone18.getID();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone18);
        int int30 = localDate29.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property32 = localDate29.property(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType31.getField(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) chronology33, chronology35);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate36.withPeriodAdded(readablePeriod38, (int) '#');
        org.joda.time.LocalDate.Property property41 = localDate36.weekyear();
        org.joda.time.LocalDate localDate42 = property41.withMinimumValue();
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter0.withChronology(chronology43);
        java.lang.Integer int45 = dateTimeFormatter0.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.yearOfCentury();
        mutableDateTime48.addDays((int) (short) -1);
        int int52 = mutableDateTime48.getYear();
        java.lang.String str53 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter0.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) dateTimeFormatter54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-360599990L) + "'", long27 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+100:10" + "'", str28, "+100:10");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-004" + "'", str53, "1970-004");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
    }

    @Test
    public void test12987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12987");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        int int8 = localDateTime7.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69637777 + "'", int1 == 69637777);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test12988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12988");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        boolean boolean11 = localDateTime9.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.monthOfYear();
        int int18 = mutableDateTime16.getWeekOfWeekyear();
        mutableDateTime16.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean22 = mutableDateTime16.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime9.property(dateTimeFieldType21);
        java.util.Date date24 = localDateTime9.toDate();
        boolean boolean25 = dateTimeZone2.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime.Property property26 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime9.minusMillis((-292275055));
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        int int30 = localDateTime29.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.minuteOfHour();
        int int36 = localDateTime32.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withHourOfDay(9);
        org.joda.time.LocalDateTime.Property property39 = localDateTime32.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime32.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Feb 25 19:20:37 GMT+:0:10 2022");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 69637790 + "'", int30 == 69637790);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 25 + "'", int36 == 25);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
    }

    @Test
    public void test12989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12989");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        int int6 = mutableDateTime2.getYear();
        org.joda.time.Instant instant7 = mutableDateTime2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        int int23 = localDate22.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property25 = localDate22.property(dateTimeFieldType24);
        int int26 = mutableDateTime2.get(dateTimeFieldType24);
        int int27 = mutableDateTime2.getRoundingMode();
        org.joda.time.Chronology chronology28 = mutableDateTime2.getChronology();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime2.add(readableDuration29, 69582825);
        boolean boolean33 = mutableDateTime2.isEqual((long) 69415265);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test12990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12990");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusMinutes(69240429);
        org.joda.time.DateTime dateTime3 = dateTime0.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury(11);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = dateTime7.toLocalDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.DateTime dateTime12 = dateTime7.minusYears(69205127);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        boolean boolean14 = dateTime3.isBefore((org.joda.time.ReadableInstant) instant13);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test12991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12991");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology5);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test12992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12992");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 69298791);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(365);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime5, dateTimeZone7);
        int int9 = localDateTime8.getMillisOfSecond();
        int int10 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        int int11 = localDateTime1.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 881 + "'", int9 == 881);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
    }

    @Test
    public void test12993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12993");
        java.lang.String[] strArray2 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList10);
        boolean boolean14 = strList12.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList20);
        boolean boolean24 = strList22.equals((java.lang.Object) (-1));
        boolean boolean25 = strList12.retainAll((java.util.Collection<java.lang.String>) strList22);
        boolean boolean26 = strSet3.retainAll((java.util.Collection<java.lang.String>) strList12);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList32);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap41 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.appendTimeZoneShortName(strMap41);
        boolean boolean43 = dateTimeZone39.equals((java.lang.Object) strMap41);
        boolean boolean45 = dateTimeZone39.isStandardOffset((long) (byte) -1);
        long long48 = dateTimeZone39.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str49 = dateTimeZone39.getID();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone39);
        int int51 = localDate50.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property53 = localDate50.property(dateTimeFieldType52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap59 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder58.appendTimeZoneShortName(strMap59);
        boolean boolean61 = dateTimeZone57.equals((java.lang.Object) strMap59);
        boolean boolean63 = dateTimeZone57.isStandardOffset((long) (byte) -1);
        long long66 = dateTimeZone57.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str67 = dateTimeZone57.getID();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone57);
        int int69 = localDate68.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property71 = localDate68.property(dateTimeFieldType70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType70.getField(chronology72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) chronology72, chronology74);
        org.joda.time.Chronology chronology76 = localDate75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.minutes();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType52.getField(chronology76);
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.lang.String str80 = locale79.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology76, locale79, (java.lang.Integer) 0, 54202800);
        boolean boolean84 = strList32.remove((java.lang.Object) chronology76);
        boolean boolean85 = strSet3.addAll((java.util.Collection<java.lang.String>) strList32);
        boolean boolean86 = strSet3.isEmpty();
        boolean boolean87 = strSet3.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream88 = strSet3.parallelStream();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-360599990L) + "'", long48 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+100:10" + "'", str49, "+100:10");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-360599990L) + "'", long66 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+100:10" + "'", str67, "+100:10");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strStream88);
    }

    @Test
    public void test12994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12994");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        java.lang.Object obj5 = mutableDateTime2.clone();
        int int6 = mutableDateTime2.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.millisOfSecond();
        mutableDateTime2.addDays(65725);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.monthOfYear();
        mutableDateTime12.addWeeks((int) (byte) 10);
        mutableDateTime12.setMillisOfDay(43);
        boolean boolean18 = mutableDateTime12.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime12.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15000 + "'", int6 == 15000);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test12995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12995");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusSeconds(360600000);
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69638002 + "'", int1 == 69638002);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test12996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12996");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("JPN");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 5, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime9.minusHours((-2022));
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology16, locale18, (java.lang.Integer) 54202800);
        java.util.Locale locale21 = dateTimeParserBucket20.getLocale();
        java.util.Locale locale22 = dateTimeParserBucket20.getLocale();
        dateTimeParserBucket20.setPivotYear((java.lang.Integer) 69221500);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendTimeZoneShortName(strMap29);
        boolean boolean31 = dateTimeZone27.equals((java.lang.Object) strMap29);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        java.lang.String str35 = dateTimeZone27.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        dateTimeParserBucket20.setZone(dateTimeZone27);
        org.joda.time.DateTime dateTime38 = dateTime13.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime40 = dateTime13.plusMinutes(69215043);
        boolean boolean41 = languageRange1.equals((java.lang.Object) dateTime40);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jpn" + "'", str4, "jpn");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "jpn" + "'", str5, "jpn");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+100:10" + "'", str35, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test12997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12997");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withPeriodAdded(readablePeriod7, 38);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(25);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfEra(54202800);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears(2000);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(69247318);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        int int19 = localDateTime18.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks(191509);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        int int27 = localDateTime25.getYear();
        int int28 = localDateTime25.size();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths(69225355);
        int int31 = localDateTime30.getDayOfYear();
        boolean boolean32 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        java.lang.String str33 = localDateTime17.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69638030 + "'", int19 == 69638030);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5692 + "'", int27 == 5692);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 301 + "'", int31 == 301);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "54204800-02-26T14:34:45.348" + "'", str33, "54204800-02-26T14:34:45.348");
    }

    @Test
    public void test12998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12998");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, 5);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology52.getZone();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime54.withYearOfCentury(69354805);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69354805 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test12999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test12999");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        int int5 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter23.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = localDate20.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 59, dateTimeZone40);
        boolean boolean42 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime41);
        int int43 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime45 = dateTime37.minusSeconds(69205874);
        org.joda.time.DateTime dateTime46 = dateTime37.toDateTime();
        boolean boolean47 = dateTime37.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test13000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest25.test13000");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval2 = localDate0.toInterval();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate0.plus(readablePeriod3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        boolean boolean7 = localDate0.isSupported(durationFieldType6);
        int int8 = localDate0.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }
}

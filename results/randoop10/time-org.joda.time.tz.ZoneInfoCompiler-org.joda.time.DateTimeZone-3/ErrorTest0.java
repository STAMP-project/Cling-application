import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DurationField durationField30 = chronology21.eras();
        org.joda.time.DurationField durationField31 = chronology21.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField31, and durationField30", !(durationField30.compareTo(durationField31) == 0) || (Math.signum(durationField30.compareTo(durationField30)) == Math.signum(durationField31.compareTo(durationField30))));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        int int27 = localTime26.getHourOfDay();
        long long29 = chronology19.set((org.joda.time.ReadablePartial) localTime26, 364740218880L);
        org.joda.time.DurationField durationField30 = chronology19.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField30, and durationField21", !(durationField21.compareTo(durationField30) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField30.compareTo(durationField21))));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = dateTime10.withZoneRetainFields(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withPeriodAdded(readablePeriod16, 12);
        org.joda.time.DateTime dateTime20 = dateTime15.withSecondOfMinute(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime20", (dateTime2.compareTo(dateTime20) == 0) == dateTime2.equals(dateTime20));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.centuryOfEra();
        org.joda.time.DurationField durationField38 = chronology32.eras();
        org.joda.time.DurationField durationField39 = chronology32.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField38, durationField39, and durationField38", !(durationField38.compareTo(durationField39) == 0) || (Math.signum(durationField38.compareTo(durationField38)) == Math.signum(durationField39.compareTo(durationField38))));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        int int27 = localTime26.getHourOfDay();
        long long29 = chronology19.set((org.joda.time.ReadablePartial) localTime26, 364740218880L);
        org.joda.time.DateTimeField dateTimeField30 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology19.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField31, and durationField21", !(durationField21.compareTo(durationField31) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField31.compareTo(durationField21))));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        int int27 = localTime26.getHourOfDay();
        long long29 = chronology19.set((org.joda.time.ReadablePartial) localTime26, 364740218880L);
        org.joda.time.DateTimeField dateTimeField30 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.minuteOfHour();
        org.joda.time.DurationField durationField33 = chronology19.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField33, and durationField21", !(durationField21.compareTo(durationField33) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField33.compareTo(durationField21))));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) '#', dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone7);
        int int11 = dateTimeZone7.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 22, dateTimeZone7);
        long long14 = dateTimeZone7.convertUTCToLocal((long) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime(dateTimeZone7);
        boolean boolean16 = dateTimeZone7.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime15", (dateTime1.compareTo(dateTime15) == 0) == dateTime1.equals(dateTime15));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        int int57 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime47.toMutableDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime34.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100L, chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(100L, chronology64);
        boolean boolean66 = dateTime62.isAfter((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime62.getDayOfYear();
        org.joda.time.DateTime dateTime69 = dateTime62.plusYears((int) (short) 0);
        long long70 = dateTime62.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int72 = dateTime62.get(dateTimeFieldType71);
        int int73 = dateTime34.get(dateTimeFieldType71);
        org.joda.time.Chronology chronology74 = dateTime34.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.weeks();
        org.joda.time.DurationField durationField76 = chronology74.centuries();
        org.joda.time.DurationField durationField77 = chronology74.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField77, durationField75, and durationField76", !(durationField77.compareTo(durationField75) == 0) || (Math.signum(durationField77.compareTo(durationField76)) == Math.signum(durationField75.compareTo(durationField76))));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weekyears();
        org.joda.time.DurationField durationField27 = chronology19.years();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField26 and durationField27", (durationField26.compareTo(durationField27) == 0) == durationField26.equals(durationField27));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weekyears();
        org.joda.time.DurationField durationField27 = chronology19.years();
        org.joda.time.Chronology chronology28 = chronology19.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField26 and durationField27", (durationField26.compareTo(durationField27) == 0) == durationField26.equals(durationField27));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weekyears();
        org.joda.time.DurationField durationField27 = chronology19.years();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField26 and durationField27", (durationField26.compareTo(durationField27) == 0) == durationField26.equals(durationField27));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        int int17 = property15.get();
        java.lang.String str18 = property15.getName();
        int int19 = property15.getMaximumValueOverall();
        org.joda.time.DateTime dateTime20 = property15.getDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        boolean boolean27 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusYears(3);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        int int39 = dateTime26.get(dateTimeFieldType35);
        boolean boolean40 = dateTime20.isSupported(dateTimeFieldType35);
        org.joda.time.Instant instant41 = dateTime20.toInstant();
        org.joda.time.Instant instant43 = instant41.minus((long) 5);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.minus(readableDuration44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant41", (dateTime12.compareTo(instant41) == 0) == dateTime12.equals(instant41));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded(readablePeriod15, 197);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks(52);
        java.lang.String str20 = dateTime19.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime14", (dateTime9.compareTo(dateTime14) == 0) == dateTime9.equals(dateTime14));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(3);
        int int11 = localDate10.getYear();
        org.joda.time.LocalDate localDate13 = localDate10.withWeekOfWeekyear((int) ' ');
        int[] intArray15 = chronology5.get((org.joda.time.ReadablePartial) localDate10, (long) 52);
        org.joda.time.DurationField durationField16 = chronology5.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology5.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField18, and durationField16", !(durationField16.compareTo(durationField18) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField18.compareTo(durationField16))));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        int int16 = localDate15.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1, locale2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("100");
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromCalendarFields(calendar7);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar7", (calendar3.compareTo(calendar7) == 0) == calendar3.equals(calendar7));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        java.util.Date date36 = localDateTime33.toDate();
        int int37 = date36.getDay();
        boolean boolean38 = date32.after(date36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        calendar43.clear(9);
        int int47 = calendar43.getGreatestMinimum((int) (short) 0);
        calendar43.setLenient(false);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        int int51 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        int int53 = timeZone52.getRawOffset();
        boolean boolean54 = timeZone50.hasSameRules(timeZone52);
        calendar43.setTimeZone(timeZone50);
        java.util.Date date56 = calendar43.getTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay(10);
        java.util.Date date60 = localDateTime57.toDate();
        int int61 = date60.getDay();
        java.time.Instant instant62 = date60.toInstant();
        boolean boolean63 = date56.after(date60);
        boolean boolean64 = date36.after(date60);
        int int65 = date60.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar43", (gregorianCalendar21.compareTo(calendar43) == 0) == gregorianCalendar21.equals(calendar43));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        boolean boolean4 = timeZone2.observesDaylightTime();
        int int5 = timeZone2.getRawOffset();
        java.util.Calendar.Builder builder6 = builder0.setTimeZone(timeZone2);
        timeZone2.setRawOffset(54122803);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        calendar13.clear(9);
        int int17 = calendar13.getGreatestMinimum((int) (short) 0);
        calendar13.setLenient(false);
        calendar13.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("hi!");
        calendar13.setTimeZone(timeZone27);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.util.Locale locale31 = java.util.Locale.PRC;
        java.lang.String str32 = locale29.getDisplayCountry(locale31);
        java.lang.String str33 = locale29.getDisplayName();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone27, locale29);
        timeZone27.setRawOffset(13);
        boolean boolean37 = timeZone2.hasSameRules(timeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar34", (calendar3.compareTo(calendar34) == 0) == calendar3.equals(calendar34));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths(0);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1645455718, chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.hourOfDay();
        org.joda.time.DurationField durationField10 = chronology5.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField10, and durationField8", !(durationField8.compareTo(durationField10) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField10.compareTo(durationField8))));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        calendar4.setTimeZone(timeZone18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18, locale26);
        timeZone18.setID("1970-03-19T00:00:00.100Z");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar28", (calendar25.compareTo(calendar28) == 0) == calendar25.equals(calendar28));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        calendar4.setLenient(true);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        java.util.TimeZone timeZone14 = calendar4.getTimeZone();
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17, locale18);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("100");
        boolean boolean22 = timeZone17.hasSameRules(timeZone21);
        boolean boolean23 = timeZone21.observesDaylightTime();
        timeZone21.setRawOffset(54122803);
        timeZone21.setID("1970");
        boolean boolean28 = timeZone14.hasSameRules(timeZone21);
        java.util.Locale locale31 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.lang.String str33 = locale31.getVariant();
        java.lang.String str34 = locale31.getDisplayScript();
        java.util.Locale locale35 = locale31.stripExtensions();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone21, locale35);
        java.lang.String str37 = locale35.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar36", (calendar19.compareTo(calendar36) == 0) == calendar19.equals(calendar36));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.weekyears();
        org.joda.time.DurationField durationField36 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField36", Math.signum(durationField35.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField35)));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        long long26 = chronology20.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField27 = chronology20.weeks();
        long long31 = chronology20.add((long) '#', (long) 197, 1);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(1645454200000L, chronology20);
        org.joda.time.LocalTime localTime34 = localTime32.plusSeconds(1645455721);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        long long10 = dateTime2.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int12 = dateTime2.get(dateTimeFieldType11);
        java.util.Date date13 = dateTime2.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int15 = dateTime2.get(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = dateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = dateTime21.minus(10L);
        org.joda.time.DateTime dateTime27 = dateTime25.withSecondOfMinute(22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        boolean boolean34 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        boolean boolean39 = dateTimeZone37.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = dateTime33.toDateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime44 = dateTime25.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(280491302912L, dateTimeZone37);
        org.joda.time.DateTime dateTime46 = dateTime2.toDateTime(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime41", (dateTime5.compareTo(dateTime41) == 0) == dateTime5.equals(dateTime41));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = dateTime11.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        boolean boolean33 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime29.getDayOfYear();
        org.joda.time.DateTime dateTime36 = dateTime29.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime29.minusWeeks(4);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfWeek(1);
        org.joda.time.DateTime dateTime42 = dateTime38.plusWeeks(80);
        org.joda.time.DateMidnight dateMidnight43 = dateTime38.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded(readableDuration44, 39);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(80);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime(dateTimeZone48);
        int int50 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime49", (dateTime46.compareTo(dateTime49) == 0) == dateTime46.equals(dateTime49));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        calendar4.setTimeZone(timeZone18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18, locale26);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("/experiment/hi!");
        java.lang.String str31 = timeZone30.getID();
        boolean boolean32 = timeZone18.hasSameRules(timeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar28", (calendar25.compareTo(calendar28) == 0) == calendar25.equals(calendar28));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weekyears();
        org.joda.time.DurationField durationField27 = chronology19.years();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField26 and durationField27", (durationField26.compareTo(durationField27) == 0) == durationField26.equals(durationField27));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusMinutes(2019);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime0.getFields();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(3);
        java.util.Date date12 = localDateTime9.toDate();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withWeekyear(7);
        int int15 = localDateTime9.getYearOfCentury();
        int int16 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime0.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readableDuration20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '#', dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone25);
        int int29 = dateTimeZone25.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 22, dateTimeZone25);
        long long32 = dateTimeZone25.convertUTCToLocal((long) (short) 1);
        org.joda.time.DateTime dateTime33 = dateTime21.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime0, dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime33", (dateTime19.compareTo(dateTime33) == 0) == dateTime19.equals(dateTime33));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property41 = localTime40.hourOfDay();
        org.joda.time.LocalTime localTime42 = property41.withMinimumValue();
        int int43 = localTime42.getHourOfDay();
        long long45 = chronology35.set((org.joda.time.ReadablePartial) localTime42, 364740218880L);
        org.joda.time.DateTimeField dateTimeField46 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology35.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = chronology35.year();
        org.joda.time.DateTime dateTime50 = dateTime5.withChronology(chronology35);
        org.joda.time.DurationField durationField51 = chronology35.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField51, and durationField37", !(durationField37.compareTo(durationField51) == 0) || (Math.signum(durationField37.compareTo(durationField37)) == Math.signum(durationField51.compareTo(durationField37))));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        calendar4.setTimeZone(timeZone18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18, locale26);
        java.lang.String str29 = locale26.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar28", (calendar25.compareTo(calendar28) == 0) == calendar25.equals(calendar28));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.Chronology chronology38 = chronology32.withUTC();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfDay();
        org.joda.time.DurationField durationField42 = chronology40.eras();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField42", Math.signum(durationField39.compareTo(durationField42)) == -Math.signum(durationField42.compareTo(durationField39)));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        int int12 = calendar4.getFirstDayOfWeek();
        calendar4.setFirstDayOfWeek(16);
        int int15 = calendar4.getFirstDayOfWeek();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getMonth();
        calendar4.setTime(date16);
        java.lang.String str19 = calendar4.getCalendarType();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        int int21 = localDate20.getCenturyOfEra();
        org.joda.time.LocalDate localDate23 = localDate20.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone26);
        long long31 = dateTimeZone26.adjustOffset((long) 22, false);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) calendar4, dateTimeZone26);
        java.lang.String str34 = dateTimeZone26.getNameKey(1645609000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDate20 and localDate32", (localDate20.compareTo(localDate32) == 0) == localDate20.equals(localDate32));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime8 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, (int) ' ');
        java.lang.String str13 = dateTimeZone11.getName((long) 32580010);
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime19 = property18.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = property18.withMinimumValue();
        org.joda.time.LocalTime localTime21 = property18.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime22 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        java.lang.String str24 = dateTimeFieldType23.toString();
        int int25 = dateTime8.get(dateTimeFieldType23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime14", (dateTime1.compareTo(dateTime14) == 0) == dateTime1.equals(dateTime14));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.era();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        java.lang.String str10 = property7.getAsText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = property7.getAsShortText(locale11);
        java.util.Locale locale16 = new java.util.Locale(":", "2057-02-19");
        java.lang.String str17 = locale11.getDisplayCountry(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale11);
        boolean boolean19 = timeZone0.observesDaylightTime();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone0);
        java.lang.Object obj21 = timeZone0.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar20", (calendar18.compareTo(calendar20) == 0) == calendar18.equals(calendar20));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        int int22 = dateTime21.getWeekOfWeekyear();
        boolean boolean23 = calendar4.before((java.lang.Object) dateTime21);
        org.joda.time.DateTime dateTime25 = dateTime21.withWeekyear(11);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        boolean boolean33 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime29.getDayOfYear();
        org.joda.time.DateTime dateTime36 = dateTime29.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property37 = dateTime29.year();
        org.joda.time.DateTime dateTime38 = property37.withMaximumValue();
        org.joda.time.DateTime dateTime40 = property37.addToCopy(3);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear(12);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = dateTime40.withZoneRetainFields(dateTimeZone43);
        java.lang.String str45 = dateTimeZone43.getID();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(obj26, dateTimeZone43);
        java.lang.String str47 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime48 = dateTime21.withZone(dateTimeZone43);
        org.joda.time.Instant instant49 = dateTime21.toInstant();
        org.joda.time.MutableDateTime mutableDateTime50 = instant49.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime48", (dateTime2.compareTo(dateTime48) == 0) == dateTime2.equals(dateTime48));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        boolean boolean24 = localTime2.isSupported(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        java.lang.String str26 = durationFieldType25.getName();
        org.joda.time.LocalTime localTime28 = localTime2.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        boolean boolean35 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime41 = dateTime31.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property45 = localTime44.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime48 = localTime44.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        int int51 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime41.toMutableDateTime(dateTimeZone47);
        int int54 = dateTimeZone47.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime55 = localTime28.toDateTimeToday(dateTimeZone47);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property60 = localTime59.hourOfDay();
        org.joda.time.LocalTime localTime62 = localTime59.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology63 = localTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.hourOfHalfday();
        boolean boolean65 = dateTimeField64.isLenient();
        org.joda.time.DurationField durationField66 = dateTimeField64.getDurationField();
        java.util.Locale locale70 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int71 = dateTimeField64.getMaximumShortTextLength(locale70);
        java.lang.String str72 = dateTimeZone47.getShortName(709199999L, locale70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(100L, chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(100L, chronology77);
        boolean boolean79 = dateTime75.isAfter((org.joda.time.ReadableInstant) dateTime78);
        int int80 = dateTime75.getDayOfYear();
        org.joda.time.DateTime dateTime82 = dateTime75.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property83 = dateTime75.year();
        org.joda.time.DateTime dateTime85 = dateTime75.plusMonths(10);
        int int86 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime85);
        int int87 = dateTime85.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime88 = dateTime85.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime52", (dateTime18.compareTo(mutableDateTime52) == 0) == dateTime18.equals(mutableDateTime52));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        int int24 = dateTime1.get(dateTimeField23);
        org.joda.time.DateTime dateTime25 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime25.minusYears(563);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime22", (dateTime14.compareTo(dateTime22) == 0) == dateTime14.equals(dateTime22));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 100, 2, 11, 4, (int) (short) 0, (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMillis((-1));
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        org.joda.time.DateTime dateTime12 = property9.addToCopy((long) 31);
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime17.toString(dateTimeFormatter20);
        org.joda.time.DateTime.Property property22 = dateTime17.centuryOfEra();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime29 = localTime25.toDateTimeToday(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        int int32 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = dateTimeZone28.isStandardOffset(0L);
        java.util.TimeZone timeZone35 = dateTimeZone28.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str44 = nameProvider37.getName(locale40, "hi!", "1970-01-01");
        java.lang.String str45 = dateTimeZone28.getShortName(10L, locale40);
        java.lang.String str46 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) dateTime17, dateTimeZone28);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfCentury(52);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours(1645455753);
        boolean boolean52 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime51);
        java.util.Date date53 = dateTime14.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime47", (dateTime17.compareTo(dateTime47) == 0) == dateTime17.equals(dateTime47));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.era();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1970);
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        boolean boolean14 = localDate10.equals((java.lang.Object) locale11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        boolean boolean21 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        boolean boolean26 = dateTimeZone24.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime20.toDateTime(dateTimeZone24);
        int int30 = dateTimeZone24.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight32 = localDate10.toDateMidnight(dateTimeZone24);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        int int34 = localDate33.getCenturyOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int49 = dateTime47.get(dateTimeFieldType48);
        org.joda.time.DateTime.Property property50 = dateTime47.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property50.getFieldType();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        org.joda.time.LocalDate localDate54 = localDate33.withFieldAdded(durationFieldType52, 13);
        boolean boolean55 = localDate10.isSupported(durationFieldType52);
        int[] intArray57 = chronology5.get((org.joda.time.ReadablePartial) localDate10, (long) 844);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime28", (dateTime2.compareTo(dateTime28) == 0) == dateTime2.equals(dateTime28));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        java.util.Date date36 = localDateTime33.toDate();
        int int37 = date36.getDay();
        boolean boolean38 = date32.after(date36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        calendar43.clear(9);
        int int47 = calendar43.getGreatestMinimum((int) (short) 0);
        calendar43.setLenient(false);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        int int51 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        int int53 = timeZone52.getRawOffset();
        boolean boolean54 = timeZone50.hasSameRules(timeZone52);
        calendar43.setTimeZone(timeZone50);
        java.util.Date date56 = calendar43.getTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay(10);
        java.util.Date date60 = localDateTime57.toDate();
        int int61 = date60.getDay();
        java.time.Instant instant62 = date60.toInstant();
        boolean boolean63 = date56.after(date60);
        boolean boolean64 = date36.after(date60);
        date60.setMinutes(308);
        long long67 = date60.getTime();
        int int68 = date60.getMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar43", (gregorianCalendar21.compareTo(calendar43) == 0) == gregorianCalendar21.equals(calendar43));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant24.plus(readableDuration28);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTimeISO();
        org.joda.time.Instant instant32 = instant29.minus(13L);
        org.joda.time.Instant instant34 = instant32.plus((long) 9);
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("millis");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTime5.toString("4", locale7);
        int int9 = dateTime5.getYearOfCentury();
        org.joda.time.Instant instant10 = dateTime5.toInstant();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant10.minus(readableDuration11);
        org.joda.time.Instant instant14 = instant10.withMillis((long) 57);
        org.joda.time.Instant instant16 = instant10.plus((long) 32400000);
        boolean boolean17 = instant10.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime18 = instant10.toMutableDateTimeISO();
        int int19 = mutableDateTime18.getSecondOfMinute();
        boolean boolean20 = languageRange1.equals((java.lang.Object) int19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime18", (dateTime5.compareTo(mutableDateTime18) == 0) == dateTime5.equals(mutableDateTime18));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        java.util.Locale locale4 = null;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property8 = dateTime3.yearOfEra();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyearOfCentury();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) dateTime3, chronology15);
        org.joda.time.DurationField durationField20 = chronology15.weeks();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(0L, chronology15);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime27.plus((long) 'a');
        org.joda.time.DateTime dateTime33 = dateTime27.plusWeeks(11);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, chronology35);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        calendar38.clear(9);
        int int42 = calendar38.getGreatestMinimum((int) (short) 0);
        calendar38.roll(9, true);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        boolean boolean52 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime48.getDayOfYear();
        int int54 = dateTime48.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar55 = dateTime48.toGregorianCalendar();
        org.joda.time.Chronology chronology56 = dateTime48.getChronology();
        boolean boolean57 = calendar38.after((java.lang.Object) chronology56);
        java.lang.String str58 = calendar38.getCalendarType();
        calendar38.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromCalendarFields(calendar38);
        boolean boolean67 = dateTime27.equals((java.lang.Object) localTime66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = dateTime27.toDateTime(chronology68);
        int int70 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime72 = dateTime27.minusMillis(445);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and gregorianCalendar55", (calendar5.compareTo(gregorianCalendar55) == 0) == calendar5.equals(gregorianCalendar55));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        int int16 = dateTime5.getMinuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime5.plusMillis(0);
        boolean boolean19 = dateTime5.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime5.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime5.withZone(dateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and gregorianCalendar20", (calendar15.compareTo(gregorianCalendar20) == 0) == calendar15.equals(gregorianCalendar20));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime5 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime7 = localTime5.plusMillis((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime26.plus((long) 'a');
        org.joda.time.DateTime dateTime32 = dateTime26.plusWeeks(11);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillis((long) 8);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.LocalTime localTime40 = localTime37.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime21.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.monthOfYear();
        boolean boolean45 = durationFieldType8.isSupported(chronology41);
        org.joda.time.LocalTime localTime47 = localTime5.withFieldAdded(durationFieldType8, 1645455788);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(100L, chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime54.plus((long) 'a');
        org.joda.time.DateTime dateTime60 = dateTime54.plusWeeks(11);
        org.joda.time.DateTime dateTime62 = dateTime60.withMillis((long) 8);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property66 = localTime65.hourOfDay();
        org.joda.time.LocalTime localTime68 = localTime65.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology69 = localTime68.getChronology();
        org.joda.time.DateTime dateTime70 = dateTime62.toDateTime(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.clockhourOfDay();
        long long75 = chronology69.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime76 = dateTime49.withChronology(chronology69);
        org.joda.time.DateTimeField dateTimeField77 = chronology69.year();
        org.joda.time.DateTimeField dateTimeField78 = chronology69.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone79 = chronology69.getZone();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(chronology69);
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology69);
        boolean boolean82 = durationFieldType8.isSupported(chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime49", (dateTime11.compareTo(dateTime49) == 0) == dateTime11.equals(dateTime49));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        boolean boolean3 = localTime1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime28.plus((long) 'a');
        org.joda.time.DateTime dateTime34 = dateTime28.plusWeeks(11);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillis((long) 8);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property40 = localTime39.hourOfDay();
        org.joda.time.LocalTime localTime42 = localTime39.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime36.toDateTime(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        int int46 = dateTime23.get(dateTimeField45);
        long long48 = dateTimeField45.roundHalfEven((long) 2);
        int int49 = dateTime18.get(dateTimeField45);
        long long52 = dateTimeField45.add((long) 22, (-3599999L));
        int int53 = dateTimeField45.getMaximumValue();
        java.lang.String str55 = dateTimeField45.getAsShortText(13L);
        java.util.Locale locale59 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        java.lang.String str61 = locale59.getVariant();
        java.lang.String str62 = locale59.getDisplayScript();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale63);
        java.lang.String str66 = dateTimeField45.getAsShortText(197, locale63);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField45.getType();
        int int68 = dateTimeField45.getMaximumValue();
        boolean boolean69 = localTime5.equals((java.lang.Object) dateTimeField45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime44", (dateTime36.compareTo(dateTime44) == 0) == dateTime36.equals(dateTime44));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        boolean boolean8 = dateTimeField7.isSupported();
        int int9 = dateTimeField7.getMinimumValue();
        java.lang.String str11 = dateTimeField7.getAsText((long) 7);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime15.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime26 = dateTime24.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime24.getZone();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("2057-02-19");
        java.lang.String str31 = dateTimeZone27.getName((long) 27, locale30);
        java.lang.String str32 = dateTimeField7.getAsText(82980000, locale30);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale37.getVariant();
        java.lang.String str40 = locale37.getISO3Language();
        java.util.Locale.setDefault(category34, locale37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(100L, chronology46);
        boolean boolean48 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime47.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        boolean boolean53 = dateTimeZone51.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = dateTime47.toDateTime(dateTimeZone51);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = locale57.getISO3Country();
        java.lang.String str59 = dateTimeZone51.getShortName((long) 15, locale57);
        java.util.Locale.setDefault(category34, locale57);
        java.util.Locale locale61 = java.util.Locale.getDefault(category34);
        java.util.Locale locale65 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.util.Locale.setDefault(category34, locale65);
        java.lang.String str67 = dateTimeField7.getAsShortText((long) 971, locale65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime55", (dateTime15.compareTo(dateTime55) == 0) == dateTime15.equals(dateTime55));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.era();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        java.lang.String str10 = property7.getAsText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = property7.getAsShortText(locale11);
        java.util.Locale locale16 = new java.util.Locale(":", "2057-02-19");
        java.lang.String str17 = locale11.getDisplayCountry(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale11);
        boolean boolean19 = timeZone0.observesDaylightTime();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        java.util.Locale locale24 = null;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        calendar25.clear(9);
        int int29 = calendar25.getGreatestMinimum((int) (short) 0);
        calendar25.setLenient(false);
        calendar25.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("hi!");
        calendar25.setTimeZone(timeZone39);
        int int41 = timeZone39.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("hi!");
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.time.ZoneId zoneId47 = timeZone45.toZoneId();
        boolean boolean48 = timeZone44.hasSameRules(timeZone45);
        boolean boolean49 = timeZone39.hasSameRules(timeZone44);
        boolean boolean50 = timeZone44.observesDaylightTime();
        boolean boolean51 = timeZone0.hasSameRules(timeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar20", (calendar18.compareTo(calendar20) == 0) == calendar18.equals(calendar20));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) '#', dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone7);
        int int11 = dateTimeZone7.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 22, dateTimeZone7);
        long long14 = dateTimeZone7.convertUTCToLocal((long) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime15", (dateTime1.compareTo(dateTime15) == 0) == dateTime1.equals(dateTime15));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(80);
        org.joda.time.DateMidnight dateMidnight16 = dateTime11.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded(readableDuration17, 39);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(80);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = dateTime19.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime22", (dateTime19.compareTo(dateTime22) == 0) == dateTime19.equals(dateTime22));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        calendar16.clear(9);
        int int20 = calendar16.getGreatestMinimum((int) (short) 0);
        calendar16.setLenient(false);
        calendar16.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("hi!");
        calendar16.setTimeZone(timeZone30);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.lang.String str35 = locale32.getDisplayCountry(locale34);
        java.lang.String str36 = locale32.getDisplayName();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone30, locale32);
        boolean boolean38 = calendar4.after((java.lang.Object) timeZone30);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale42.getVariant();
        java.lang.String str45 = locale42.getISO3Language();
        java.util.Locale.setDefault(category39, locale42);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(100L, chronology51);
        boolean boolean53 = dateTime49.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = dateTime52.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        boolean boolean58 = dateTimeZone56.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime52.toDateTime(dateTimeZone56);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.lang.String str63 = locale62.getISO3Country();
        java.lang.String str64 = dateTimeZone56.getShortName((long) 15, locale62);
        java.util.Locale.setDefault(category39, locale62);
        java.lang.String str67 = locale62.getExtension('u');
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone30, locale62);
        boolean boolean69 = timeZone30.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar68", (calendar37.compareTo(calendar68) == 0) == calendar37.equals(calendar68));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        calendar16.clear(9);
        int int20 = calendar16.getGreatestMinimum((int) (short) 0);
        calendar16.setLenient(false);
        calendar16.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("hi!");
        calendar16.setTimeZone(timeZone30);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.lang.String str35 = locale32.getDisplayCountry(locale34);
        java.lang.String str36 = locale32.getDisplayName();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone30, locale32);
        boolean boolean38 = calendar4.after((java.lang.Object) timeZone30);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        calendar43.clear(9);
        int int47 = calendar43.getGreatestMinimum((int) (short) 0);
        calendar43.roll(9, true);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(100L, chronology52);
        java.util.Locale locale54 = null;
        java.util.Calendar calendar55 = dateTime53.toCalendar(locale54);
        calendar55.clear(9);
        int int59 = calendar55.getGreatestMinimum((int) (short) 0);
        calendar55.setLenient(false);
        calendar55.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getTimeZone("hi!");
        calendar55.setTimeZone(timeZone69);
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.util.Locale locale73 = java.util.Locale.PRC;
        java.lang.String str74 = locale71.getDisplayCountry(locale73);
        java.lang.String str75 = locale71.getDisplayName();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone69, locale71);
        boolean boolean77 = calendar43.after((java.lang.Object) timeZone69);
        calendar4.setTimeZone(timeZone69);
        java.lang.Object obj79 = timeZone69.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar43", (calendar4.compareTo(calendar43) == 0) == calendar4.equals(calendar43));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u53f0\u7063");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale.setDefault(category2, locale5);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category2, locale10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 1970);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        boolean boolean17 = localDate13.equals((java.lang.Object) locale14);
        java.util.Locale.setDefault(category2, locale14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale14);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone1, locale14);
        java.util.Set<java.lang.Character> charSet21 = locale14.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar20", (calendar19.compareTo(calendar20) == 0) == calendar19.equals(calendar20));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        calendar6.clear(9);
        int int10 = calendar6.getGreatestMinimum((int) (short) 0);
        calendar6.roll(9, true);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        int int22 = dateTime16.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar23 = dateTime16.toGregorianCalendar();
        org.joda.time.Chronology chronology24 = dateTime16.getChronology();
        boolean boolean25 = calendar6.after((java.lang.Object) chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.hourOfDay();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(63686358120494L, chronology24);
        java.lang.String str28 = chronology24.toString();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 2922789, chronology24);
        org.joda.time.DurationField durationField30 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.millisOfDay();
        org.joda.time.DurationField durationField32 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField33 = chronology24.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField30 and durationField32", Math.signum(durationField30.compareTo(durationField32)) == -Math.signum(durationField32.compareTo(durationField30)));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(3);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(12);
        boolean boolean17 = dateTime13.isBefore(364694580000L);
        org.joda.time.DateTime dateTime19 = dateTime13.plus((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(69);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        int int25 = localDate24.getCenturyOfEra();
        org.joda.time.LocalDate localDate27 = localDate24.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate29 = localDate27.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = localDate29.toString(dateTimeFormatter30);
        org.joda.time.LocalDate localDate33 = localDate29.minusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) '#', dateTimeZone36);
        int int39 = dateTimeZone36.getOffset((long) (short) 10);
        java.util.Locale locale43 = new java.util.Locale("", "hi!");
        java.util.Locale locale46 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        java.lang.String str48 = locale46.getVariant();
        java.lang.String str49 = locale43.getDisplayScript(locale46);
        java.lang.String str50 = dateTimeZone36.getShortName((long) 20, locale46);
        org.joda.time.DateTime dateTime51 = localDate29.toDateTimeAtMidnight(dateTimeZone36);
        long long54 = dateTimeZone36.convertLocalToUTC((long) 1969, true);
        org.joda.time.DateTime dateTime55 = dateTime23.toDateTime(dateTimeZone36);
        java.lang.String str56 = dateTimeZone36.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime55", (dateTime23.compareTo(dateTime55) == 0) == dateTime23.equals(dateTime55));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField45 = chronology35.weekyearOfCentury();
        long long47 = dateTimeField45.remainder((long) (-19044));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTimeISO();
        org.joda.time.Instant instant28 = instant24.withDurationAdded(100L, (int) (short) 100);
        org.joda.time.Instant instant30 = instant24.minus((long) 60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear(24);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        boolean boolean21 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime17.getDayOfYear();
        org.joda.time.DateTime dateTime25 = dateTime17.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime27 = dateTime17.minus((long) (byte) 10);
        int int28 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean31 = dateTimeZone29.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime17.toMutableDateTime(dateTimeZone29);
        long long35 = dateTimeZone29.convertUTCToLocal((long) (byte) 1);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = dateTimeZone29.getShortName(63686358113273L, locale37);
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.util.Calendar calendar40 = dateTime14.toCalendar(locale37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        boolean boolean47 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime43.getDayOfYear();
        org.joda.time.DateTime dateTime51 = dateTime43.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds(1);
        java.util.GregorianCalendar gregorianCalendar54 = dateTime53.toGregorianCalendar();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar54);
        boolean boolean56 = dateTime14.equals((java.lang.Object) gregorianCalendar54);
        java.util.Date date57 = new java.util.Date();
        int int58 = date57.getMonth();
        java.util.Date date59 = new java.util.Date();
        date59.setDate(32769);
        boolean boolean62 = date57.after(date59);
        java.lang.String str63 = date59.toGMTString();
        gregorianCalendar54.setTime(date59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime33", (dateTime2.compareTo(mutableDateTime33) == 0) == dateTime2.equals(mutableDateTime33));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        int int5 = localDate4.getYear();
        org.joda.time.LocalDate localDate7 = localDate4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (byte) 100);
        java.util.Date date10 = localDate7.toDate();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        java.util.Locale locale14 = null;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        calendar15.clear(9);
        int int19 = calendar15.getGreatestMinimum((int) (short) 0);
        calendar15.setLenient(false);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        int int23 = timeZone22.getRawOffset();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        int int25 = timeZone24.getRawOffset();
        boolean boolean26 = timeZone22.hasSameRules(timeZone24);
        calendar15.setTimeZone(timeZone22);
        java.util.Date date28 = calendar15.getTime();
        boolean boolean29 = date10.before(date28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        calendar34.clear(9);
        int int38 = calendar34.getGreatestMinimum((int) (short) 0);
        java.time.Instant instant39 = calendar34.toInstant();
        java.util.Date date40 = java.util.Date.from(instant39);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property42 = localDate41.weekyear();
        org.joda.time.LocalDate localDate44 = property42.addWrapFieldToCopy((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = localDate44.toString(dateTimeFormatter45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        calendar51.clear(9);
        calendar51.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(100L, chronology62);
        boolean boolean64 = dateTime60.isAfter((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime60.getDayOfYear();
        org.joda.time.DateTime dateTime68 = dateTime60.withDurationAdded((long) (short) 0, 100);
        int int69 = dateTime68.getWeekOfWeekyear();
        boolean boolean70 = calendar51.before((java.lang.Object) dateTime68);
        boolean boolean71 = localDate44.equals((java.lang.Object) boolean70);
        java.util.Date date72 = localDate44.toDate();
        boolean boolean73 = date40.after(date72);
        boolean boolean74 = date10.after(date40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar34", (calendar15.compareTo(calendar34) == 0) == calendar15.equals(calendar34));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        java.util.Date date36 = localDateTime33.toDate();
        int int37 = date36.getDay();
        boolean boolean38 = date32.after(date36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        calendar43.clear(9);
        int int47 = calendar43.getGreatestMinimum((int) (short) 0);
        calendar43.setLenient(false);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        int int51 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        int int53 = timeZone52.getRawOffset();
        boolean boolean54 = timeZone50.hasSameRules(timeZone52);
        calendar43.setTimeZone(timeZone50);
        java.util.Date date56 = calendar43.getTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay(10);
        java.util.Date date60 = localDateTime57.toDate();
        int int61 = date60.getDay();
        java.time.Instant instant62 = date60.toInstant();
        boolean boolean63 = date56.after(date60);
        boolean boolean64 = date36.after(date60);
        date60.setMinutes(308);
        long long67 = date60.getTime();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((java.lang.Object) date60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar43", (gregorianCalendar21.compareTo(calendar43) == 0) == gregorianCalendar21.equals(calendar43));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTimeISO();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        org.joda.time.DateTime dateTime19 = dateTime8.toDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy((int) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        boolean boolean36 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime32.getDayOfYear();
        int int38 = dateTime32.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar39 = dateTime32.toGregorianCalendar();
        org.joda.time.Chronology chronology40 = dateTime32.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.millis();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        int[] intArray51 = chronology40.get((org.joda.time.ReadablePartial) localDateTime48, 1646953379999L);
        chronology16.validate((org.joda.time.ReadablePartial) localDateTime29, intArray51);
        org.joda.time.DurationField durationField53 = chronology16.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and gregorianCalendar39", (calendar4.compareTo(gregorianCalendar39) == 0) == calendar4.equals(gregorianCalendar39));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = instant27.toDateTimeISO();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.minus(readableDuration36);
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime37.getZone();
        boolean boolean40 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime30.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        int int57 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime47.toMutableDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime34.toDateTime(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime(dateTimeZone61);
        int int63 = dateTime62.getMonthOfYear();
        org.joda.time.DateTime dateTime65 = dateTime62.minusMonths((int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime62", (dateTime12.compareTo(dateTime62) == 0) == dateTime12.equals(dateTime62));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField45 = chronology35.weekOfWeekyear();
        java.lang.String str46 = chronology35.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DurationField durationField22 = chronology19.years();
        org.joda.time.DurationField durationField23 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime10 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime16 = localTime13.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        boolean boolean19 = dateTimeField18.isLenient();
        int int21 = dateTimeField18.getMinimumValue((long) 7);
        boolean boolean22 = dateTimeField18.isLenient();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, chronology27);
        boolean boolean29 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime25.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds(1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime40.plus((long) 'a');
        org.joda.time.DateTime dateTime46 = dateTime40.plusWeeks(11);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillis((long) 8);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property52 = localTime51.hourOfDay();
        org.joda.time.LocalTime localTime54 = localTime51.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology55 = localTime54.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime48.toDateTime(chronology55);
        org.joda.time.DateTime dateTime57 = dateTime35.withChronology(chronology55);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.plus(readableDuration60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime64 = dateTime61.withDurationAdded(readableDuration62, (int) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime64.toMutableDateTime(chronology65);
        boolean boolean67 = dateTime57.equals((java.lang.Object) dateTime64);
        org.joda.time.Chronology chronology68 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.hourOfHalfday();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale73 = java.util.Locale.PRC;
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone72, locale73);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getTimeZone("100");
        boolean boolean77 = timeZone72.hasSameRules(timeZone76);
        java.util.Locale locale78 = java.util.Locale.PRC;
        java.lang.String str79 = locale78.getISO3Language();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone72, locale78);
        java.lang.String str81 = dateTimeField69.getAsShortText(1645455742, locale78);
        int int82 = dateTimeField18.getMaximumTextLength(locale78);
        int int83 = property3.getMaximumTextLength(locale78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime57", (dateTime35.compareTo(dateTime57) == 0) == dateTime35.equals(dateTime57));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.yearOfEra();
        org.joda.time.Chronology chronology41 = chronology37.withUTC();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime16.minus(10L);
        int int21 = property10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField22 = property10.getField();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.LocalTime localTime28 = localTime25.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        boolean boolean35 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime41 = dateTime31.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int43 = dateTime41.get(dateTimeFieldType42);
        org.joda.time.DateTime.Property property44 = dateTime41.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property44.getFieldType();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        boolean boolean47 = localTime25.isSupported(durationFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.millis();
        java.lang.String str49 = durationFieldType48.getName();
        org.joda.time.LocalTime localTime51 = localTime25.withFieldAdded(durationFieldType48, (int) (short) -1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(100L, chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        boolean boolean58 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime54.getDayOfYear();
        org.joda.time.DateTime dateTime62 = dateTime54.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime64 = dateTime54.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property68 = localTime67.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime71 = localTime67.toDateTimeToday(dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        int int74 = dateTimeZone70.getOffset((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime64.toMutableDateTime(dateTimeZone70);
        int int77 = dateTimeZone70.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime78 = localTime51.toDateTimeToday(dateTimeZone70);
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property83 = localTime82.hourOfDay();
        org.joda.time.LocalTime localTime85 = localTime82.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology86 = localTime85.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.hourOfHalfday();
        boolean boolean88 = dateTimeField87.isLenient();
        org.joda.time.DurationField durationField89 = dateTimeField87.getDurationField();
        java.util.Locale locale93 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int94 = dateTimeField87.getMaximumShortTextLength(locale93);
        java.lang.String str95 = dateTimeZone70.getShortName(709199999L, locale93);
        java.lang.String str96 = property10.getAsShortText(locale93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and mutableDateTime75", (dateTime41.compareTo(mutableDateTime75) == 0) == dateTime41.equals(mutableDateTime75));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        long long9 = instant8.getMillis();
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.DateTime dateTime11 = instant8.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays(2022);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime6.plus(readableDuration11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        int int14 = localDate13.getCenturyOfEra();
        org.joda.time.LocalDate localDate16 = localDate13.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime27.plus((long) 'a');
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.Chronology chronology35 = dateTime32.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.minutes();
        org.joda.time.DateTime dateTime37 = dateTime21.toDateTime(chronology35);
        org.joda.time.DateTime dateTime39 = dateTime37.plusWeeks((int) (short) -1);
        org.joda.time.DateTime dateTime41 = dateTime39.withYear(32580010);
        boolean boolean42 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime41.minusYears(120);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime8", (dateTime1.compareTo(mutableDateTime8) == 0) == dateTime1.equals(mutableDateTime8));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.add(0, 8);
        calendar4.clear();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone.setDefault(timeZone15);
        java.util.TimeZone.setDefault(timeZone15);
        timeZone15.setRawOffset(292278993);
        calendar4.setTimeZone(timeZone15);
        java.lang.String str22 = timeZone15.getID();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, chronology27);
        boolean boolean29 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime25.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds(1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime40.plus((long) 'a');
        org.joda.time.DateTime dateTime46 = dateTime40.plusWeeks(11);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillis((long) 8);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property52 = localTime51.hourOfDay();
        org.joda.time.LocalTime localTime54 = localTime51.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology55 = localTime54.getChronology();
        org.joda.time.DateTime dateTime56 = dateTime48.toDateTime(chronology55);
        org.joda.time.DateTime dateTime57 = dateTime35.withChronology(chronology55);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.hourOfHalfday();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(chronology55);
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField63 = chronology55.dayOfYear();
        org.joda.time.DurationField durationField64 = dateTimeField63.getRangeDurationField();
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.util.Locale locale68 = new java.util.Locale("");
        java.lang.String str69 = locale66.getDisplayVariant(locale68);
        java.lang.String str70 = locale66.getDisplayVariant();
        java.lang.String str71 = dateTimeField63.getAsText(54158083, locale66);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone15, locale66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime57", (dateTime35.compareTo(dateTime57) == 0) == dateTime35.equals(dateTime57));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        long long40 = dateTimeField38.roundCeiling((long) 2022);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology17.add(readablePeriod19, (long) 13, (int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime9, chronology17);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone26, locale27);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("100");
        boolean boolean31 = timeZone26.hasSameRules(timeZone30);
        timeZone30.setRawOffset(1645455721);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTime dateTime35 = dateTime9.toDateTime(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime18", (dateTime8.compareTo(dateTime18) == 0) == dateTime8.equals(dateTime18));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("24");
        org.joda.time.Instant instant4 = instant1.withDurationAdded((long) 0, 32580010);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.centuries();
        long long11 = chronology6.add(280490786816L, 56L, 32);
        org.joda.time.DurationField durationField12 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime5", (instant1.compareTo(dateTime5) == 0) == instant1.equals(dateTime5));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime22.plus((long) 'a');
        org.joda.time.DateTime dateTime28 = dateTime22.plusWeeks(11);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 8);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime36 = localTime33.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        int int40 = dateTime17.get(dateTimeField39);
        long long42 = dateTimeField39.roundHalfEven((long) 2);
        int int43 = dateTime12.get(dateTimeField39);
        int int45 = dateTimeField39.getLeapAmount((long) 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField39.getType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime38", (dateTime30.compareTo(dateTime38) == 0) == dateTime30.equals(dateTime38));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.DateTime dateTime17 = dateTime14.minusHours(82980000);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2100);
        int int22 = dateTime21.getSecondOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, chronology27);
        boolean boolean29 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime25.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime35 = dateTime25.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int37 = dateTime35.get(dateTimeFieldType36);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfWeek();
        org.joda.time.DurationField durationField39 = property38.getDurationField();
        int int40 = property38.get();
        java.lang.String str41 = property38.getName();
        int int42 = property38.getMaximumValueOverall();
        org.joda.time.DateTime dateTime43 = property38.getDateTime();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        boolean boolean50 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime49.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusYears(3);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean59 = localDateTime57.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType58.getField(chronology60);
        int int62 = dateTime49.get(dateTimeFieldType58);
        boolean boolean63 = dateTime43.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime65 = dateTime21.withField(dateTimeFieldType58, 52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology11 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = chronology11.eras();
        org.joda.time.DurationField durationField14 = chronology11.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField14, and durationField13", !(durationField13.compareTo(durationField14) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField14.compareTo(durationField13))));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        int int4 = dateTime3.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.toDateTime(dateTimeZone5);
        java.util.Locale locale9 = new java.util.Locale("", "hi!");
        java.util.Locale locale12 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = locale12.getVariant();
        java.lang.String str15 = locale9.getDisplayScript(locale12);
        java.util.Calendar calendar16 = dateTime6.toCalendar(locale9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime21.plus((long) 'a');
        org.joda.time.DateTime dateTime27 = dateTime21.plusWeeks(11);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 8);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property33 = localTime32.hourOfDay();
        org.joda.time.LocalTime localTime35 = localTime32.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime29.toDateTime(chronology36);
        org.joda.time.DurationField durationField38 = chronology36.eras();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property42 = localTime41.hourOfDay();
        org.joda.time.LocalTime localTime43 = property42.withMinimumValue();
        int int44 = localTime43.getHourOfDay();
        long long46 = chronology36.set((org.joda.time.ReadablePartial) localTime43, 364740218880L);
        org.joda.time.DateTimeField dateTimeField47 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology36.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField50 = chronology36.year();
        org.joda.time.DateTime dateTime51 = dateTime6.withChronology(chronology36);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(119613855718L, chronology36);
        org.joda.time.DurationField durationField53 = chronology36.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField38, durationField53, and durationField38", !(durationField38.compareTo(durationField53) == 0) || (Math.signum(durationField38.compareTo(durationField38)) == Math.signum(durationField53.compareTo(durationField38))));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1, locale2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("100");
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        boolean boolean7 = timeZone5.observesDaylightTime();
        timeZone5.setRawOffset(54122803);
        timeZone5.setID("1970");
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone5);
        boolean boolean13 = timeZone5.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar12", (calendar3.compareTo(calendar12) == 0) == calendar3.equals(calendar12));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        java.util.Locale locale12 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        int int14 = property9.getMaximumTextLength(locale12);
        org.joda.time.DateTime dateTime15 = property9.roundHalfEvenCopy();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(422);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone23);
        org.joda.time.DateTime.Property property26 = dateTime19.dayOfWeek();
        org.joda.time.DateTime.Property property27 = dateTime19.weekyear();
        boolean boolean28 = locale0.equals((java.lang.Object) property27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime25", (dateTime19.compareTo(dateTime25) == 0) == dateTime19.equals(dateTime25));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = chronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate7 = localDate3.minusWeeks(100);
        org.joda.time.LocalDate.Property property8 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property9 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        int int12 = localDate11.getCenturyOfEra();
        org.joda.time.LocalDate localDate14 = localDate11.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        int int16 = localDate15.getCenturyOfEra();
        org.joda.time.LocalDate localDate17 = localDate11.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate.Property property18 = localDate15.weekyear();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = property18.getAsText(locale19);
        java.lang.String str21 = localDate3.toString("\u4e2d\u6587\u53f0\u7063)", locale19);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        int int23 = localDate22.getCenturyOfEra();
        org.joda.time.LocalDate localDate25 = localDate22.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate27 = localDate25.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate29 = localDate25.minusWeeks(100);
        org.joda.time.LocalDate localDate31 = localDate29.plusYears(32770);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 1970);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        boolean boolean37 = localDate33.equals((java.lang.Object) locale34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        boolean boolean44 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        boolean boolean49 = dateTimeZone47.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime43.toDateTime(dateTimeZone47);
        int int53 = dateTimeZone47.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight55 = localDate33.toDateMidnight(dateTimeZone47);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        int int57 = localDate56.getCenturyOfEra();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(100L, chronology62);
        boolean boolean64 = dateTime60.isAfter((org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime60.getDayOfYear();
        org.joda.time.DateTime dateTime68 = dateTime60.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime70 = dateTime60.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int72 = dateTime70.get(dateTimeFieldType71);
        org.joda.time.DateTime.Property property73 = dateTime70.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property73.getFieldType();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType74.getDurationType();
        org.joda.time.LocalDate localDate77 = localDate56.withFieldAdded(durationFieldType75, 13);
        boolean boolean78 = localDate33.isSupported(durationFieldType75);
        boolean boolean79 = localDate31.isSupported(durationFieldType75);
        boolean boolean80 = localDate3.isSupported(durationFieldType75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime51", (dateTime40.compareTo(dateTime51) == 0) == dateTime40.equals(dateTime51));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        java.util.Date date36 = localDateTime33.toDate();
        int int37 = date36.getDay();
        boolean boolean38 = date32.after(date36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        calendar43.clear(9);
        int int47 = calendar43.getGreatestMinimum((int) (short) 0);
        calendar43.setLenient(false);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        int int51 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        int int53 = timeZone52.getRawOffset();
        boolean boolean54 = timeZone50.hasSameRules(timeZone52);
        calendar43.setTimeZone(timeZone50);
        java.util.Date date56 = calendar43.getTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay(10);
        java.util.Date date60 = localDateTime57.toDate();
        int int61 = date60.getDay();
        java.time.Instant instant62 = date60.toInstant();
        boolean boolean63 = date56.after(date60);
        boolean boolean64 = date36.after(date60);
        date60.setMinutes(308);
        long long67 = date60.getTime();
        date60.setHours(317);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar43", (gregorianCalendar21.compareTo(calendar43) == 0) == gregorianCalendar21.equals(calendar43));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(422);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property22 = dateTime15.dayOfWeek();
        org.joda.time.DateTime.Property property23 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime25 = property23.setCopy(39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime21", (dateTime15.compareTo(dateTime21) == 0) == dateTime15.equals(dateTime21));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(422);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.plus(readableDuration24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(readableDuration26, (int) (byte) 1);
        int int29 = dateTime28.getMillisOfSecond();
        int int30 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime21", (dateTime15.compareTo(dateTime21) == 0) == dateTime15.equals(dateTime21));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime8 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, (int) ' ');
        java.lang.String str13 = dateTimeZone11.getName((long) 32580010);
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime(dateTimeZone11);
        long long16 = dateTimeZone11.nextTransition((long) 999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime14", (dateTime1.compareTo(dateTime14) == 0) == dateTime1.equals(dateTime14));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime7.plus((long) 'a');
        org.joda.time.DateTime dateTime13 = dateTime7.plusWeeks(11);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 8);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime21 = localTime18.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime15.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        long long28 = chronology22.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime2.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField30 = chronology22.year();
        boolean boolean31 = durationFieldType0.isSupported(chronology22);
        org.joda.time.DurationField durationField32 = chronology22.eras();
        org.joda.time.DateTimeField dateTimeField33 = chronology22.hourOfDay();
        org.joda.time.DurationField durationField34 = chronology22.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField32, durationField34, and durationField32", !(durationField32.compareTo(durationField34) == 0) || (Math.signum(durationField32.compareTo(durationField32)) == Math.signum(durationField34.compareTo(durationField32))));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DurationField durationField30 = chronology21.eras();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone32 = chronology21.getZone();
        org.joda.time.DurationField durationField33 = chronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField33, and durationField30", !(durationField30.compareTo(durationField33) == 0) || (Math.signum(durationField30.compareTo(durationField30)) == Math.signum(durationField33.compareTo(durationField30))));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("AD");
        java.util.Locale locale4 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale4);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        java.time.ZoneId zoneId10 = timeZone8.toZoneId();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        java.util.Locale locale14 = null;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        calendar15.clear(9);
        int int19 = calendar15.getGreatestMinimum((int) (short) 0);
        calendar15.setLenient(false);
        calendar15.set(10, 8, 5, 20, 100);
        calendar15.clear();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        calendar15.setTimeZone(timeZone29);
        boolean boolean31 = timeZone8.hasSameRules(timeZone29);
        boolean boolean32 = timeZone1.hasSameRules(timeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar9", (calendar6.compareTo(calendar9) == 0) == calendar6.equals(calendar9));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        int int8 = dateTime7.getCenturyOfEra();
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(18);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        int int13 = localDate12.getCenturyOfEra();
        org.joda.time.LocalDate localDate15 = localDate12.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long23 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 3);
        long long25 = dateTimeZone21.nextTransition((long) 21);
        org.joda.time.DateTime dateTime26 = dateTime11.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay(32772);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime26", (dateTime11.compareTo(dateTime26) == 0) == dateTime11.equals(dateTime26));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        java.time.Instant instant9 = calendar4.toInstant();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap18);
        java.util.Locale locale22 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale26 = new java.util.Locale("", "hi!");
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = new java.util.Locale("");
        java.util.Locale locale32 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = locale32.getVariant();
        java.lang.String str35 = locale32.getISO3Language();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Locale locale40 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale40.getVariant();
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        java.util.Locale locale48 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleKeys();
        java.lang.String str50 = locale48.getVariant();
        java.lang.String str51 = locale45.getDisplayScript(locale48);
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale22, locale26, locale27, locale29, locale32, locale36, locale37, locale40, locale48 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList55);
        boolean boolean57 = calendar4.after((java.lang.Object) localeList55);
        java.time.Instant instant58 = calendar4.toInstant();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) calendar4);
        calendar4.set(40, 54122803, 117, 2012, 2000, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime59", (dateTime2.compareTo(dateTime59) == 0) == dateTime2.equals(dateTime59));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        org.joda.time.Chronology chronology17 = chronology16.withUTC();
        long long21 = chronology16.add(299084693504L, (long) ' ', 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.millisOfSecond();
        int int30 = dateTimeField28.getLeapAmount(299084537856L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        int int32 = localDateTime31.getMonthOfYear();
        int int33 = localDateTime31.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int35 = localDateTime31.get(dateTimeFieldType34);
        int int36 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.plusHours((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime31.withPeriodAdded(readablePeriod39, 1100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime44 = property42.roundHalfFloorCopy();
        java.util.Locale locale45 = java.util.Locale.PRC;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime44, locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime.Property property33 = dateTime2.centuryOfEra();
        org.joda.time.DateTime.Property property34 = dateTime2.monthOfYear();
        org.joda.time.DateTime dateTime35 = property34.roundFloorCopy();
        java.lang.String str36 = property34.toString();
        int int37 = property34.get();
        org.joda.time.DateTime dateTime39 = property34.addToCopy(0);
        org.joda.time.DateTime dateTime40 = dateTime39.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime32", (dateTime40.compareTo(dateTime32) == 0) == dateTime40.equals(dateTime32));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        int int57 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime47.toMutableDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime34.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100L, chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(100L, chronology64);
        boolean boolean66 = dateTime62.isAfter((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime62.getDayOfYear();
        org.joda.time.DateTime dateTime69 = dateTime62.plusYears((int) (short) 0);
        long long70 = dateTime62.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int72 = dateTime62.get(dateTimeFieldType71);
        int int73 = dateTime34.get(dateTimeFieldType71);
        org.joda.time.DateTime dateTime74 = dateTime34.toDateTime();
        int int75 = dateTime74.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime74", (dateTime12.compareTo(dateTime74) == 0) == dateTime12.equals(dateTime74));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        java.util.Locale locale2 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = locale2.getVariant();
        java.lang.String str5 = locale2.getDisplayScript();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale2);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("100");
        int int10 = timeZone9.getRawOffset();
        java.time.ZoneId zoneId11 = timeZone9.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone13);
        calendar7.setTimeZone(timeZone13);
        int int17 = timeZone13.getOffset(280489992192L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar14", (calendar7.compareTo(calendar14) == 0) == calendar7.equals(calendar14));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime3.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime20 = localTime16.toDateTimeToday(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        int int23 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime13.toMutableDateTime(dateTimeZone19);
        int int26 = dateTimeZone19.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(63686358157209L, dateTimeZone19);
        int int28 = dateTime27.getSecondOfDay();
        org.joda.time.LocalDateTime localDateTime29 = dateTime27.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime24", (dateTime13.compareTo(mutableDateTime24) == 0) == dateTime13.equals(mutableDateTime24));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, (int) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean22 = dateTimeZone20.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime19.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime2.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfMinute();
        org.joda.time.DateTime dateTime30 = dateTime27.withWeekOfWeekyear(46);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.lang.String str35 = locale34.getDisplayVariant();
        java.lang.String str36 = dateTimeZone32.getName(31536000000L, locale34);
        java.lang.String str37 = dateTime30.toString("00:03:00.000", locale34);
        java.lang.String str38 = dateTime30.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime25", (dateTime2.compareTo(dateTime25) == 0) == dateTime2.equals(dateTime25));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(422);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime21.withYearOfEra(72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime21", (dateTime15.compareTo(dateTime21) == 0) == dateTime15.equals(dateTime21));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        calendar6.clear(9);
        int int10 = calendar6.getGreatestMinimum((int) (short) 0);
        calendar6.roll(9, true);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        int int22 = dateTime16.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar23 = dateTime16.toGregorianCalendar();
        org.joda.time.Chronology chronology24 = dateTime16.getChronology();
        boolean boolean25 = calendar6.after((java.lang.Object) chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.hourOfDay();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(63686358120494L, chronology24);
        java.lang.String str28 = chronology24.toString();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 2922789, chronology24);
        org.joda.time.DurationField durationField30 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.millisOfDay();
        org.joda.time.DurationField durationField32 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField33 = chronology24.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField30 and durationField32", Math.signum(durationField30.compareTo(durationField32)) == -Math.signum(durationField32.compareTo(durationField30)));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.plusMonths(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        calendar13.clear(9);
        int int17 = calendar13.getGreatestMinimum((int) (short) 0);
        calendar13.roll(9, true);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        boolean boolean27 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime23.getDayOfYear();
        int int29 = dateTime23.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime23.toGregorianCalendar();
        org.joda.time.Chronology chronology31 = dateTime23.getChronology();
        boolean boolean32 = calendar13.after((java.lang.Object) chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.hourOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(63686358120494L, chronology31);
        org.joda.time.DateTime dateTime35 = dateTime7.withChronology(chronology31);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DurationField durationField37 = chronology31.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and gregorianCalendar30", (calendar4.compareTo(gregorianCalendar30) == 0) == calendar4.equals(gregorianCalendar30));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(9);
        int int10 = localDateTime9.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTime12.toString("4", locale14);
        int int16 = dateTime12.getYearOfCentury();
        org.joda.time.Instant instant17 = dateTime12.toInstant();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime19 = instant17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, (int) ' ');
        java.lang.String str24 = dateTimeZone22.getName((long) 32580010);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(dateTimeZone22);
        boolean boolean26 = localDateTime9.equals((java.lang.Object) dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime25", (dateTime12.compareTo(dateTime25) == 0) == dateTime12.equals(dateTime25));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        boolean boolean30 = dateTime28.isEqual(63686358113273L);
        org.joda.time.DateTime dateTime33 = dateTime28.withDurationAdded((long) 'u', 16);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = chronology39.add(readablePeriod41, (long) 13, (int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime33.toDateTime(chronology39);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        boolean boolean52 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime48.getDayOfYear();
        org.joda.time.DateTime dateTime56 = dateTime48.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime58 = dateTime48.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property62 = localTime61.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime65 = localTime61.toDateTimeToday(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        int int68 = dateTimeZone64.getOffset((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime58.toMutableDateTime(dateTimeZone64);
        org.joda.time.Instant instant70 = dateTime58.toInstant();
        org.joda.time.Instant instant72 = instant70.minus(45056L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        boolean boolean74 = dateTime45.isEqual((org.joda.time.ReadableInstant) instant72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = instant27.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = instant27.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.secondOfMinute();
        int int31 = dateTimeField29.get((long) 11);
        long long33 = dateTimeField29.roundFloor(364694580000L);
        long long35 = dateTimeField29.roundCeiling(82980000L);
        java.lang.String str37 = dateTimeField29.getAsShortText((long) 2031);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        int int24 = dateTime1.get(dateTimeField23);
        long long26 = dateTimeField23.roundHalfEven((long) 2);
        long long29 = dateTimeField23.add((long) (byte) 1, (-1L));
        java.lang.String str30 = dateTimeField23.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime22", (dateTime14.compareTo(dateTime22) == 0) == dateTime14.equals(dateTime22));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime5 = property3.roundHalfEvenCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime28.plus((long) 'a');
        org.joda.time.DateTime dateTime34 = dateTime28.plusWeeks(11);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillis((long) 8);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property40 = localTime39.hourOfDay();
        org.joda.time.LocalTime localTime42 = localTime39.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime36.toDateTime(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        int int46 = dateTime23.get(dateTimeField45);
        long long48 = dateTimeField45.roundHalfEven((long) 2);
        int int49 = dateTime18.get(dateTimeField45);
        long long52 = dateTimeField45.add((long) 22, (-3599999L));
        int int53 = dateTimeField45.getMaximumValue();
        java.lang.String str55 = dateTimeField45.getAsShortText(13L);
        java.util.Locale locale59 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        java.lang.String str61 = locale59.getVariant();
        java.lang.String str62 = locale59.getDisplayScript();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale63);
        java.lang.String str66 = dateTimeField45.getAsShortText(197, locale63);
        java.lang.String str67 = locale63.getDisplayLanguage();
        java.lang.String str68 = property3.getAsText(locale63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime44", (dateTime36.compareTo(dateTime44) == 0) == dateTime36.equals(dateTime44));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology20.getZone();
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 16);
        int int27 = dateTimeZone23.getStandardOffset(0L);
        java.lang.String str29 = dateTimeZone23.getName(364694580000L);
        long long32 = dateTimeZone23.convertLocalToUTC((long) 44, true);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(86400000L, dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.Interval interval5 = localDate1.toInterval();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        org.joda.time.LocalDate localDate7 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = property6.roundFloorCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime13.plus((long) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime18.withZone(dateTimeZone21);
        java.lang.String str24 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime25 = localDate8.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 20, dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour(24);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        int int30 = localDate29.getCenturyOfEra();
        org.joda.time.LocalDate localDate32 = localDate29.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate32.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.DateTime dateTime39 = dateTime26.withZoneRetainFields(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getNameKey((long) 107);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime23", (dateTime18.compareTo(dateTime23) == 0) == dateTime18.equals(dateTime23));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(11);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 8);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        long long44 = chronology38.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime45 = dateTime18.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology38.getZone();
        org.joda.time.DateTime dateTime49 = localTime14.toDateTimeToday(dateTimeZone48);
        java.lang.String str50 = dateTimeZone48.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime21", (dateTime18.compareTo(dateTime21) == 0) == dateTime18.equals(dateTime21));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readableDuration14);
        int int16 = dateTime11.getHourOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime21.plus((long) 'a');
        org.joda.time.DateTime dateTime27 = dateTime21.plusWeeks(11);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 8);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property33 = localTime32.hourOfDay();
        org.joda.time.LocalTime localTime35 = localTime32.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime29.toDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime11.withChronology(chronology36);
        long long43 = chronology36.add((long) (byte) 100, (long) 292278993, (-1));
        org.joda.time.DateTimeField dateTimeField44 = chronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology36.millisOfDay();
        java.util.Locale locale51 = new java.util.Locale("1970", "FRA", "21 Feb 2022 15:02:10 GMT");
        java.lang.String str52 = locale51.getDisplayCountry();
        long long53 = dateTimeField45.set((long) 1645455734, "49", locale51);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone55);
        java.time.ZoneId zoneId57 = timeZone55.toZoneId();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone(zoneId57);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getTimeZone(zoneId57);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone(zoneId57);
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = null;
        org.joda.time.format.DateTimeParser dateTimeParser62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser62);
        boolean boolean64 = dateTimeFormatter63.isPrinter();
        boolean boolean65 = dateTimeFormatter63.isOffsetParsed();
        boolean boolean66 = dateTimeFormatter63.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter67 = dateTimeFormatter63.getPrinter();
        org.joda.time.Chronology chronology68 = dateTimeFormatter63.getChronolgy();
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.lang.String str70 = locale69.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter63.withLocale(locale69);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone60, locale69);
        java.lang.String str73 = locale51.getDisplayVariant(locale69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime39", (dateTime11.compareTo(dateTime39) == 0) == dateTime11.equals(dateTime39));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime.Property property33 = dateTime2.centuryOfEra();
        org.joda.time.DateTime.Property property34 = dateTime2.monthOfYear();
        org.joda.time.DateTime dateTime35 = property34.roundFloorCopy();
        java.lang.String str36 = property34.toString();
        int int37 = property34.get();
        org.joda.time.DurationField durationField38 = property34.getLeapDurationField();
        org.joda.time.DateTime dateTime40 = property34.addWrapFieldToCopy(1999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime32", (dateTime2.compareTo(dateTime32) == 0) == dateTime2.equals(dateTime32));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.Chronology chronology38 = chronology32.withUTC();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.secondOfDay();
        org.joda.time.DurationField durationField42 = chronology40.eras();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField42", Math.signum(durationField39.compareTo(durationField42)) == -Math.signum(durationField42.compareTo(durationField39)));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        int int9 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = dateTimeZone5.isStandardOffset(0L);
        java.util.TimeZone timeZone12 = dateTimeZone5.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = locale17.getDisplayCountry(locale19);
        java.lang.String str21 = dateTimeZone15.getShortName((long) 3, locale19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone12, locale19);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone12);
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getMonth();
        java.util.Date date26 = new java.util.Date();
        date26.setDate(32769);
        boolean boolean29 = date24.after(date26);
        java.lang.String str30 = date26.toGMTString();
        int int31 = date26.getMonth();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getMonth();
        java.util.Date date34 = new java.util.Date();
        date34.setDate(32769);
        boolean boolean37 = date32.after(date34);
        java.lang.String str38 = date34.toGMTString();
        date34.setSeconds(19);
        java.lang.String str41 = date34.toGMTString();
        boolean boolean42 = date26.before(date34);
        long long43 = date34.getTime();
        int int44 = date34.getMinutes();
        calendar23.setTime(date34);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        int int47 = timeZone46.getRawOffset();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        int int49 = timeZone48.getRawOffset();
        boolean boolean50 = timeZone46.hasSameRules(timeZone48);
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(locale51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone48, locale51);
        timeZone48.setRawOffset(292278922);
        calendar23.setTimeZone(timeZone48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar53", (calendar22.compareTo(calendar53) == 0) == calendar22.equals(calendar53));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId3);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        boolean boolean11 = dateTimeFormatter9.isOffsetParsed();
        boolean boolean12 = dateTimeFormatter9.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter9.getPrinter();
        org.joda.time.Chronology chronology14 = dateTimeFormatter9.getChronolgy();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter9.withLocale(locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone6, locale15);
        boolean boolean19 = timeZone6.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar18", (calendar2.compareTo(calendar18) == 0) == calendar2.equals(calendar18));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.Instant instant31 = instant27.minus((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime32 = instant27.toMutableDateTimeISO();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        int int36 = dateTime35.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime(dateTimeZone37);
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        java.util.Locale locale44 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getVariant();
        java.lang.String str47 = locale41.getDisplayScript(locale44);
        java.util.Calendar calendar48 = dateTime38.toCalendar(locale41);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime53.plus((long) 'a');
        org.joda.time.DateTime dateTime59 = dateTime53.plusWeeks(11);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 8);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property65 = localTime64.hourOfDay();
        org.joda.time.LocalTime localTime67 = localTime64.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology68 = localTime67.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime61.toDateTime(chronology68);
        org.joda.time.DurationField durationField70 = chronology68.eras();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property74 = localTime73.hourOfDay();
        org.joda.time.LocalTime localTime75 = property74.withMinimumValue();
        int int76 = localTime75.getHourOfDay();
        long long78 = chronology68.set((org.joda.time.ReadablePartial) localTime75, 364740218880L);
        org.joda.time.DateTimeField dateTimeField79 = chronology68.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = chronology68.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField81 = chronology68.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField82 = chronology68.year();
        org.joda.time.DateTime dateTime83 = dateTime38.withChronology(chronology68);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((java.lang.Object) instant27, chronology68);
        org.joda.time.DateTimeField dateTimeField85 = chronology68.dayOfWeek();
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime(chronology68);
        org.joda.time.DurationField durationField87 = chronology68.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField70, durationField87, and durationField70", !(durationField70.compareTo(durationField87) == 0) || (Math.signum(durationField70.compareTo(durationField70)) == Math.signum(durationField87.compareTo(durationField70))));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant26.minus(readableDuration28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths(0);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfDay();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.DateTime dateTime21 = dateTime5.withChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology17.add(readablePeriod19, (long) 13, (int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime9, chronology17);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime18", (dateTime8.compareTo(dateTime18) == 0) == dateTime8.equals(dateTime18));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((long) 1100, 0);
        org.joda.time.Instant instant32 = instant29.withDurationAdded((long) 'a', 976);
        org.joda.time.Instant instant34 = instant29.minus((long) 21);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.Instant instant38 = instant34.withDurationAdded((long) (-1), 2031);
        org.joda.time.Instant instant40 = instant38.plus(280492089344L);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant38.minus(readableDuration41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant26.withDurationAdded(readableDuration28, 222);
        org.joda.time.DateTime dateTime31 = instant26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant26.plus(readableDuration32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, chronology35);
        int int37 = dateTime36.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        org.joda.time.MutableDateTime mutableDateTime39 = instant33.toMutableDateTime(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime40 = instant33.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.LocalDate.Property property5 = localDate0.year();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 'a');
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime24 = localDate7.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.LocalDate localDate26 = localDate7.withYear(6);
        org.joda.time.LocalDate.Property property27 = localDate26.dayOfMonth();
        int int28 = localDate26.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime22", (dateTime17.compareTo(dateTime22) == 0) == dateTime17.equals(dateTime22));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTime13.toString("4", locale15);
        java.lang.String str17 = locale15.getScript();
        int int18 = property10.getMaximumTextLength(locale15);
        org.joda.time.DateTime dateTime19 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = property10.roundCeilingCopy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        int int24 = dateTime23.getMillisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.plusHours(360000000);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime35.plus((long) 'a');
        org.joda.time.DateTime dateTime41 = dateTime35.plusWeeks(11);
        org.joda.time.DateTime dateTime43 = dateTime41.withMillis((long) 8);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property47 = localTime46.hourOfDay();
        org.joda.time.LocalTime localTime49 = localTime46.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology50 = localTime49.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime43.toDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfDay();
        long long56 = chronology50.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField57 = chronology50.months();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime27.toMutableDateTime(chronology50);
        org.joda.time.DateTime dateTime59 = dateTime20.toDateTime(chronology50);
        org.joda.time.DateTime dateTime60 = dateTime59.toDateTime();
        int int61 = dateTime59.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime59", (dateTime20.compareTo(dateTime59) == 0) == dateTime20.equals(dateTime59));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.Chronology chronology38 = chronology32.withUTC();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfWeek();
        long long43 = dateTimeField41.roundHalfEven(63686358351219L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (short) 100, 3, (int) (byte) 10, (int) '#', 9);
        int int13 = calendar4.getMinimalDaysInFirstWeek();
        int int14 = calendar4.getMinimalDaysInFirstWeek();
        int int15 = calendar4.getWeekYear();
        calendar4.setTimeInMillis(280491302912L);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        int int20 = localDate19.getCenturyOfEra();
        org.joda.time.LocalDate localDate22 = localDate19.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate26 = localDate22.minusWeeks(100);
        org.joda.time.LocalDate localDate28 = localDate26.plusYears(32770);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 1970);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        boolean boolean34 = localDate30.equals((java.lang.Object) locale31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime40.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        boolean boolean46 = dateTimeZone44.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime(dateTimeZone44);
        int int50 = dateTimeZone44.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight52 = localDate30.toDateMidnight(dateTimeZone44);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now();
        int int54 = localDate53.getCenturyOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        boolean boolean61 = dateTime57.isAfter((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime57.getDayOfYear();
        org.joda.time.DateTime dateTime65 = dateTime57.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime67 = dateTime57.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int69 = dateTime67.get(dateTimeFieldType68);
        org.joda.time.DateTime.Property property70 = dateTime67.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property70.getFieldType();
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType71.getDurationType();
        org.joda.time.LocalDate localDate74 = localDate53.withFieldAdded(durationFieldType72, 13);
        boolean boolean75 = localDate30.isSupported(durationFieldType72);
        boolean boolean76 = localDate28.isSupported(durationFieldType72);
        java.lang.String str77 = durationFieldType72.toString();
        java.lang.String str78 = durationFieldType72.toString();
        boolean boolean79 = localTime18.isSupported(durationFieldType72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime48", (dateTime2.compareTo(dateTime48) == 0) == dateTime2.equals(dateTime48));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        int int7 = dateTime6.getMonthOfYear();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMinutes(51);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1645455718, chronology15);
        org.joda.time.DurationField durationField18 = chronology15.eras();
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.era();
        org.joda.time.DurationField durationField21 = chronology15.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField21, and durationField18", !(durationField18.compareTo(durationField21) == 0) || (Math.signum(durationField18.compareTo(durationField18)) == Math.signum(durationField21.compareTo(durationField18))));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.secondOfMinute();
        int int31 = dateTimeField29.get((long) 11);
        long long33 = dateTimeField29.roundFloor(364694580000L);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.toLanguageTag();
        int int36 = dateTimeField29.getMaximumTextLength(locale34);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale34);
        boolean boolean38 = locale34.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.LocalDate.Property property5 = localDate0.year();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 'a');
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime24 = localDate7.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.LocalDate localDate26 = localDate7.withYear(6);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        java.util.Locale locale30 = null;
        java.util.Calendar calendar31 = dateTime29.toCalendar(locale30);
        calendar31.clear(9);
        calendar31.set((int) (short) 100, 3, (int) (byte) 10, (int) '#', 9);
        int int40 = calendar31.getMinimalDaysInFirstWeek();
        int int41 = calendar31.getMinimalDaysInFirstWeek();
        int int42 = calendar31.getWeekYear();
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.fromCalendarFields(calendar31);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra(488);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((int) (short) 100, 2, 11, 4, (int) (short) 0, (int) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMillis((-1));
        org.joda.time.DateTime.Property property55 = dateTime54.year();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(100L, chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(100L, chronology60);
        boolean boolean62 = dateTime58.isAfter((org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTime58.getDayOfYear();
        org.joda.time.DateTime dateTime66 = dateTime58.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime68 = dateTime58.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int70 = dateTime68.get(dateTimeFieldType69);
        org.joda.time.DateTime.Property property71 = dateTime68.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property71.getFieldType();
        org.joda.time.DateTime.Property property73 = dateTime54.property(dateTimeFieldType72);
        int int74 = localDate45.get(dateTimeFieldType72);
        int int75 = localDate26.get(dateTimeFieldType72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime22", (dateTime17.compareTo(dateTime22) == 0) == dateTime17.equals(dateTime22));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField45 = chronology35.weekyearOfCentury();
        org.joda.time.DurationField durationField46 = dateTimeField45.getLeapDurationField();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime51 = localTime49.minusMillis((int) 'a');
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(100L, chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        boolean boolean58 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime54.getDayOfYear();
        org.joda.time.DateTime dateTime61 = dateTime54.plusYears((int) (short) 0);
        long long62 = dateTime54.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int64 = dateTime54.get(dateTimeFieldType63);
        org.joda.time.LocalTime.Property property65 = localTime49.property(dateTimeFieldType63);
        int int66 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localTime49);
        long long69 = dateTimeField45.add((long) (short) -1, (-2019));
        long long71 = dateTimeField45.roundHalfCeiling(280490788608L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 'a');
        org.joda.time.DateTime dateTime21 = dateTime15.plusWeeks(11);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillis((long) 8);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property27 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime29 = localTime26.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime23.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        long long36 = chronology30.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime10.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField38 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology30.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology30.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter6.withZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime13", (dateTime10.compareTo(dateTime13) == 0) == dateTime10.equals(dateTime13));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(dateTimeZone15);
        boolean boolean22 = dateTime8.isEqualNow();
        java.util.Date date23 = dateTime8.toDate();
        org.joda.time.DateTime.Property property24 = dateTime8.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime21", (dateTime2.compareTo(dateTime21) == 0) == dateTime2.equals(dateTime21));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1, locale2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("100");
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        java.util.Date date13 = new java.util.Date((int) (byte) 0, 4, 32400000, 2022, (int) (byte) -1);
        calendar7.setTime(date13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        int int16 = timeZone15.getRawOffset();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone.setDefault(timeZone15);
        calendar7.setTimeZone(timeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar17", (calendar3.compareTo(calendar17) == 0) == calendar3.equals(calendar17));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.era();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        java.lang.String str10 = property7.getAsText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = property7.getAsShortText(locale11);
        java.util.Locale locale16 = new java.util.Locale(":", "2057-02-19");
        java.lang.String str17 = locale11.getDisplayCountry(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale11);
        boolean boolean19 = timeZone0.observesDaylightTime();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder20.clear();
        java.util.Locale.Builder builder23 = builder20.setRegion("100");
        java.util.Locale locale24 = builder20.build();
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getDisplayLanguage();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone0, locale24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        java.util.Locale locale31 = null;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        calendar32.clear(9);
        int int36 = calendar32.getGreatestMinimum((int) (short) 0);
        calendar32.roll(9, true);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        boolean boolean46 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTime42.getDayOfYear();
        int int48 = dateTime42.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar49 = dateTime42.toGregorianCalendar();
        org.joda.time.Chronology chronology50 = dateTime42.getChronology();
        boolean boolean51 = calendar32.after((java.lang.Object) chronology50);
        java.lang.String str52 = calendar32.getCalendarType();
        calendar32.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date60 = calendar32.getTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withMillisOfDay(10);
        java.util.Date date64 = localDateTime61.toDate();
        int int65 = date64.getDay();
        boolean boolean66 = date60.after(date64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(100L, chronology68);
        java.util.Locale locale70 = null;
        java.util.Calendar calendar71 = dateTime69.toCalendar(locale70);
        calendar71.clear(9);
        int int75 = calendar71.getGreatestMinimum((int) (short) 0);
        calendar71.setLenient(false);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        int int79 = timeZone78.getRawOffset();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        int int81 = timeZone80.getRawOffset();
        boolean boolean82 = timeZone78.hasSameRules(timeZone80);
        calendar71.setTimeZone(timeZone78);
        java.util.Date date84 = calendar71.getTime();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withMillisOfDay(10);
        java.util.Date date88 = localDateTime85.toDate();
        int int89 = date88.getDay();
        java.time.Instant instant90 = date88.toInstant();
        boolean boolean91 = date84.after(date88);
        boolean boolean92 = date64.after(date88);
        int int93 = date88.getMonth();
        boolean boolean94 = timeZone0.inDaylightTime(date88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar27", (calendar18.compareTo(calendar27) == 0) == calendar18.equals(calendar27));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 100, 2, 11, 4, (int) (short) 0, (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMillis((-1));
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        org.joda.time.DateTime dateTime12 = property9.addToCopy((long) 31);
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime17.toString(dateTimeFormatter20);
        org.joda.time.DateTime.Property property22 = dateTime17.centuryOfEra();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime29 = localTime25.toDateTimeToday(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        int int32 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = dateTimeZone28.isStandardOffset(0L);
        java.util.TimeZone timeZone35 = dateTimeZone28.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str44 = nameProvider37.getName(locale40, "hi!", "1970-01-01");
        java.lang.String str45 = dateTimeZone28.getShortName(10L, locale40);
        java.lang.String str46 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) dateTime17, dateTimeZone28);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfCentury(52);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours(1645455753);
        boolean boolean52 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime14.minusMinutes(54158083);
        org.joda.time.DateTime.Property property55 = dateTime14.dayOfMonth();
        org.joda.time.DateTime dateTime57 = property55.addToCopy(361);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime47", (dateTime17.compareTo(dateTime47) == 0) == dateTime17.equals(dateTime47));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        java.util.Locale locale3 = new java.util.Locale("+00:00", "2022-02-21T15:02:33.183Z", "1 janv. 1970 00:00:00");
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds(1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(11);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 8);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTime dateTime40 = dateTime18.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.hourOfHalfday();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.dayOfYear();
        org.joda.time.DurationField durationField47 = dateTimeField46.getRangeDurationField();
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider49);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider49);
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str56 = nameProvider49.getShortName(locale52, "2000", "4");
        java.lang.String str57 = locale52.getDisplayLanguage();
        java.lang.String str58 = locale52.getDisplayName();
        java.lang.String str59 = dateTimeField46.getAsShortText(0L, locale52);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale52);
        java.lang.String str61 = locale4.getDisplayCountry(locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime40", (dateTime18.compareTo(dateTime40) == 0) == dateTime18.equals(dateTime40));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        java.time.Instant instant9 = calendar4.toInstant();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        calendar4.set(22, 0, (int) ':');
        java.time.Instant instant15 = calendar4.toInstant();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime25 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime25.withZone(dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withPeriodAdded(readablePeriod31, 197);
        org.joda.time.DateTime.Property property34 = dateTime30.minuteOfDay();
        org.joda.time.DateTime dateTime35 = property34.roundCeilingCopy();
        org.joda.time.DateTime dateTime37 = property34.setCopy(0);
        org.joda.time.DateTimeField dateTimeField38 = property34.getField();
        boolean boolean39 = calendar4.after((java.lang.Object) dateTimeField38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime30", (dateTime25.compareTo(dateTime30) == 0) == dateTime25.equals(dateTime30));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = dateTime11.toDateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfMinute();
        org.joda.time.DateTime dateTime30 = property28.addToCopy((int) ':');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime35.plus((long) 'a');
        int int40 = dateTime39.getMillisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime39.plusMillis(772);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths(52);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        org.joda.time.DateTime.Property property46 = dateTime44.secondOfDay();
        boolean boolean47 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime25", (dateTime2.compareTo(dateTime25) == 0) == dateTime2.equals(dateTime25));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(80);
        org.joda.time.DateMidnight dateMidnight16 = dateTime11.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded(readableDuration17, 39);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(80);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime19.minusMillis(44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime22", (dateTime19.compareTo(dateTime22) == 0) == dateTime19.equals(dateTime22));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) dateTime1, chronology4);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 'a');
        org.joda.time.DateTime dateTime18 = dateTime12.plusWeeks(11);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 8);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property24 = localTime23.hourOfDay();
        org.joda.time.LocalTime localTime26 = localTime23.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime20.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        long long33 = chronology27.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime34 = dateTime7.withChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.year();
        org.joda.time.DurationField durationField36 = chronology27.eras();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(chronology27);
        org.joda.time.DateTime dateTime38 = dateTime5.withChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.millisOfDay();
        org.joda.time.DurationField durationField40 = chronology27.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField36, durationField40, and durationField36", !(durationField36.compareTo(durationField40) == 0) || (Math.signum(durationField36.compareTo(durationField36)) == Math.signum(durationField40.compareTo(durationField36))));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.Chronology chronology38 = chronology32.withUTC();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfWeek();
        org.joda.time.DurationField durationField41 = chronology38.millis();
        org.joda.time.DurationField durationField42 = chronology38.years();
        org.joda.time.Chronology chronology43 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.millisOfSecond();
        org.joda.time.DurationField durationField45 = chronology43.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField45, durationField39, and durationField41", !(durationField45.compareTo(durationField39) == 0) || (Math.signum(durationField45.compareTo(durationField41)) == Math.signum(durationField39.compareTo(durationField41))));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.halfdayOfDay();
        int int40 = dateTimeField38.getMinimumValue(720L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTime42.toString("4", locale44);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTime49.toString("4", locale51);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale51.getDisplayCountry(locale53);
        java.lang.String str55 = locale44.getDisplayCountry(locale51);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale44);
        boolean boolean57 = locale44.hasExtensions();
        int int58 = dateTimeField38.getMaximumTextLength(locale44);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.LocalTime localTime62 = localTime60.minusMillis(32770);
        int int63 = localTime62.getSecondOfMinute();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property67 = localTime66.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime70 = localTime66.toDateTimeToday(dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        int int73 = dateTimeZone69.getOffset((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean75 = dateTimeZone69.isStandardOffset(0L);
        java.util.TimeZone timeZone76 = dateTimeZone69.toTimeZone();
        java.time.ZoneId zoneId77 = timeZone76.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale81 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleKeys();
        java.util.Locale locale83 = java.util.Locale.PRC;
        java.lang.String str84 = locale81.getDisplayCountry(locale83);
        java.lang.String str85 = dateTimeZone79.getShortName((long) 3, locale83);
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone76, locale83);
        java.lang.String str87 = locale83.getDisplayName();
        java.lang.String str88 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localTime62, locale83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar56 and calendar86", (calendar56.compareTo(calendar86) == 0) == calendar56.equals(calendar86));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale3.getDisplayCountry(locale5);
        java.lang.String str7 = locale3.getDisplayName();
        boolean boolean8 = locale3.hasExtensions();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int10 = timeZone1.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar9", (calendar2.compareTo(calendar9) == 0) == calendar2.equals(calendar9));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        calendar4.setTimeZone(timeZone18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18, locale26);
        int int30 = timeZone18.getOffset((long) 32580010);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar28", (calendar25.compareTo(calendar28) == 0) == calendar25.equals(calendar28));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(1645455817);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter8.getPrinter();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.minuteOfDay();
        java.util.Locale locale18 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        int int20 = property15.getMaximumTextLength(locale18);
        org.joda.time.DateTime dateTime21 = property15.roundHalfEvenCopy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(422);
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter8.withZone(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime31", (dateTime25.compareTo(dateTime31) == 0) == dateTime25.equals(dateTime31));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths(0);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfDay();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.DateTime dateTime21 = dateTime5.withChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        int int7 = dateTime6.getMonthOfYear();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMinutes(51);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(0);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1645455718, chronology15);
        org.joda.time.DurationField durationField18 = chronology15.eras();
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology15.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField21, and durationField18", !(durationField18.compareTo(durationField21) == 0) || (Math.signum(durationField18.compareTo(durationField18)) == Math.signum(durationField21.compareTo(durationField18))));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localDate5.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear(2019);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalDate.Property property12 = localDate9.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(1645455742);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTime17.toString("4", locale19);
        int int21 = dateTime17.getYearOfCentury();
        org.joda.time.Instant instant22 = dateTime17.toInstant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime24 = instant22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, (int) ' ');
        java.lang.String str29 = dateTimeZone27.getName((long) 32580010);
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = localDate15.toDateTimeAtMidnight(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime30", (dateTime17.compareTo(dateTime30) == 0) == dateTime17.equals(dateTime30));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        int int27 = localTime26.getHourOfDay();
        long long29 = chronology19.set((org.joda.time.ReadablePartial) localTime26, 364740218880L);
        org.joda.time.DateTimeField dateTimeField30 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField33 = chronology19.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField33, and durationField21", !(durationField21.compareTo(durationField33) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField33.compareTo(durationField21))));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.plusMonths(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        calendar13.clear(9);
        int int17 = calendar13.getGreatestMinimum((int) (short) 0);
        calendar13.roll(9, true);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        boolean boolean27 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime23.getDayOfYear();
        int int29 = dateTime23.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime23.toGregorianCalendar();
        org.joda.time.Chronology chronology31 = dateTime23.getChronology();
        boolean boolean32 = calendar13.after((java.lang.Object) chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.hourOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(63686358120494L, chronology31);
        org.joda.time.DateTime dateTime35 = dateTime7.withChronology(chronology31);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology31);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property40 = localTime39.hourOfDay();
        org.joda.time.LocalTime localTime41 = property40.roundFloorCopy();
        org.joda.time.LocalTime localTime42 = property40.withMinimumValue();
        org.joda.time.LocalTime localTime43 = property40.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime44 = property40.roundHalfCeilingCopy();
        boolean boolean45 = property40.isLeap();
        org.joda.time.LocalTime localTime46 = property40.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime53.plus((long) 'a');
        org.joda.time.DateTime dateTime59 = dateTime53.plusWeeks(11);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 8);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property65 = localTime64.hourOfDay();
        org.joda.time.LocalTime localTime67 = localTime64.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology68 = localTime67.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime61.toDateTime(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.clockhourOfDay();
        long long74 = chronology68.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime75 = dateTime48.withChronology(chronology68);
        org.joda.time.DateTimeField dateTimeField76 = chronology68.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology68.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology68.getZone();
        int int80 = dateTimeZone78.getOffset(19044L);
        org.joda.time.DateTime dateTime81 = localTime46.toDateTimeToday(dateTimeZone78);
        long long85 = dateTimeZone78.convertLocalToUTC(63686358283802L, true, (long) 1645455900);
        org.joda.time.Chronology chronology86 = chronology31.withZone(dateTimeZone78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and gregorianCalendar30", (calendar4.compareTo(gregorianCalendar30) == 0) == calendar4.equals(gregorianCalendar30));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1, locale2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("100");
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1, locale7);
        calendar9.clear();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale14.getISO3Language();
        java.util.Locale.setDefault(category11, locale14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone28);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeZone28.getShortName((long) 15, locale34);
        java.util.Locale.setDefault(category11, locale34);
        java.lang.String str39 = locale34.getExtension('u');
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale34);
        boolean boolean41 = calendar9.before((java.lang.Object) locale34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar40", (calendar3.compareTo(calendar40) == 0) == calendar3.equals(calendar40));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        int int8 = dateTime7.getCenturyOfEra();
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(18);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        int int13 = localDate12.getCenturyOfEra();
        org.joda.time.LocalDate localDate15 = localDate12.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long23 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 3);
        long long25 = dateTimeZone21.nextTransition((long) 21);
        org.joda.time.DateTime dateTime26 = dateTime11.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay(32772);
        org.joda.time.DateTime.Property property29 = dateTime26.year();
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime26", (dateTime11.compareTo(dateTime26) == 0) == dateTime11.equals(dateTime26));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        int int45 = dateTime13.getDayOfMonth();
        boolean boolean47 = dateTime13.isAfter(32772L);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(1645434179);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("Heure de Greenwich");
        java.lang.String str53 = dateTimeZone49.getShortName((long) 1645455887, locale52);
        org.joda.time.DateTime dateTime54 = dateTime13.toDateTime(dateTimeZone49);
        java.lang.String str55 = dateTimeZone49.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime54", (dateTime13.compareTo(dateTime54) == 0) == dateTime13.equals(dateTime54));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime12 = dateTime2.withMonthOfYear(5);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime15.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime24 = dateTime15.minusWeeks(4);
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(1);
        int int27 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '#', dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone31);
        int int35 = dateTimeZone31.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 22, dateTimeZone31);
        long long38 = dateTimeZone31.convertUTCToLocal((long) (short) 1);
        org.joda.time.DateTime dateTime39 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime39", (dateTime26.compareTo(dateTime39) == 0) == dateTime26.equals(dateTime39));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        calendar4.setTimeZone(timeZone18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18, locale26);
        java.lang.Object obj29 = timeZone18.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar28", (calendar25.compareTo(calendar28) == 0) == calendar25.equals(calendar28));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 'a');
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTime dateTime25 = dateTime9.toDateTime(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weeks();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 788, chronology23);
        org.joda.time.DurationField durationField28 = chronology23.halfdays();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        int int30 = localDate29.getCenturyOfEra();
        org.joda.time.LocalDate localDate32 = localDate29.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate34 = localDate32.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = localDate34.toString(dateTimeFormatter35);
        org.joda.time.LocalDate localDate38 = localDate34.withWeekyear(2019);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        int int40 = localDate38.indexOf(dateTimeFieldType39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate42 = localDate38.minus(readablePeriod41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        boolean boolean49 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        boolean boolean54 = dateTimeZone52.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime48.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(dateTimeZone52);
        org.joda.time.DateTime dateTime59 = localDate38.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.Chronology chronology60 = chronology23.withZone(dateTimeZone52);
        org.joda.time.DurationField durationField61 = chronology60.seconds();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(100L, chronology64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(100L, chronology67);
        boolean boolean69 = dateTime65.isAfter((org.joda.time.ReadableInstant) dateTime68);
        int int70 = dateTime65.getDayOfYear();
        org.joda.time.DateTime dateTime73 = dateTime65.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime75 = dateTime65.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int77 = dateTime75.get(dateTimeFieldType76);
        org.joda.time.DateTime.Property property78 = dateTime75.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property78.getFieldType();
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType79.getDurationType();
        org.joda.time.LocalDate.Property property81 = localDate62.property(dateTimeFieldType79);
        org.joda.time.LocalDate localDate82 = property81.roundCeilingCopy();
        org.joda.time.LocalDate localDate83 = property81.roundHalfFloorCopy();
        int int84 = localDate83.getYearOfEra();
        int[] intArray86 = chronology60.get((org.joda.time.ReadablePartial) localDate83, 1645455890000L);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        long long90 = chronology60.add(readablePeriod87, 299084537856L, 1645455937);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime25", (dateTime9.compareTo(dateTime25) == 0) == dateTime9.equals(dateTime25));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setDate(292278993, 2019, 2);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(32, 9, 32400000);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("+100:00");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        java.util.Calendar.Builder builder17 = builder12.setLocale(locale15);
        java.util.Calendar.Builder builder21 = builder12.setTimeOfDay(1645455790, 0, 54292616);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("2057-02-19");
        int int30 = property25.getMaximumShortTextLength(locale29);
        java.util.Locale.setDefault(locale29);
        java.lang.String str32 = locale29.getISO3Language();
        java.util.Set<java.lang.Character> charSet33 = locale29.getExtensionKeys();
        java.util.Calendar.Builder builder34 = builder12.setLocale(locale29);
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder36 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone38);
        boolean boolean40 = timeZone38.observesDaylightTime();
        int int41 = timeZone38.getRawOffset();
        java.util.Calendar.Builder builder42 = builder36.setTimeZone(timeZone38);
        java.util.Calendar.Builder builder43 = builder35.setTimeZone(timeZone38);
        java.util.Calendar.Builder builder44 = builder34.setTimeZone(timeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar39", (calendar16.compareTo(calendar39) == 0) == calendar16.equals(calendar39));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.yearOfEra();
        org.joda.time.DurationField durationField31 = chronology21.weeks();
        org.joda.time.DurationField durationField32 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology21.dayOfYear();
        org.joda.time.DurationField durationField35 = chronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField31, and durationField32", !(durationField35.compareTo(durationField31) == 0) || (Math.signum(durationField35.compareTo(durationField32)) == Math.signum(durationField31.compareTo(durationField32))));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime8 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, (int) ' ');
        java.lang.String str13 = dateTimeZone11.getName((long) 32580010);
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime8.plusMillis(2013);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime14", (dateTime1.compareTo(dateTime14) == 0) == dateTime1.equals(dateTime14));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.DateTime dateTime27 = instant24.toDateTimeISO();
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology17.add(readablePeriod19, (long) 13, (int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime9, chronology17);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(69);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime18", (dateTime8.compareTo(dateTime18) == 0) == dateTime8.equals(dateTime18));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant24.plus(readableDuration28);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTimeISO();
        org.joda.time.Instant instant32 = instant29.minus((long) 53);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.plus(readableDuration33);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.DurationField durationField39 = property38.getLeapDurationField();
        org.joda.time.LocalTime localTime41 = property38.addCopy((long) 292278922);
        org.joda.time.LocalTime localTime42 = property38.roundFloorCopy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        boolean boolean49 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime45.getDayOfYear();
        org.joda.time.DateTime dateTime53 = dateTime45.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.plus(readableDuration56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (int) (byte) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime60.toMutableDateTime(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        boolean boolean65 = dateTimeZone63.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime62.toMutableDateTime(dateTimeZone63);
        org.joda.time.DateTime dateTime68 = dateTime45.toDateTime(dateTimeZone63);
        int int69 = property38.compareTo((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean70 = instant34.equals((java.lang.Object) int69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime68", (dateTime2.compareTo(dateTime68) == 0) == dateTime2.equals(dateTime68));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        boolean boolean11 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime7.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime7.plusYears((int) (short) 0);
        long long15 = dateTime7.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int17 = dateTime7.get(dateTimeFieldType16);
        org.joda.time.LocalTime.Property property18 = localTime2.property(dateTimeFieldType16);
        org.joda.time.DurationField durationField19 = property18.getLeapDurationField();
        org.joda.time.LocalTime localTime20 = property18.roundHalfFloorCopy();
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.era();
        org.joda.time.DurationField durationField23 = chronology21.eras();
        org.joda.time.DurationField durationField24 = chronology21.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField24, and durationField23", !(durationField23.compareTo(durationField24) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField24.compareTo(durationField23))));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        boolean boolean16 = dateTime11.isBeforeNow();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime22 = localTime19.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        boolean boolean26 = dateTime11.equals((java.lang.Object) dateTimeField25);
        org.joda.time.DateTime dateTime29 = dateTime11.withDurationAdded((long) 20, (int) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        boolean boolean36 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime32.getDayOfYear();
        org.joda.time.DateTime dateTime40 = dateTime32.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime42 = dateTime32.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int44 = dateTime42.get(dateTimeFieldType43);
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property45.getFieldType();
        org.joda.time.DateTime dateTime48 = dateTime29.withField(dateTimeFieldType46, 2);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(422);
        int int52 = dateTimeZone50.getOffsetFromLocal((-1L));
        org.joda.time.DateTime dateTime53 = dateTime48.toDateTime(dateTimeZone50);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(dateTimeZone50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and dateTime53", (dateTime48.compareTo(dateTime53) == 0) == dateTime48.equals(dateTime53));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        int int22 = dateTime21.getWeekOfWeekyear();
        boolean boolean23 = calendar4.before((java.lang.Object) dateTime21);
        org.joda.time.DateTime dateTime25 = dateTime21.withWeekyear(11);
        java.lang.Object obj26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        boolean boolean33 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime29.getDayOfYear();
        org.joda.time.DateTime dateTime36 = dateTime29.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property37 = dateTime29.year();
        org.joda.time.DateTime dateTime38 = property37.withMaximumValue();
        org.joda.time.DateTime dateTime40 = property37.addToCopy(3);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear(12);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = dateTime40.withZoneRetainFields(dateTimeZone43);
        java.lang.String str45 = dateTimeZone43.getID();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(obj26, dateTimeZone43);
        java.lang.String str47 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime48 = dateTime21.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime50 = dateTime21.plusMinutes((-2712971));
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime50.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime48", (dateTime2.compareTo(dateTime48) == 0) == dateTime2.equals(dateTime48));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = dateTime5.minus(10L);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(22);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime9.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(280491302912L, dateTimeZone21);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks(0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = chronology38.add(readablePeriod40, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField44 = chronology38.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.Chronology chronology46 = chronology38.withUTC();
        org.joda.time.DateTime dateTime47 = dateTime29.toDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime25", (dateTime3.compareTo(dateTime25) == 0) == dateTime3.equals(dateTime25));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(32770);
        int int4 = localTime3.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean6 = localTime3.isSupported(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = localTime3.withMillisOfSecond((int) 'u');
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property13 = localTime12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime16 = localTime12.toDateTimeToday(dateTimeZone15);
        org.joda.time.LocalTime localTime18 = localTime12.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime20 = localTime12.plusMillis(12);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime25.plus((long) 'a');
        org.joda.time.DateTime dateTime30 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime30.withZone(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime37 = localTime12.toDateTimeToday(dateTimeZone33);
        org.joda.time.LocalTime.Property property38 = localTime12.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        boolean boolean40 = localTime12.isSupported(durationFieldType39);
        org.joda.time.LocalTime localTime42 = localTime8.withFieldAdded(durationFieldType39, 1645455734);
        org.joda.time.LocalTime.Property property43 = localTime42.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        boolean boolean50 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime46.getDayOfYear();
        org.joda.time.DateTime dateTime53 = dateTime46.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property54 = dateTime46.year();
        org.joda.time.DateTime dateTime55 = property54.roundFloorCopy();
        long long56 = property43.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime35", (dateTime30.compareTo(dateTime35) == 0) == dateTime30.equals(dateTime35));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.yearOfEra();
        boolean boolean31 = dateTimeField30.isLenient();
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.lang.String str36 = locale34.getVariant();
        java.lang.String str37 = locale34.getDisplayScript();
        java.lang.String str38 = locale34.getLanguage();
        int int39 = dateTimeField30.getMaximumTextLength(locale34);
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale34.getDisplayScript(locale40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        int int17 = property15.get();
        java.lang.String str18 = property15.getName();
        int int19 = property15.getMaximumValueOverall();
        org.joda.time.DateTime dateTime20 = property15.getDateTime();
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        int int24 = localDate23.getCenturyOfEra();
        org.joda.time.LocalDate localDate26 = localDate23.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate28 = localDate26.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate30 = localDate26.minusWeeks(100);
        org.joda.time.LocalDate.Property property31 = localDate26.yearOfCentury();
        org.joda.time.Chronology chronology32 = localDate26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyear();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 54158083, chronology32);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays(788);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime42.plus((long) 'a');
        org.joda.time.DateTime dateTime47 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = dateTime47.withZone(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = localDate37.toDateTimeAtStartOfDay(dateTimeZone50);
        boolean boolean55 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and dateTime52", (dateTime47.compareTo(dateTime52) == 0) == dateTime47.equals(dateTime52));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        int int4 = dateTime3.getMillisOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.plusHours(360000000);
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 'a');
        org.joda.time.DateTime dateTime21 = dateTime15.plusWeeks(11);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillis((long) 8);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property27 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime29 = localTime26.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime23.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        long long36 = chronology30.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField37 = chronology30.months();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime7.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField39 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology30.secondOfMinute();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(obj0, chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime38", (dateTime6.compareTo(mutableDateTime38) == 0) == dateTime6.equals(mutableDateTime38));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.era();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        java.lang.String str10 = property7.getAsText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = property7.getAsShortText(locale11);
        java.util.Locale locale16 = new java.util.Locale(":", "2057-02-19");
        java.lang.String str17 = locale11.getDisplayCountry(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale11);
        boolean boolean19 = timeZone0.observesDaylightTime();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder20.clear();
        java.util.Locale.Builder builder23 = builder20.setRegion("100");
        java.util.Locale locale24 = builder20.build();
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getDisplayLanguage();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone0, locale24);
        org.joda.time.tz.NameProvider nameProvider28 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider28);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider28);
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str35 = nameProvider28.getShortName(locale31, "2000", "4");
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str39 = nameProvider28.getShortName(locale36, "UTC", "halfdayOfDay");
        java.lang.String str40 = locale24.getDisplayCountry(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar27", (calendar18.compareTo(calendar27) == 0) == calendar18.equals(calendar27));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone28);
        int int34 = dateTimeZone28.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property37 = localDate36.weekyear();
        org.joda.time.LocalDate localDate39 = property37.setCopy("100");
        int[] intArray40 = localDate39.getValues();
        org.joda.time.LocalDate localDate42 = localDate39.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property43 = localDate42.era();
        boolean boolean44 = strMap18.remove((java.lang.Object) dateTime35, (java.lang.Object) property43);
        boolean boolean45 = strMap18.isEmpty();
        java.util.Collection<org.joda.time.DateTimeZone> dateTimeZoneCollection46 = strMap18.values();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime32", (dateTime21.compareTo(dateTime32) == 0) == dateTime21.equals(dateTime32));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone9);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone9.getShortName((long) 50, locale17);
        boolean boolean19 = dateTimeZone9.isFixed();
        java.lang.String str20 = dateTimeZone9.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        java.util.Set<java.util.Map.Entry<java.lang.String, org.joda.time.DateTimeZone>> strEntrySet19 = strMap18.entrySet();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = strMap18.putIfAbsent("/experiment/hi!/ISOChronology[UTC]512309298702523492410", dateTimeZone22);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("0422-02-21");
        java.util.Locale.setDefault(locale26);
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        boolean boolean29 = strMap18.equals((java.lang.Object) charSet28);
        int int30 = strMap18.size();
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler31 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file32 = null;
        java.io.File file34 = new java.io.File(file32, "hi!");
        long long35 = file34.length();
        boolean boolean37 = file34.setReadable(false);
        long long38 = file34.getTotalSpace();
        boolean boolean39 = file34.canRead();
        java.io.File file40 = file34.getCanonicalFile();
        boolean boolean41 = file40.mkdir();
        boolean boolean43 = file40.setWritable(true);
        boolean boolean44 = file40.canExecute();
        boolean boolean46 = file40.setWritable(false);
        boolean boolean47 = file40.createNewFile();
        java.io.File[] fileArray48 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap49 = zoneInfoCompiler31.compile(file40, fileArray48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(100L, chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, chronology54);
        boolean boolean56 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime55.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        boolean boolean61 = dateTimeZone59.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = dateTime55.toDateTime(dateTimeZone59);
        int int65 = dateTimeZone59.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone59);
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property68 = localDate67.weekyear();
        org.joda.time.LocalDate localDate70 = property68.setCopy("100");
        int[] intArray71 = localDate70.getValues();
        org.joda.time.LocalDate localDate73 = localDate70.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property74 = localDate73.era();
        boolean boolean75 = strMap49.remove((java.lang.Object) dateTime66, (java.lang.Object) property74);
        strMap18.putAll(strMap49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime52 and dateTime63", (dateTime52.compareTo(dateTime63) == 0) == dateTime52.equals(dateTime63));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant26.withDurationAdded(readableDuration28, 222);
        org.joda.time.DateTime dateTime31 = instant26.toDateTimeISO();
        org.joda.time.Instant instant33 = instant26.minus((-9223311870267577616L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(dateTimeZone17);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone17.getShortName((long) 15, locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale30 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.lang.String str32 = locale30.getVariant();
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale.setDefault(category27, locale30);
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category27, locale35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 1970);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        boolean boolean42 = localDate38.equals((java.lang.Object) locale39);
        java.util.Locale.setDefault(category27, locale39);
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(100L, chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property50 = dateTime47.minuteOfDay();
        java.util.Locale locale53 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleKeys();
        int int55 = property50.getMaximumTextLength(locale53);
        java.lang.String str56 = locale44.getDisplayVariant(locale53);
        java.util.Locale.setDefault(category27, locale53);
        java.lang.String str58 = locale53.getVariant();
        java.util.Locale.setDefault(category0, locale53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime21", (dateTime10.compareTo(dateTime21) == 0) == dateTime10.equals(dateTime21));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone28);
        int int34 = dateTimeZone28.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property37 = localDate36.weekyear();
        org.joda.time.LocalDate localDate39 = property37.setCopy("100");
        int[] intArray40 = localDate39.getValues();
        org.joda.time.LocalDate localDate42 = localDate39.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property43 = localDate42.era();
        boolean boolean44 = strMap18.remove((java.lang.Object) dateTime35, (java.lang.Object) property43);
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now();
        int int46 = localDate45.getCenturyOfEra();
        org.joda.time.LocalDate localDate48 = localDate45.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property49 = localDate48.monthOfYear();
        int int50 = property49.getMaximumValue();
        boolean boolean51 = property49.isLeap();
        org.joda.time.LocalDate localDate52 = property49.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property53 = localDate52.monthOfYear();
        org.joda.time.LocalDate.Property property54 = localDate52.yearOfEra();
        int int55 = localDate52.getEra();
        boolean boolean56 = strMap18.equals((java.lang.Object) localDate52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime32", (dateTime21.compareTo(dateTime32) == 0) == dateTime21.equals(dateTime32));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime13.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.clockhourOfDay();
        org.joda.time.Chronology chronology38 = chronology33.withUTC();
        org.joda.time.Chronology chronology39 = chronology33.withUTC();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((long) 15, chronology33);
        org.joda.time.DurationField durationField41 = chronology33.hours();
        org.joda.time.DateTimeField dateTimeField42 = chronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology33.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime35", (dateTime13.compareTo(dateTime35) == 0) == dateTime13.equals(dateTime35));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField40 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology32.yearOfCentury();
        java.util.Locale locale47 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.lang.String str48 = locale47.getDisplayLanguage();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTime50.toString("4", locale52);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale52.getDisplayCountry(locale54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = dateTime57.toString("4", locale59);
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale59.getDisplayCountry(locale61);
        java.lang.String str63 = locale52.getDisplayCountry(locale59);
        java.lang.String str64 = locale52.getDisplayVariant();
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.lang.String str66 = locale52.getDisplayLanguage(locale65);
        java.lang.String str67 = locale47.getDisplayScript(locale65);
        java.util.Locale locale68 = locale47.stripExtensions();
        java.lang.String str69 = dateTimeField42.getAsText((int) 'a', locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone28);
        int int34 = dateTimeZone28.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property37 = localDate36.weekyear();
        org.joda.time.LocalDate localDate39 = property37.setCopy("100");
        int[] intArray40 = localDate39.getValues();
        org.joda.time.LocalDate localDate42 = localDate39.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property43 = localDate42.era();
        boolean boolean44 = strMap18.remove((java.lang.Object) dateTime35, (java.lang.Object) property43);
        boolean boolean45 = strMap18.isEmpty();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 1970);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        boolean boolean52 = localDate48.equals((java.lang.Object) locale49);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(100L, chronology57);
        boolean boolean59 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime58.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        boolean boolean64 = dateTimeZone62.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.DateTime dateTime66 = dateTime58.toDateTime(dateTimeZone62);
        int int68 = dateTimeZone62.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight70 = localDate48.toDateMidnight(dateTimeZone62);
        org.joda.time.LocalDate localDate71 = org.joda.time.LocalDate.now();
        int int72 = localDate71.getCenturyOfEra();
        org.joda.time.LocalDate localDate74 = localDate71.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate76 = localDate74.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime78 = localDate74.toDateTimeAtCurrentTime(dateTimeZone77);
        boolean boolean80 = dateTimeZone77.isStandardOffset((long) (-18574));
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(dateTimeZone77);
        org.joda.time.DateTime dateTime82 = localDate48.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone83 = strMap18.put("", dateTimeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime32", (dateTime21.compareTo(dateTime32) == 0) == dateTime21.equals(dateTime32));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        int int13 = dateTime2.getWeekOfWeekyear();
        int int14 = dateTime2.getMinuteOfHour();
        boolean boolean15 = dateTime2.isAfterNow();
        org.joda.time.DateTime dateTime16 = dateTime2.toDateTimeISO();
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        org.joda.time.Instant instant18 = dateTime16.toInstant();
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant17", (dateTime2.compareTo(instant17) == 0) == dateTime2.equals(instant17));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant24.withDurationAdded(readableDuration28, (int) (short) 1);
        org.joda.time.Instant instant32 = instant30.withMillis((long) (byte) 1);
        org.joda.time.Instant instant34 = instant30.plus((long) 59);
        org.joda.time.Instant instant35 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant35.withDurationAdded(readableDuration36, 54283);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone28);
        int int34 = dateTimeZone28.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property37 = localDate36.weekyear();
        org.joda.time.LocalDate localDate39 = property37.setCopy("100");
        int[] intArray40 = localDate39.getValues();
        org.joda.time.LocalDate localDate42 = localDate39.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property43 = localDate42.era();
        boolean boolean44 = strMap18.remove((java.lang.Object) dateTime35, (java.lang.Object) property43);
        boolean boolean45 = strMap18.isEmpty();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = strMap18.get((java.lang.Object) dateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        java.util.Locale locale52 = null;
        java.util.Calendar calendar53 = dateTime51.toCalendar(locale52);
        org.joda.time.DateTime dateTime55 = dateTime51.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property56 = dateTime55.millisOfSecond();
        boolean boolean57 = strMap18.containsValue((java.lang.Object) property56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime32", (dateTime21.compareTo(dateTime32) == 0) == dateTime21.equals(dateTime32));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.yearOfEra();
        org.joda.time.DurationField durationField29 = chronology19.minutes();
        org.joda.time.DurationField durationField30 = chronology19.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField26, and durationField29", !(durationField30.compareTo(durationField26) == 0) || (Math.signum(durationField30.compareTo(durationField29)) == Math.signum(durationField26.compareTo(durationField29))));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        java.util.Set<java.util.Map.Entry<java.lang.String, org.joda.time.DateTimeZone>> strEntrySet19 = strMap18.entrySet();
        java.util.Set<java.lang.String> strSet20 = strMap18.keySet();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.parse("2022-02-21T15:02:18.271Z");
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear(27);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMillis((-18574));
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        int int34 = dateTime33.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime43.plus((long) 'a');
        org.joda.time.DateTime dateTime49 = dateTime43.plusWeeks(11);
        org.joda.time.DateTime dateTime51 = dateTime49.withMillis((long) 8);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property55 = localTime54.hourOfDay();
        org.joda.time.LocalTime localTime57 = localTime54.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology58 = localTime57.getChronology();
        org.joda.time.DateTime dateTime59 = dateTime51.toDateTime(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.clockhourOfDay();
        long long64 = chronology58.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime65 = dateTime38.withChronology(chronology58);
        org.joda.time.DateTimeField dateTimeField66 = chronology58.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology58.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology58.getZone();
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime33.toMutableDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = dateTime26.withZoneRetainFields(dateTimeZone68);
        boolean boolean71 = strMap18.replace("/experiment/hi! (MILLIS,2057-02-19)", dateTimeZone23, dateTimeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime38", (dateTime33.compareTo(dateTime38) == 0) == dateTime33.equals(dateTime38));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField40 = chronology32.dayOfYear();
        org.joda.time.DurationField durationField41 = dateTimeField40.getRangeDurationField();
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider43);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider43);
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str50 = nameProvider43.getShortName(locale46, "2000", "4");
        java.lang.String str51 = locale46.getDisplayLanguage();
        java.lang.String str52 = locale46.getDisplayName();
        java.lang.String str53 = dateTimeField40.getAsShortText(0L, locale46);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale46);
        java.util.Set<java.lang.Character> charSet55 = locale46.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.DateTime.Property property24 = dateTime12.hourOfDay();
        org.joda.time.DateTime.Property property25 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTime dateTime5 = dateTime1.withYearOfEra(1);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property9 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime11 = localTime8.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime14.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime24 = dateTime14.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int26 = dateTime24.get(dateTimeFieldType25);
        org.joda.time.DateTime.Property property27 = dateTime24.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        boolean boolean30 = localTime8.isSupported(durationFieldType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.millis();
        java.lang.String str32 = durationFieldType31.getName();
        org.joda.time.LocalTime localTime34 = localTime8.withFieldAdded(durationFieldType31, (int) (short) -1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        int int57 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime47.toMutableDateTime(dateTimeZone53);
        int int60 = dateTimeZone53.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime61 = localTime34.toDateTimeToday(dateTimeZone53);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property66 = localTime65.hourOfDay();
        org.joda.time.LocalTime localTime68 = localTime65.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology69 = localTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.hourOfHalfday();
        boolean boolean71 = dateTimeField70.isLenient();
        org.joda.time.DurationField durationField72 = dateTimeField70.getDurationField();
        java.util.Locale locale76 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int77 = dateTimeField70.getMaximumShortTextLength(locale76);
        java.lang.String str78 = dateTimeZone53.getShortName(709199999L, locale76);
        long long80 = dateTimeZone53.nextTransition((long) 32769);
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime(dateTimeZone53);
        org.joda.time.DateTime dateTime82 = dateTime1.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime83 = dateTime82.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and mutableDateTime58", (dateTime24.compareTo(mutableDateTime58) == 0) == dateTime24.equals(mutableDateTime58));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.DateTime dateTime27 = instant24.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime27.getZone();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        int int33 = dateTime2.getMinuteOfHour();
        org.joda.time.DateTime.Property property34 = dateTime2.year();
        org.joda.time.DateTime dateTime35 = property34.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime32", (dateTime35.compareTo(dateTime32) == 0) == dateTime35.equals(dateTime32));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfDay();
        org.joda.time.DurationField durationField39 = chronology37.months();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology19.add(readablePeriod22, (long) (-18574), (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, (int) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean22 = dateTimeZone20.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime19.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime2.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readablePeriod28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime29", (dateTime2.compareTo(dateTime29) == 0) == dateTime2.equals(dateTime29));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(422);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property22 = dateTime15.dayOfWeek();
        org.joda.time.DateTime.Property property23 = dateTime15.weekyear();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime21", (dateTime15.compareTo(dateTime21) == 0) == dateTime15.equals(dateTime21));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate8 = localDate4.minusWeeks(100);
        org.joda.time.LocalDate.Property property9 = localDate4.yearOfCentury();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 54158083, chronology10);
        org.joda.time.LocalDate localDate15 = localDate13.plusDays(788);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime25 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime25.withZone(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localDate15.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.plus(readableDuration35);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillis(364740218880L);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.withDurationAdded(readableDuration39, 52);
        org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(725613);
        boolean boolean44 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime30", (dateTime25.compareTo(dateTime30) == 0) == dateTime25.equals(dateTime30));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-21938563670400001L));
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        int int6 = dateTime5.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = instant9.toDateTimeISO();
        int int12 = property2.getDifference((org.joda.time.ReadableInstant) dateTime11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant9", (dateTime5.compareTo(instant9) == 0) == dateTime5.equals(instant9));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withFields((org.joda.time.ReadablePartial) localDate4);
        org.joda.time.LocalDate.Property property7 = localDate4.weekyear();
        org.joda.time.LocalDate localDate9 = localDate4.withDayOfWeek((int) (short) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 'a');
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime19.withZone(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withPeriodAdded(readablePeriod25, 197);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 23);
        boolean boolean30 = localDate9.equals((java.lang.Object) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTime32.toString("4", locale34);
        int int36 = dateTime32.getYearOfCentury();
        org.joda.time.Instant instant37 = dateTime32.toInstant();
        org.joda.time.Instant instant38 = dateTime32.toInstant();
        org.joda.time.Instant instant40 = instant38.plus(3244838654357L);
        boolean boolean41 = dateTime29.isEqual((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime24", (dateTime19.compareTo(dateTime24) == 0) == dateTime19.equals(dateTime24));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.minus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.minus(readableDuration7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        boolean boolean16 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime12.getDayOfYear();
        org.joda.time.DateTime dateTime20 = dateTime12.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(1);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTime dateTime25 = dateTime20.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime8.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        boolean boolean33 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime29.getDayOfYear();
        org.joda.time.DateTime dateTime36 = dateTime29.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property37 = dateTime29.year();
        org.joda.time.DateTime.Property property38 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = property38.withMinimumValue();
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds(32769);
        org.joda.time.DateTime dateTime43 = dateTime41.minusHours(903);
        boolean boolean44 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property45 = dateTime41.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime26", (dateTime2.compareTo(dateTime26) == 0) == dateTime2.equals(dateTime26));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        int int24 = dateTime1.get(dateTimeField23);
        long long26 = dateTimeField23.roundHalfEven((long) 2);
        int int28 = dateTimeField23.getLeapAmount(45056L);
        java.lang.String str30 = dateTimeField23.getAsShortText((long) 3);
        java.util.Locale locale33 = new java.util.Locale("", "hi!");
        int int34 = dateTimeField23.getMaximumShortTextLength(locale33);
        long long37 = dateTimeField23.add(90L, 16);
        int int39 = dateTimeField23.get(63686358127900L);
        org.joda.time.DurationField durationField40 = dateTimeField23.getDurationField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone48);
        org.joda.time.LocalDate localDate51 = localDate49.plusDays(3);
        int int52 = localDate51.getYear();
        org.joda.time.LocalDate localDate54 = localDate51.withWeekOfWeekyear((int) ' ');
        int[] intArray56 = chronology46.get((org.joda.time.ReadablePartial) localDate51, (long) 52);
        org.joda.time.LocalDate localDate58 = localDate51.plusDays(0);
        org.joda.time.LocalDate.Property property59 = localDate51.weekyear();
        org.joda.time.LocalDate localDate61 = localDate51.plusDays(38);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusYears(3);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean68 = localDateTime66.isSupported(dateTimeFieldType67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType67.getField(chronology69);
        org.joda.time.ReadablePartial readablePartial71 = null;
        int[] intArray76 = new int[] { 32769, 'x', (byte) 1, 10 };
        int int77 = dateTimeField70.getMinimumValue(readablePartial71, intArray76);
        int int78 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDate61, intArray76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime22", (dateTime14.compareTo(dateTime22) == 0) == dateTime14.equals(dateTime22));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        int int24 = dateTime1.get(dateTimeField23);
        long long26 = dateTimeField23.roundHalfEven((long) 2);
        long long29 = dateTimeField23.add((long) (byte) 1, (-1L));
        org.joda.time.ReadablePartial readablePartial30 = null;
        int int31 = dateTimeField23.getMaximumValue(readablePartial30);
        long long33 = dateTimeField23.roundHalfCeiling((long) (short) -1);
        long long35 = dateTimeField23.roundHalfCeiling(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime22", (dateTime14.compareTo(dateTime22) == 0) == dateTime14.equals(dateTime22));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        int int13 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        boolean boolean16 = dateTimeZone14.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime2.toMutableDateTime(dateTimeZone14);
        long long20 = dateTimeZone14.convertUTCToLocal((long) (byte) 1);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeZone14.getShortName(63686358113273L, locale22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        boolean boolean30 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime26.getDayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime26.plusYears((int) (short) 0);
        long long34 = dateTime26.getMillis();
        int int35 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDate localDate36 = dateTime26.toLocalDate();
        org.joda.time.Instant instant37 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime38 = instant37.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.plusDays(907);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime18", (dateTime2.compareTo(mutableDateTime18) == 0) == dateTime2.equals(mutableDateTime18));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        java.util.Date date36 = localDateTime33.toDate();
        int int37 = date36.getDay();
        boolean boolean38 = date32.after(date36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        calendar43.clear(9);
        int int47 = calendar43.getGreatestMinimum((int) (short) 0);
        calendar43.setLenient(false);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        int int51 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        int int53 = timeZone52.getRawOffset();
        boolean boolean54 = timeZone50.hasSameRules(timeZone52);
        calendar43.setTimeZone(timeZone50);
        java.util.Date date56 = calendar43.getTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay(10);
        java.util.Date date60 = localDateTime57.toDate();
        int int61 = date60.getDay();
        java.time.Instant instant62 = date60.toInstant();
        boolean boolean63 = date56.after(date60);
        boolean boolean64 = date36.after(date60);
        int int65 = date60.getDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar43", (gregorianCalendar21.compareTo(calendar43) == 0) == gregorianCalendar21.equals(calendar43));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear(24);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        boolean boolean21 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime17.getDayOfYear();
        org.joda.time.DateTime dateTime25 = dateTime17.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime27 = dateTime17.minus((long) (byte) 10);
        int int28 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        boolean boolean31 = dateTimeZone29.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime17.toMutableDateTime(dateTimeZone29);
        long long35 = dateTimeZone29.convertUTCToLocal((long) (byte) 1);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = dateTimeZone29.getShortName(63686358113273L, locale37);
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.util.Calendar calendar40 = dateTime14.toCalendar(locale37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        boolean boolean47 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime43.getDayOfYear();
        org.joda.time.DateTime dateTime51 = dateTime43.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds(1);
        java.util.GregorianCalendar gregorianCalendar54 = dateTime53.toGregorianCalendar();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar54);
        boolean boolean56 = dateTime14.equals((java.lang.Object) gregorianCalendar54);
        java.util.TimeZone timeZone57 = gregorianCalendar54.getTimeZone();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        java.util.Locale locale61 = null;
        java.util.Calendar calendar62 = dateTime60.toCalendar(locale61);
        calendar62.clear(9);
        int int66 = calendar62.getGreatestMinimum((int) (short) 0);
        calendar62.setLenient(false);
        calendar62.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getTimeZone("hi!");
        calendar62.setTimeZone(timeZone76);
        int int78 = timeZone76.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        java.time.ZoneId zoneId80 = timeZone76.toZoneId();
        java.time.ZoneId zoneId81 = timeZone76.toZoneId();
        java.util.TimeZone timeZone83 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale84 = java.util.Locale.PRC;
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone83, locale84);
        java.util.TimeZone timeZone87 = java.util.TimeZone.getTimeZone("100");
        boolean boolean88 = timeZone83.hasSameRules(timeZone87);
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone83);
        timeZone83.setID("\u6cd5\u56fd");
        boolean boolean92 = timeZone76.hasSameRules(timeZone83);
        boolean boolean93 = timeZone57.hasSameRules(timeZone83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar85 and calendar89", (calendar85.compareTo(calendar89) == 0) == calendar85.equals(calendar89));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        java.util.Locale locale4 = null;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.DateTime dateTime7 = dateTime3.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property8 = dateTime3.yearOfEra();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyearOfCentury();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) dateTime3, chronology15);
        org.joda.time.DurationField durationField20 = chronology15.weeks();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(0L, chronology15);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime27.plus((long) 'a');
        org.joda.time.DateTime dateTime33 = dateTime27.plusWeeks(11);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, chronology35);
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        calendar38.clear(9);
        int int42 = calendar38.getGreatestMinimum((int) (short) 0);
        calendar38.roll(9, true);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        boolean boolean52 = dateTime48.isAfter((org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime48.getDayOfYear();
        int int54 = dateTime48.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar55 = dateTime48.toGregorianCalendar();
        org.joda.time.Chronology chronology56 = dateTime48.getChronology();
        boolean boolean57 = calendar38.after((java.lang.Object) chronology56);
        java.lang.String str58 = calendar38.getCalendarType();
        calendar38.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromCalendarFields(calendar38);
        boolean boolean67 = dateTime27.equals((java.lang.Object) localTime66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = dateTime27.toDateTime(chronology68);
        int int70 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime21.plus(readableDuration71);
        org.joda.time.DateTime dateTime74 = dateTime21.withWeekyear(1999);
        java.util.Date date75 = dateTime74.toDate();
        java.lang.String str76 = date75.toLocaleString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and gregorianCalendar55", (calendar5.compareTo(gregorianCalendar55) == 0) == calendar5.equals(gregorianCalendar55));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfSecond((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight13 = dateTime10.toDateMidnight();
        org.joda.time.DateTime dateTime15 = dateTime10.minusWeeks(31);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        boolean boolean22 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime18.getDayOfYear();
        org.joda.time.DateTime dateTime26 = dateTime18.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime28 = dateTime18.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int30 = dateTime28.get(dateTimeFieldType29);
        org.joda.time.DateTime.Property property31 = dateTime28.dayOfWeek();
        org.joda.time.DurationField durationField32 = property31.getDurationField();
        int int33 = property31.get();
        java.lang.String str34 = property31.getName();
        int int35 = property31.getMaximumValueOverall();
        org.joda.time.DateTime dateTime36 = property31.getDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        boolean boolean43 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = dateTime42.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusYears(3);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean52 = localDateTime50.isSupported(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType51.getField(chronology53);
        int int55 = dateTime42.get(dateTimeFieldType51);
        boolean boolean56 = dateTime36.isSupported(dateTimeFieldType51);
        org.joda.time.Instant instant57 = dateTime36.toInstant();
        org.joda.time.Instant instant59 = instant57.minus((long) 5);
        boolean boolean60 = dateTime15.isBefore((org.joda.time.ReadableInstant) instant59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and instant57", (dateTime28.compareTo(instant57) == 0) == dateTime28.equals(instant57));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        calendar4.clear();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        calendar4.setTimeZone(timeZone18);
        int int21 = calendar4.getActualMaximum(0);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(903);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfMonth(23);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withMillisOfSecond(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withField(dateTimeFieldType35, 11);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.year();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusMinutes(148221);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime45.plus((long) 'a');
        org.joda.time.DateTime dateTime50 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears((int) 'u');
        org.joda.time.DateTime dateTime54 = dateTime50.plusMonths(0);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.withZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime59.plus((long) 'a');
        org.joda.time.DateTime dateTime64 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime(chronology65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime64.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime71 = dateTime69.minusYears(27);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusYears(3);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = property75.setCopy(52);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minus(readablePeriod78);
        int int80 = localDateTime79.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int82 = localDateTime79.get(dateTimeFieldType81);
        org.joda.time.DateTime dateTime84 = dateTime71.withField(dateTimeFieldType81, (int) (short) 1);
        int int85 = dateTime54.get(dateTimeFieldType81);
        org.joda.time.DateTime dateTime88 = dateTime54.withDurationAdded(2019L, 32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType89.getDurationType();
        boolean boolean91 = dateTime54.isSupported(dateTimeFieldType89);
        int int92 = localDateTime37.get(dateTimeFieldType89);
        int int93 = localDateTime22.get(dateTimeFieldType89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime69", (dateTime50.compareTo(dateTime69) == 0) == dateTime50.equals(dateTime69));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        boolean boolean12 = dateTime10.isAfterNow();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime25 = dateTime15.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime32 = localTime28.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        int int35 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime25.toMutableDateTime(dateTimeZone31);
        int int38 = dateTimeZone31.getOffset((long) 20);
        org.joda.time.DateTime dateTime39 = dateTime10.toDateTime(dateTimeZone31);
        java.lang.String str41 = dateTimeZone31.getName((long) 51);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        boolean boolean49 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime45.getDayOfYear();
        org.joda.time.DateTime dateTime53 = dateTime45.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime55 = dateTime53.plusSeconds(1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(100L, chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.withZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime60.plus((long) 'a');
        org.joda.time.DateTime dateTime66 = dateTime60.plusWeeks(11);
        org.joda.time.DateTime dateTime68 = dateTime66.withMillis((long) 8);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property72 = localTime71.hourOfDay();
        org.joda.time.LocalTime localTime74 = localTime71.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology75 = localTime74.getChronology();
        org.joda.time.DateTime dateTime76 = dateTime68.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime55.withChronology(chronology75);
        org.joda.time.DurationField durationField78 = chronology75.weekyears();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.weekyear();
        java.util.Locale locale83 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleKeys();
        java.lang.String str85 = locale83.getVariant();
        java.lang.String str86 = locale83.getISO3Language();
        java.lang.String str87 = dateTimeField79.getAsText(57600090L, locale83);
        java.lang.String str88 = dateTimeZone31.getShortName((-3600000L), locale83);
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone1, locale83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime39", (dateTime10.compareTo(dateTime39) == 0) == dateTime10.equals(dateTime39));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DateTime dateTime8 = dateTime4.minus(10L);
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(22);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean22 = dateTimeZone20.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime8.withZoneRetainFields(dateTimeZone20);
        long long29 = dateTimeZone20.convertUTCToLocal((long) 23);
        java.lang.String str31 = dateTimeZone20.getNameKey((long) 1645455737);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime24", (dateTime2.compareTo(dateTime24) == 0) == dateTime2.equals(dateTime24));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2054-02-20T23:45:00.010");
        timeZone1.setID("2022-02-21T15:04:31.165Z");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5, locale6);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("100");
        boolean boolean10 = timeZone5.hasSameRules(timeZone9);
        boolean boolean11 = timeZone9.observesDaylightTime();
        timeZone9.setRawOffset(54122803);
        timeZone9.setID("1970");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone9);
        boolean boolean17 = timeZone1.hasSameRules(timeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar16", (calendar7.compareTo(calendar16) == 0) == calendar7.equals(calendar16));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(18);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        int int14 = localDate13.getCenturyOfEra();
        org.joda.time.LocalDate localDate16 = localDate13.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate18 = localDate16.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long24 = dateTimeZone19.getMillisKeepLocal(dateTimeZone22, (long) 3);
        long long26 = dateTimeZone22.nextTransition((long) 21);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(0L, dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime27", (dateTime12.compareTo(dateTime27) == 0) == dateTime12.equals(dateTime27));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime13 = dateTime11.plus(0L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(3);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus(readablePeriod19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury(13);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime13.toDateTime(dateTimeZone24);
        int int27 = dateTime13.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime26", (dateTime13.compareTo(dateTime26) == 0) == dateTime13.equals(dateTime26));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DurationField durationField8 = chronology5.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField8, and durationField6", !(durationField6.compareTo(durationField8) == 0) || (Math.signum(durationField6.compareTo(durationField6)) == Math.signum(durationField8.compareTo(durationField6))));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.centuryOfEra();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology32);
        org.joda.time.DurationField durationField39 = chronology32.eras();
        org.joda.time.DurationField durationField40 = chronology32.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField39, durationField40, and durationField39", !(durationField39.compareTo(durationField40) == 0) || (Math.signum(durationField39.compareTo(durationField39)) == Math.signum(durationField40.compareTo(durationField39))));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime4.plus(readablePeriod5);
        org.joda.time.LocalTime.Property property7 = localTime4.millisOfDay();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime21 = dateTime11.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime28 = localTime24.toDateTimeToday(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        int int31 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime21.toMutableDateTime(dateTimeZone27);
        org.joda.time.Instant instant33 = dateTime21.toInstant();
        org.joda.time.MutableDateTime mutableDateTime34 = instant33.toMutableDateTimeISO();
        org.joda.time.Instant instant37 = instant33.withDurationAdded((long) 6, (int) (byte) 10);
        boolean boolean38 = instant33.isAfterNow();
        org.joda.time.Instant instant40 = instant33.withMillis(63686358177234L);
        int int41 = property7.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.LocalTime localTime42 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime43 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property44 = localTime43.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and mutableDateTime32", (dateTime21.compareTo(mutableDateTime32) == 0) == dateTime21.equals(mutableDateTime32));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        int int12 = timeZone11.getRawOffset();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        int int14 = timeZone13.getRawOffset();
        boolean boolean15 = timeZone11.hasSameRules(timeZone13);
        calendar4.setTimeZone(timeZone11);
        java.util.Date date17 = calendar4.getTime();
        int int19 = calendar4.getActualMaximum(13);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone24);
        boolean boolean26 = timeZone24.observesDaylightTime();
        int int27 = timeZone24.getRawOffset();
        java.util.Calendar.Builder builder28 = builder22.setTimeZone(timeZone24);
        java.util.Calendar.Builder builder29 = builder21.setTimeZone(timeZone24);
        calendar4.setTimeZone(timeZone24);
        int int32 = timeZone24.getOffset(63686350926436L);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone34, locale35);
        java.time.ZoneId zoneId37 = timeZone34.toZoneId();
        java.util.Locale locale40 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale40.getVariant();
        java.lang.String str43 = locale40.getDisplayScript();
        java.util.Locale locale44 = locale40.stripExtensions();
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone34, locale44);
        java.lang.String str47 = timeZone24.getDisplayName(locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar36", (calendar25.compareTo(calendar36) == 0) == calendar25.equals(calendar36));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        int int9 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = dateTimeZone5.isStandardOffset(0L);
        java.util.TimeZone timeZone12 = dateTimeZone5.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = locale17.getDisplayCountry(locale19);
        java.lang.String str21 = dateTimeZone15.getShortName((long) 3, locale19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone12, locale19);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone12);
        java.time.ZoneId zoneId24 = timeZone12.toZoneId();
        int int26 = timeZone12.getOffset(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar23", (calendar22.compareTo(calendar23) == 0) == calendar22.equals(calendar23));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZoneRetainFields(dateTimeZone34);
        int int36 = dateTime35.getMonthOfYear();
        long long37 = dateTime35.getMillis();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        org.joda.time.DateTime dateTime39 = dateTime28.withZone(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, (int) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean22 = dateTimeZone20.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime19.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime2.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((int) (short) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfMinute();
        org.joda.time.DateTime dateTime30 = dateTime27.withWeekOfWeekyear(46);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.lang.String str35 = locale34.getDisplayVariant();
        java.lang.String str36 = dateTimeZone32.getName(31536000000L, locale34);
        java.lang.String str37 = dateTime30.toString("00:03:00.000", locale34);
        java.util.Set<java.lang.String> strSet38 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.lang.String str42 = locale39.getDisplayCountry(locale41);
        java.lang.String str43 = locale39.getDisplayName();
        java.util.Set<java.lang.String> strSet44 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = locale39.stripExtensions();
        java.lang.String str46 = locale34.getDisplayScript(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime25", (dateTime2.compareTo(dateTime25) == 0) == dateTime2.equals(dateTime25));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime(dateTimeZone6);
        int int8 = dateTime5.getYearOfCentury();
        org.joda.time.DateTime.Property property9 = dateTime5.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime5.toMutableDateTime();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        int int13 = localDate12.getCenturyOfEra();
        org.joda.time.LocalDate localDate15 = localDate12.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime26.plus((long) 'a');
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.minutes();
        org.joda.time.DateTime dateTime36 = dateTime20.toDateTime(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.weeks();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 788, chronology34);
        org.joda.time.DateTime dateTime39 = mutableDateTime10.toDateTime(chronology34);
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((-2019));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime36", (dateTime20.compareTo(dateTime36) == 0) == dateTime20.equals(dateTime36));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = dateTime5.minus(10L);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(22);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime9.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(280491302912L, dateTimeZone21);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks(0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = chronology38.add(readablePeriod40, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField44 = chronology38.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.Chronology chronology46 = chronology38.withUTC();
        org.joda.time.DateTime dateTime47 = dateTime29.toDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField50 = chronology46.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime25", (dateTime3.compareTo(dateTime25) == 0) == dateTime3.equals(dateTime25));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime13 = dateTime11.plus(0L);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime11.minusMillis(86399);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(311);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = localDate21.getField(1);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = localDate21.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property29 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime31 = dateTime27.withDayOfYear((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(298);
        org.joda.time.DateTime dateTime36 = dateTime33.withZone(dateTimeZone35);
        int int37 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime36", (dateTime33.compareTo(dateTime36) == 0) == dateTime33.equals(dateTime36));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.DateTime dateTime17 = dateTime14.minusHours(82980000);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        int int16 = dateTime5.getMinuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime5.plusMillis(0);
        boolean boolean19 = dateTime5.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime5.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears((int) ' ');
        int int26 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withHourOfDay(15);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.millisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        boolean boolean36 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusYears(3);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType44.getField(chronology46);
        int int48 = dateTime35.get(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime23.withFieldAdded(durationFieldType49, 16);
        org.joda.time.DateTime dateTime53 = dateTime5.withFieldAdded(durationFieldType49, 1645455766);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.withZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime59.plus((long) 'a');
        org.joda.time.DateTime dateTime65 = dateTime59.plusWeeks(11);
        org.joda.time.DateTime dateTime67 = dateTime65.withMillis((long) 8);
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property71 = localTime70.hourOfDay();
        org.joda.time.LocalTime localTime73 = localTime70.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology74 = localTime73.getChronology();
        org.joda.time.DateTime dateTime75 = dateTime67.toDateTime(chronology74);
        org.joda.time.DurationField durationField76 = chronology74.eras();
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property80 = localTime79.hourOfDay();
        org.joda.time.LocalTime localTime81 = property80.withMinimumValue();
        int int82 = localTime81.getHourOfDay();
        long long84 = chronology74.set((org.joda.time.ReadablePartial) localTime81, 364740218880L);
        org.joda.time.DateTimeField dateTimeField85 = chronology74.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField86 = chronology74.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField87 = chronology74.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField88 = chronology74.era();
        org.joda.time.LocalTime localTime89 = new org.joda.time.LocalTime(299081887744L, chronology74);
        boolean boolean90 = durationFieldType49.isSupported(chronology74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and gregorianCalendar20", (calendar15.compareTo(gregorianCalendar20) == 0) == calendar15.equals(gregorianCalendar20));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        boolean boolean16 = dateTime11.isBeforeNow();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime22 = localTime19.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        boolean boolean26 = dateTime11.equals((java.lang.Object) dateTimeField25);
        org.joda.time.DateTime dateTime29 = dateTime11.withDurationAdded((long) 20, (int) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        boolean boolean36 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime32.getDayOfYear();
        org.joda.time.DateTime dateTime40 = dateTime32.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime42 = dateTime32.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int44 = dateTime42.get(dateTimeFieldType43);
        org.joda.time.DateTime.Property property45 = dateTime42.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property45.getFieldType();
        org.joda.time.DateTime dateTime48 = dateTime29.withField(dateTimeFieldType46, 2);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours(422);
        int int52 = dateTimeZone50.getOffsetFromLocal((-1L));
        org.joda.time.DateTime dateTime53 = dateTime48.toDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((int) (short) 100, 2, 11, 4, (int) (short) 0, (int) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        java.lang.String str66 = dateTimeZone63.getNameKey((long) 8);
        long long69 = dateTimeZone63.adjustOffset(0L, false);
        java.io.File file70 = null;
        java.io.File file72 = new java.io.File(file70, "hi!");
        long long73 = file72.length();
        boolean boolean74 = dateTimeZone63.equals((java.lang.Object) file72);
        org.joda.time.DateTime dateTime75 = dateTime62.toDateTime(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone63);
        boolean boolean77 = dateTimeZone50.equals((java.lang.Object) localDateTime76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and dateTime53", (dateTime48.compareTo(dateTime53) == 0) == dateTime48.equals(dateTime53));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(422);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        long long24 = dateTime23.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime23", (dateTime15.compareTo(dateTime23) == 0) == dateTime15.equals(dateTime23));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology4.millis();
        org.joda.time.DurationField durationField7 = chronology4.months();
        org.joda.time.DurationField durationField8 = chronology4.months();
        org.joda.time.DurationField durationField9 = chronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField6, and durationField7", !(durationField9.compareTo(durationField6) == 0) || (Math.signum(durationField9.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(422);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime23", (dateTime15.compareTo(dateTime23) == 0) == dateTime15.equals(dateTime23));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.era();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        java.lang.String str10 = property7.getAsText();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = property7.getAsShortText(locale11);
        java.util.Locale locale16 = new java.util.Locale(":", "2057-02-19");
        java.lang.String str17 = locale11.getDisplayCountry(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale11);
        boolean boolean19 = timeZone0.observesDaylightTime();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone0);
        boolean boolean21 = timeZone0.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar20", (calendar18.compareTo(calendar20) == 0) == calendar18.equals(calendar20));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        java.util.Locale locale2 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = locale2.getVariant();
        java.lang.String str5 = locale2.getDisplayScript();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale2);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("100");
        int int10 = timeZone9.getRawOffset();
        java.time.ZoneId zoneId11 = timeZone9.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone13);
        calendar7.setTimeZone(timeZone13);
        boolean boolean16 = timeZone13.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar14", (calendar7.compareTo(calendar14) == 0) == calendar7.equals(calendar14));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfSecond(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = localTime6.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfDay();
        java.util.Locale locale17 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        int int19 = property14.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime20 = property14.roundHalfEvenCopy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMonths((int) (short) -1);
        boolean boolean25 = dateTime20.isBeforeNow();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfDay();
        boolean boolean35 = dateTime20.equals((java.lang.Object) dateTimeField34);
        org.joda.time.DateTime dateTime38 = dateTime20.withDurationAdded((long) 20, (int) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, chronology43);
        boolean boolean45 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime41.getDayOfYear();
        org.joda.time.DateTime dateTime49 = dateTime41.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime51 = dateTime41.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int53 = dateTime51.get(dateTimeFieldType52);
        org.joda.time.DateTime.Property property54 = dateTime51.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        org.joda.time.DateTime dateTime57 = dateTime38.withField(dateTimeFieldType55, 2);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(422);
        int int61 = dateTimeZone59.getOffsetFromLocal((-1L));
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = localTime6.toDateTimeToday(dateTimeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime57 and dateTime62", (dateTime57.compareTo(dateTime62) == 0) == dateTime57.equals(dateTime62));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readableDuration37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withDurationAdded(readableDuration39, (int) (byte) 1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime41.toMutableDateTime(chronology42);
        boolean boolean44 = dateTime34.equals((java.lang.Object) dateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int46 = dateTime34.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = dateTime34.minusDays(80);
        boolean boolean49 = dateTime48.isEqualNow();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(100L, chronology51);
        int int53 = dateTime52.getMillisOfDay();
        org.joda.time.DateTime dateTime55 = dateTime52.plusHours(360000000);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime(dateTimeZone56);
        int int58 = dateTime55.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusYears(3);
        java.util.Date date62 = localDateTime59.toDate();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.withWeekyear(7);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.millis();
        java.lang.String str66 = durationFieldType65.toString();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withFieldAdded(durationFieldType65, 12);
        org.joda.time.DateTime dateTime70 = dateTime55.withFieldAdded(durationFieldType65, 307);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        int int74 = dateTimeZone72.getStandardOffset((long) 20);
        org.joda.time.DateTime dateTime75 = dateTime70.withZoneRetainFields(dateTimeZone72);
        int int77 = dateTimeZone72.getOffsetFromLocal(280485924864L);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime79 = dateTime48.toDateTime(dateTimeZone72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.Chronology chronology38 = chronology32.withUTC();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean48 = localDateTime43.isSupported(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDateTime51.isSupported(dateTimeFieldType52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean56 = localDateTime51.isSupported(dateTimeFieldType55);
        boolean boolean57 = localDateTime43.isSupported(dateTimeFieldType55);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime43.toDateTime(readableInstant58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime43.plus(readablePeriod60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime43.plusHours(2000);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str65 = dateTimeFieldType64.getName();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType64.getRangeDurationType();
        boolean boolean67 = localDateTime63.isSupported(durationFieldType66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.dayOfWeek();
        int[] intArray70 = chronology40.get((org.joda.time.ReadablePartial) localDateTime63, (long) (short) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property4 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime6 = localTime3.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(1645455804949L, chronology7);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        java.util.Locale locale19 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = builder20.build();
        java.lang.String str22 = locale19.getDisplayCountry(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone14, locale19);
        java.lang.String str24 = dateTimeField11.getAsShortText(43200100L, locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar23", (calendar15.compareTo(calendar23) == 0) == calendar15.equals(calendar23));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.year();
        org.joda.time.DurationField durationField36 = chronology32.minutes();
        java.lang.String str37 = chronology32.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.DateTime dateTime28 = instant24.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime.Property property31 = dateTime29.weekyear();
        boolean boolean32 = instant24.equals((java.lang.Object) property31);
        org.joda.time.DateTime dateTime34 = property31.setCopy(54122803);
        org.joda.time.Interval interval35 = property31.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.eras();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((-62135596800000L), chronology20);
        org.joda.time.DurationField durationField24 = chronology20.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        boolean boolean8 = dateTimeField6.isLeap((long) 422);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(11);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 8);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        long long44 = chronology38.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime45 = dateTime18.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.yearOfEra();
        org.joda.time.DurationField durationField48 = chronology38.weeks();
        org.joda.time.DurationField durationField49 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField50 = chronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology38.dayOfYear();
        org.joda.time.DurationField durationField52 = chronology38.halfdays();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, chronology54);
        int int56 = dateTime55.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.toDateTime(dateTimeZone57);
        java.util.Locale locale61 = new java.util.Locale("", "hi!");
        java.util.Locale locale64 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleKeys();
        java.lang.String str66 = locale64.getVariant();
        java.lang.String str67 = locale61.getDisplayScript(locale64);
        java.util.Calendar calendar68 = dateTime58.toCalendar(locale61);
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.fromCalendarFields(calendar68);
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.fromCalendarFields(calendar68);
        int[] intArray72 = chronology38.get((org.joda.time.ReadablePartial) localTime70, (long) 52);
        int int73 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime16, intArray72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime18", (dateTime11.compareTo(dateTime18) == 0) == dateTime11.equals(dateTime18));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        int int4 = dateTime3.getMillisOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.plusHours(360000000);
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime12 = dateTime10.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology18.add(readablePeriod20, (long) 13, (int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime10, chronology18);
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(3600047L, chronology18);
        org.joda.time.DurationField durationField28 = chronology18.centuries();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology18.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime19", (dateTime9.compareTo(dateTime19) == 0) == dateTime9.equals(dateTime19));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DurationField durationField38 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.hourOfDay();
        org.joda.time.DurationField durationField40 = dateTimeField39.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        java.lang.String str33 = dateTimeZone13.getID();
        int int35 = dateTimeZone13.getStandardOffset((long) 1645455801);
        java.util.TimeZone timeZone36 = dateTimeZone13.toTimeZone();
        java.util.TimeZone timeZone37 = dateTimeZone13.toTimeZone();
        timeZone37.setID("\u897f\u66a6");
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = null;
        org.joda.time.format.DateTimeParser dateTimeParser41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter40, dateTimeParser41);
        boolean boolean43 = dateTimeFormatter42.isPrinter();
        boolean boolean44 = dateTimeFormatter42.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone46);
        org.joda.time.LocalDate localDate49 = localDate47.plusDays(3);
        int int50 = localDate49.getYear();
        org.joda.time.LocalDate localDate52 = localDate49.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate54 = localDate52.minusMonths((int) (byte) 100);
        java.util.Date date55 = localDate54.toDate();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours(422);
        org.joda.time.Interval interval58 = localDate54.toInterval(dateTimeZone57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter42.withZone(dateTimeZone57);
        boolean boolean60 = dateTimeFormatter42.isPrinter();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getTimeZone("eras");
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale66 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.lang.String str68 = locale66.getVariant();
        java.lang.String str69 = locale66.getISO3Language();
        java.util.Locale.setDefault(category63, locale66);
        java.util.Locale locale71 = java.util.Locale.getDefault(category63);
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone62, locale71);
        java.lang.String str74 = locale71.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter42.withLocale(locale71);
        java.lang.String str76 = timeZone37.getDisplayName(locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime32", (dateTime2.compareTo(dateTime32) == 0) == dateTime2.equals(dateTime32));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.Instant instant31 = instant27.minus((long) (short) 100);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        org.joda.time.DurationField durationField34 = chronology32.seconds();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 54227714);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        int int15 = dateTime10.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime10.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime20 = dateTime10.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property24 = localTime23.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime27 = localTime23.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        int int30 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime20.toMutableDateTime(dateTimeZone26);
        int int33 = dateTimeZone26.getOffset((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter5.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter34.withPivotYear((int) (short) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime31", (dateTime20.compareTo(mutableDateTime31) == 0) == dateTime20.equals(mutableDateTime31));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        int int7 = dateTime6.getMonthOfYear();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.LocalTime localTime13 = localTime10.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime16.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime26 = dateTime16.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        boolean boolean32 = localTime10.isSupported(durationFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.millis();
        java.lang.String str34 = durationFieldType33.getName();
        org.joda.time.LocalTime localTime36 = localTime10.withFieldAdded(durationFieldType33, (int) (short) -1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        boolean boolean43 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime42);
        int int44 = dateTime39.getDayOfYear();
        org.joda.time.DateTime dateTime47 = dateTime39.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime49 = dateTime39.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property53 = localTime52.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime56 = localTime52.toDateTimeToday(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        int int59 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime49.toMutableDateTime(dateTimeZone55);
        int int62 = dateTimeZone55.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime63 = localTime36.toDateTimeToday(dateTimeZone55);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property68 = localTime67.hourOfDay();
        org.joda.time.LocalTime localTime70 = localTime67.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.hourOfHalfday();
        boolean boolean73 = dateTimeField72.isLenient();
        org.joda.time.DurationField durationField74 = dateTimeField72.getDurationField();
        java.util.Locale locale78 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int79 = dateTimeField72.getMaximumShortTextLength(locale78);
        java.lang.String str80 = dateTimeZone55.getShortName(709199999L, locale78);
        long long82 = dateTimeZone55.nextTransition((long) 32769);
        org.joda.time.DateTime dateTime83 = dateTime6.withZone(dateTimeZone55);
        org.joda.time.DateTime dateTime85 = dateTime83.plusWeeks(788);
        java.util.GregorianCalendar gregorianCalendar86 = dateTime83.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and mutableDateTime60", (dateTime26.compareTo(mutableDateTime60) == 0) == dateTime26.equals(mutableDateTime60));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) dateTime1, chronology4);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 'a');
        org.joda.time.DateTime dateTime18 = dateTime12.plusWeeks(11);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 8);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property24 = localTime23.hourOfDay();
        org.joda.time.LocalTime localTime26 = localTime23.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime20.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        long long33 = chronology27.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime34 = dateTime7.withChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.year();
        org.joda.time.DurationField durationField36 = chronology27.eras();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(chronology27);
        org.joda.time.DateTime dateTime38 = dateTime5.withChronology(chronology27);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(26);
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime(dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime5", (dateTime1.compareTo(dateTime5) == 0) == dateTime1.equals(dateTime5));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant24.withDurationAdded(readableDuration28, (int) (short) 1);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant24.minus(readableDuration31);
        org.joda.time.Instant instant34 = instant32.withMillis((long) 1645455765);
        org.joda.time.Instant instant36 = instant34.withMillis(94694400100L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) (short) 10);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime14 = instant12.toMutableDateTime();
        org.joda.time.Chronology chronology15 = instant12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.DateTime dateTime17 = dateTime11.withChronology(chronology15);
        int int18 = dateTime17.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime13", (instant12.compareTo(mutableDateTime13) == 0) == instant12.equals(mutableDateTime13));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = dateTime5.minus(10L);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(22);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime9.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(280491302912L, dateTimeZone21);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks(0);
        org.joda.time.DateTime dateTime34 = dateTime29.minusWeeks((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay35 = dateTime34.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime25", (dateTime3.compareTo(dateTime25) == 0) == dateTime3.equals(dateTime25));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime.Property property33 = dateTime2.centuryOfEra();
        org.joda.time.DateTime.Property property34 = dateTime2.monthOfYear();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.DateTime dateTime36 = property34.getDateTime();
        boolean boolean38 = dateTime36.isAfter(5923642320255734L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, chronology43);
        boolean boolean45 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime41.getDayOfYear();
        org.joda.time.DateTime dateTime48 = dateTime41.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime50 = dateTime41.minusWeeks(4);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime50.minus(readableDuration53);
        int int55 = dateTime50.getHourOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(100L, chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.withZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime60.plus((long) 'a');
        org.joda.time.DateTime dateTime66 = dateTime60.plusWeeks(11);
        org.joda.time.DateTime dateTime68 = dateTime66.withMillis((long) 8);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property72 = localTime71.hourOfDay();
        org.joda.time.LocalTime localTime74 = localTime71.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology75 = localTime74.getChronology();
        org.joda.time.DateTime dateTime76 = dateTime68.toDateTime(chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.clockhourOfDay();
        org.joda.time.DateTime dateTime78 = dateTime50.withChronology(chronology75);
        org.joda.time.DurationField durationField79 = chronology75.years();
        org.joda.time.LocalTime localTime80 = org.joda.time.LocalTime.now(chronology75);
        org.joda.time.DateTime dateTime81 = dateTime36.toDateTime(chronology75);
        org.joda.time.DurationField durationField82 = chronology75.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField82, durationField35, and durationField79", !(durationField82.compareTo(durationField35) == 0) || (Math.signum(durationField82.compareTo(durationField79)) == Math.signum(durationField35.compareTo(durationField79))));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(32770);
        int int4 = localTime3.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean6 = localTime3.isSupported(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = localTime3.withMillisOfSecond((int) 'u');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime21 = dateTime11.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime28 = localTime24.toDateTimeToday(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        int int31 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime21.toMutableDateTime(dateTimeZone27);
        org.joda.time.Instant instant33 = dateTime21.toInstant();
        org.joda.time.MutableDateTime mutableDateTime34 = instant33.toMutableDateTimeISO();
        org.joda.time.Instant instant37 = instant33.withDurationAdded((long) 6, (int) (byte) 10);
        org.joda.time.Instant instant39 = instant37.minus((long) 772);
        org.joda.time.DateTime dateTime40 = localTime8.toDateTime((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfMonth();
        org.joda.time.DateTime dateTime43 = property41.addWrapFieldToCopy(222);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and mutableDateTime32", (dateTime21.compareTo(mutableDateTime32) == 0) == dateTime21.equals(mutableDateTime32));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        java.lang.String str10 = dateTimeZone7.getID();
        java.util.TimeZone timeZone11 = dateTimeZone7.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property18 = dateTime15.minuteOfDay();
        java.util.Locale locale21 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        int int23 = property18.getMaximumTextLength(locale21);
        org.joda.time.DateTime dateTime24 = property18.roundHalfEvenCopy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime24.toMutableDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMonths((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime24.withZone(dateTimeZone29);
        org.joda.time.DateTime.Property property31 = dateTime24.dayOfWeek();
        org.joda.time.DateTime dateTime32 = property31.roundHalfCeilingCopy();
        org.joda.time.Instant instant33 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime35 = dateTime32.plusMillis(54315366);
        boolean boolean36 = localDateTime12.equals((java.lang.Object) dateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and instant33", (dateTime32.compareTo(instant33) == 0) == dateTime32.equals(instant33));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setRegion("100");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Thursday");
        java.util.Locale.Builder builder11 = builder6.setExtension('x', "");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime16.plus((long) 'a');
        org.joda.time.DateTime dateTime22 = dateTime16.plusWeeks(11);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillis((long) 8);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property28 = localTime27.hourOfDay();
        org.joda.time.LocalTime localTime30 = localTime27.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        long long37 = chronology31.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField38 = chronology31.weeks();
        org.joda.time.DateTimeField dateTimeField39 = chronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology31.dayOfWeek();
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        int int42 = dateTimeField40.getMaximumTextLength(locale41);
        java.lang.String str43 = locale41.getISO3Language();
        java.util.Locale.Builder builder44 = builder6.setLocale(locale41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime32", (dateTime24.compareTo(dateTime32) == 0) == dateTime24.equals(dateTime32));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        int int7 = dateTime6.getMonthOfYear();
        long long8 = dateTime6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime6.getZone();
        org.joda.time.DateTime dateTime10 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime17 = localTime13.toDateTimeToday(dateTimeZone16);
        org.joda.time.LocalTime localTime19 = localTime13.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime21 = localTime13.plusMillis(12);
        org.joda.time.LocalTime localTime23 = localTime21.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property24 = localTime21.millisOfDay();
        org.joda.time.LocalTime localTime26 = property24.setCopy(2);
        org.joda.time.LocalTime localTime28 = property24.setCopy(27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        boolean boolean35 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds(1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime46.plus((long) 'a');
        org.joda.time.DateTime dateTime52 = dateTime46.plusWeeks(11);
        org.joda.time.DateTime dateTime54 = dateTime52.withMillis((long) 8);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property58 = localTime57.hourOfDay();
        org.joda.time.LocalTime localTime60 = localTime57.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology61 = localTime60.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime54.toDateTime(chronology61);
        org.joda.time.DateTime dateTime63 = dateTime41.withChronology(chronology61);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.plus(readableDuration66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime70 = dateTime67.withDurationAdded(readableDuration68, (int) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime70.toMutableDateTime(chronology71);
        boolean boolean73 = dateTime63.equals((java.lang.Object) dateTime70);
        org.joda.time.DateTime dateTime75 = dateTime70.plusDays(24);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(100L, chronology77);
        java.util.Locale locale79 = null;
        java.util.Calendar calendar80 = dateTime78.toCalendar(locale79);
        org.joda.time.DateTime.Property property81 = dateTime78.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType82.getRangeDurationType();
        org.joda.time.DateTime dateTime85 = dateTime78.withField(dateTimeFieldType82, 21);
        org.joda.time.DateTime.Property property86 = dateTime75.property(dateTimeFieldType82);
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType82.getDurationType();
        boolean boolean88 = localTime28.isSupported(durationFieldType87);
        java.lang.String str89 = durationFieldType87.toString();
        org.joda.time.DateTime dateTime91 = dateTime10.withFieldAdded(durationFieldType87, 1645456077);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime63", (dateTime41.compareTo(dateTime63) == 0) == dateTime41.equals(dateTime63));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        int int24 = dateTime1.get(dateTimeField23);
        long long26 = dateTimeField23.roundHalfEven((long) 2);
        long long29 = dateTimeField23.add((long) (byte) 1, (-1L));
        org.joda.time.ReadablePartial readablePartial30 = null;
        int int31 = dateTimeField23.getMaximumValue(readablePartial30);
        long long34 = dateTimeField23.add((long) 22, 788);
        int int36 = dateTimeField23.getMaximumValue((long) 32580012);
        java.util.Locale locale37 = null;
        int int38 = dateTimeField23.getMaximumShortTextLength(locale37);
        int int40 = dateTimeField23.getMinimumValue((long) (-12));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime22", (dateTime14.compareTo(dateTime22) == 0) == dateTime14.equals(dateTime22));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.Chronology chronology38 = chronology32.withUTC();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfDay();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.era();
        long long45 = dateTimeField43.roundCeiling(1645455994605L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(dateTimeZone17);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone17.getShortName((long) 15, locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale27 = java.util.Locale.UK;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property31 = localTime30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime34 = localTime30.toDateTimeToday(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        int int37 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = dateTimeZone33.isStandardOffset(0L);
        java.util.TimeZone timeZone40 = dateTimeZone33.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider42 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str49 = nameProvider42.getName(locale45, "hi!", "1970-01-01");
        java.lang.String str50 = dateTimeZone33.getShortName(10L, locale45);
        java.lang.String str51 = locale27.getDisplayVariant(locale45);
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str53 = locale52.getDisplayCountry();
        java.util.Locale locale56 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("", "hi!");
        java.util.Locale locale63 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleKeys();
        java.lang.String str65 = locale63.getVariant();
        java.lang.String str66 = locale60.getDisplayScript(locale63);
        java.lang.String str67 = locale56.getDisplayScript(locale60);
        java.util.Locale.Category category68 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale69 = java.util.Locale.getDefault(category68);
        java.lang.String str70 = locale69.getDisplayName();
        java.lang.String str71 = locale60.getDisplayScript(locale69);
        java.util.Set<java.lang.String> strSet72 = locale69.getUnicodeLocaleKeys();
        java.lang.String str73 = locale52.getDisplayScript(locale69);
        java.lang.String str74 = locale27.getDisplayLanguage(locale69);
        java.util.Locale.setDefault(category0, locale69);
        java.util.Locale locale76 = java.util.Locale.getDefault(category0);
        java.lang.String str77 = locale76.getDisplayCountry();
        boolean boolean78 = locale76.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime21", (dateTime10.compareTo(dateTime21) == 0) == dateTime10.equals(dateTime21));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime8.plus((long) 'a');
        org.joda.time.DateTime dateTime14 = dateTime8.plusWeeks(11);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((long) 8);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime22 = localTime19.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        long long29 = chronology23.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime3.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.year();
        boolean boolean32 = durationFieldType1.isSupported(chronology23);
        org.joda.time.DurationField durationField33 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology23.hourOfDay();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(28031539200L, chronology23);
        org.joda.time.DateTimeField dateTimeField36 = chronology23.year();
        org.joda.time.DurationField durationField37 = chronology23.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField33, durationField37, and durationField33", !(durationField33.compareTo(durationField37) == 0) || (Math.signum(durationField33.compareTo(durationField33)) == Math.signum(durationField37.compareTo(durationField33))));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 'a');
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTime dateTime25 = dateTime9.toDateTime(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weeks();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 788, chronology23);
        org.joda.time.DurationField durationField28 = chronology23.halfdays();
        org.joda.time.DurationField durationField29 = chronology23.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField29, durationField24, and durationField26", !(durationField29.compareTo(durationField24) == 0) || (Math.signum(durationField29.compareTo(durationField26)) == Math.signum(durationField24.compareTo(durationField26))));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.DateTime dateTime17 = dateTime14.minusHours(82980000);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        boolean boolean24 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime20.getDayOfYear();
        int int26 = dateTime20.getSecondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        boolean boolean33 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime29.getDayOfYear();
        org.joda.time.DateTime dateTime37 = dateTime29.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds(1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime44.plus((long) 'a');
        org.joda.time.DateTime dateTime50 = dateTime44.plusWeeks(11);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillis((long) 8);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property56 = localTime55.hourOfDay();
        org.joda.time.LocalTime localTime58 = localTime55.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology59 = localTime58.getChronology();
        org.joda.time.DateTime dateTime60 = dateTime52.toDateTime(chronology59);
        org.joda.time.DateTime dateTime61 = dateTime39.withChronology(chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.weekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.hourOfHalfday();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DurationField durationField66 = chronology59.months();
        org.joda.time.DateTime dateTime67 = dateTime20.toDateTime(chronology59);
        boolean boolean68 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime12 = dateTime2.withMonthOfYear(5);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime15.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime24 = dateTime15.minusWeeks(4);
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(1);
        int int27 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) '#', dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone31);
        int int35 = dateTimeZone31.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 22, dateTimeZone31);
        long long38 = dateTimeZone31.convertUTCToLocal((long) (short) 1);
        org.joda.time.DateTime dateTime39 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime39", (dateTime26.compareTo(dateTime39) == 0) == dateTime26.equals(dateTime39));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant24.withDurationAdded(readableDuration28, (int) (short) 1);
        org.joda.time.Instant instant31 = instant24.toInstant();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.Instant instant35 = instant31.plus((long) 1645455817);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        boolean boolean46 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTime42.getDayOfYear();
        org.joda.time.DateTime dateTime50 = dateTime42.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime52 = dateTime50.plusSeconds(1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, chronology54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.withZoneRetainFields(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime57.plus((long) 'a');
        org.joda.time.DateTime dateTime63 = dateTime57.plusWeeks(11);
        org.joda.time.DateTime dateTime65 = dateTime63.withMillis((long) 8);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property69 = localTime68.hourOfDay();
        org.joda.time.LocalTime localTime71 = localTime68.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology72 = localTime71.getChronology();
        org.joda.time.DateTime dateTime73 = dateTime65.toDateTime(chronology72);
        org.joda.time.DateTime dateTime74 = dateTime52.withChronology(chronology72);
        org.joda.time.DateTimeField dateTimeField75 = chronology72.weekyear();
        org.joda.time.DateTimeField dateTimeField76 = chronology72.clockhourOfDay();
        org.joda.time.Chronology chronology77 = chronology72.withUTC();
        org.joda.time.Chronology chronology78 = chronology72.withUTC();
        org.joda.time.DurationField durationField79 = chronology78.minutes();
        org.joda.time.Chronology chronology80 = chronology78.withUTC();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.dayOfWeek();
        int int82 = instant39.get(dateTimeField81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        int int5 = dateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant7 = org.joda.time.Instant.parse("24");
        org.joda.time.Instant instant10 = instant7.withDurationAdded((long) 0, 32580010);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.DateTime dateTime14 = dateTime2.toDateTime(chronology12);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getMonth();
        java.util.Date date18 = new java.util.Date();
        date18.setDate(32769);
        boolean boolean21 = date16.after(date18);
        java.lang.String str22 = date18.toGMTString();
        int int23 = date18.getMonth();
        date18.setYear(180000);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        int int27 = localDate26.getCenturyOfEra();
        org.joda.time.LocalDate localDate29 = localDate26.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now();
        int int35 = localDate34.getCenturyOfEra();
        org.joda.time.LocalDate localDate37 = localDate34.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology43.getZone();
        org.joda.time.DateTime dateTime45 = localDate29.toDateTimeAtCurrentTime(dateTimeZone44);
        java.lang.String str47 = dateTimeZone44.getShortName(779000L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((java.lang.Object) date18, dateTimeZone44);
        boolean boolean49 = property15.equals((java.lang.Object) date18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime11", (instant7.compareTo(dateTime11) == 0) == instant7.equals(dateTime11));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology20.weeks();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(0L, chronology20);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Instant instant9 = instant6.withMillis(1645455797000L);
        org.joda.time.Instant instant11 = instant6.withMillis((-292278893L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime7", (dateTime1.compareTo(mutableDateTime7) == 0) == dateTime1.equals(mutableDateTime7));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("+100:00");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0, locale2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        boolean boolean10 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime6.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime6.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime16 = dateTime6.minus((long) (byte) 10);
        int int17 = dateTime6.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        boolean boolean20 = dateTimeZone18.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime6.toMutableDateTime(dateTimeZone18);
        long long24 = dateTimeZone18.convertUTCToLocal((long) (byte) 1);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = dateTimeZone18.getShortName(63686358113273L, locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale2.getDisplayCountry(locale26);
        java.util.Set<java.lang.Character> charSet30 = locale2.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime22", (dateTime6.compareTo(mutableDateTime22) == 0) == dateTime6.equals(mutableDateTime22));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        int int9 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = dateTimeZone5.isStandardOffset(0L);
        java.util.TimeZone timeZone12 = dateTimeZone5.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = locale17.getDisplayCountry(locale19);
        java.lang.String str21 = dateTimeZone15.getShortName((long) 3, locale19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone12, locale19);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone12);
        int int24 = calendar23.getMinimalDaysInFirstWeek();
        calendar23.roll(4, (-2712971));
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone29, locale30);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("100");
        boolean boolean34 = timeZone29.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone29, locale35);
        calendar23.setTimeZone(timeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar31", (calendar22.compareTo(calendar31) == 0) == calendar22.equals(calendar31));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        java.util.Date date36 = localDateTime33.toDate();
        int int37 = date36.getDay();
        boolean boolean38 = date32.after(date36);
        date36.setMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.plusDays(3);
        int int46 = localDate45.getYear();
        org.joda.time.LocalDate localDate48 = localDate45.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (byte) 100);
        java.util.Date date51 = localDate48.toDate();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(100L, chronology53);
        java.util.Locale locale55 = null;
        java.util.Calendar calendar56 = dateTime54.toCalendar(locale55);
        calendar56.clear(9);
        int int60 = calendar56.getGreatestMinimum((int) (short) 0);
        calendar56.setLenient(false);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        int int64 = timeZone63.getRawOffset();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        int int66 = timeZone65.getRawOffset();
        boolean boolean67 = timeZone63.hasSameRules(timeZone65);
        calendar56.setTimeZone(timeZone63);
        java.util.Date date69 = calendar56.getTime();
        boolean boolean70 = date51.before(date69);
        org.joda.time.LocalDate localDate71 = org.joda.time.LocalDate.fromDateFields(date51);
        boolean boolean72 = date36.after(date51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar56", (gregorianCalendar21.compareTo(calendar56) == 0) == gregorianCalendar21.equals(calendar56));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        calendar4.setLenient(true);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        java.util.TimeZone timeZone14 = calendar4.getTimeZone();
        boolean boolean15 = calendar4.isWeekDateSupported();
        boolean boolean16 = calendar4.isWeekDateSupported();
        int int17 = calendar4.getMinimalDaysInFirstWeek();
        int int18 = calendar4.getWeekYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = dateTime22.toCalendar(locale23);
        org.joda.time.DateTime dateTime26 = dateTime22.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property27 = dateTime22.yearOfEra();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property31 = localTime30.hourOfDay();
        org.joda.time.LocalTime localTime33 = localTime30.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyearOfCentury();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekyearOfCentury();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) dateTime22, chronology34);
        org.joda.time.DurationField durationField39 = chronology34.weeks();
        org.joda.time.DurationField durationField40 = chronology34.hours();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 56, chronology34);
        org.joda.time.DateTimeField dateTimeField42 = chronology34.era();
        boolean boolean43 = calendar4.before((java.lang.Object) dateTimeField42);
        int int44 = calendar4.getWeekYear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(100L, chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(100L, chronology49);
        boolean boolean51 = dateTime47.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime50.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now();
        int int55 = localDate54.getCenturyOfEra();
        org.joda.time.LocalDate localDate57 = localDate54.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate59 = localDate57.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime61 = localDate57.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long65 = dateTimeZone60.getMillisKeepLocal(dateTimeZone63, (long) 3);
        org.joda.time.DateTime dateTime66 = dateTime53.toDateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTime();
        org.joda.time.LocalDate localDate68 = dateTime66.toLocalDate();
        boolean boolean69 = calendar4.before((java.lang.Object) localDate68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime66", (dateTime2.compareTo(dateTime66) == 0) == dateTime2.equals(dateTime66));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.Instant instant2 = org.joda.time.Instant.parse("24");
        org.joda.time.Instant instant5 = instant2.withDurationAdded((long) 0, 32580010);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.centuries();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(0L, chronology7);
        org.joda.time.DurationField durationField10 = chronology7.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime6", (instant2.compareTo(dateTime6) == 0) == instant2.equals(dateTime6));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId3);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        boolean boolean11 = dateTimeFormatter9.isOffsetParsed();
        boolean boolean12 = dateTimeFormatter9.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter9.getPrinter();
        org.joda.time.Chronology chronology14 = dateTimeFormatter9.getChronolgy();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale15.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter9.withLocale(locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone6, locale15);
        java.lang.String str19 = locale15.getISO3Country();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar18", (calendar2.compareTo(calendar18) == 0) == calendar2.equals(calendar18));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime.Property property33 = dateTime2.centuryOfEra();
        org.joda.time.DateTime.Property property34 = dateTime2.monthOfYear();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.DateTime dateTime36 = property34.getDateTime();
        org.joda.time.DateTime dateTime38 = property34.addToCopy(1645455916);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond(327);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime32", (dateTime2.compareTo(dateTime32) == 0) == dateTime2.equals(dateTime32));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime2.getZone();
        org.joda.time.DateTime dateTime6 = dateTime2.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime7 = dateTime6.toLocalDateTime();
        org.joda.time.Instant instant8 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) 308);
        int int11 = dateTime10.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant8", (dateTime2.compareTo(instant8) == 0) == dateTime2.equals(instant8));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property13 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.setCopy(2);
        org.joda.time.LocalTime localTime17 = property13.setCopy(27);
        org.joda.time.LocalTime localTime18 = property13.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime19 = property13.getLocalTime();
        org.joda.time.LocalTime localTime20 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property24 = localTime23.hourOfDay();
        org.joda.time.LocalTime localTime26 = localTime23.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekyearOfCentury();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekyearOfCentury();
        org.joda.time.DurationField durationField31 = dateTimeField30.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField30.getType();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean39 = dateTime37.isSupported(dateTimeFieldType38);
        org.joda.time.DateTime dateTime41 = dateTime37.minus(10L);
        org.joda.time.DateTime dateTime43 = dateTime41.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime45 = dateTime41.withMillis((long) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        int int49 = dateTime48.getMillisOfDay();
        org.joda.time.DateTime dateTime51 = dateTime48.plusHours(360000000);
        org.joda.time.DateTime dateTime52 = dateTime51.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = dateTime52.withZoneRetainFields(dateTimeZone53);
        org.joda.time.Chronology chronology56 = dateTime52.getChronology();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime45.toMutableDateTime(chronology56);
        boolean boolean58 = dateTimeFieldType32.isSupported(chronology56);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(chronology56);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.now(chronology56);
        int int61 = localTime20.compareTo((org.joda.time.ReadablePartial) localTime60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime54 and dateTime59", (dateTime54.compareTo(dateTime59) == 0) == dateTime54.equals(dateTime59));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.Instant instant15 = dateTime9.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime14", (dateTime9.compareTo(dateTime14) == 0) == dateTime9.equals(dateTime14));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.yearOfEra();
        boolean boolean31 = dateTimeField30.isLenient();
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.lang.String str36 = locale34.getVariant();
        java.lang.String str37 = locale34.getDisplayScript();
        java.lang.String str38 = locale34.getLanguage();
        int int39 = dateTimeField30.getMaximumTextLength(locale34);
        int int41 = dateTimeField30.get(280487960576L);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField30.getAsText(1645456043000L, locale43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Instant instant29 = instant24.withDurationAdded(63686358158251L, (int) '#');
        org.joda.time.Instant instant31 = instant24.withMillis(2814912896580000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        int int24 = dateTime1.get(dateTimeField23);
        long long26 = dateTimeField23.roundHalfEven((long) 2);
        int int28 = dateTimeField23.getLeapAmount(45056L);
        java.lang.String str30 = dateTimeField23.getAsShortText((long) 3);
        java.util.Locale locale33 = new java.util.Locale("", "hi!");
        int int34 = dateTimeField23.getMaximumShortTextLength(locale33);
        boolean boolean35 = dateTimeField23.isLenient();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusYears(3);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plus(readablePeriod41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYearOfCentury(13);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plus(readableDuration45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(32772);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        int int50 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime22", (dateTime14.compareTo(dateTime22) == 0) == dateTime14.equals(dateTime22));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime.Property property33 = dateTime2.centuryOfEra();
        org.joda.time.DateTime.Property property34 = dateTime2.monthOfYear();
        org.joda.time.DateTime.Property property35 = dateTime2.dayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime41.plus((long) 'a');
        org.joda.time.DateTime dateTime47 = dateTime41.plusWeeks(11);
        org.joda.time.DateTime dateTime49 = dateTime47.withMillis((long) 8);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property53 = localTime52.hourOfDay();
        org.joda.time.LocalTime localTime55 = localTime52.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology56 = localTime55.getChronology();
        org.joda.time.DateTime dateTime57 = dateTime49.toDateTime(chronology56);
        org.joda.time.DurationField durationField58 = chronology56.halfdays();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.clockhourOfDay();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property63 = localTime62.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime66 = localTime62.toDateTimeToday(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        int int69 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = dateTimeZone65.isStandardOffset(0L);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.Chronology chronology73 = chronology56.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime74 = dateTime36.toDateTime(chronology56);
        org.joda.time.DateTime dateTime76 = dateTime36.withYearOfCentury(27);
        int int77 = dateTime76.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime32", (dateTime2.compareTo(dateTime32) == 0) == dateTime2.equals(dateTime32));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury(52);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours(1645455753);
        org.joda.time.DateTime dateTime38 = dateTime36.plusSeconds((-18574));
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks(54362396);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime43 = dateTime40.withFieldAdded(durationFieldType41, 32772);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime32", (dateTime2.compareTo(dateTime32) == 0) == dateTime2.equals(dateTime32));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        boolean boolean30 = dateTime28.isEqual(63686358113273L);
        org.joda.time.DateTime dateTime33 = dateTime28.withDurationAdded((long) 'u', 16);
        boolean boolean34 = dateTime33.isEqualNow();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.minus(readableDuration35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.centuryOfEra();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology32);
        org.joda.time.DurationField durationField39 = chronology32.minutes();
        org.joda.time.DurationField durationField40 = chronology32.weekyears();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology32.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.yearOfEra();
        org.joda.time.DurationField durationField31 = chronology21.weeks();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.LocalTime localTime34 = localTime32.minusMinutes(31);
        org.joda.time.LocalTime localTime36 = localTime32.withMillisOfDay(54292616);
        org.joda.time.LocalTime localTime38 = localTime36.withMillisOfDay(0);
        org.joda.time.DateTime dateTime39 = localTime38.toDateTimeToday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime.Property property11 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = property11.withMinimumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology18.add(readablePeriod20, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField24 = chronology18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DurationField durationField26 = chronology18.seconds();
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(chronology18);
        org.joda.time.Instant instant28 = dateTime12.toInstant();
        org.joda.time.Instant instant30 = instant28.withMillis(31L);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant30.withDurationAdded(readableDuration31, 0);
        long long34 = instant30.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant30.minus(readableDuration35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant28", (dateTime2.compareTo(instant28) == 0) == dateTime2.equals(instant28));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readableDuration16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.lang.String str25 = locale22.getDisplayCountry(locale24);
        java.lang.String str26 = dateTimeZone20.getShortName((long) 3, locale24);
        org.joda.time.DateTime dateTime27 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime28 = dateTime12.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime30 = dateTime12.plusWeeks(32769);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        int int33 = localDate32.getCenturyOfEra();
        org.joda.time.LocalDate localDate35 = localDate32.withCenturyOfEra(4);
        org.joda.time.Interval interval36 = localDate32.toInterval();
        org.joda.time.LocalDate.Property property37 = localDate32.year();
        org.joda.time.LocalDate localDate38 = property37.roundFloorCopy();
        org.joda.time.LocalDate localDate39 = property37.roundFloorCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime44.plus((long) 'a');
        org.joda.time.DateTime dateTime49 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime49.withZone(dateTimeZone52);
        java.lang.String str55 = dateTimeZone52.toString();
        org.joda.time.DateTime dateTime56 = localDate39.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 20, dateTimeZone52);
        org.joda.time.DateTime dateTime59 = dateTime57.withMinuteOfHour(24);
        org.joda.time.LocalDate localDate60 = org.joda.time.LocalDate.now();
        int int61 = localDate60.getCenturyOfEra();
        org.joda.time.LocalDate localDate63 = localDate60.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate65 = localDate63.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime67 = localDate63.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate63.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime68.getZone();
        org.joda.time.DateTime dateTime70 = dateTime57.withZoneRetainFields(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime57.minusSeconds(1962);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes(0);
        boolean boolean75 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime49 and dateTime54", (dateTime49.compareTo(dateTime54) == 0) == dateTime49.equals(dateTime54));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(32770);
        int int4 = localTime3.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean6 = localTime3.isSupported(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = localTime3.withMillisOfSecond((int) 'u');
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property13 = localTime12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime16 = localTime12.toDateTimeToday(dateTimeZone15);
        org.joda.time.LocalTime localTime18 = localTime12.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime20 = localTime12.plusMillis(12);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime25.plus((long) 'a');
        org.joda.time.DateTime dateTime30 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime30.withZone(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime37 = localTime12.toDateTimeToday(dateTimeZone33);
        org.joda.time.LocalTime.Property property38 = localTime12.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        boolean boolean40 = localTime12.isSupported(durationFieldType39);
        org.joda.time.LocalTime localTime42 = localTime8.withFieldAdded(durationFieldType39, 1645455734);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalTime localTime45 = localTime8.withPeriodAdded(readablePeriod43, 1201237);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime35", (dateTime30.compareTo(dateTime35) == 0) == dateTime30.equals(dateTime35));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear(13);
        org.joda.time.DateTime.Property property17 = dateTime14.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = dateTime14.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        java.util.Locale locale10 = null;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        calendar11.clear(9);
        int int15 = calendar11.getGreatestMinimum((int) (short) 0);
        calendar11.setLenient(false);
        calendar11.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("hi!");
        calendar11.setTimeZone(timeZone25);
        int int27 = timeZone25.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.Calendar.Builder builder29 = builder6.setTimeZone(timeZone25);
        java.util.Calendar.Builder builder34 = builder6.setTimeOfDay(30, 1645455723, (int) (byte) 0, 361);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        java.util.Locale locale38 = null;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        calendar39.clear(9);
        int int43 = calendar39.getGreatestMinimum((int) (short) 0);
        calendar39.setLenient(false);
        calendar39.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone("hi!");
        calendar39.setTimeZone(timeZone53);
        int int55 = timeZone53.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        boolean boolean57 = timeZone53.observesDaylightTime();
        java.util.Calendar.Builder builder58 = builder34.setTimeZone(timeZone53);
        timeZone53.setID("zho");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar39", (calendar11.compareTo(calendar39) == 0) == calendar11.equals(calendar39));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readableDuration37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withDurationAdded(readableDuration39, (int) (byte) 1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime41.toMutableDateTime(chronology42);
        boolean boolean44 = dateTime34.equals((java.lang.Object) dateTime41);
        org.joda.time.DateTime dateTime46 = dateTime41.plusDays(24);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime.Property property52 = dateTime49.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getRangeDurationType();
        org.joda.time.DateTime dateTime56 = dateTime49.withField(dateTimeFieldType53, 21);
        org.joda.time.DateTime.Property property57 = dateTime46.property(dateTimeFieldType53);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withZoneRetainFields(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime62.plus((long) 'a');
        org.joda.time.DateTime dateTime68 = dateTime62.plusWeeks(11);
        org.joda.time.DateTime dateTime70 = dateTime68.withMillis((long) 8);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property74 = localTime73.hourOfDay();
        org.joda.time.LocalTime localTime76 = localTime73.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology77 = localTime76.getChronology();
        org.joda.time.DateTime dateTime78 = dateTime70.toDateTime(chronology77);
        org.joda.time.DurationField durationField79 = chronology77.eras();
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property83 = localTime82.hourOfDay();
        org.joda.time.LocalTime localTime84 = property83.withMinimumValue();
        int int85 = localTime84.getHourOfDay();
        long long87 = chronology77.set((org.joda.time.ReadablePartial) localTime84, 364740218880L);
        org.joda.time.DateTimeField dateTimeField88 = chronology77.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField89 = chronology77.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology77.yearOfEra();
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType53.getField(chronology77);
        org.joda.time.DurationField durationField92 = chronology77.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField79, durationField92, and durationField79", !(durationField79.compareTo(durationField92) == 0) || (Math.signum(durationField79.compareTo(durationField79)) == Math.signum(durationField92.compareTo(durationField79))));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = localDate1.getField(1);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTime dateTime7 = localDate1.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime11 = dateTime7.withDayOfYear((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(298);
        org.joda.time.DateTime dateTime16 = dateTime13.withZone(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isStandardOffset(299088867328L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime16", (dateTime7.compareTo(dateTime16) == 0) == dateTime7.equals(dateTime16));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology4.years();
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology4.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField7", (durationField6.compareTo(durationField7) == 0) == durationField6.equals(durationField7));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        int int45 = dateTime13.getDayOfMonth();
        boolean boolean47 = dateTime13.isAfter(32772L);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(1645434179);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("Heure de Greenwich");
        java.lang.String str53 = dateTimeZone49.getShortName((long) 1645455887, locale52);
        org.joda.time.DateTime dateTime54 = dateTime13.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        boolean boolean61 = dateTime57.isAfter((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime57.getDayOfYear();
        org.joda.time.DateTime dateTime64 = dateTime57.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime66 = dateTime57.minusWeeks(4);
        org.joda.time.DateTime dateTime68 = dateTime66.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime66.minus(readableDuration69);
        int int71 = dateTime66.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime73 = dateTime66.minus(readablePeriod72);
        org.joda.time.Instant instant74 = new org.joda.time.Instant((java.lang.Object) dateTime66);
        org.joda.time.DateTime dateTime75 = dateTime66.toDateTime();
        org.joda.time.DateTime dateTime77 = dateTime75.minusMillis(32);
        org.joda.time.Chronology chronology78 = dateTime75.getChronology();
        boolean boolean79 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime54", (dateTime13.compareTo(dateTime54) == 0) == dateTime13.equals(dateTime54));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology4.years();
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField7", (durationField6.compareTo(durationField7) == 0) == durationField6.equals(durationField7));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology17.add(readablePeriod19, (long) 13, (int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime9, chronology17);
        org.joda.time.DateTime dateTime26 = dateTime9.plusMonths(117);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime18", (dateTime8.compareTo(dateTime18) == 0) == dateTime8.equals(dateTime18));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plusDays(32770);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.plusDays(3);
        int int23 = localDate22.getYear();
        org.joda.time.LocalDate localDate25 = localDate22.withWeekOfWeekyear((int) ' ');
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePartial) localDate22, (long) 52);
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime11.withChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime29", (dateTime11.compareTo(dateTime29) == 0) == dateTime11.equals(dateTime29));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant5 = instant1.withDurationAdded(readableDuration3, 15);
        org.joda.time.DateTimeZone dateTimeZone6 = instant5.getZone();
        int int8 = dateTimeZone6.getOffsetFromLocal((-1L));
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 54347, dateTimeZone6);
        long long12 = dateTimeZone6.adjustOffset(54286939L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.DateTime dateTime28 = instant24.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime29 = instant24.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.Chronology chronology3 = instant0.getChronology();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant0.minus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant0.minus(readableDuration6);
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime1", (instant8.compareTo(mutableDateTime1) == 0) == instant8.equals(mutableDateTime1));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.halfdays();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology20.add(readablePeriod23, (long) (-18574), (int) (short) 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((-12959996399978L), chronology20);
        org.joda.time.DurationField durationField28 = chronology20.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        java.util.Locale locale9 = null;
        java.util.Calendar calendar10 = dateTime8.toCalendar(locale9);
        org.joda.time.DateTime.Property property11 = dateTime8.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getRangeDurationType();
        org.joda.time.DateTime dateTime15 = dateTime8.withField(dateTimeFieldType12, 21);
        org.joda.time.LocalTime.Property property16 = localTime5.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime17 = localTime5.toDateTimeToday();
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) 'u');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime24.plus((long) 'a');
        org.joda.time.DateTime dateTime30 = dateTime24.plusWeeks(11);
        org.joda.time.DateTime dateTime32 = dateTime30.withMillis((long) 8);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property36 = localTime35.hourOfDay();
        org.joda.time.LocalTime localTime38 = localTime35.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology39 = localTime38.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime32.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.clockhourOfDay();
        long long45 = chronology39.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField46 = chronology39.weeks();
        org.joda.time.DateTimeField dateTimeField47 = chronology39.hourOfDay();
        long long49 = dateTimeField47.roundCeiling((long) 9);
        int int50 = dateTime17.get(dateTimeField47);
        org.joda.time.DateTime dateTime51 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime53 = dateTime17.plusHours(1645455890);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) '#', dateTimeZone56);
        int int59 = dateTimeZone56.getOffset((long) (short) 10);
        java.util.Locale locale63 = new java.util.Locale("", "hi!");
        java.util.Locale locale66 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.lang.String str68 = locale66.getVariant();
        java.lang.String str69 = locale63.getDisplayScript(locale66);
        java.lang.String str70 = dateTimeZone56.getShortName((long) 20, locale66);
        java.lang.String str72 = dateTimeZone56.getShortName(22L);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DateTime.Property property74 = dateTime73.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.era();
        int int76 = dateTime73.get(dateTimeFieldType75);
        boolean boolean77 = dateTime17.isSupported(dateTimeFieldType75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime40", (dateTime32.compareTo(dateTime40) == 0) == dateTime32.equals(dateTime40));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime12 = dateTime2.withMonthOfYear(5);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime2.plus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime2.plusDays((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withPeriodAdded(readablePeriod19, (int) (short) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        int int23 = property22.get();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 83, chronology25);
        int int27 = dateTime26.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = dateTime26.isBefore(readableInstant28);
        org.joda.time.Instant instant30 = dateTime26.toInstant();
        long long31 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) instant30);
        java.lang.String str32 = property22.getName();
        org.joda.time.DateTime dateTime33 = property22.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant30", (dateTime26.compareTo(instant30) == 0) == dateTime26.equals(instant30));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((long) 1100, 0);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant26.plus(readableDuration30);
        org.joda.time.Instant instant34 = instant26.withDurationAdded(57L, 1645455738);
        java.lang.Object obj35 = null;
        boolean boolean36 = instant34.equals(obj35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant34.plus(readableDuration37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        int int8 = dateTime2.getSecondOfMinute();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate17.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate22 = localDate20.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        org.joda.time.DateTime dateTime28 = localDate12.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime2.toDateTime(dateTimeZone27);
        java.lang.String str31 = dateTimeZone27.getShortName((long) 906);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        boolean boolean39 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime35.getDayOfYear();
        org.joda.time.DateTime dateTime43 = dateTime35.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime45 = dateTime35.minus((long) (byte) 10);
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar47 = dateTime35.toCalendar(locale46);
        java.lang.String str48 = locale46.getDisplayLanguage();
        java.lang.String str49 = locale46.getDisplayName();
        java.lang.String str50 = locale46.getDisplayName();
        java.lang.String str51 = dateTimeZone27.getName(0L, locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime29", (dateTime2.compareTo(dateTime29) == 0) == dateTime2.equals(dateTime29));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int8 = localTime6.get(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime26.plus((long) 'a');
        org.joda.time.DateTime dateTime32 = dateTime26.plusWeeks(11);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillis((long) 8);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.LocalTime localTime40 = localTime37.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime21.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        boolean boolean45 = dateTimeFieldType7.isSupported(chronology41);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(chronology41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime43", (dateTime21.compareTo(dateTime43) == 0) == dateTime21.equals(dateTime43));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone28);
        int int34 = dateTimeZone28.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property37 = localDate36.weekyear();
        org.joda.time.LocalDate localDate39 = property37.setCopy("100");
        int[] intArray40 = localDate39.getValues();
        org.joda.time.LocalDate localDate42 = localDate39.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property43 = localDate42.era();
        boolean boolean44 = strMap18.remove((java.lang.Object) dateTime35, (java.lang.Object) property43);
        boolean boolean45 = strMap18.isEmpty();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = strMap18.get((java.lang.Object) dateTime47);
        java.util.Set<java.lang.String> strSet49 = strMap18.keySet();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(100L, chronology51);
        java.util.Locale locale53 = null;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        calendar54.clear(9);
        calendar54.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(100L, chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(100L, chronology65);
        boolean boolean67 = dateTime63.isAfter((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime63.getDayOfYear();
        org.joda.time.DateTime dateTime71 = dateTime63.withDurationAdded((long) (short) 0, 100);
        int int72 = dateTime71.getWeekOfWeekyear();
        boolean boolean73 = calendar54.before((java.lang.Object) dateTime71);
        java.lang.String str74 = dateTime71.toString();
        org.joda.time.DateTime dateTime76 = dateTime71.plusMinutes(53);
        org.joda.time.DateTime.Property property77 = dateTime76.millisOfDay();
        org.joda.time.DateTime dateTime79 = dateTime76.plusWeeks(1645455737);
        org.joda.time.DateTimeZone dateTimeZone80 = strMap18.remove((java.lang.Object) 1645455737);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime32", (dateTime21.compareTo(dateTime32) == 0) == dateTime21.equals(dateTime32));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay(32770, (int) (byte) 10, 2022);
        java.util.Calendar.Builder builder12 = builder0.setTimeOfDay(122, (int) (byte) 0, 6);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        boolean boolean16 = timeZone14.observesDaylightTime();
        int int17 = timeZone14.getRawOffset();
        java.util.Calendar.Builder builder18 = builder12.setTimeZone(timeZone14);
        java.util.Calendar.Builder builder22 = builder12.setWeekDate(50, 32770, 1970);
        java.util.Calendar.Builder builder26 = builder12.setDate(295, 100, (-2019));
        java.util.Calendar.Builder builder31 = builder26.setTimeOfDay(903, 54227714, 1645455844, 33);
        java.util.Calendar.Builder builder35 = builder31.setDate(32579903, 50734714, 1645455765);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        java.util.Locale locale39 = null;
        java.util.Calendar calendar40 = dateTime38.toCalendar(locale39);
        calendar40.clear(9);
        calendar40.set((int) (byte) 1, 1, (-1));
        calendar40.setLenient(true);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromCalendarFields(calendar40);
        java.util.TimeZone timeZone50 = calendar40.getTimeZone();
        java.time.ZoneId zoneId51 = timeZone50.toZoneId();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale54 = java.util.Locale.PRC;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone53, locale54);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getTimeZone("100");
        boolean boolean58 = timeZone53.hasSameRules(timeZone57);
        boolean boolean59 = timeZone57.observesDaylightTime();
        timeZone57.setRawOffset(54122803);
        timeZone57.setID("1970");
        boolean boolean64 = timeZone50.hasSameRules(timeZone57);
        java.util.Locale locale67 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleKeys();
        java.lang.String str69 = locale67.getVariant();
        java.lang.String str70 = locale67.getDisplayScript();
        java.util.Locale locale71 = locale67.stripExtensions();
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone57, locale71);
        java.util.Calendar.Builder builder73 = builder31.setLocale(locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar72", (calendar15.compareTo(calendar72) == 0) == calendar15.equals(calendar72));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime.Property property22 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime8.minusHours(80);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(100L, chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        boolean boolean31 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime27.getDayOfYear();
        org.joda.time.DateTime dateTime35 = dateTime27.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime37 = dateTime35.plusSeconds(1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime42.plus((long) 'a');
        org.joda.time.DateTime dateTime48 = dateTime42.plusWeeks(11);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillis((long) 8);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property54 = localTime53.hourOfDay();
        org.joda.time.LocalTime localTime56 = localTime53.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        org.joda.time.DateTime dateTime58 = dateTime50.toDateTime(chronology57);
        org.joda.time.DateTime dateTime59 = dateTime37.withChronology(chronology57);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.monthOfYear();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.monthOfYear();
        int int64 = dateTime8.get(dateTimeField63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime21", (dateTime2.compareTo(dateTime21) == 0) == dateTime2.equals(dateTime21));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        int int17 = property15.get();
        org.joda.time.DateTime dateTime18 = property15.getDateTime();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime25.plus((long) 'a');
        org.joda.time.DateTime dateTime31 = dateTime25.plusWeeks(11);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) 8);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property37 = localTime36.hourOfDay();
        org.joda.time.LocalTime localTime39 = localTime36.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime33.toDateTime(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        long long46 = chronology40.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime20.withChronology(chronology40);
        org.joda.time.DateTimeField dateTimeField48 = chronology40.year();
        org.joda.time.DateTime dateTime49 = dateTime18.toDateTime(chronology40);
        int int50 = dateTime18.getDayOfMonth();
        org.joda.time.TimeOfDay timeOfDay51 = dateTime18.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime20", (dateTime2.compareTo(dateTime20) == 0) == dateTime2.equals(dateTime20));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime.Property property11 = dateTime2.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.joda.time.DateTime dateTime13 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime14 = property11.getDateTime();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16, locale17);
        java.time.ZoneId zoneId19 = timeZone16.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long22 = dateTimeZone20.nextTransition(1645454200000L);
        org.joda.time.DateTime dateTime23 = dateTime14.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime14.plusWeeks(488);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime23", (dateTime14.compareTo(dateTime23) == 0) == dateTime14.equals(dateTime23));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTimeISO();
        org.joda.time.Instant instant28 = instant24.withDurationAdded(100L, (int) (short) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant28.withDurationAdded(readableDuration29, 563);
        org.joda.time.MutableDateTime mutableDateTime32 = instant28.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime33 = instant28.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(14);
        int int13 = dateTime10.getMillisOfDay();
        org.joda.time.Chronology chronology14 = dateTime10.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime19.plus((long) 'a');
        org.joda.time.DateTime dateTime25 = dateTime19.plusWeeks(11);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillis((long) 8);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property31 = localTime30.hourOfDay();
        org.joda.time.LocalTime localTime33 = localTime30.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime27.toDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.yearOfEra();
        org.joda.time.DateTime dateTime40 = dateTime10.toDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField41 = chronology34.clockhourOfHalfday();
        int int43 = dateTimeField41.get((long) 1973);
        java.lang.String str45 = dateTimeField41.getAsText((long) 54336647);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("");
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTime49.toString("4", locale51);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale51.getDisplayCountry(locale53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = dateTime56.toString("4", locale58);
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale58.getDisplayCountry(locale60);
        java.lang.String str62 = locale51.getDisplayCountry(locale58);
        java.lang.String str63 = locale51.getDisplayVariant();
        java.lang.String str64 = locale47.getDisplayCountry(locale51);
        int int65 = dateTimeField41.getMaximumTextLength(locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime40", (dateTime10.compareTo(dateTime40) == 0) == dateTime10.equals(dateTime40));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property4 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime5 = property4.withMinimumValue();
        int int6 = localTime5.getHourOfDay();
        java.lang.String str7 = localTime5.toString();
        org.joda.time.LocalTime.Property property8 = localTime5.millisOfSecond();
        int int9 = localTime5.getMinuteOfHour();
        org.joda.time.LocalTime localTime11 = localTime5.plusSeconds(2922789);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime14.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime24 = dateTime14.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property28 = localTime27.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime31 = localTime27.toDateTimeToday(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        int int34 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime24.toMutableDateTime(dateTimeZone30);
        org.joda.time.Instant instant36 = dateTime24.toInstant();
        org.joda.time.Instant instant39 = instant36.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant36.plus(readableDuration40);
        org.joda.time.MutableDateTime mutableDateTime42 = instant41.toMutableDateTimeISO();
        org.joda.time.Instant instant44 = instant41.minus(13L);
        org.joda.time.Instant instant46 = instant41.minus(63686358149205L);
        org.joda.time.DateTime dateTime47 = instant41.toDateTime();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(100L, chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime52.plus((long) 'a');
        org.joda.time.DateTime dateTime58 = dateTime52.plusWeeks(11);
        org.joda.time.DateTime dateTime60 = dateTime58.withMillis((long) 8);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property64 = localTime63.hourOfDay();
        org.joda.time.LocalTime localTime66 = localTime63.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology67 = localTime66.getChronology();
        org.joda.time.DateTime dateTime68 = dateTime60.toDateTime(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology67.getZone();
        boolean boolean72 = dateTimeZone70.isStandardOffset((long) 16);
        int int74 = dateTimeZone70.getStandardOffset(0L);
        java.lang.String str76 = dateTimeZone70.getName(364694580000L);
        long long79 = dateTimeZone70.convertLocalToUTC((long) 44, true);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((java.lang.Object) dateTime47, dateTimeZone70);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.DateTime dateTime82 = localTime11.toDateTimeToday(dateTimeZone70);
        boolean boolean83 = dateTimeZone70.isFixed();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) 425, dateTimeZone70);
        int int86 = dateTimeZone70.getOffset(77587200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and mutableDateTime35", (dateTime24.compareTo(mutableDateTime35) == 0) == dateTime24.equals(mutableDateTime35));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(3);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(12);
        boolean boolean17 = dateTime13.isBefore(364694580000L);
        org.joda.time.DateTime dateTime19 = dateTime13.plus((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(69);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        int int25 = localDate24.getCenturyOfEra();
        org.joda.time.LocalDate localDate27 = localDate24.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate29 = localDate27.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = localDate29.toString(dateTimeFormatter30);
        org.joda.time.LocalDate localDate33 = localDate29.minusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) '#', dateTimeZone36);
        int int39 = dateTimeZone36.getOffset((long) (short) 10);
        java.util.Locale locale43 = new java.util.Locale("", "hi!");
        java.util.Locale locale46 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        java.lang.String str48 = locale46.getVariant();
        java.lang.String str49 = locale43.getDisplayScript(locale46);
        java.lang.String str50 = dateTimeZone36.getShortName((long) 20, locale46);
        org.joda.time.DateTime dateTime51 = localDate29.toDateTimeAtMidnight(dateTimeZone36);
        long long54 = dateTimeZone36.convertLocalToUTC((long) 1969, true);
        org.joda.time.DateTime dateTime55 = dateTime23.toDateTime(dateTimeZone36);
        boolean boolean57 = dateTimeZone36.isStandardOffset(299088396288L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime55", (dateTime23.compareTo(dateTime55) == 0) == dateTime23.equals(dateTime55));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) '#', dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime8.plus((long) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears(3);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        int int31 = localDateTime28.getMonthOfYear();
        org.joda.time.DateTime dateTime32 = dateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean33 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime3.plus(readablePeriod34);
        org.joda.time.Instant instant36 = dateTime35.toInstant();
        org.joda.time.DateTime.Property property37 = dateTime35.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant36", (dateTime35.compareTo(instant36) == 0) == dateTime35.equals(instant36));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.eras();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((-62135596800000L), chronology20);
        long long27 = chronology20.add(299086123008L, (long) 28544277, 74);
        org.joda.time.DurationField durationField28 = chronology20.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField28, and durationField22", !(durationField22.compareTo(durationField28) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField28.compareTo(durationField22))));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay(32770, (int) (byte) 10, 2022);
        java.util.Calendar.Builder builder12 = builder0.setTimeOfDay(122, (int) (byte) 0, 6);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        calendar17.clear(9);
        int int21 = calendar17.getGreatestMinimum((int) (short) 0);
        calendar17.setLenient(false);
        calendar17.add(0, 8);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.util.TimeZone.setDefault(timeZone27);
        java.util.TimeZone.setDefault(timeZone27);
        calendar17.setTimeZone(timeZone27);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        boolean boolean43 = strSet37.retainAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.stream.Stream<java.lang.String> strStream44 = strSet42.stream();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        java.util.Locale locale57 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        boolean boolean59 = strSet53.retainAll((java.util.Collection<java.lang.String>) strSet58);
        java.util.stream.Stream<java.lang.String> strStream60 = strSet58.stream();
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        boolean boolean63 = strSet58.removeAll((java.util.Collection<java.lang.String>) strSet62);
        boolean boolean64 = strSet46.addAll((java.util.Collection<java.lang.String>) strSet58);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone66);
        java.time.ZoneId zoneId68 = timeZone66.toZoneId();
        boolean boolean69 = strSet58.remove((java.lang.Object) timeZone66);
        java.util.TimeZone.setDefault(timeZone66);
        boolean boolean71 = timeZone27.hasSameRules(timeZone66);
        java.util.Calendar.Builder builder72 = builder0.setTimeZone(timeZone66);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(100L, chronology74);
        int int76 = dateTime75.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = dateTime75.toDateTime(dateTimeZone77);
        java.util.Locale locale81 = new java.util.Locale("", "hi!");
        java.util.Locale locale84 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleKeys();
        java.lang.String str86 = locale84.getVariant();
        java.lang.String str87 = locale81.getDisplayScript(locale84);
        java.util.Calendar calendar88 = dateTime78.toCalendar(locale81);
        java.util.TimeZone timeZone89 = java.util.TimeZone.getDefault();
        int int90 = timeZone89.getRawOffset();
        java.util.TimeZone timeZone91 = java.util.TimeZone.getDefault();
        int int92 = timeZone91.getRawOffset();
        boolean boolean93 = timeZone89.hasSameRules(timeZone91);
        calendar88.setTimeZone(timeZone91);
        java.lang.String str95 = timeZone91.getID();
        java.util.Calendar.Builder builder96 = builder72.setTimeZone(timeZone91);
        java.lang.Object obj97 = timeZone91.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar88", (calendar17.compareTo(calendar88) == 0) == calendar17.equals(calendar88));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.weekyear();
        org.joda.time.DurationField durationField37 = chronology32.weeks();
        org.joda.time.DurationField durationField38 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField37 and durationField38", Math.signum(durationField37.compareTo(durationField38)) == -Math.signum(durationField38.compareTo(durationField37)));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.Instant instant31 = instant27.minus((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime32 = instant27.toMutableDateTimeISO();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        int int36 = dateTime35.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime(dateTimeZone37);
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        java.util.Locale locale44 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getVariant();
        java.lang.String str47 = locale41.getDisplayScript(locale44);
        java.util.Calendar calendar48 = dateTime38.toCalendar(locale41);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime53.plus((long) 'a');
        org.joda.time.DateTime dateTime59 = dateTime53.plusWeeks(11);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 8);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property65 = localTime64.hourOfDay();
        org.joda.time.LocalTime localTime67 = localTime64.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology68 = localTime67.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime61.toDateTime(chronology68);
        org.joda.time.DurationField durationField70 = chronology68.eras();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property74 = localTime73.hourOfDay();
        org.joda.time.LocalTime localTime75 = property74.withMinimumValue();
        int int76 = localTime75.getHourOfDay();
        long long78 = chronology68.set((org.joda.time.ReadablePartial) localTime75, 364740218880L);
        org.joda.time.DateTimeField dateTimeField79 = chronology68.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = chronology68.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField81 = chronology68.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField82 = chronology68.year();
        org.joda.time.DateTime dateTime83 = dateTime38.withChronology(chronology68);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((java.lang.Object) instant27, chronology68);
        org.joda.time.DateTimeField dateTimeField85 = chronology68.dayOfWeek();
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime(chronology68);
        org.joda.time.DateTimeField dateTimeField87 = chronology68.dayOfYear();
        java.lang.String str88 = dateTimeField87.getName();
        org.joda.time.DurationField durationField89 = dateTimeField87.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField70, durationField89, and durationField70", !(durationField70.compareTo(durationField89) == 0) || (Math.signum(durationField70.compareTo(durationField70)) == Math.signum(durationField89.compareTo(durationField70))));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean9 = dateTime7.isSupported(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime7.minus(10L);
        org.joda.time.DateTime dateTime13 = dateTime11.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime15 = dateTime11.withMillis((long) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        int int19 = dateTime18.getMillisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.plusHours(360000000);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime15.toMutableDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        long long31 = dateTimeZone29.previousTransition((long) 32772);
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.halfdayOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 15, chronology26);
        org.joda.time.DurationField durationField35 = chronology26.millis();
        org.joda.time.DurationField durationField36 = chronology26.eras();
        org.joda.time.DurationField durationField37 = durationFieldType1.getField(chronology26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField36", Math.signum(durationField35.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField35)));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay(32770, (int) (byte) 10, 2022);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder11 = builder8.setLocale(locale9);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone.setDefault(timeZone12);
        java.util.Calendar.Builder builder15 = builder8.setTimeZone(timeZone12);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17, locale18);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("100");
        boolean boolean22 = timeZone17.hasSameRules(timeZone21);
        timeZone21.setRawOffset(1645455721);
        boolean boolean25 = timeZone12.hasSameRules(timeZone21);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone12);
        java.lang.String str27 = timeZone12.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar26", (calendar19.compareTo(calendar26) == 0) == calendar19.equals(calendar26));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(2);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime2.toGregorianCalendar();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        boolean boolean11 = dateTimeFormatter10.isPrinter();
        boolean boolean12 = dateTimeFormatter10.isOffsetParsed();
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withZoneUTC();
        boolean boolean15 = dateTimeFormatter10.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = dateTimeFormatter10.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter10.withDefaultYear(9);
        boolean boolean19 = dateTime2.equals((java.lang.Object) 9);
        org.joda.time.DateTime dateTime21 = dateTime2.plusMonths((-88779));
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and gregorianCalendar7", (calendar4.compareTo(gregorianCalendar7) == 0) == calendar4.equals(gregorianCalendar7));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        int int12 = calendar4.getFirstDayOfWeek();
        calendar4.setFirstDayOfWeek(16);
        int int15 = calendar4.getFirstDayOfWeek();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getMonth();
        calendar4.setTime(date16);
        java.lang.String str19 = calendar4.getCalendarType();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        int int21 = localDate20.getCenturyOfEra();
        org.joda.time.LocalDate localDate23 = localDate20.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate25 = localDate23.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone26);
        long long31 = dateTimeZone26.adjustOffset((long) 22, false);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) calendar4, dateTimeZone26);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        int int36 = dateTime35.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime(dateTimeZone37);
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        java.util.Locale locale44 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getVariant();
        java.lang.String str47 = locale41.getDisplayScript(locale44);
        java.util.Calendar calendar48 = dateTime38.toCalendar(locale41);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        calendar48.setMinimalDaysInFirstWeek(5);
        java.lang.String str52 = calendar48.getCalendarType();
        calendar48.set(9, 52, 16);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        int int60 = dateTimeZone58.getStandardOffset((long) 32769);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(dateTimeZone58);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        boolean boolean64 = calendar48.after((java.lang.Object) dateTimeZone58);
        long long67 = dateTimeZone58.convertLocalToUTC(280489992000L, false);
        long long69 = dateTimeZone26.getMillisKeepLocal(dateTimeZone58, (long) 17233669);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDate20 and localDate32", (localDate20.compareTo(localDate32) == 0) == localDate20.equals(localDate32));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.DurationField durationField7 = chronology5.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField7, and durationField6", !(durationField6.compareTo(durationField7) == 0) || (Math.signum(durationField6.compareTo(durationField6)) == Math.signum(durationField7.compareTo(durationField6))));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths(999);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        java.util.Locale locale13 = null;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        calendar14.clear(9);
        int int18 = calendar14.getGreatestMinimum((int) (short) 0);
        calendar14.setLenient(false);
        calendar14.set(10, 8, 5, 20, 100);
        calendar14.clear();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        calendar14.setTimeZone(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone28);
        int int31 = calendar30.getFirstDayOfWeek();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.fromCalendarFields(calendar30);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(904);
        org.joda.time.LocalDate localDate36 = localDate32.minusDays(1645455738);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now();
        int int38 = localDate37.getCenturyOfEra();
        org.joda.time.LocalDate localDate40 = localDate37.withCenturyOfEra(4);
        org.joda.time.Interval interval41 = localDate37.toInterval();
        org.joda.time.LocalDate.Property property42 = localDate37.year();
        org.joda.time.LocalDate localDate43 = property42.roundFloorCopy();
        org.joda.time.LocalDate localDate44 = property42.roundFloorCopy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(100L, chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime49.plus((long) 'a');
        org.joda.time.DateTime dateTime54 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime(chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = dateTime54.withZone(dateTimeZone57);
        java.lang.String str60 = dateTimeZone57.toString();
        org.joda.time.DateTime dateTime61 = localDate44.toDateTimeAtStartOfDay(dateTimeZone57);
        org.joda.time.DateTime dateTime62 = localDate36.toDateTimeAtMidnight(dateTimeZone57);
        org.joda.time.DateTime dateTime63 = localDate7.toDateTimeAtMidnight(dateTimeZone57);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime54 and dateTime59", (dateTime54.compareTo(dateTime59) == 0) == dateTime54.equals(dateTime59));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.minus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.minus(readableDuration7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTimeISO();
        org.joda.time.LocalTime localTime12 = dateTime8.toLocalTime();
        int int13 = dateTime8.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = dateTime15.toString("4", locale17);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale17.getDisplayCountry(locale19);
        java.lang.String str21 = locale17.getDisplayCountry();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.lang.String str25 = locale22.getDisplayCountry(locale24);
        java.lang.String str26 = locale22.getDisplayName();
        boolean boolean27 = locale22.hasExtensions();
        java.util.Locale locale28 = locale22.stripExtensions();
        java.lang.String str29 = locale17.getDisplayLanguage(locale28);
        java.lang.String str30 = locale17.getScript();
        java.util.Calendar calendar31 = dateTime8.toCalendar(locale17);
        org.joda.time.DateTime dateTime33 = dateTime8.minusMonths(47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar31", (calendar4.compareTo(calendar31) == 0) == calendar4.equals(calendar31));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Thu");
        timeZone1.setID("/experiment/2022-02-21T15:04:31.165Z");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(0);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.withSecondOfMinute((int) (short) 0);
        org.joda.time.DateTime dateTime12 = dateTime7.minusSeconds(27);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 69);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getCountry();
        java.lang.String str18 = locale16.getDisplayVariant();
        java.util.Calendar calendar19 = dateTime12.toCalendar(locale16);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("+100:00");
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        calendar19.setTimeZone(timeZone20);
        boolean boolean25 = timeZone20.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone20);
        boolean boolean27 = timeZone1.hasSameRules(timeZone20);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime33.plus((long) 'a');
        org.joda.time.DateTime dateTime38 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = dateTime38.withZone(dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.withPeriodAdded(readablePeriod44, 197);
        org.joda.time.DateTime.Property property47 = dateTime43.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone49);
        java.util.Locale locale55 = new java.util.Locale("zho", "Greenwich Mean Time", "und-100");
        java.lang.String str56 = dateTimeZone49.getName(299087839232L, locale55);
        java.util.Calendar calendar57 = dateTime43.toCalendar(locale55);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) '#', dateTimeZone60);
        int int63 = dateTimeZone60.getOffset((long) (short) 10);
        java.util.Locale locale67 = new java.util.Locale("", "hi!");
        java.util.Locale locale70 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleKeys();
        java.lang.String str72 = locale70.getVariant();
        java.lang.String str73 = locale67.getDisplayScript(locale70);
        java.lang.String str74 = dateTimeZone60.getShortName((long) 20, locale70);
        java.lang.String str75 = locale55.getDisplayScript(locale70);
        java.lang.String str76 = timeZone1.getDisplayName(locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar28", (calendar23.compareTo(calendar28) == 0) == calendar23.equals(calendar28));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField45 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = chronology35.centuryOfEra();
        java.lang.String str49 = dateTimeField47.getAsText((long) 445);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime7 = property3.addCopy(10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        int int15 = dateTime10.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime10.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime25.plus((long) 'a');
        org.joda.time.DateTime dateTime31 = dateTime25.plusWeeks(11);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) 8);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property37 = localTime36.hourOfDay();
        org.joda.time.LocalTime localTime39 = localTime36.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime33.toDateTime(chronology40);
        org.joda.time.DateTime dateTime42 = dateTime20.withChronology(chronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readableDuration45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withDurationAdded(readableDuration47, (int) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime49.toMutableDateTime(chronology50);
        boolean boolean52 = dateTime42.equals((java.lang.Object) dateTime49);
        org.joda.time.DateTime dateTime54 = dateTime49.plusDays(24);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        java.util.Locale locale58 = null;
        java.util.Calendar calendar59 = dateTime57.toCalendar(locale58);
        org.joda.time.DateTime.Property property60 = dateTime57.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getRangeDurationType();
        org.joda.time.DateTime dateTime64 = dateTime57.withField(dateTimeFieldType61, 21);
        org.joda.time.DateTime.Property property65 = dateTime54.property(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType61.getDurationType();
        boolean boolean67 = localTime7.isSupported(durationFieldType66);
        java.lang.String str68 = durationFieldType66.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime42", (dateTime20.compareTo(dateTime42) == 0) == dateTime20.equals(dateTime42));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        org.joda.time.LocalTime.Property property17 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property21 = localTime20.hourOfDay();
        org.joda.time.LocalTime localTime23 = localTime20.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        java.lang.String str26 = dateTimeField25.getName();
        long long28 = dateTimeField25.roundHalfFloor((-62135596800000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField25.getType();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        boolean boolean36 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime32.getDayOfYear();
        org.joda.time.DateTime dateTime40 = dateTime32.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime42 = dateTime40.plusSeconds(1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime47.plus((long) 'a');
        org.joda.time.DateTime dateTime53 = dateTime47.plusWeeks(11);
        org.joda.time.DateTime dateTime55 = dateTime53.withMillis((long) 8);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property59 = localTime58.hourOfDay();
        org.joda.time.LocalTime localTime61 = localTime58.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology62 = localTime61.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime55.toDateTime(chronology62);
        org.joda.time.DateTime dateTime64 = dateTime42.withChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.dayOfYear();
        org.joda.time.DurationField durationField69 = chronology62.weeks();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType29.getField(chronology62);
        int int71 = localTime14.get(dateTimeFieldType29);
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime76 = localTime74.minusMillis((int) 'a');
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalTime localTime78 = localTime76.plus(readablePeriod77);
        org.joda.time.LocalTime localTime80 = localTime76.minusMillis(53);
        int int81 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime80);
        org.joda.time.LocalTime.Property property82 = localTime14.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime64", (dateTime42.compareTo(dateTime64) == 0) == dateTime42.equals(dateTime64));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        int int3 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate5 = localDate2.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime16.plus((long) 'a');
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime(chronology22);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DateTime dateTime26 = dateTime10.toDateTime(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.weeks();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 788, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((-125999793L), chronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime26", (dateTime10.compareTo(dateTime26) == 0) == dateTime10.equals(dateTime26));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        int int25 = dateTimeZone18.getOffset((long) (short) 100);
        boolean boolean26 = dateTimeZone18.isFixed();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        boolean boolean33 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime29.getDayOfYear();
        org.joda.time.DateTime dateTime37 = dateTime29.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime39 = dateTime29.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property43 = localTime42.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime46 = localTime42.toDateTimeToday(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        int int49 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime39.toMutableDateTime(dateTimeZone45);
        org.joda.time.Instant instant51 = dateTime39.toInstant();
        org.joda.time.Instant instant53 = instant51.minus(45056L);
        org.joda.time.Chronology chronology54 = instant51.getChronology();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant57 = instant51.withDurationAdded(readableDuration55, (int) (short) 1);
        org.joda.time.Instant instant58 = instant51.toInstant();
        org.joda.time.MutableDateTime mutableDateTime59 = instant51.toMutableDateTime();
        boolean boolean60 = dateTimeZone18.equals((java.lang.Object) mutableDateTime59);
        long long62 = dateTimeZone18.nextTransition((long) 43038);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTime.Property property65 = dateTime63.property(dateTimeFieldType64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property65.getFieldType();
        org.joda.time.DateTime dateTime67 = property65.roundCeilingCopy();
        org.joda.time.DateTime dateTime68 = property65.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime9.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime19 = dateTime9.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        long long24 = property22.remainder();
        org.joda.time.DateTime dateTime25 = property22.roundFloorCopy();
        org.joda.time.DateTime dateTime26 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime27 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(3);
        int int33 = localDate32.getYear();
        org.joda.time.LocalDate localDate35 = localDate32.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.Chronology chronology39 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.monthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime26.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        long long46 = chronology39.add(1032810277618121007L, 280491397120L, (int) (short) 1);
        org.joda.time.DurationField durationField47 = chronology39.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime41", (dateTime26.compareTo(dateTime41) == 0) == dateTime26.equals(dateTime41));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime8.plus((long) 'a');
        org.joda.time.DateTime dateTime14 = dateTime8.plusWeeks(11);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((long) 8);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime22 = localTime19.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        long long29 = chronology23.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime3.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.year();
        boolean boolean32 = durationFieldType1.isSupported(chronology23);
        org.joda.time.DurationField durationField33 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology23.hourOfDay();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(28031539200L, chronology23);
        org.joda.time.DateTimeField dateTimeField36 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField37 = chronology23.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime6", (dateTime3.compareTo(dateTime6) == 0) == dateTime3.equals(dateTime6));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone9);
        long long18 = dateTimeZone9.adjustOffset((long) 69, true);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.eras();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        int int23 = localDate22.getCenturyOfEra();
        org.joda.time.LocalDate localDate25 = localDate22.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate27 = localDate25.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDate27.toString(dateTimeFormatter28);
        org.joda.time.LocalDate localDate31 = localDate27.withWeekyear(2019);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        int int33 = localDate31.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDate.Property property34 = localDate31.weekOfWeekyear();
        org.joda.time.Chronology chronology35 = localDate31.getChronology();
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfHalfday();
        org.joda.time.DurationField durationField38 = durationFieldType20.getField(chronology35);
        boolean boolean39 = localDate19.isSupported(durationFieldType20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withFields(readablePartial9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.lang.String str18 = locale16.getVariant();
        java.lang.String str19 = locale16.getISO3Language();
        java.util.Locale.setDefault(category13, locale16);
        java.util.Locale locale21 = java.util.Locale.getDefault(category13);
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = dateTime24.toString("4", locale26);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale26.getDisplayCountry(locale28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.lang.String str34 = dateTime31.toString("4", locale33);
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale33.getDisplayCountry(locale35);
        java.lang.String str37 = locale26.getDisplayCountry(locale33);
        java.lang.String str38 = locale26.getDisplayVariant();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale26.getDisplayLanguage(locale39);
        java.lang.String str41 = locale39.toLanguageTag();
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale45.getVariant();
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale.setDefault(category42, locale45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(100L, chronology51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, chronology54);
        boolean boolean56 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime55.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        boolean boolean61 = dateTimeZone59.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = dateTime55.toDateTime(dateTimeZone59);
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.lang.String str66 = locale65.getISO3Country();
        java.lang.String str67 = dateTimeZone59.getShortName((long) 15, locale65);
        java.util.Locale.setDefault(category42, locale65);
        java.lang.String str70 = locale65.getExtension('u');
        java.lang.String str71 = locale39.getDisplayVariant(locale65);
        java.lang.String str72 = locale21.getDisplayLanguage(locale65);
        int int73 = property11.getMaximumTextLength(locale65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime63", (dateTime2.compareTo(dateTime63) == 0) == dateTime2.equals(dateTime63));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        calendar4.setTimeZone(timeZone18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone18, locale20);
        timeZone18.setRawOffset(13);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18);
        timeZone18.setRawOffset(137120892);
        timeZone18.setID("\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar28", (calendar25.compareTo(calendar28) == 0) == calendar25.equals(calendar28));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        int int17 = timeZone16.getRawOffset();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        int int19 = timeZone18.getRawOffset();
        boolean boolean20 = timeZone16.hasSameRules(timeZone18);
        calendar15.setTimeZone(timeZone18);
        java.lang.String str22 = timeZone18.getID();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        calendar27.clear(9);
        int int31 = calendar27.getGreatestMinimum((int) (short) 0);
        calendar27.roll(9, true);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        int int43 = dateTime37.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar44 = dateTime37.toGregorianCalendar();
        org.joda.time.Chronology chronology45 = dateTime37.getChronology();
        boolean boolean46 = calendar27.after((java.lang.Object) chronology45);
        java.lang.String str47 = calendar27.getCalendarType();
        calendar27.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.fromCalendarFields(calendar27);
        java.util.Date date56 = calendar27.getTime();
        boolean boolean57 = timeZone18.inDaylightTime(date56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and gregorianCalendar44", (calendar15.compareTo(gregorianCalendar44) == 0) == calendar15.equals(gregorianCalendar44));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(80);
        org.joda.time.DateMidnight dateMidnight16 = dateTime11.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded(readableDuration17, 39);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(80);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime(dateTimeZone21);
        java.lang.String str23 = dateTime19.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime22", (dateTime19.compareTo(dateTime22) == 0) == dateTime19.equals(dateTime22));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setDate(292278993, 2019, 2);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(32, 9, 32400000);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("+100:00");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        java.util.Calendar.Builder builder17 = builder12.setLocale(locale15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        java.util.Locale locale21 = null;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        calendar22.clear(9);
        int int26 = calendar22.getGreatestMinimum((int) (short) 0);
        calendar22.setLenient(false);
        calendar22.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("hi!");
        calendar22.setTimeZone(timeZone36);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = locale38.getDisplayCountry(locale40);
        java.lang.String str42 = locale38.getDisplayName();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.time.ZoneId zoneId44 = timeZone36.toZoneId();
        java.util.Calendar.Builder builder45 = builder12.setTimeZone(timeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar43", (calendar16.compareTo(calendar43) == 0) == calendar16.equals(calendar43));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology21.getZone();
        org.joda.time.DurationField durationField32 = chronology21.seconds();
        org.joda.time.DurationField durationField33 = chronology21.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology21.dayOfWeek();
        org.joda.time.DurationField durationField35 = chronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField32, and durationField33", !(durationField35.compareTo(durationField32) == 0) || (Math.signum(durationField35.compareTo(durationField33)) == Math.signum(durationField32.compareTo(durationField33))));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        int int5 = dateTime2.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime2.minus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property11.setCopy(56);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withCenturyOfEra(26);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(54158083);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime7.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime.Property property24 = dateTime7.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime23", (dateTime7.compareTo(mutableDateTime23) == 0) == dateTime7.equals(mutableDateTime23));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(dateTimeZone15);
        boolean boolean22 = dateTime8.isEqualNow();
        java.util.Date date23 = dateTime8.toDate();
        date23.setDate(28);
        int int26 = date23.getDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime21", (dateTime2.compareTo(dateTime21) == 0) == dateTime2.equals(dateTime21));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        boolean boolean10 = dateTime8.isAfterNow();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime23 = dateTime13.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property27 = localTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime30 = localTime26.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        int int33 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime23.toMutableDateTime(dateTimeZone29);
        int int36 = dateTimeZone29.getOffset((long) 20);
        org.joda.time.DateTime dateTime37 = dateTime8.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime38 = dateTime8.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and mutableDateTime34", (dateTime23.compareTo(mutableDateTime34) == 0) == dateTime23.equals(mutableDateTime34));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime33", (dateTime25.compareTo(dateTime33) == 0) == dateTime25.equals(dateTime33));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        int int5 = localTime4.getHourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime4.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime11.plus((long) 'a');
        org.joda.time.DateTime dateTime17 = dateTime11.plusWeeks(11);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillis((long) 8);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property23 = localTime22.hourOfDay();
        org.joda.time.LocalTime localTime25 = localTime22.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime19.toDateTime(chronology26);
        org.joda.time.DurationField durationField28 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.clockhourOfDay();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property33 = localTime32.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime36 = localTime32.toDateTimeToday(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        int int39 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = dateTimeZone35.isStandardOffset(0L);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.Chronology chronology43 = chronology26.withZone(dateTimeZone35);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(dateTimeZone35);
        org.joda.time.DateTime dateTime45 = localTime4.toDateTimeToday(dateTimeZone35);
        boolean boolean46 = dateTimeZone35.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime27", (dateTime19.compareTo(dateTime27) == 0) == dateTime19.equals(dateTime27));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.DateTime dateTime17 = dateTime14.minusHours(82980000);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2100);
        java.util.Locale locale26 = new java.util.Locale("1970", "FRA", "21 Feb 2022 15:02:10 GMT");
        java.lang.String str27 = dateTime21.toString("22", locale26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        java.util.Locale locale31 = null;
        java.util.Calendar calendar32 = dateTime30.toCalendar(locale31);
        org.joda.time.DateTime dateTime34 = dateTime30.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property35 = dateTime30.yearOfEra();
        java.lang.String str36 = property35.getName();
        org.joda.time.DateTime dateTime38 = property35.setCopy(99);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMonths(447);
        int int41 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property42 = dateTime21.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("France", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        calendar9.clear(9);
        int int13 = calendar9.getGreatestMinimum((int) (short) 0);
        calendar9.setLenient(false);
        calendar9.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("hi!");
        calendar9.setTimeZone(timeZone23);
        java.util.TimeZone.setDefault(timeZone23);
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = locale26.getDisplayVariant(locale30);
        java.util.Locale locale32 = locale26.stripExtensions();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone23, locale32);
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property39 = localTime38.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime42 = localTime38.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        int int45 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean47 = dateTimeZone41.isStandardOffset(0L);
        java.util.TimeZone timeZone48 = dateTimeZone41.toTimeZone();
        java.time.ZoneId zoneId49 = timeZone48.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleKeys();
        java.util.Locale locale55 = java.util.Locale.PRC;
        java.lang.String str56 = locale53.getDisplayCountry(locale55);
        java.lang.String str57 = dateTimeZone51.getShortName((long) 3, locale55);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone48, locale55);
        java.lang.String str59 = locale55.getDisplayName();
        java.util.Set<java.lang.String> strSet60 = locale55.getUnicodeLocaleAttributes();
        java.lang.Object obj61 = null;
        boolean boolean62 = strSet60.remove(obj61);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet60, filteringMode63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar58", (calendar33.compareTo(calendar58) == 0) == calendar33.equals(calendar58));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        int int27 = localTime26.getHourOfDay();
        long long29 = chronology19.set((org.joda.time.ReadablePartial) localTime26, 364740218880L);
        org.joda.time.DurationField durationField30 = chronology19.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField30, and durationField21", !(durationField21.compareTo(durationField30) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField30.compareTo(durationField21))));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone21);
        int int23 = dateTimeFormatter22.getDefaultYear();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        java.util.Locale locale30 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale locale32 = builder31.build();
        java.lang.String str33 = locale30.getDisplayCountry(locale32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.LocalTime localTime39 = property38.roundCeilingCopy();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime46.plus((long) 'a');
        org.joda.time.DateTime dateTime52 = dateTime46.plusWeeks(11);
        org.joda.time.DateTime dateTime54 = dateTime52.withMillis((long) 8);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property58 = localTime57.hourOfDay();
        org.joda.time.LocalTime localTime60 = localTime57.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology61 = localTime60.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime54.toDateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfDay();
        long long67 = chronology61.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime68 = dateTime41.withChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField69 = chronology61.year();
        org.joda.time.DateTimeField dateTimeField70 = chronology61.weekOfWeekyear();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property74 = localTime73.hourOfDay();
        org.joda.time.LocalTime localTime75 = property74.roundFloorCopy();
        org.joda.time.LocalTime localTime76 = property74.withMinimumValue();
        org.joda.time.LocalTime localTime78 = property74.addCopy(197);
        int int79 = dateTimeField70.getMaximumValue((org.joda.time.ReadablePartial) localTime78);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(dateTimeZone81);
        java.util.Locale locale84 = java.util.Locale.FRANCE;
        java.lang.String str85 = dateTime82.toString("4", locale84);
        java.util.Locale locale86 = java.util.Locale.CHINESE;
        java.lang.String str87 = locale84.getDisplayCountry(locale86);
        java.lang.String str88 = dateTimeField70.getAsText(0, locale84);
        java.lang.String str89 = property38.getAsText(locale84);
        java.lang.String str90 = locale30.getDisplayScript(locale84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter22.withLocale(locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar34", (calendar26.compareTo(calendar34) == 0) == calendar26.equals(calendar34));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        java.lang.String str25 = dateTimeZone18.getShortName(1645454200000L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, chronology27);
        java.util.Locale locale29 = null;
        java.util.Calendar calendar30 = dateTime28.toCalendar(locale29);
        calendar30.clear(9);
        calendar30.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        boolean boolean43 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime42);
        int int44 = dateTime39.getDayOfYear();
        org.joda.time.DateTime dateTime47 = dateTime39.withDurationAdded((long) (short) 0, 100);
        int int48 = dateTime47.getWeekOfWeekyear();
        boolean boolean49 = calendar30.before((java.lang.Object) dateTime47);
        java.lang.String str50 = dateTime47.toString();
        int int51 = dateTime47.getYear();
        org.joda.time.DateTime dateTime53 = dateTime47.minusMillis(0);
        org.joda.time.DateTime dateTime54 = dateTime53.withLaterOffsetAtOverlap();
        int int55 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(100L, chronology57);
        int int59 = dateTime58.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime(dateTimeZone60);
        java.util.Locale locale64 = new java.util.Locale("", "hi!");
        java.util.Locale locale67 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleKeys();
        java.lang.String str69 = locale67.getVariant();
        java.lang.String str70 = locale64.getDisplayScript(locale67);
        java.util.Calendar calendar71 = dateTime61.toCalendar(locale64);
        int int72 = dateTime61.getMinuteOfHour();
        org.joda.time.DateTime dateTime74 = dateTime61.plusMillis(0);
        boolean boolean75 = dateTime61.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar76 = dateTime61.toGregorianCalendar();
        int int77 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar71 and gregorianCalendar76", (calendar71.compareTo(gregorianCalendar76) == 0) == calendar71.equals(gregorianCalendar76));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.weekyear();
        org.joda.time.DurationField durationField9 = chronology4.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField9, and durationField5", !(durationField5.compareTo(durationField9) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField9.compareTo(durationField5))));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        java.util.Date date36 = localDateTime33.toDate();
        int int37 = date36.getDay();
        boolean boolean38 = date32.after(date36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        java.util.Locale locale42 = null;
        java.util.Calendar calendar43 = dateTime41.toCalendar(locale42);
        calendar43.clear(9);
        int int47 = calendar43.getGreatestMinimum((int) (short) 0);
        calendar43.setLenient(false);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        int int51 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        int int53 = timeZone52.getRawOffset();
        boolean boolean54 = timeZone50.hasSameRules(timeZone52);
        calendar43.setTimeZone(timeZone50);
        java.util.Date date56 = calendar43.getTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay(10);
        java.util.Date date60 = localDateTime57.toDate();
        int int61 = date60.getDay();
        java.time.Instant instant62 = date60.toInstant();
        boolean boolean63 = date56.after(date60);
        boolean boolean64 = date36.after(date60);
        int int65 = date36.getSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar21 and calendar43", (gregorianCalendar21.compareTo(calendar43) == 0) == gregorianCalendar21.equals(calendar43));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.yearOfCentury();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        int int33 = dateTime32.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime(dateTimeZone34);
        java.util.Locale locale38 = new java.util.Locale("", "hi!");
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = locale41.getVariant();
        java.lang.String str44 = locale38.getDisplayScript(locale41);
        java.util.Calendar calendar45 = dateTime35.toCalendar(locale38);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.fromCalendarFields(calendar45);
        org.joda.time.LocalTime localTime48 = localTime46.withMillisOfDay(26);
        long long50 = chronology21.set((org.joda.time.ReadablePartial) localTime46, (long) 13);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DurationField durationField52 = chronology21.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str3 = dateTimeZone0.getNameKey((long) 8);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime16 = dateTime10.plusWeeks(11);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 8);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime24 = localTime21.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        long long31 = chronology25.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime5.withChronology(chronology25);
        int int33 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime5);
        int int34 = dateTime5.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology40.add(readablePeriod42, (long) 999, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField46 = chronology40.minuteOfHour();
        java.lang.String str47 = chronology40.toString();
        org.joda.time.DateTime dateTime48 = dateTime5.withChronology(chronology40);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(chronology40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime8", (dateTime5.compareTo(dateTime8) == 0) == dateTime5.equals(dateTime8));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int8 = localTime6.get(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime26.plus((long) 'a');
        org.joda.time.DateTime dateTime32 = dateTime26.plusWeeks(11);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillis((long) 8);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.LocalTime localTime40 = localTime37.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime21.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfWeek();
        boolean boolean45 = dateTimeFieldType7.isSupported(chronology41);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.util.Locale locale51 = java.util.Locale.PRC;
        java.lang.String str52 = locale49.getDisplayCountry(locale51);
        java.lang.String str53 = dateTimeZone47.getShortName((long) 3, locale51);
        org.joda.time.Chronology chronology54 = chronology41.withZone(dateTimeZone47);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(chronology41);
        java.lang.String str56 = localTime55.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime43", (dateTime21.compareTo(dateTime43) == 0) == dateTime21.equals(dateTime43));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        calendar4.clear();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        calendar4.setTimeZone(timeZone18);
        java.util.TimeZone.setDefault(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        calendar26.clear(9);
        int int30 = calendar26.getGreatestMinimum((int) (short) 0);
        calendar26.setLenient(false);
        calendar26.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("hi!");
        calendar26.setTimeZone(timeZone40);
        int int42 = timeZone40.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        java.time.ZoneId zoneId44 = timeZone40.toZoneId();
        java.time.ZoneId zoneId45 = timeZone40.toZoneId();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale48 = java.util.Locale.PRC;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone47, locale48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone("100");
        boolean boolean52 = timeZone47.hasSameRules(timeZone51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone47);
        timeZone47.setID("\u6cd5\u56fd");
        boolean boolean56 = timeZone40.hasSameRules(timeZone47);
        boolean boolean57 = timeZone18.hasSameRules(timeZone40);
        boolean boolean58 = timeZone40.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar53", (calendar49.compareTo(calendar53) == 0) == calendar49.equals(calendar53));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = dateTime5.minus(10L);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime13 = dateTime9.withMillis((long) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.plusHours(360000000);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.Chronology chronology24 = dateTime20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime13.toMutableDateTime(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        long long29 = dateTimeZone27.previousTransition((long) 32772);
        org.joda.time.Chronology chronology30 = chronology24.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = chronology24.halfdayOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 15, chronology24);
        org.joda.time.DurationField durationField33 = chronology24.millis();
        org.joda.time.DurationField durationField34 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology24.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField33 and durationField34", Math.signum(durationField33.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField33)));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.year();
        long long37 = dateTimeField35.remainder((long) '/');
        long long39 = dateTimeField35.roundHalfCeiling(63686358256163L);
        long long42 = dateTimeField35.add(63686307746298L, 311);
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        boolean boolean47 = dateTimeFormatter46.isPrinter();
        boolean boolean48 = dateTimeFormatter46.isOffsetParsed();
        boolean boolean49 = dateTimeFormatter46.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = dateTimeFormatter46.getPrinter();
        org.joda.time.Chronology chronology51 = dateTimeFormatter46.getChronolgy();
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = locale52.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter46.withLocale(locale52);
        java.lang.String str55 = dateTimeField35.getAsShortText(280488865792L, locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.dayOfYear();
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale43 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.lang.String str47 = nameProvider40.getName(locale43, "hi!", "1970-01-01");
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getDisplayVariant();
        java.lang.String str52 = nameProvider40.getName(locale48, "21 Feb 2022 15:01:56 GMT", "hourOfHalfday");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(100L, chronology57);
        boolean boolean59 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime55.getDayOfYear();
        org.joda.time.DateTime dateTime63 = dateTime55.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime65 = dateTime55.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int67 = dateTime65.get(dateTimeFieldType66);
        org.joda.time.DateTime.Property property68 = dateTime65.dayOfWeek();
        org.joda.time.DurationField durationField69 = property68.getDurationField();
        int int70 = property68.get();
        java.util.Locale locale73 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleKeys();
        java.lang.String str75 = locale73.getVariant();
        java.lang.String str76 = locale73.getDisplayScript();
        java.util.Locale locale77 = locale73.stripExtensions();
        int int78 = property68.getMaximumTextLength(locale73);
        java.lang.String str81 = nameProvider40.getShortName(locale73, "Sun Jan 04 09:11:18 GMT 1970", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        java.lang.String str82 = dateTimeField38.getAsText((int) ' ', locale73);
        int int84 = dateTimeField38.get((long) 54267);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        int int5 = dateTime2.getMonthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime25 = localTime21.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        int int28 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime18.toMutableDateTime(dateTimeZone24);
        org.joda.time.Instant instant30 = dateTime18.toInstant();
        org.joda.time.Instant instant32 = instant30.minus(45056L);
        org.joda.time.Chronology chronology33 = instant30.getChronology();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant30.withDurationAdded(readableDuration34, (int) (short) 1);
        boolean boolean37 = dateTime2.isAfter((org.joda.time.ReadableInstant) instant30);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant30.minus(readableDuration38);
        boolean boolean41 = instant30.isBefore((long) 37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime29", (dateTime18.compareTo(mutableDateTime29) == 0) == dateTime18.equals(mutableDateTime29));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime16 = localTime13.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        boolean boolean23 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime19.getDayOfYear();
        org.joda.time.DateTime dateTime27 = dateTime19.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime29 = dateTime19.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DateTime.Property property32 = dateTime29.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        boolean boolean35 = localTime13.isSupported(durationFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.millis();
        java.lang.String str37 = durationFieldType36.getName();
        org.joda.time.LocalTime localTime39 = localTime13.withFieldAdded(durationFieldType36, (int) (short) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        boolean boolean46 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTime42.getDayOfYear();
        org.joda.time.DateTime dateTime50 = dateTime42.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime52 = dateTime42.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property56 = localTime55.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime59 = localTime55.toDateTimeToday(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        int int62 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime52.toMutableDateTime(dateTimeZone58);
        int int65 = dateTimeZone58.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime66 = localTime39.toDateTimeToday(dateTimeZone58);
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property71 = localTime70.hourOfDay();
        org.joda.time.LocalTime localTime73 = localTime70.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology74 = localTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.hourOfHalfday();
        boolean boolean76 = dateTimeField75.isLenient();
        org.joda.time.DurationField durationField77 = dateTimeField75.getDurationField();
        java.util.Locale locale81 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int82 = dateTimeField75.getMaximumShortTextLength(locale81);
        java.lang.String str83 = dateTimeZone58.getShortName(709199999L, locale81);
        java.lang.String str84 = dateTimeField8.getAsText((int) '/', locale81);
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and mutableDateTime63", (dateTime29.compareTo(mutableDateTime63) == 0) == dateTime29.equals(mutableDateTime63));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime.Property property33 = dateTime2.centuryOfEra();
        org.joda.time.DateTime.Property property34 = dateTime2.monthOfYear();
        int int35 = property34.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime32", (dateTime2.compareTo(dateTime32) == 0) == dateTime2.equals(dateTime32));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str3 = dateTimeZone0.getNameKey((long) 8);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime16 = dateTime10.plusWeeks(11);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 8);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime24 = localTime21.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        long long31 = chronology25.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime5.withChronology(chronology25);
        int int33 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime5);
        int int34 = dateTime5.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology40.add(readablePeriod42, (long) 999, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField46 = chronology40.minuteOfHour();
        java.lang.String str47 = chronology40.toString();
        org.joda.time.DateTime dateTime48 = dateTime5.withChronology(chronology40);
        org.joda.time.DateTime.Property property49 = dateTime5.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime5", (dateTime8.compareTo(dateTime5) == 0) == dateTime8.equals(dateTime5));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T15:02:18.271Z");
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(27);
        org.joda.time.DateTime dateTime5 = dateTime1.minusMillis((-18574));
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        int int9 = dateTime8.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        long long39 = chronology33.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime13.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField41 = chronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology33.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology33.getZone();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime8.toMutableDateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = dateTime1.withZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTime.Property property46 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime47 = property46.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, (int) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        boolean boolean22 = dateTimeZone20.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime19.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime2.toDateTime(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime2.toMutableDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar27 = dateTime2.toGregorianCalendar();
        java.lang.String str28 = gregorianCalendar27.getCalendarType();
        java.time.Instant instant29 = gregorianCalendar27.toInstant();
        java.util.TimeZone timeZone30 = gregorianCalendar27.getTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime25", (dateTime2.compareTo(dateTime25) == 0) == dateTime2.equals(dateTime25));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology20.getZone();
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 16);
        int int27 = dateTimeZone23.getStandardOffset(0L);
        java.lang.String str29 = dateTimeZone23.getName(364694580000L);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 207, dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime.Property property32 = dateTime30.property(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        boolean boolean8 = dateTimeField7.isSupported();
        int int9 = dateTimeField7.getMinimumValue();
        java.lang.String str11 = dateTimeField7.getAsText((long) 7);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime15.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime26 = dateTime24.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime24.getZone();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("2057-02-19");
        java.lang.String str31 = dateTimeZone27.getName((long) 27, locale30);
        java.lang.String str32 = dateTimeField7.getAsText(82980000, locale30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime37.plus((long) 'a');
        org.joda.time.DateTime dateTime43 = dateTime37.plusWeeks(11);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillis((long) 8);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property49 = localTime48.hourOfDay();
        org.joda.time.LocalTime localTime51 = localTime48.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology52 = localTime51.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime45.toDateTime(chronology52);
        org.joda.time.DurationField durationField54 = chronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.clockhourOfDay();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property59 = localTime58.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime62 = localTime58.toDateTimeToday(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        int int65 = dateTimeZone61.getOffset((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean67 = dateTimeZone61.isStandardOffset(0L);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone61);
        org.joda.time.Chronology chronology69 = chronology52.withZone(dateTimeZone61);
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime(dateTimeZone61);
        java.util.Locale locale74 = new java.util.Locale("18 Feb 2022 05:51:07 GMT", "\u6cd5\u6587\u52a0\u62ff\u5927)");
        java.util.Locale.setDefault(locale74);
        java.lang.String str76 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime70, 55943511, locale74);
        org.joda.time.LocalTime localTime78 = localTime70.minusMillis(143);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime45 and dateTime53", (dateTime45.compareTo(dateTime53) == 0) == dateTime45.equals(dateTime53));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        long long10 = dateTime2.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int12 = dateTime2.get(dateTimeFieldType11);
        java.util.Date date13 = dateTime2.toDate();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime20 = localTime16.toDateTimeToday(dateTimeZone19);
        org.joda.time.LocalTime localTime22 = localTime16.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime24 = localTime16.plusMillis(12);
        org.joda.time.LocalTime localTime26 = localTime24.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime28 = localTime24.minusMillis(32772);
        org.joda.time.LocalTime localTime30 = localTime28.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime37.plus((long) 'a');
        org.joda.time.DateTime dateTime43 = dateTime37.plusWeeks(11);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillis((long) 8);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property49 = localTime48.hourOfDay();
        org.joda.time.LocalTime localTime51 = localTime48.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology52 = localTime51.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime45.toDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.clockhourOfDay();
        long long58 = chronology52.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime32.withChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField60 = chronology52.year();
        org.joda.time.DateTimeField dateTimeField61 = chronology52.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone62 = chronology52.getZone();
        org.joda.time.DateTime dateTime63 = localTime28.toDateTimeToday(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone62);
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime66 = dateTime2.withZoneRetainFields(dateTimeZone62);
        boolean boolean67 = dateTime2.isAfterNow();
        org.joda.time.DateTime.Property property68 = dateTime2.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime32", (dateTime5.compareTo(dateTime32) == 0) == dateTime5.equals(dateTime32));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.weekOfWeekyear();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime35 = property34.roundFloorCopy();
        org.joda.time.LocalTime localTime36 = property34.withMinimumValue();
        org.joda.time.LocalTime localTime38 = property34.addCopy(197);
        int int39 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.LocalTime localTime41 = localTime38.plusMillis(54122803);
        org.joda.time.LocalTime localTime43 = localTime41.withMinuteOfHour(8);
        org.joda.time.LocalTime localTime45 = localTime43.minusMinutes(1);
        org.joda.time.Chronology chronology46 = localTime45.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        boolean boolean30 = dateTime28.isEqual(63686358113273L);
        org.joda.time.DateTime dateTime33 = dateTime28.withDurationAdded((long) 'u', 16);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = chronology39.add(readablePeriod41, (long) 13, (int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime33.toDateTime(chronology39);
        long long46 = dateTime33.getMillis();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime51 = localTime49.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime53 = localTime51.withMillisOfDay(4);
        org.joda.time.Chronology chronology54 = localTime51.getChronology();
        org.joda.time.Chronology chronology55 = localTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.secondOfDay();
        org.joda.time.DateTime dateTime57 = dateTime33.withChronology(chronology55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.eras();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.LocalTime localTime27 = property26.withMinimumValue();
        int int28 = localTime27.getHourOfDay();
        long long30 = chronology20.set((org.joda.time.ReadablePartial) localTime27, 364740218880L);
        org.joda.time.DateTimeField dateTimeField31 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology20.yearOfEra();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(85500010L, chronology20);
        org.joda.time.DateTimeField dateTimeField34 = chronology20.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        java.util.Set<java.util.Map.Entry<java.lang.String, org.joda.time.DateTimeZone>> strEntrySet19 = strMap18.entrySet();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = strMap18.putIfAbsent("/experiment/hi!/ISOChronology[UTC]512309298702523492410", dateTimeZone22);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("0422-02-21");
        java.util.Locale.setDefault(locale26);
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        boolean boolean29 = strMap18.equals((java.lang.Object) charSet28);
        int int30 = strMap18.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, org.joda.time.DateTimeZone>> strEntrySet31 = strMap18.entrySet();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.minuteOfHour();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        boolean boolean47 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime43.getDayOfYear();
        org.joda.time.DateTime dateTime51 = dateTime43.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime53 = dateTime43.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property57 = localTime56.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime60 = localTime56.toDateTimeToday(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        int int63 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime53.toMutableDateTime(dateTimeZone59);
        java.lang.String str66 = dateTimeZone59.getShortName(1645454200000L);
        long long68 = dateTimeZone59.nextTransition(616533698991570L);
        org.joda.time.Chronology chronology69 = chronology37.withZone(dateTimeZone59);
        boolean boolean70 = strMap18.equals((java.lang.Object) chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and mutableDateTime64", (dateTime53.compareTo(mutableDateTime64) == 0) == dateTime53.equals(mutableDateTime64));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime9.plus((long) 'a');
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime4.toMutableDateTime(chronology17);
        java.lang.String str20 = dateTime4.toString();
        org.joda.time.DateTime.Property property21 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfEvenCopy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        int int26 = dateTime25.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime(dateTimeZone27);
        java.util.Locale locale31 = new java.util.Locale("", "hi!");
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.lang.String str36 = locale34.getVariant();
        java.lang.String str37 = locale31.getDisplayScript(locale34);
        java.util.Calendar calendar38 = dateTime28.toCalendar(locale31);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromCalendarFields(calendar38);
        org.joda.time.LocalTime localTime41 = localTime39.withMillisOfDay(26);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekyearOfCentury();
        org.joda.time.DateTime dateTime45 = dateTime22.toDateTime(chronology42);
        org.joda.time.DateTime dateTime46 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property47 = dateTime46.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime19", (dateTime4.compareTo(mutableDateTime19) == 0) == dateTime4.equals(mutableDateTime19));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime11.plus(readablePeriod16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        java.lang.String str20 = dateTime19.toString();
        int int21 = dateTime19.getDayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTimeISO();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.LocalTime localTime28 = localTime25.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyear();
        long long36 = chronology29.add(51L, 1645454504000L, 400);
        org.joda.time.DateTimeField dateTimeField37 = chronology29.minuteOfDay();
        org.joda.time.DateTime dateTime38 = dateTime22.withChronology(chronology29);
        org.joda.time.DateTime dateTime40 = dateTime22.minusYears(82800002);
        long long41 = dateTime40.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime38", (dateTime11.compareTo(dateTime38) == 0) == dateTime11.equals(dateTime38));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime dateTime6 = dateTime2.minusDays(21);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '#', dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int13 = dateTimeZone9.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(3);
        boolean boolean17 = dateTimeZone9.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime18", (dateTime6.compareTo(dateTime18) == 0) == dateTime6.equals(dateTime18));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime25.plus((long) 'a');
        org.joda.time.DateTime dateTime31 = dateTime25.plusWeeks(11);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) 8);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property37 = localTime36.hourOfDay();
        org.joda.time.LocalTime localTime39 = localTime36.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime33.toDateTime(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        long long46 = chronology40.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime20.withChronology(chronology40);
        org.joda.time.DateTimeField dateTimeField48 = chronology40.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology40.yearOfEra();
        org.joda.time.DurationField durationField50 = chronology40.weeks();
        org.joda.time.DurationField durationField51 = chronology40.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology40.dayOfYear();
        org.joda.time.DurationField durationField54 = chronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = chronology40.secondOfDay();
        org.joda.time.DurationField durationField56 = chronology40.millis();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology40.getZone();
        boolean boolean58 = strMap18.equals((java.lang.Object) dateTimeZone57);
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler59 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file60 = null;
        java.io.File file62 = new java.io.File(file60, "hi!");
        long long63 = file62.length();
        boolean boolean65 = file62.setReadable(false);
        long long66 = file62.getTotalSpace();
        boolean boolean67 = file62.canRead();
        java.io.File file68 = file62.getCanonicalFile();
        boolean boolean69 = file68.mkdir();
        boolean boolean71 = file68.setWritable(true);
        boolean boolean72 = file68.canExecute();
        boolean boolean74 = file68.setWritable(false);
        boolean boolean75 = file68.createNewFile();
        java.io.File[] fileArray76 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap77 = zoneInfoCompiler59.compile(file68, fileArray76);
        java.util.Set<java.util.Map.Entry<java.lang.String, org.joda.time.DateTimeZone>> strEntrySet78 = strMap77.entrySet();
        strMap77.clear();
        boolean boolean81 = strMap77.containsKey((java.lang.Object) 52);
        java.util.Set<java.util.Map.Entry<java.lang.String, org.joda.time.DateTimeZone>> strEntrySet82 = strMap77.entrySet();
        strMap18.putAll(strMap77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime23", (dateTime20.compareTo(dateTime23) == 0) == dateTime20.equals(dateTime23));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(0);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 1645455718, chronology17);
        org.joda.time.DurationField durationField20 = chronology17.eras();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime22 = dateTime10.withChronology(chronology17);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime22", (dateTime10.compareTo(dateTime22) == 0) == dateTime10.equals(dateTime22));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays(2022);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) ':');
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime17 = property16.roundFloorCopy();
        org.joda.time.LocalTime localTime18 = property16.withMinimumValue();
        org.joda.time.LocalTime localTime19 = property16.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int21 = localTime19.get(dateTimeFieldType20);
        org.joda.time.LocalTime.Property property22 = localTime19.minuteOfHour();
        org.joda.time.LocalTime localTime23 = property22.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfDay();
        org.joda.time.LocalTime.Property property25 = localTime23.secondOfMinute();
        org.joda.time.DateTime dateTime26 = dateTime12.withFields((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.DateTime dateTime28 = dateTime12.withMillis(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime8", (dateTime1.compareTo(mutableDateTime8) == 0) == dateTime1.equals(mutableDateTime8));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.Chronology chronology38 = chronology32.withUTC();
        org.joda.time.DurationField durationField39 = chronology38.minutes();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology38.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.Chronology chronology3 = instant0.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.months();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyear();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.LocalDate localDate9 = localDate6.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone12);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale.Builder builder17 = builder14.setRegion("100");
        java.util.Locale locale18 = builder14.build();
        java.util.Locale.Builder builder19 = builder14.clear();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder23 = builder21.setLanguage("zho");
        java.util.Locale locale24 = builder21.build();
        java.lang.String str25 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDate9, locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        int int57 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime47.toMutableDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime34.toDateTime(dateTimeZone53);
        org.joda.time.DateTime.Property property60 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime61 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime dateTime63 = dateTime61.plusSeconds(22);
        org.joda.time.DateTime dateTime65 = dateTime63.plusWeeks(292278922);
        org.joda.time.DateTime dateTime67 = dateTime63.withMinuteOfHour(16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "hi!");
        long long4 = file3.length();
        boolean boolean6 = file3.setReadable(false);
        long long7 = file3.getTotalSpace();
        boolean boolean8 = file3.canRead();
        java.io.File file9 = file3.getCanonicalFile();
        boolean boolean10 = file9.mkdir();
        boolean boolean12 = file9.setWritable(true);
        boolean boolean13 = file9.canExecute();
        boolean boolean15 = file9.setWritable(false);
        boolean boolean16 = file9.createNewFile();
        java.io.File[] fileArray17 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler0.compile(file9, fileArray17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone28);
        int int34 = dateTimeZone28.getStandardOffset((long) 1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property37 = localDate36.weekyear();
        org.joda.time.LocalDate localDate39 = property37.setCopy("100");
        int[] intArray40 = localDate39.getValues();
        org.joda.time.LocalDate localDate42 = localDate39.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property43 = localDate42.era();
        boolean boolean44 = strMap18.remove((java.lang.Object) dateTime35, (java.lang.Object) property43);
        boolean boolean45 = strMap18.isEmpty();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = strMap18.get((java.lang.Object) dateTime47);
        int int49 = strMap18.size();
        java.util.Set<java.util.Map.Entry<java.lang.String, org.joda.time.DateTimeZone>> strEntrySet50 = strMap18.entrySet();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(100L, chronology53);
        int int55 = dateTime54.getMillisOfDay();
        org.joda.time.DateTime dateTime57 = dateTime54.plusHours(360000000);
        org.joda.time.DateTime dateTime58 = dateTime57.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = dateTime58.withZoneRetainFields(dateTimeZone59);
        java.lang.String str62 = dateTimeZone59.getID();
        org.joda.time.DateTimeZone dateTimeZone63 = strMap18.putIfAbsent("java.util.GregorianCalendar[time=43200100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=16,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]", dateTimeZone59);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(dateTimeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime32", (dateTime21.compareTo(dateTime32) == 0) == dateTime21.equals(dateTime32));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime.Property property11 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = property11.withMinimumValue();
        java.util.Locale locale15 = new java.util.Locale("dayOfWeek", "");
        java.lang.String str16 = property11.getAsShortText(locale15);
        org.joda.time.DateTime dateTime17 = property11.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withPeriodAdded(readablePeriod18, 292278922);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property23 = localDate22.weekyear();
        org.joda.time.LocalDate localDate25 = property23.setCopy("100");
        int[] intArray26 = localDate25.getValues();
        org.joda.time.LocalDate localDate28 = localDate25.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property29 = localDate28.weekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate28.withPeriodAdded(readablePeriod30, 563);
        org.joda.time.LocalDate localDate34 = localDate28.plusYears(9);
        org.joda.time.LocalDate localDate36 = localDate28.withYearOfCentury(0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        boolean boolean43 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime42);
        int int44 = dateTime39.getDayOfYear();
        org.joda.time.DateTime dateTime47 = dateTime39.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.plus(readableDuration50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.withDurationAdded(readableDuration52, (int) (byte) 1);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime54.toMutableDateTime(chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        boolean boolean59 = dateTimeZone57.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime56.toMutableDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime62 = dateTime39.toDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime64 = dateTime62.withMinuteOfHour(49);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes(422);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(100L, chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(100L, chronology72);
        boolean boolean74 = dateTime70.isAfter((org.joda.time.ReadableInstant) dateTime73);
        int int75 = dateTime70.getDayOfYear();
        org.joda.time.DateTime dateTime78 = dateTime70.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime80 = dateTime70.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int82 = dateTime80.get(dateTimeFieldType81);
        org.joda.time.DateTime.Property property83 = dateTime80.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property83.getFieldType();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType84.getDurationType();
        org.joda.time.LocalDate.Property property86 = localDate67.property(dateTimeFieldType84);
        org.joda.time.LocalDate localDate87 = property86.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField88 = property86.getField();
        boolean boolean89 = dateTimeField88.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = dateTimeField88.getType();
        boolean boolean91 = dateTime66.isSupported(dateTimeFieldType90);
        int int92 = localDate28.get(dateTimeFieldType90);
        boolean boolean93 = localTime21.isSupported(dateTimeFieldType90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime62", (dateTime2.compareTo(dateTime62) == 0) == dateTime2.equals(dateTime62));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean4 = file2.exists();
        long long5 = file2.length();
        boolean boolean6 = file2.canRead();
        java.io.File file7 = file2.getCanonicalFile();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        int int15 = dateTime10.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime10.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime20 = dateTime10.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property24 = localTime23.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime27 = localTime23.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        int int30 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime20.toMutableDateTime(dateTimeZone26);
        org.joda.time.Instant instant32 = dateTime20.toInstant();
        org.joda.time.MutableDateTime mutableDateTime33 = instant32.toMutableDateTimeISO();
        long long34 = instant32.getMillis();
        org.joda.time.Instant instant35 = instant32.toInstant();
        boolean boolean36 = file7.equals((java.lang.Object) instant32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime31", (dateTime20.compareTo(mutableDateTime31) == 0) == dateTime20.equals(mutableDateTime31));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.yearOfCentury();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        int int33 = dateTime32.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime(dateTimeZone34);
        java.util.Locale locale38 = new java.util.Locale("", "hi!");
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = locale41.getVariant();
        java.lang.String str44 = locale38.getDisplayScript(locale41);
        java.util.Calendar calendar45 = dateTime35.toCalendar(locale38);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.fromCalendarFields(calendar45);
        org.joda.time.LocalTime localTime48 = localTime46.withMillisOfDay(26);
        long long50 = chronology21.set((org.joda.time.ReadablePartial) localTime46, (long) 13);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property54 = localTime53.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime57 = localTime53.toDateTimeToday(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        int int60 = dateTimeZone56.getOffset((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = dateTimeZone56.isStandardOffset(0L);
        java.lang.String str63 = dateTimeZone56.toString();
        org.joda.time.DateTime dateTime64 = localTime46.toDateTimeToday(dateTimeZone56);
        boolean boolean65 = dateTimeZone56.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.DateTime dateTime27 = instant24.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime.Property property11 = dateTime2.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime14 = dateTime2.withFieldAdded(durationFieldType12, (int) '#');
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        boolean boolean23 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        boolean boolean28 = dateTimeZone26.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime22.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.LocalDate localDate32 = dateTime31.toLocalDate();
        org.joda.time.DateTime dateTime34 = dateTime31.minusHours(82980000);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.plus(readablePeriod35);
        org.joda.time.DateTime dateTime38 = dateTime34.plusSeconds(2100);
        java.util.Locale locale43 = new java.util.Locale("1970", "FRA", "21 Feb 2022 15:02:10 GMT");
        java.lang.String str44 = dateTime38.toString("22", locale43);
        int int45 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime38);
        int int46 = dateTime14.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime30", (dateTime2.compareTo(dateTime30) == 0) == dateTime2.equals(dateTime30));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromCalendarFields(calendar15);
        calendar15.setMinimalDaysInFirstWeek(5);
        java.lang.String str19 = calendar15.getCalendarType();
        boolean boolean20 = calendar15.isWeekDateSupported();
        java.util.TimeZone timeZone21 = calendar15.getTimeZone();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone21);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone24, locale25);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("100");
        boolean boolean29 = timeZone24.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone24, locale30);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("100");
        boolean boolean35 = timeZone24.hasSameRules(timeZone34);
        calendar22.setTimeZone(timeZone34);
        java.lang.String str37 = timeZone34.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar26", (calendar22.compareTo(calendar26) == 0) == calendar22.equals(calendar26));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime8.plus((long) 'a');
        org.joda.time.DateTime dateTime14 = dateTime8.plusWeeks(11);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((long) 8);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime22 = localTime19.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        long long29 = chronology23.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime3.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.year();
        boolean boolean32 = durationFieldType1.isSupported(chronology23);
        org.joda.time.DurationField durationField33 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology23.hourOfDay();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(28031539200L, chronology23);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks(4186776);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime6", (dateTime3.compareTo(dateTime6) == 0) == dateTime3.equals(dateTime6));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DurationField durationField37 = chronology32.weekyears();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = chronology32.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.year();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfSecond();
        int int42 = dateTimeField41.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 197);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks(52);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        int int30 = dateTimeField28.getMaximumValue((-48844349729000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime20", (dateTime15.compareTo(dateTime20) == 0) == dateTime15.equals(dateTime20));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime13 = dateTime11.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths(0);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime17.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = dateTime17.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime17.getZone();
        org.joda.time.DateTime dateTime23 = dateTime11.withZone(dateTimeZone22);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        java.lang.Integer int27 = dateTimeFormatter26.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter26.getZone();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime36 = localTime33.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyearOfCentury();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter26.withChronology(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser45 = dateTimeFormatter43.getParser();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeFormatter43.getZone();
        boolean boolean47 = dateTimeFormatter43.isPrinter();
        boolean boolean48 = dateTime11.equals((java.lang.Object) dateTimeFormatter43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime23", (dateTime11.compareTo(dateTime23) == 0) == dateTime11.equals(dateTime23));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(920);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime8", (dateTime6.compareTo(mutableDateTime8) == 0) == dateTime6.equals(mutableDateTime8));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DurationField durationField38 = chronology37.millis();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.halfdayOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = null;
        org.joda.time.format.DateTimeParser dateTimeParser41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter40, dateTimeParser41);
        org.joda.time.Chronology chronology43 = dateTimeFormatter42.getChronology();
        org.joda.time.Chronology chronology44 = dateTimeFormatter42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeFormatter42.getZone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime50.plus((long) 'a');
        org.joda.time.DateTime dateTime55 = dateTime54.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = dateTime55.withZone(dateTimeZone58);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime60.withPeriodAdded(readablePeriod61, 197);
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks(52);
        org.joda.time.Chronology chronology66 = dateTime65.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter42.withChronology(chronology66);
        java.util.Locale.Category category68 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale69 = java.util.Locale.getDefault(category68);
        java.util.Locale locale70 = java.util.Locale.getDefault(category68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter42.withLocale(locale70);
        int int72 = dateTimeField39.getMaximumTextLength(locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.DateTime dateTime27 = instant24.toDateTimeISO();
        org.joda.time.Instant instant30 = instant24.withDurationAdded((long) (byte) 0, (int) 'a');
        long long31 = instant24.getMillis();
        org.joda.time.Chronology chronology32 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.DurationField durationField34 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfWeek();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readableDuration14);
        int int16 = dateTime11.getHourOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.secondOfMinute();
        org.joda.time.Instant instant18 = dateTime11.toInstant();
        int int19 = dateTime11.getHourOfDay();
        boolean boolean21 = dateTime11.isBefore(1665134123777L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant18", (dateTime11.compareTo(instant18) == 0) == dateTime11.equals(instant18));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.minusMillis(26);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime15 = localTime11.toDateTimeToday(dateTimeZone14);
        org.joda.time.LocalTime localTime17 = localTime11.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime19 = localTime11.plusMillis(12);
        org.joda.time.LocalTime localTime21 = localTime19.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime23 = localTime19.minusMillis(32772);
        org.joda.time.LocalTime localTime25 = localTime23.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime32.plus((long) 'a');
        org.joda.time.DateTime dateTime38 = dateTime32.plusWeeks(11);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillis((long) 8);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property44 = localTime43.hourOfDay();
        org.joda.time.LocalTime localTime46 = localTime43.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology47 = localTime46.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.clockhourOfDay();
        long long53 = chronology47.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime54 = dateTime27.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField55 = chronology47.year();
        org.joda.time.DateTimeField dateTimeField56 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology47.getZone();
        org.joda.time.DateTime dateTime58 = localTime23.toDateTimeToday(dateTimeZone57);
        boolean boolean60 = dateTimeZone57.isStandardOffset(63686358138205L);
        org.joda.time.DateTime dateTime61 = localTime8.toDateTimeToday(dateTimeZone57);
        org.joda.time.DateTime.Property property62 = dateTime61.hourOfDay();
        org.joda.time.DateTime dateTime63 = property62.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime30", (dateTime27.compareTo(dateTime30) == 0) == dateTime27.equals(dateTime30));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str3 = dateTimeZone0.getNameKey((long) 8);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime16 = dateTime10.plusWeeks(11);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 8);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime24 = localTime21.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        long long31 = chronology25.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime5.withChronology(chronology25);
        int int33 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime5);
        int int34 = dateTime5.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology40.add(readablePeriod42, (long) 999, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField46 = chronology40.minuteOfHour();
        java.lang.String str47 = chronology40.toString();
        org.joda.time.DateTime dateTime48 = dateTime5.withChronology(chronology40);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DurationField durationField50 = chronology40.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime49", (dateTime1.compareTo(dateTime49) == 0) == dateTime1.equals(dateTime49));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.Interval interval5 = localDate1.toInterval();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        org.joda.time.LocalDate localDate7 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = property6.roundFloorCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime13.plus((long) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime18.withZone(dateTimeZone21);
        java.lang.String str24 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime25 = localDate8.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 20, dateTimeZone21);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        int int28 = dateTime26.getDayOfYear();
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime23", (dateTime18.compareTo(dateTime23) == 0) == dateTime18.equals(dateTime23));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readableDuration37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withDurationAdded(readableDuration39, (int) (byte) 1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime41.toMutableDateTime(chronology42);
        boolean boolean44 = dateTime34.equals((java.lang.Object) dateTime41);
        org.joda.time.DateTime.Property property45 = dateTime41.millisOfSecond();
        int int46 = dateTime41.getSecondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime41.minusWeeks(0);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.plus(readableDuration49);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 100, 2, 11, 4, (int) (short) 0, (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getNameKey((long) 8);
        long long15 = dateTimeZone9.adjustOffset(0L, false);
        java.io.File file16 = null;
        java.io.File file18 = new java.io.File(file16, "hi!");
        long long19 = file18.length();
        boolean boolean20 = dateTimeZone9.equals((java.lang.Object) file18);
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        calendar26.clear(9);
        calendar26.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        boolean boolean39 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime35.getDayOfYear();
        org.joda.time.DateTime dateTime43 = dateTime35.withDurationAdded((long) (short) 0, 100);
        int int44 = dateTime43.getWeekOfWeekyear();
        boolean boolean45 = calendar26.before((java.lang.Object) dateTime43);
        java.lang.String str46 = dateTime43.toString();
        org.joda.time.DateTime dateTime48 = dateTime43.plusMinutes(53);
        int int49 = dateTime48.getMonthOfYear();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property53 = localTime52.hourOfDay();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(100L, chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(100L, chronology58);
        boolean boolean60 = dateTime56.isAfter((org.joda.time.ReadableInstant) dateTime59);
        int int61 = dateTime56.getDayOfYear();
        org.joda.time.DateTime dateTime63 = dateTime56.plusYears((int) (short) 0);
        long long64 = dateTime56.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int66 = dateTime56.get(dateTimeFieldType65);
        int int67 = localTime52.get(dateTimeFieldType65);
        int int68 = dateTime48.get(dateTimeFieldType65);
        org.joda.time.DateTime.Property property69 = dateTime8.property(dateTimeFieldType65);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(100L, chronology71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.withZoneRetainFields(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime74.plus((long) 'a');
        org.joda.time.DateTime dateTime79 = dateTime78.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.toDateTime(chronology80);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime dateTime84 = dateTime79.withZone(dateTimeZone82);
        java.lang.String str85 = dateTimeZone82.toString();
        long long88 = dateTimeZone82.adjustOffset((long) 2022, true);
        org.joda.time.DateTime dateTime89 = dateTime8.toDateTime(dateTimeZone82);
        boolean boolean91 = dateTimeZone82.isStandardOffset((long) 24);
        long long93 = dateTimeZone82.previousTransition((-61788527999965L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime21", (dateTime8.compareTo(dateTime21) == 0) == dateTime8.equals(dateTime21));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfDay();
        org.joda.time.DurationField durationField39 = chronology37.centuries();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property3.addWrapFieldToCopy(976);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 'a');
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(100L, chronology26);
        boolean boolean28 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime27.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        boolean boolean33 = dateTimeZone31.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime27.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime21.toDateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.plus(readablePeriod38);
        int int40 = property3.getDifference((org.joda.time.ReadableInstant) dateTime36);
        java.lang.String str41 = property3.getAsShortText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime35", (dateTime12.compareTo(dateTime35) == 0) == dateTime12.equals(dateTime35));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.plusMonths(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        calendar13.clear(9);
        int int17 = calendar13.getGreatestMinimum((int) (short) 0);
        calendar13.roll(9, true);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        boolean boolean27 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime23.getDayOfYear();
        int int29 = dateTime23.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime23.toGregorianCalendar();
        org.joda.time.Chronology chronology31 = dateTime23.getChronology();
        boolean boolean32 = calendar13.after((java.lang.Object) chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.hourOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(63686358120494L, chronology31);
        org.joda.time.DateTime dateTime35 = dateTime7.withChronology(chronology31);
        org.joda.time.DateTime.Property property36 = dateTime35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and gregorianCalendar30", (calendar4.compareTo(gregorianCalendar30) == 0) == calendar4.equals(gregorianCalendar30));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.eras();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((-62135596800000L), chronology20);
        org.joda.time.DurationField durationField24 = chronology20.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField24, and durationField22", !(durationField22.compareTo(durationField24) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField24.compareTo(durationField22))));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.weekyears();
        org.joda.time.DurationField durationField36 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField36", Math.signum(durationField35.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField35)));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime22.plus((long) 'a');
        org.joda.time.DateTime dateTime28 = dateTime22.plusWeeks(11);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 8);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime36 = localTime33.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        int int40 = dateTime17.get(dateTimeField39);
        long long42 = dateTimeField39.roundHalfEven((long) 2);
        int int43 = dateTime12.get(dateTimeField39);
        long long46 = dateTimeField39.add((long) 22, (-3599999L));
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone48);
        org.joda.time.LocalDate localDate51 = localDate49.plusDays(3);
        int int52 = localDate51.getYear();
        org.joda.time.LocalDate localDate54 = localDate51.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (byte) 100);
        java.util.Date date57 = localDate56.toDate();
        org.joda.time.LocalDate.Property property58 = localDate56.weekOfWeekyear();
        int int59 = localDate56.getDayOfYear();
        java.util.Date date60 = localDate56.toDate();
        int int61 = dateTimeField39.getMinimumValue((org.joda.time.ReadablePartial) localDate56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime38", (dateTime30.compareTo(dateTime38) == 0) == dateTime30.equals(dateTime38));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime3.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime20 = localTime16.toDateTimeToday(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        int int23 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime13.toMutableDateTime(dateTimeZone19);
        org.joda.time.Instant instant25 = dateTime13.toInstant();
        org.joda.time.Instant instant28 = instant25.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant25.plus(readableDuration29);
        org.joda.time.MutableDateTime mutableDateTime31 = instant30.toMutableDateTimeISO();
        org.joda.time.Instant instant33 = instant30.minus(13L);
        org.joda.time.Instant instant35 = instant30.minus(63686358149205L);
        org.joda.time.DateTime dateTime36 = instant30.toDateTime();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property40 = localTime39.hourOfDay();
        org.joda.time.LocalTime localTime42 = localTime39.withMillisOfSecond((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime50.plus((long) 'a');
        org.joda.time.DateTime dateTime56 = dateTime50.plusWeeks(11);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillis((long) 8);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property62 = localTime61.hourOfDay();
        org.joda.time.LocalTime localTime64 = localTime61.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology65 = localTime64.getChronology();
        org.joda.time.DateTime dateTime66 = dateTime58.toDateTime(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.clockhourOfDay();
        long long71 = chronology65.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime72 = dateTime45.withChronology(chronology65);
        org.joda.time.DateTimeField dateTimeField73 = chronology65.year();
        boolean boolean74 = durationFieldType43.isSupported(chronology65);
        boolean boolean75 = localTime42.isSupported(durationFieldType43);
        java.lang.String str76 = durationFieldType43.getName();
        org.joda.time.DateTime dateTime78 = dateTime36.withFieldAdded(durationFieldType43, 287);
        int int79 = dateTime78.getDayOfYear();
        org.joda.time.Chronology chronology80 = dateTime78.getChronology();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) 294, chronology80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime45", (dateTime3.compareTo(dateTime45) == 0) == dateTime3.equals(dateTime45));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(11);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 8);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        long long44 = chronology38.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime45 = dateTime18.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology38.getZone();
        org.joda.time.DateTime dateTime49 = localTime14.toDateTimeToday(dateTimeZone48);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalTime localTime52 = localTime50.plus(readablePeriod51);
        org.joda.time.LocalTime localTime54 = localTime50.withMinuteOfHour(0);
        org.joda.time.LocalTime.Property property55 = localTime50.millisOfSecond();
        org.joda.time.LocalTime localTime56 = property55.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime57 = property55.getLocalTime();
        org.joda.time.LocalTime localTime59 = property55.setCopy(73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime21", (dateTime18.compareTo(dateTime21) == 0) == dateTime18.equals(dateTime21));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.weekOfWeekyear();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime35 = property34.roundFloorCopy();
        org.joda.time.LocalTime localTime36 = property34.withMinimumValue();
        org.joda.time.LocalTime localTime38 = property34.addCopy(197);
        int int39 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTime42.toString("4", locale44);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        java.lang.String str48 = dateTimeField30.getAsText(0, locale44);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleKeys();
        java.util.Locale locale55 = java.util.Locale.PRC;
        java.lang.String str56 = locale53.getDisplayCountry(locale55);
        java.lang.String str57 = dateTimeZone51.getShortName((long) 3, locale55);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale55);
        java.lang.String str59 = dateTimeField30.getAsText(1519200000, locale55);
        boolean boolean60 = locale55.hasExtensions();
        java.lang.String str61 = locale55.getVariant();
        java.lang.String str62 = locale55.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        boolean boolean11 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime7.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime7.plusYears((int) (short) 0);
        long long15 = dateTime7.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int17 = dateTime7.get(dateTimeFieldType16);
        org.joda.time.LocalTime.Property property18 = localTime2.property(dateTimeFieldType16);
        org.joda.time.LocalTime localTime20 = localTime2.plusMinutes(361);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfDay();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((int) (short) 100, 2, 11, 4, (int) (short) 0, (int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        java.lang.String str34 = dateTimeZone31.getNameKey((long) 8);
        long long37 = dateTimeZone31.adjustOffset(0L, false);
        java.io.File file38 = null;
        java.io.File file40 = new java.io.File(file38, "hi!");
        long long41 = file40.length();
        boolean boolean42 = dateTimeZone31.equals((java.lang.Object) file40);
        org.joda.time.DateTime dateTime43 = dateTime30.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        java.util.Locale locale47 = null;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        calendar48.clear(9);
        calendar48.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        boolean boolean61 = dateTime57.isAfter((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime57.getDayOfYear();
        org.joda.time.DateTime dateTime65 = dateTime57.withDurationAdded((long) (short) 0, 100);
        int int66 = dateTime65.getWeekOfWeekyear();
        boolean boolean67 = calendar48.before((java.lang.Object) dateTime65);
        java.lang.String str68 = dateTime65.toString();
        org.joda.time.DateTime dateTime70 = dateTime65.plusMinutes(53);
        int int71 = dateTime70.getMonthOfYear();
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property75 = localTime74.hourOfDay();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(100L, chronology77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(100L, chronology80);
        boolean boolean82 = dateTime78.isAfter((org.joda.time.ReadableInstant) dateTime81);
        int int83 = dateTime78.getDayOfYear();
        org.joda.time.DateTime dateTime85 = dateTime78.plusYears((int) (short) 0);
        long long86 = dateTime78.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int88 = dateTime78.get(dateTimeFieldType87);
        int int89 = localTime74.get(dateTimeFieldType87);
        int int90 = dateTime70.get(dateTimeFieldType87);
        org.joda.time.DateTime.Property property91 = dateTime30.property(dateTimeFieldType87);
        org.joda.time.LocalTime.Property property92 = localTime20.property(dateTimeFieldType87);
        org.joda.time.LocalTime localTime93 = property92.roundFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime43", (dateTime30.compareTo(dateTime43) == 0) == dateTime30.equals(dateTime43));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = dateTime5.minus(10L);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(22);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime9.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(280491302912L, dateTimeZone21);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks(0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = chronology38.add(readablePeriod40, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField44 = chronology38.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.Chronology chronology46 = chronology38.withUTC();
        org.joda.time.DateTime dateTime47 = dateTime29.toDateTime(chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        org.joda.time.DateTime dateTime50 = dateTime47.plusMinutes(35);
        java.lang.String str51 = dateTime50.toString();
        long long52 = dateTime50.getMillis();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime50.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime25", (dateTime3.compareTo(dateTime25) == 0) == dateTime3.equals(dateTime25));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Instant instant6 = dateTime5.toInstant();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear(100);
        org.joda.time.DateTime dateTime10 = dateTime5.minusMonths(485);
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        int int12 = property11.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        boolean boolean3 = dateTimeZone1.isStandardOffset(0L);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property7 = localTime6.hourOfDay();
        org.joda.time.LocalTime localTime9 = localTime6.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        boolean boolean16 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime12.getDayOfYear();
        org.joda.time.DateTime dateTime20 = dateTime12.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime22 = dateTime12.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int24 = dateTime22.get(dateTimeFieldType23);
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        boolean boolean28 = localTime6.isSupported(durationFieldType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.millis();
        java.lang.String str30 = durationFieldType29.getName();
        org.joda.time.LocalTime localTime32 = localTime6.withFieldAdded(durationFieldType29, (int) (short) -1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        boolean boolean39 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime35.getDayOfYear();
        org.joda.time.DateTime dateTime43 = dateTime35.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime45 = dateTime35.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property49 = localTime48.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime52 = localTime48.toDateTimeToday(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        int int55 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime45.toMutableDateTime(dateTimeZone51);
        int int58 = dateTimeZone51.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime59 = localTime32.toDateTimeToday(dateTimeZone51);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property64 = localTime63.hourOfDay();
        org.joda.time.LocalTime localTime66 = localTime63.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology67 = localTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.hourOfHalfday();
        boolean boolean69 = dateTimeField68.isLenient();
        org.joda.time.DurationField durationField70 = dateTimeField68.getDurationField();
        java.util.Locale locale74 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int75 = dateTimeField68.getMaximumShortTextLength(locale74);
        java.lang.String str76 = dateTimeZone51.getShortName(709199999L, locale74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(100L, chronology78);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(100L, chronology81);
        boolean boolean83 = dateTime79.isAfter((org.joda.time.ReadableInstant) dateTime82);
        int int84 = dateTime79.getDayOfYear();
        org.joda.time.DateTime dateTime86 = dateTime79.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property87 = dateTime79.year();
        org.joda.time.DateTime dateTime89 = dateTime79.plusMonths(10);
        int int90 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime89);
        int int91 = dateTime89.getSecondOfDay();
        int int92 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime94 = dateTime89.minusMinutes(7200);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and mutableDateTime56", (dateTime22.compareTo(mutableDateTime56) == 0) == dateTime22.equals(mutableDateTime56));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.LocalDate.Property property5 = localDate0.year();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 'a');
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime17.withZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime24 = localDate7.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime.Property property25 = dateTime24.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime22", (dateTime17.compareTo(dateTime22) == 0) == dateTime17.equals(dateTime22));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(dateTimeZone17);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone17.getShortName((long) 15, locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.lang.String str28 = locale23.getExtension('u');
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale locale30 = builder29.build();
        java.util.Locale locale31 = builder29.build();
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("AD");
        java.util.Locale locale37 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone34, locale37);
        java.lang.String str40 = locale31.getDisplayName(locale37);
        java.lang.String str41 = locale23.getDisplayVariant(locale37);
        java.lang.String str42 = locale23.getCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime21", (dateTime10.compareTo(dateTime21) == 0) == dateTime10.equals(dateTime21));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromCalendarFields(calendar15);
        calendar15.setMinimalDaysInFirstWeek(5);
        java.lang.String str19 = calendar15.getCalendarType();
        boolean boolean20 = calendar15.isWeekDateSupported();
        java.util.TimeZone timeZone21 = calendar15.getTimeZone();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone21);
        java.util.TimeZone.setDefault(timeZone21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        java.util.Locale locale27 = null;
        java.util.Calendar calendar28 = dateTime26.toCalendar(locale27);
        calendar28.clear(9);
        calendar28.set((int) (byte) 1, 1, (-1));
        calendar28.setLenient(true);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromCalendarFields(calendar28);
        java.util.TimeZone timeZone38 = calendar28.getTimeZone();
        java.time.ZoneId zoneId39 = timeZone38.toZoneId();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone41, locale42);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone("100");
        boolean boolean46 = timeZone41.hasSameRules(timeZone45);
        boolean boolean47 = timeZone45.observesDaylightTime();
        timeZone45.setRawOffset(54122803);
        timeZone45.setID("1970");
        boolean boolean52 = timeZone38.hasSameRules(timeZone45);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property56 = localTime55.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime59 = localTime55.toDateTimeToday(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        int int62 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = dateTimeZone58.isStandardOffset(0L);
        java.util.TimeZone timeZone65 = dateTimeZone58.toTimeZone();
        java.time.ZoneId zoneId66 = timeZone65.toZoneId();
        int int67 = timeZone65.getRawOffset();
        java.time.ZoneId zoneId68 = timeZone65.toZoneId();
        boolean boolean69 = timeZone38.hasSameRules(timeZone65);
        boolean boolean70 = timeZone21.hasSameRules(timeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar43", (calendar22.compareTo(calendar43) == 0) == calendar22.equals(calendar43));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(3);
        org.joda.time.DateTime dateTime14 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime21.plus((long) 'a');
        org.joda.time.DateTime dateTime27 = dateTime21.plusWeeks(11);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 8);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property33 = localTime32.hourOfDay();
        org.joda.time.LocalTime localTime35 = localTime32.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime29.toDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        long long42 = chronology36.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime43 = dateTime16.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField44 = chronology36.year();
        org.joda.time.DateTimeField dateTimeField45 = chronology36.yearOfEra();
        org.joda.time.DurationField durationField46 = chronology36.weeks();
        org.joda.time.DurationField durationField47 = chronology36.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology36.getZone();
        org.joda.time.DateTimeField dateTimeField51 = chronology36.secondOfMinute();
        boolean boolean52 = dateTime14.equals((java.lang.Object) chronology36);
        org.joda.time.DateTime.Property property53 = dateTime14.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime16", (dateTime2.compareTo(dateTime16) == 0) == dateTime2.equals(dateTime16));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime3.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime20 = localTime16.toDateTimeToday(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        int int23 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime13.toMutableDateTime(dateTimeZone19);
        int int26 = dateTimeZone19.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(63686358157209L, dateTimeZone19);
        java.lang.String str28 = dateTimeZone19.toString();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime32 = localTime29.withPeriodAdded(readablePeriod30, 0);
        org.joda.time.LocalTime localTime34 = localTime32.withMillisOfSecond(294);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime24", (dateTime13.compareTo(mutableDateTime24) == 0) == dateTime13.equals(mutableDateTime24));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test417");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        int int24 = dateTime1.get(dateTimeField23);
        long long26 = dateTimeField23.roundHalfEven((long) 2);
        long long29 = dateTimeField23.add((long) (byte) 1, (-1L));
        org.joda.time.ReadablePartial readablePartial30 = null;
        int int31 = dateTimeField23.getMaximumValue(readablePartial30);
        long long33 = dateTimeField23.roundHalfCeiling((long) (short) -1);
        java.util.Locale locale38 = new java.util.Locale("21 Oct 2111 15:01:55 GMT", "1", "UTC");
        java.lang.String str39 = dateTimeField23.getAsShortText(2000, locale38);
        java.util.Locale locale44 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.lang.String str45 = locale44.getCountry();
        java.lang.String str46 = dateTimeField23.getAsText(0L, locale44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        int int50 = dateTime49.getMillisOfDay();
        org.joda.time.DateTime dateTime52 = dateTime49.plusHours(360000000);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusMillis(360000000);
        org.joda.time.DateTime dateTime57 = dateTime55.withDayOfYear(11);
        org.joda.time.LocalDateTime localDateTime58 = dateTime55.toLocalDateTime();
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, locale59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime22", (dateTime14.compareTo(dateTime22) == 0) == dateTime14.equals(dateTime22));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test418");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.eras();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.LocalTime localTime27 = property26.withMinimumValue();
        int int28 = localTime27.getHourOfDay();
        long long30 = chronology20.set((org.joda.time.ReadablePartial) localTime27, 364740218880L);
        org.joda.time.DateTimeField dateTimeField31 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField34 = chronology20.era();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(299081887744L, chronology20);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        boolean boolean47 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.stream.Stream<java.lang.String> strStream48 = strSet46.stream();
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        boolean boolean51 = strSet46.removeAll((java.util.Collection<java.lang.String>) strSet50);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        java.util.Locale locale61 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        boolean boolean63 = strSet57.retainAll((java.util.Collection<java.lang.String>) strSet62);
        java.util.stream.Stream<java.lang.String> strStream64 = strSet62.stream();
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        boolean boolean67 = strSet62.removeAll((java.util.Collection<java.lang.String>) strSet66);
        boolean boolean68 = strSet50.addAll((java.util.Collection<java.lang.String>) strSet62);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.millisOfSecond();
        boolean boolean77 = strSet62.contains((java.lang.Object) property76);
        org.joda.time.LocalDateTime localDateTime78 = property76.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusYears(3);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.withMinuteOfHour((int) ' ');
        int int84 = localDateTime79.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property92 = localDateTime89.millisOfDay();
        org.joda.time.LocalDateTime.Property property93 = localDateTime89.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean95 = localDateTime89.isSupported(dateTimeFieldType94);
        org.joda.time.LocalDateTime.Property property96 = localDateTime79.property(dateTimeFieldType94);
        boolean boolean97 = localDateTime78.isSupported(dateTimeFieldType94);
        org.joda.time.LocalTime.Property property98 = localTime35.property(dateTimeFieldType94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test419");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("FR");
        java.util.Locale locale3 = builder2.build();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime8.plus((long) 'a');
        org.joda.time.DateTime dateTime14 = dateTime8.plusWeeks(11);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((long) 8);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime22 = localTime19.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        long long29 = chronology23.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField30 = chronology23.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology23.dayOfWeek();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        int int34 = dateTimeField32.getMaximumTextLength(locale33);
        java.util.Locale.Builder builder35 = builder2.setLocale(locale33);
        java.lang.String str36 = locale33.getLanguage();
        java.util.Set<java.lang.Character> charSet37 = locale33.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime24", (dateTime16.compareTo(dateTime24) == 0) == dateTime16.equals(dateTime24));
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test420");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(4);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withWeekyear(1970);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        calendar17.clear(9);
        calendar17.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        boolean boolean30 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime26.getDayOfYear();
        org.joda.time.DateTime dateTime34 = dateTime26.withDurationAdded((long) (short) 0, 100);
        int int35 = dateTime34.getWeekOfWeekyear();
        boolean boolean36 = calendar17.before((java.lang.Object) dateTime34);
        java.lang.String str37 = dateTime34.toString();
        java.util.Date date38 = dateTime34.toDate();
        boolean boolean39 = localDateTime12.equals((java.lang.Object) dateTime34);
        long long40 = dateTime34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.plus(readableDuration44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime48 = dateTime45.withDurationAdded(readableDuration46, (int) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime48.toMutableDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        boolean boolean53 = dateTimeZone51.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime50.toMutableDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 1645455737, dateTimeZone51);
        boolean boolean57 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = dateTime34.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and mutableDateTime50", (dateTime43.compareTo(mutableDateTime50) == 0) == dateTime43.equals(mutableDateTime50));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test421");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfDay();
        org.joda.time.DurationField durationField23 = chronology19.hours();
        long long27 = chronology19.add((long) 40, 1100L, 180000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.DateTime dateTime17 = dateTime14.minusHours(82980000);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime17.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test423");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        int int24 = dateTime1.get(dateTimeField23);
        long long26 = dateTimeField23.roundHalfEven((long) 2);
        int int28 = dateTimeField23.getLeapAmount(45056L);
        java.lang.String str30 = dateTimeField23.getAsShortText((long) 3);
        java.util.Locale locale33 = new java.util.Locale("", "hi!");
        int int34 = dateTimeField23.getMaximumShortTextLength(locale33);
        int int36 = dateTimeField23.getMinimumValue(82800004L);
        java.lang.String str37 = dateTimeField23.toString();
        long long40 = dateTimeField23.add((-253920000L), 1645455949);
        long long43 = dateTimeField23.addWrapField(280486891520L, 1962);
        org.joda.time.DurationField durationField44 = dateTimeField23.getDurationField();
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now();
        int int46 = localDate45.getCenturyOfEra();
        org.joda.time.LocalDate localDate48 = localDate45.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property49 = localDate48.monthOfYear();
        int int50 = property49.getMaximumValue();
        boolean boolean51 = property49.isLeap();
        org.joda.time.LocalDate localDate52 = property49.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property53 = localDate52.monthOfYear();
        org.joda.time.LocalDate localDate55 = localDate52.withYear((int) ' ');
        int int56 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDate52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime22", (dateTime14.compareTo(dateTime22) == 0) == dateTime14.equals(dateTime22));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((long) 1100, 0);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant26.plus(readableDuration30);
        org.joda.time.Instant instant34 = instant26.withDurationAdded(57L, 1645455738);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant26.plus(readableDuration35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test425");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime13.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.centuryOfEra();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(chronology33);
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType0.getField(chronology33);
        org.joda.time.DurationField durationField41 = chronology33.millis();
        org.joda.time.DateTimeField dateTimeField42 = chronology33.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        org.joda.time.Chronology chronology45 = chronology33.withZone(dateTimeZone44);
        boolean boolean47 = dateTimeZone44.isStandardOffset((long) 541997);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime35", (dateTime13.compareTo(dateTime35) == 0) == dateTime13.equals(dateTime35));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test426");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        int int11 = localDate10.getCenturyOfEra();
        org.joda.time.LocalDate localDate13 = localDate10.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate17 = localDate13.minusWeeks(100);
        org.joda.time.LocalDate.Property property18 = localDate13.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone20.getShortName((long) (-1), locale22);
        org.joda.time.DateTime dateTime24 = localDate13.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 54212, dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime8.toDateTime(dateTimeZone20);
        boolean boolean27 = dateTimeZone20.isFixed();
        int int29 = dateTimeZone20.getOffset((long) 1645455753);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime26", (dateTime8.compareTo(dateTime26) == 0) == dateTime8.equals(dateTime26));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test427");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test428");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int35 = dateTime33.get(dateTimeFieldType34);
        boolean boolean36 = dateTime28.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime38 = dateTime28.minus((long) 1645455737);
        org.joda.time.DateTime dateTime39 = dateTime28.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test429");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTime13.toString("4", locale15);
        java.lang.String str17 = locale15.getScript();
        int int18 = property10.getMaximumTextLength(locale15);
        org.joda.time.DateTime dateTime19 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = property10.roundCeilingCopy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        int int24 = dateTime23.getMillisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.plusHours(360000000);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime35.plus((long) 'a');
        org.joda.time.DateTime dateTime41 = dateTime35.plusWeeks(11);
        org.joda.time.DateTime dateTime43 = dateTime41.withMillis((long) 8);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property47 = localTime46.hourOfDay();
        org.joda.time.LocalTime localTime49 = localTime46.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology50 = localTime49.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime43.toDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfDay();
        long long56 = chronology50.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField57 = chronology50.months();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime27.toMutableDateTime(chronology50);
        org.joda.time.DateTime dateTime59 = dateTime20.toDateTime(chronology50);
        org.joda.time.DurationField durationField60 = chronology50.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime59", (dateTime20.compareTo(dateTime59) == 0) == dateTime20.equals(dateTime59));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test430");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("24");
        org.joda.time.Instant instant4 = instant1.withDurationAdded((long) 0, 32580010);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.centuries();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime5", (instant1.compareTo(dateTime5) == 0) == instant1.equals(dateTime5));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test431");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        boolean boolean24 = localTime2.isSupported(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        java.lang.String str26 = durationFieldType25.getName();
        org.joda.time.LocalTime localTime28 = localTime2.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        boolean boolean35 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds(1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime46.plus((long) 'a');
        org.joda.time.DateTime dateTime52 = dateTime46.plusWeeks(11);
        org.joda.time.DateTime dateTime54 = dateTime52.withMillis((long) 8);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property58 = localTime57.hourOfDay();
        org.joda.time.LocalTime localTime60 = localTime57.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology61 = localTime60.getChronology();
        org.joda.time.DateTime dateTime62 = dateTime54.toDateTime(chronology61);
        org.joda.time.DateTime dateTime63 = dateTime41.withChronology(chronology61);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.plus(readableDuration66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime70 = dateTime67.withDurationAdded(readableDuration68, (int) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime70.toMutableDateTime(chronology71);
        boolean boolean73 = dateTime63.equals((java.lang.Object) dateTime70);
        org.joda.time.Chronology chronology74 = dateTime63.getChronology();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology74);
        boolean boolean76 = durationFieldType25.isSupported(chronology74);
        java.lang.String str77 = durationFieldType25.toString();
        java.lang.String str78 = durationFieldType25.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime63", (dateTime41.compareTo(dateTime63) == 0) == dateTime41.equals(dateTime63));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test432");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime13.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.clockhourOfDay();
        org.joda.time.Chronology chronology38 = chronology33.withUTC();
        org.joda.time.Chronology chronology39 = chronology33.withUTC();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((long) 15, chronology33);
        org.joda.time.DurationField durationField41 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField42 = chronology33.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology33.add(readablePeriod43, 63686358518417L, (-4503087));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime35", (dateTime13.compareTo(dateTime35) == 0) == dateTime13.equals(dateTime35));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test433");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        boolean boolean12 = property5.equals((java.lang.Object) "2057-02-19");
        org.joda.time.DateTime dateTime13 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime15 = property5.addToCopy(197);
        java.lang.String str16 = property5.getName();
        org.joda.time.DateTime dateTime17 = property5.roundHalfFloorCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        boolean boolean24 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime20.getDayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime20.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime30 = dateTime20.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime37 = localTime33.toDateTimeToday(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        int int40 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime30.toMutableDateTime(dateTimeZone36);
        org.joda.time.Instant instant42 = dateTime30.toInstant();
        org.joda.time.Instant instant44 = instant42.minus(45056L);
        org.joda.time.Chronology chronology45 = instant42.getChronology();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant48 = instant42.withDurationAdded(readableDuration46, (int) (short) 1);
        org.joda.time.Instant instant50 = instant48.withMillis((long) (byte) 1);
        org.joda.time.Instant instant52 = instant48.plus((long) 59);
        int int53 = property5.getDifference((org.joda.time.ReadableInstant) instant52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and mutableDateTime41", (dateTime30.compareTo(mutableDateTime41) == 0) == dateTime30.equals(mutableDateTime41));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test434");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        int int57 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime47.toMutableDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime34.toDateTime(dateTimeZone53);
        org.joda.time.DateTime.Property property60 = dateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime61 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime.Property property62 = dateTime61.millisOfSecond();
        org.joda.time.DateTime.Property property63 = dateTime61.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test435");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology6.add(readablePeriod8, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField12 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.millisOfSecond();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(89352319022045790L, chronology6);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localTime17.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime20.getZone();
        long long25 = dateTimeZone22.adjustOffset(63686358401563L, false);
        org.joda.time.DateTime dateTime26 = localDate14.toDateTimeAtStartOfDay(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime19", (dateTime7.compareTo(dateTime19) == 0) == dateTime7.equals(dateTime19));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test436");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readableDuration14);
        int int16 = dateTime11.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.minus(readablePeriod17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((java.lang.Object) dateTime11);
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis(32);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant19", (dateTime11.compareTo(instant19) == 0) == dateTime11.equals(instant19));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test437");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        int int6 = localDate3.getWeekyear();
        int int7 = localDate3.getDayOfMonth();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        int int15 = dateTime10.getDayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime10.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime19 = dateTime10.minusWeeks(4);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfWeek(1);
        org.joda.time.DateTime dateTime23 = dateTime19.plusWeeks(80);
        org.joda.time.DateTime dateTime24 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfSecond();
        org.joda.time.Instant instant26 = dateTime23.toInstant();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        int int28 = localDate27.getCenturyOfEra();
        org.joda.time.LocalDate localDate30 = localDate27.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate32 = localDate30.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDate32.toString(dateTimeFormatter33);
        org.joda.time.LocalDate localDate36 = localDate32.withWeekyear(2019);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        int int38 = localDate36.indexOf(dateTimeFieldType37);
        int int39 = dateTime23.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime41 = dateTime23.plusSeconds(1645455887);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readableDuration42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant26", (dateTime23.compareTo(instant26) == 0) == dateTime23.equals(instant26));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test438");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        int int45 = dateTime13.getDayOfMonth();
        boolean boolean47 = dateTime13.isAfter(32772L);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(1645434179);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("Heure de Greenwich");
        java.lang.String str53 = dateTimeZone49.getShortName((long) 1645455887, locale52);
        org.joda.time.DateTime dateTime54 = dateTime13.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear(907);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test439");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property4 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime5 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property4.withMinimumValue();
        org.joda.time.LocalTime localTime7 = property4.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int9 = localTime7.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        boolean boolean16 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime12.getDayOfYear();
        org.joda.time.DateTime dateTime20 = dateTime12.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime27.plus((long) 'a');
        org.joda.time.DateTime dateTime33 = dateTime27.plusWeeks(11);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillis((long) 8);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property39 = localTime38.hourOfDay();
        org.joda.time.LocalTime localTime41 = localTime38.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(chronology42);
        org.joda.time.DateTime dateTime44 = dateTime22.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfWeek();
        boolean boolean46 = dateTimeFieldType8.isSupported(chronology42);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        java.util.Locale locale52 = java.util.Locale.PRC;
        java.lang.String str53 = locale50.getDisplayCountry(locale52);
        java.lang.String str54 = dateTimeZone48.getShortName((long) 3, locale52);
        org.joda.time.Chronology chronology55 = chronology42.withZone(dateTimeZone48);
        boolean boolean57 = dateTimeZone48.equals((java.lang.Object) (-3272499265496042848L));
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = dateTimeZone48.getName((long) 11, locale59);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(63686358398675L, dateTimeZone48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime44", (dateTime22.compareTo(dateTime44) == 0) == dateTime22.equals(dateTime44));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.halfdayOfDay();
        int int40 = dateTimeField38.getMinimumValue(720L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTime42.toString("4", locale44);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = dateTime49.toString("4", locale51);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale51.getDisplayCountry(locale53);
        java.lang.String str55 = locale44.getDisplayCountry(locale51);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale44);
        boolean boolean57 = locale44.hasExtensions();
        int int58 = dateTimeField38.getMaximumTextLength(locale44);
        int int60 = dateTimeField38.getMaximumValue(63686358233633L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test441");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant24.withDurationAdded(readableDuration28, (int) (short) 1);
        org.joda.time.Instant instant32 = instant30.withMillis((long) (byte) 1);
        org.joda.time.Instant instant34 = instant30.plus((long) 59);
        boolean boolean35 = instant34.isBeforeNow();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant34.withDurationAdded(readableDuration36, 32579070);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.DateTime dateTime27 = instant24.toDateTimeISO();
        org.joda.time.Instant instant30 = instant24.withDurationAdded((long) (byte) 0, (int) 'a');
        long long31 = instant24.getMillis();
        org.joda.time.Chronology chronology32 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.DurationField durationField34 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test443");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(3);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(12);
        boolean boolean17 = dateTime13.isBefore(364694580000L);
        org.joda.time.DateTime dateTime19 = dateTime13.plus((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime13.withCenturyOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minus(63686358253238L);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillisOfDay(968);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded(readableDuration27, (-2712971));
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(50);
        org.joda.time.DateTime dateTime32 = dateTime26.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        boolean boolean39 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        boolean boolean44 = dateTimeZone42.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime38.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(dateTimeZone42);
        org.joda.time.LocalDate.Property property49 = localDate48.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate48.minus(readablePeriod50);
        org.joda.time.DateTime dateTime52 = dateTime26.withFields((org.joda.time.ReadablePartial) localDate48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime32", (dateTime26.compareTo(dateTime32) == 0) == dateTime26.equals(dateTime32));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        java.time.Instant instant9 = calendar4.toInstant();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap18);
        java.util.Locale locale22 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale26 = new java.util.Locale("", "hi!");
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = new java.util.Locale("");
        java.util.Locale locale32 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = locale32.getVariant();
        java.lang.String str35 = locale32.getISO3Language();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Locale locale40 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale40.getVariant();
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        java.util.Locale locale48 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleKeys();
        java.lang.String str50 = locale48.getVariant();
        java.lang.String str51 = locale45.getDisplayScript(locale48);
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale22, locale26, locale27, locale29, locale32, locale36, locale37, locale40, locale48 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList55);
        boolean boolean57 = calendar4.after((java.lang.Object) localeList55);
        java.time.Instant instant58 = calendar4.toInstant();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) calendar4);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillisOfSecond(1);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(100L, chronology65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.withZoneRetainFields(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime68.plus((long) 'a');
        org.joda.time.DateTime dateTime74 = dateTime68.plusWeeks(11);
        org.joda.time.DateTime dateTime76 = dateTime74.withMillis((long) 8);
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property80 = localTime79.hourOfDay();
        org.joda.time.LocalTime localTime82 = localTime79.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology83 = localTime82.getChronology();
        org.joda.time.DateTime dateTime84 = dateTime76.toDateTime(chronology83);
        org.joda.time.DateTimeField dateTimeField85 = chronology83.clockhourOfDay();
        long long89 = chronology83.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime90 = dateTime63.withChronology(chronology83);
        org.joda.time.DateTimeField dateTimeField91 = chronology83.year();
        org.joda.time.DurationField durationField92 = chronology83.eras();
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(chronology83);
        org.joda.time.DateTime dateTime94 = dateTime61.toDateTime(chronology83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime59", (dateTime2.compareTo(dateTime59) == 0) == dateTime2.equals(dateTime59));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test445");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setDate(292278993, 2019, 2);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(32, 9, 32400000);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("+100:00");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        java.util.Calendar.Builder builder17 = builder12.setLocale(locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        java.util.Calendar.Builder builder20 = builder17.setTimeZone(timeZone19);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        java.util.Locale locale26 = new java.util.Locale("/", "100", "0422-02-21");
        java.lang.String str29 = nameProvider21.getName(locale26, "21 Feb 2022 15:01:56 GMT", "/experiment/hi!");
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone19, locale26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        calendar35.clear(9);
        calendar35.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, chronology43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(100L, chronology46);
        boolean boolean48 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime44.getDayOfYear();
        org.joda.time.DateTime dateTime52 = dateTime44.withDurationAdded((long) (short) 0, 100);
        int int53 = dateTime52.getWeekOfWeekyear();
        boolean boolean54 = calendar35.before((java.lang.Object) dateTime52);
        org.joda.time.DateTime dateTime56 = dateTime52.withWeekyear(11);
        org.joda.time.LocalDate localDate57 = dateTime52.toLocalDate();
        int int58 = localDate57.getYearOfEra();
        org.joda.time.LocalDate.Property property59 = localDate57.dayOfYear();
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = locale60.getCountry();
        java.lang.String str62 = locale60.getDisplayVariant();
        int int63 = property59.getMaximumTextLength(locale60);
        java.lang.String str64 = locale26.getDisplayCountry(locale60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar30", (calendar16.compareTo(calendar30) == 0) == calendar16.equals(calendar30));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test446");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(2);
        org.joda.time.DateTime dateTime10 = dateTime8.minus(21L);
        org.joda.time.DateTime.Property property11 = dateTime8.era();
        org.joda.time.DateTime dateTime13 = dateTime8.withDayOfMonth(14);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime16.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime16.year();
        org.joda.time.DateTime dateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime34.plus((long) 'a');
        org.joda.time.DateTime dateTime40 = dateTime34.plusWeeks(11);
        org.joda.time.DateTime dateTime42 = dateTime40.withMillis((long) 8);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property46 = localTime45.hourOfDay();
        org.joda.time.LocalTime localTime48 = localTime45.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology49 = localTime48.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime42.toDateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.clockhourOfDay();
        long long55 = chronology49.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime56 = dateTime29.withChronology(chronology49);
        org.joda.time.DateTimeField dateTimeField57 = chronology49.year();
        org.joda.time.DateTime dateTime58 = dateTime27.toDateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField59 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology49.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime13.toDateTime(chronology49);
        org.joda.time.DateTime.Property property62 = dateTime61.secondOfDay();
        org.joda.time.DateTime dateTime64 = property62.addWrapFieldToCopy(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime29", (dateTime16.compareTo(dateTime29) == 0) == dateTime16.equals(dateTime29));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test447");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        int int6 = localTime5.size();
        org.joda.time.LocalTime.Property property7 = localTime5.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 'a');
        org.joda.time.DateTime dateTime20 = dateTime14.plusWeeks(11);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillis((long) 8);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.LocalTime localTime28 = localTime25.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime22.toDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfDay();
        int int32 = dateTime9.get(dateTimeField31);
        long long34 = dateTimeField31.roundHalfEven((long) 2);
        int int36 = dateTimeField31.getLeapAmount(45056L);
        java.lang.String str38 = dateTimeField31.getAsShortText((long) 3);
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        int int42 = dateTimeField31.getMaximumShortTextLength(locale41);
        java.util.Locale locale43 = locale41.stripExtensions();
        int int44 = property7.getMaximumTextLength(locale43);
        org.joda.time.LocalTime localTime45 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime46 = property7.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime30", (dateTime22.compareTo(dateTime30) == 0) == dateTime22.equals(dateTime30));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test448");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(32770);
        int int4 = localTime3.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean6 = localTime3.isSupported(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = localTime3.withMillisOfSecond((int) 'u');
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property13 = localTime12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime16 = localTime12.toDateTimeToday(dateTimeZone15);
        org.joda.time.LocalTime localTime18 = localTime12.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime20 = localTime12.plusMillis(12);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime25.plus((long) 'a');
        org.joda.time.DateTime dateTime30 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime30.withZone(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime37 = localTime12.toDateTimeToday(dateTimeZone33);
        org.joda.time.LocalTime.Property property38 = localTime12.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        boolean boolean40 = localTime12.isSupported(durationFieldType39);
        org.joda.time.LocalTime localTime42 = localTime8.withFieldAdded(durationFieldType39, 1645455734);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalTime localTime44 = localTime8.minus(readablePeriod43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime35", (dateTime30.compareTo(dateTime35) == 0) == dateTime30.equals(dateTime35));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test449");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(3);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime16.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime27 = dateTime25.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        org.joda.time.DateTime dateTime29 = dateTime13.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusWeeks(0);
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        int int33 = dateTime31.getHourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.minusMillis(54526449);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant32", (dateTime31.compareTo(instant32) == 0) == dateTime31.equals(instant32));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test450");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant10 = instant6.withMillis((long) 57);
        org.joda.time.Instant instant12 = instant6.plus((long) 32400000);
        boolean boolean13 = instant6.isAfterNow();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronology();
        org.joda.time.Chronology chronology18 = dateTimeFormatter16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter16.getZone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime24.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime29.withZone(dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.withPeriodAdded(readablePeriod35, 197);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks(52);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter16.withChronology(chronology40);
        boolean boolean42 = instant6.equals((java.lang.Object) dateTimeFormatter16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime34", (dateTime29.compareTo(dateTime34) == 0) == dateTime29.equals(dateTime34));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test451");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property41 = localTime40.hourOfDay();
        org.joda.time.LocalTime localTime42 = property41.withMinimumValue();
        int int43 = localTime42.getHourOfDay();
        long long45 = chronology35.set((org.joda.time.ReadablePartial) localTime42, 364740218880L);
        org.joda.time.DateTimeField dateTimeField46 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology35.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = chronology35.year();
        org.joda.time.DateTime dateTime50 = dateTime5.withChronology(chronology35);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.plus(readableDuration54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.withDurationAdded(readableDuration56, (int) (byte) 1);
        org.joda.time.DateTime dateTime60 = dateTime58.withDayOfYear((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime.Property property62 = dateTime60.property(dateTimeFieldType61);
        int int63 = dateTime50.get(dateTimeFieldType61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(100L, chronology65);
        org.joda.time.DateTime dateTime68 = dateTime66.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        long long74 = chronology69.add(readablePeriod71, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField75 = chronology69.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(chronology69);
        org.joda.time.DurationField durationField77 = chronology69.minutes();
        org.joda.time.DateTime dateTime78 = dateTime50.toDateTime(chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime50", (dateTime2.compareTo(dateTime50) == 0) == dateTime2.equals(dateTime50));
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test452");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(11);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 8);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        long long44 = chronology38.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime45 = dateTime18.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology38.getZone();
        org.joda.time.DateTime dateTime49 = localTime14.toDateTimeToday(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime50.minusYears(361);
        org.joda.time.LocalTime localTime53 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime50.era();
        org.joda.time.DateTime dateTime55 = property54.roundFloorCopy();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withZoneRetainFields(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime62.plus((long) 'a');
        org.joda.time.DateTime dateTime68 = dateTime62.plusWeeks(11);
        org.joda.time.DateTime dateTime70 = dateTime68.withMillis((long) 8);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property74 = localTime73.hourOfDay();
        org.joda.time.LocalTime localTime76 = localTime73.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology77 = localTime76.getChronology();
        org.joda.time.DateTime dateTime78 = dateTime70.toDateTime(chronology77);
        org.joda.time.DateTimeField dateTimeField79 = chronology77.clockhourOfDay();
        long long83 = chronology77.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime84 = dateTime57.withChronology(chronology77);
        org.joda.time.DateTimeField dateTimeField85 = chronology77.year();
        org.joda.time.DateTimeField dateTimeField86 = chronology77.yearOfEra();
        org.joda.time.DurationField durationField87 = chronology77.weeks();
        org.joda.time.DurationField durationField88 = chronology77.days();
        org.joda.time.DateTimeField dateTimeField89 = chronology77.millisOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology77.dayOfYear();
        org.joda.time.DurationField durationField91 = chronology77.halfdays();
        org.joda.time.DateTimeField dateTimeField92 = chronology77.secondOfDay();
        org.joda.time.DurationField durationField93 = chronology77.millis();
        org.joda.time.DurationField durationField94 = chronology77.days();
        org.joda.time.DurationField durationField95 = chronology77.years();
        org.joda.time.DateTime dateTime96 = dateTime55.toDateTime(chronology77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime21", (dateTime18.compareTo(dateTime21) == 0) == dateTime18.equals(dateTime21));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test453");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.millisOfSecond();
        long long31 = dateTimeField28.getDifferenceAsLong((long) 20, 280490303488L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test454");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readableDuration14);
        int int16 = dateTime11.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.minus(readablePeriod17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((java.lang.Object) dateTime11);
        org.joda.time.DateTime dateTime20 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime11.plusYears(0);
        org.joda.time.DateTime dateTime24 = dateTime11.minusMinutes(36000197);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfMonth(23);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.dayOfMonth();
        boolean boolean33 = dateTime11.equals((java.lang.Object) localDateTime29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant19", (dateTime11.compareTo(instant19) == 0) == dateTime11.equals(instant19));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test455");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime13.plus((long) 'a');
        org.joda.time.DateTime dateTime19 = dateTime13.plusWeeks(11);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis((long) 8);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime27 = localTime24.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime21.toDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        long long34 = chronology28.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime8.withChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.year();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.yearOfEra();
        org.joda.time.DurationField durationField38 = chronology28.weeks();
        org.joda.time.DurationField durationField39 = chronology28.days();
        org.joda.time.DateTime dateTime40 = dateTime6.toDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField41 = chronology28.weekyear();
        org.joda.time.DurationField durationField42 = dateTimeField41.getRangeDurationField();
        int int44 = dateTimeField41.getMaximumValue((-13368L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime11", (dateTime8.compareTo(dateTime11) == 0) == dateTime8.equals(dateTime11));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test456");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.yearOfEra();
        org.joda.time.DurationField durationField31 = chronology21.weeks();
        org.joda.time.DurationField durationField32 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology21.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test457");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readableDuration37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withDurationAdded(readableDuration39, (int) (byte) 1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime41.toMutableDateTime(chronology42);
        boolean boolean44 = dateTime34.equals((java.lang.Object) dateTime41);
        org.joda.time.DateTime dateTime46 = dateTime41.plusDays(24);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        org.joda.time.DateTime.Property property52 = dateTime49.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getRangeDurationType();
        org.joda.time.DateTime dateTime56 = dateTime49.withField(dateTimeFieldType53, 21);
        org.joda.time.DateTime.Property property57 = dateTime46.property(dateTimeFieldType53);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(100L, chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withZoneRetainFields(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime62.plus((long) 'a');
        org.joda.time.DateTime dateTime68 = dateTime62.plusWeeks(11);
        org.joda.time.DateTime dateTime70 = dateTime68.withMillis((long) 8);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property74 = localTime73.hourOfDay();
        org.joda.time.LocalTime localTime76 = localTime73.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology77 = localTime76.getChronology();
        org.joda.time.DateTime dateTime78 = dateTime70.toDateTime(chronology77);
        org.joda.time.DurationField durationField79 = chronology77.eras();
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property83 = localTime82.hourOfDay();
        org.joda.time.LocalTime localTime84 = property83.withMinimumValue();
        int int85 = localTime84.getHourOfDay();
        long long87 = chronology77.set((org.joda.time.ReadablePartial) localTime84, 364740218880L);
        org.joda.time.DateTimeField dateTimeField88 = chronology77.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField89 = chronology77.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology77.yearOfEra();
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType53.getField(chronology77);
        org.joda.time.DateTimeField dateTimeField92 = chronology77.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test458");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime3.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime20 = localTime16.toDateTimeToday(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        int int23 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime13.toMutableDateTime(dateTimeZone19);
        int int26 = dateTimeZone19.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(63686358157209L, dateTimeZone19);
        java.lang.String str28 = dateTimeZone19.toString();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime32 = localTime29.withPeriodAdded(readablePeriod30, 0);
        int int33 = localTime32.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime24", (dateTime13.compareTo(mutableDateTime24) == 0) == dateTime13.equals(mutableDateTime24));
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test459");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DurationField durationField30 = chronology21.millis();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology21.add(readablePeriod31, 142167380015171093L, (-180000));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test460");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.yearOfEra();
        org.joda.time.DurationField durationField29 = chronology19.minutes();
        org.joda.time.DurationField durationField30 = chronology19.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test461");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.DateTimeZone dateTimeZone2 = dateTime1.getZone();
        java.util.Locale locale6 = new java.util.Locale("4 janv. 1970 09:11:19", "FR", "ISOChronology[UTC]");
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Calendar calendar8 = dateTime1.toCalendar(locale6);
        int int9 = dateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology10 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        boolean boolean25 = localTime13.equals((java.lang.Object) dateTime24);
        org.joda.time.LocalTime localTime27 = localTime13.withMinuteOfHour(11);
        org.joda.time.LocalTime.Property property28 = localTime27.hourOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        boolean boolean35 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime38 = dateTime31.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property39 = dateTime31.year();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean47 = dateTime45.isSupported(dateTimeFieldType46);
        org.joda.time.DateTime dateTime49 = dateTime45.minus(10L);
        int int50 = property39.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeField dateTimeField51 = property39.getField();
        org.joda.time.DateTimeField dateTimeField52 = property39.getField();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone54);
        org.joda.time.LocalDate localDate57 = localDate55.plusDays(3);
        int int58 = localDate57.getYear();
        org.joda.time.LocalDate localDate60 = localDate57.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (byte) 100);
        java.util.Date date63 = localDate62.toDate();
        org.joda.time.LocalDate.Property property64 = localDate62.yearOfCentury();
        org.joda.time.DurationField durationField65 = property64.getDurationField();
        org.joda.time.DateTimeField dateTimeField66 = property64.getField();
        int int67 = property64.getMaximumValue();
        org.joda.time.LocalDate localDate68 = property64.withMinimumValue();
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property71 = localDate70.weekyear();
        org.joda.time.LocalDate localDate73 = property71.setCopy("100");
        org.joda.time.LocalDate localDate75 = localDate73.withDayOfYear(10);
        org.joda.time.LocalDate.Property property76 = localDate75.dayOfMonth();
        org.joda.time.LocalDate localDate77 = property76.roundHalfFloorCopy();
        int[] intArray78 = localDate77.getValues();
        int[] intArray80 = dateTimeField52.add((org.joda.time.ReadablePartial) localDate68, 0, intArray78, 82980000);
        int int81 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localTime27, intArray78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime16", (dateTime1.compareTo(dateTime16) == 0) == dateTime1.equals(dateTime16));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test462");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.Interval interval5 = localDate1.toInterval();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        org.joda.time.LocalDate localDate7 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = property6.roundFloorCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime13.plus((long) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime18.withZone(dateTimeZone21);
        java.lang.String str24 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime25 = localDate8.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 20, dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour(24);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        int int30 = localDate29.getCenturyOfEra();
        org.joda.time.LocalDate localDate32 = localDate29.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate32.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.DateTime dateTime39 = dateTime26.withZoneRetainFields(dateTimeZone38);
        java.util.Date date40 = dateTime26.toDate();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(1645455742);
        int int44 = dateTimeZone42.getOffsetFromLocal(63686358256163L);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) dateTime26, dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime23", (dateTime18.compareTo(dateTime23) == 0) == dateTime18.equals(dateTime23));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test463");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        int int57 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime47.toMutableDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime34.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100L, chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(100L, chronology64);
        boolean boolean66 = dateTime62.isAfter((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime62.getDayOfYear();
        org.joda.time.DateTime dateTime69 = dateTime62.plusYears((int) (short) 0);
        long long70 = dateTime62.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int72 = dateTime62.get(dateTimeFieldType71);
        int int73 = dateTime34.get(dateTimeFieldType71);
        org.joda.time.Chronology chronology74 = dateTime34.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.weeks();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.dayOfMonth();
        int int79 = dateTimeField78.getMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test464");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        int int14 = localDate13.getCenturyOfEra();
        org.joda.time.LocalDate localDate16 = localDate13.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate18 = localDate16.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate20 = localDate16.minusWeeks(100);
        org.joda.time.LocalDate.Property property21 = localDate16.dayOfMonth();
        org.joda.time.LocalDate localDate22 = property21.roundHalfFloorCopy();
        int int23 = property12.compareTo((org.joda.time.ReadablePartial) localDate22);
        int int24 = localDate22.getDayOfWeek();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        int int27 = localDate26.getCenturyOfEra();
        org.joda.time.LocalDate localDate29 = localDate26.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate31 = localDate29.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone32);
        long long37 = dateTimeZone32.adjustOffset((long) 22, false);
        java.lang.String str39 = dateTimeZone32.getName((long) (short) 100);
        org.joda.time.DateTime dateTime40 = localDate22.toDateTime(localTime25, dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate42 = localDate22.minus(readablePeriod41);
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider46);
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleKeys();
        java.lang.String str53 = locale51.getVariant();
        java.lang.String str54 = locale51.getISO3Language();
        java.util.Locale.setDefault(category48, locale51);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(100L, chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(100L, chronology60);
        boolean boolean62 = dateTime58.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = dateTime61.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean67 = dateTimeZone65.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = dateTime61.toDateTime(dateTimeZone65);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.lang.String str72 = locale71.getISO3Country();
        java.lang.String str73 = dateTimeZone65.getShortName((long) 15, locale71);
        java.util.Locale.setDefault(category48, locale71);
        java.util.Locale locale75 = java.util.Locale.getDefault(category48);
        java.util.Locale locale79 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.util.Locale.setDefault(category48, locale79);
        java.lang.String str83 = nameProvider46.getShortName(locale79, "21 Feb 2022 15:03:04 GMT", "java.io.IOException: 10:43:00.000");
        java.lang.String str84 = dateTimeField44.getAsText(280487546880L, locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime69", (dateTime2.compareTo(dateTime69) == 0) == dateTime2.equals(dateTime69));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test465");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.months();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTime29.toString("4", locale31);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale31.getDisplayCountry(locale33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTime36.toString("4", locale38);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale38.getDisplayCountry(locale40);
        java.lang.String str42 = locale31.getDisplayCountry(locale38);
        int int43 = dateTimeField27.getMaximumTextLength(locale38);
        java.lang.String str44 = locale38.getVariant();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test466");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(299085972000L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        java.lang.Object obj3 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        boolean boolean10 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime6.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime6.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime16 = dateTime6.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime23 = localTime19.toDateTimeToday(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        int int26 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime16.toMutableDateTime(dateTimeZone22);
        org.joda.time.Instant instant28 = dateTime16.toInstant();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.plus(readableDuration29);
        org.joda.time.Chronology chronology31 = instant28.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        boolean boolean38 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime34.getDayOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.withMillisOfSecond((int) (short) 0);
        boolean boolean45 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime47 = dateTime42.withDayOfMonth(25);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(68513845);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTime51.toString("4", locale53);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale53.getDisplayCountry(locale55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTime58.toString("4", locale60);
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = locale60.getDisplayCountry(locale62);
        java.lang.String str64 = locale53.getDisplayCountry(locale60);
        java.lang.String str65 = locale53.getDisplayVariant();
        java.util.Locale locale66 = java.util.Locale.TAIWAN;
        java.lang.String str67 = locale53.getDisplayLanguage(locale66);
        java.util.Calendar calendar68 = dateTime47.toCalendar(locale53);
        boolean boolean69 = instant28.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology70 = instant28.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(obj3, chronology70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime1, chronology70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime27", (dateTime16.compareTo(mutableDateTime27) == 0) == dateTime16.equals(mutableDateTime27));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        java.lang.String str33 = dateTimeZone13.getID();
        int int35 = dateTimeZone13.getStandardOffset((long) 1645455801);
        java.util.TimeZone timeZone36 = dateTimeZone13.toTimeZone();
        boolean boolean37 = timeZone36.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime32", (dateTime2.compareTo(dateTime32) == 0) == dateTime2.equals(dateTime32));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test468");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime13.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.clockhourOfDay();
        org.joda.time.Chronology chronology38 = chronology33.withUTC();
        org.joda.time.Chronology chronology39 = chronology33.withUTC();
        org.joda.time.DurationField durationField40 = chronology39.minutes();
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType0.getField(chronology39);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType0.getDurationType();
        java.lang.String str44 = durationFieldType43.getName();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone46);
        org.joda.time.LocalDate localDate49 = localDate47.plusDays(3);
        org.joda.time.LocalDate localDate51 = localDate49.withCenturyOfEra(4);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(100L, chronology53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(100L, chronology56);
        boolean boolean58 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime54.getDayOfYear();
        org.joda.time.DateTime dateTime62 = dateTime54.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime64 = dateTime54.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int66 = dateTime64.get(dateTimeFieldType65);
        org.joda.time.DateTime.Property property67 = dateTime64.dayOfWeek();
        org.joda.time.DurationField durationField68 = property67.getDurationField();
        long long69 = property67.remainder();
        org.joda.time.DateTime dateTime70 = property67.roundFloorCopy();
        org.joda.time.DateTime dateTime71 = property67.withMaximumValue();
        org.joda.time.DateTime dateTime72 = localDate49.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone74);
        org.joda.time.LocalDate localDate77 = localDate75.plusDays(3);
        int int78 = localDate77.getYear();
        org.joda.time.LocalDate localDate80 = localDate77.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate82 = localDate80.minusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology83 = localDate82.getChronology();
        org.joda.time.Chronology chronology84 = localDate82.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.monthOfYear();
        org.joda.time.DateTime dateTime86 = dateTime71.toDateTime(chronology84);
        org.joda.time.DateTimeField dateTimeField87 = chronology84.secondOfDay();
        org.joda.time.DurationField durationField88 = durationFieldType43.getField(chronology84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime35", (dateTime13.compareTo(dateTime35) == 0) == dateTime13.equals(dateTime35));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test469");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 'a');
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTime dateTime24 = dateTime8.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekyearOfCentury();
        java.lang.String str27 = dateTimeField25.getAsText(1645163544971L);
        long long29 = dateTimeField25.roundHalfFloor(883L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime24", (dateTime8.compareTo(dateTime24) == 0) == dateTime8.equals(dateTime24));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test470");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 'a');
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTime dateTime24 = dateTime8.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime27 = property26.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime24", (dateTime8.compareTo(dateTime24) == 0) == dateTime8.equals(dateTime24));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test471");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime.Property property33 = dateTime2.centuryOfEra();
        org.joda.time.DateTime.Property property34 = dateTime2.monthOfYear();
        org.joda.time.DateTime.Property property35 = dateTime2.dayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime41.plus((long) 'a');
        org.joda.time.DateTime dateTime47 = dateTime41.plusWeeks(11);
        org.joda.time.DateTime dateTime49 = dateTime47.withMillis((long) 8);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property53 = localTime52.hourOfDay();
        org.joda.time.LocalTime localTime55 = localTime52.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology56 = localTime55.getChronology();
        org.joda.time.DateTime dateTime57 = dateTime49.toDateTime(chronology56);
        org.joda.time.DurationField durationField58 = chronology56.halfdays();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.clockhourOfDay();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property63 = localTime62.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime66 = localTime62.toDateTimeToday(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        int int69 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = dateTimeZone65.isStandardOffset(0L);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.Chronology chronology73 = chronology56.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime74 = dateTime36.toDateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField75 = chronology56.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField76 = chronology56.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology56.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime32", (dateTime2.compareTo(dateTime32) == 0) == dateTime2.equals(dateTime32));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime2.getZone();
        org.joda.time.DateTime dateTime9 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime2.yearOfEra();
        java.lang.String str11 = dateTime2.toString();
        org.joda.time.Instant instant12 = dateTime2.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime2.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant12", (dateTime2.compareTo(instant12) == 0) == dateTime2.equals(instant12));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test473");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.halfdayOfDay();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.lang.String str43 = locale40.getDisplayCountry(locale42);
        java.lang.String str44 = dateTimeField38.getAsShortText((long) 37, locale42);
        java.lang.String str45 = locale42.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test474");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readableDuration14);
        int int16 = dateTime11.getHourOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime21.plus((long) 'a');
        org.joda.time.DateTime dateTime27 = dateTime21.plusWeeks(11);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 8);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property33 = localTime32.hourOfDay();
        org.joda.time.LocalTime localTime35 = localTime32.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime29.toDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime11.withChronology(chronology36);
        java.lang.String str40 = chronology36.toString();
        org.joda.time.DurationField durationField41 = chronology36.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime39", (dateTime11.compareTo(dateTime39) == 0) == dateTime11.equals(dateTime39));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test475");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DurationField durationField22 = chronology19.years();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.halfdayOfDay();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test476");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 1962);
        boolean boolean2 = instant1.isAfterNow();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property7 = localTime6.hourOfDay();
        org.joda.time.LocalTime localTime9 = localTime6.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        boolean boolean12 = dateTimeField11.isLenient();
        int int14 = dateTimeField11.getMinimumValue((long) 7);
        boolean boolean15 = dateTimeField11.isLenient();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        boolean boolean22 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime18.getDayOfYear();
        org.joda.time.DateTime dateTime26 = dateTime18.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds(1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime33.plus((long) 'a');
        org.joda.time.DateTime dateTime39 = dateTime33.plusWeeks(11);
        org.joda.time.DateTime dateTime41 = dateTime39.withMillis((long) 8);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property45 = localTime44.hourOfDay();
        org.joda.time.LocalTime localTime47 = localTime44.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime41.toDateTime(chronology48);
        org.joda.time.DateTime dateTime50 = dateTime28.withChronology(chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.plus(readableDuration53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.withDurationAdded(readableDuration55, (int) (byte) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime57.toMutableDateTime(chronology58);
        boolean boolean60 = dateTime50.equals((java.lang.Object) dateTime57);
        org.joda.time.Chronology chronology61 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale66 = java.util.Locale.PRC;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone65, locale66);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getTimeZone("100");
        boolean boolean70 = timeZone65.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.PRC;
        java.lang.String str72 = locale71.getISO3Language();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone65, locale71);
        java.lang.String str74 = dateTimeField62.getAsShortText(1645455742, locale71);
        int int75 = dateTimeField11.getMaximumTextLength(locale71);
        int int76 = instant1.get(dateTimeField11);
        boolean boolean78 = instant1.isEqual(180000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime50", (dateTime28.compareTo(dateTime50) == 0) == dateTime28.equals(dateTime50));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMinimumValue();
        int int27 = localTime26.getHourOfDay();
        long long29 = chronology19.set((org.joda.time.ReadablePartial) localTime26, 364740218880L);
        org.joda.time.DateTimeField dateTimeField30 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology19.weekyearOfCentury();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(chronology19);
        org.joda.time.LocalTime localTime34 = localTime32.plusSeconds(423);
        org.joda.time.DateTime dateTime35 = localTime34.toDateTimeToday();
        int int36 = localTime34.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test478");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(dateTimeZone15);
        int int22 = dateTime21.getMonthOfYear();
        org.joda.time.DateTime.Property property23 = dateTime21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime21", (dateTime2.compareTo(dateTime21) == 0) == dateTime2.equals(dateTime21));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test479");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(dateTimeZone17);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone17.getShortName((long) 15, locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime21", (dateTime10.compareTo(dateTime21) == 0) == dateTime10.equals(dateTime21));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        calendar4.setTimeZone(timeZone18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18, locale26);
        boolean boolean29 = timeZone18.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar28", (calendar25.compareTo(calendar28) == 0) == calendar25.equals(calendar28));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test481");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        int int17 = property15.get();
        java.lang.String str18 = property15.getName();
        int int19 = property15.getMaximumValueOverall();
        org.joda.time.DateTime dateTime20 = property15.getDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        boolean boolean27 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusYears(3);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        int int39 = dateTime26.get(dateTimeFieldType35);
        boolean boolean40 = dateTime20.isSupported(dateTimeFieldType35);
        org.joda.time.Instant instant41 = dateTime20.toInstant();
        org.joda.time.Instant instant43 = instant41.withMillis((long) 'x');
        org.joda.time.DateTime dateTime44 = instant43.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        int int46 = mutableDateTime45.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant41", (dateTime12.compareTo(instant41) == 0) == dateTime12.equals(instant41));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test482");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        java.util.Locale locale33 = new java.util.Locale("", "hi!");
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale36.getVariant();
        java.lang.String str39 = locale33.getDisplayScript(locale36);
        java.util.Locale locale43 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.lang.String str44 = locale43.getDisplayLanguage();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = dateTime46.toString("4", locale48);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale48.getDisplayCountry(locale50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTime53.toString("4", locale55);
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = locale55.getDisplayCountry(locale57);
        java.lang.String str59 = locale48.getDisplayCountry(locale55);
        java.lang.String str60 = locale48.getDisplayVariant();
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.lang.String str62 = locale48.getDisplayLanguage(locale61);
        java.lang.String str63 = locale43.getDisplayScript(locale61);
        java.lang.String str64 = locale33.getDisplayCountry(locale43);
        java.lang.String str65 = locale33.getDisplayLanguage();
        java.lang.String str66 = locale33.getVariant();
        java.util.Locale locale67 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str68 = locale67.getDisplayVariant();
        java.lang.String str69 = locale33.getDisplayName(locale67);
        java.lang.String str70 = dateTimeField29.getAsShortText(280491147264L, locale67);
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale67.getDisplayScript(locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test483");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology37.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime34", (dateTime12.compareTo(dateTime34) == 0) == dateTime12.equals(dateTime34));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test484");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.Interval interval5 = localDate1.toInterval();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        org.joda.time.LocalDate localDate7 = property6.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = property6.roundFloorCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime13.plus((long) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime18.withZone(dateTimeZone21);
        java.lang.String str24 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime25 = localDate8.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 20, dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour(24);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        int int30 = localDate29.getCenturyOfEra();
        org.joda.time.LocalDate localDate32 = localDate29.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate34 = localDate32.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate32.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.DateTime dateTime39 = dateTime26.withZoneRetainFields(dateTimeZone38);
        long long41 = dateTimeZone38.nextTransition(299090817024L);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime23", (dateTime18.compareTo(dateTime23) == 0) == dateTime18.equals(dateTime23));
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test485");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.plusYears((int) 'u');
        org.joda.time.DateTime dateTime13 = dateTime9.plusMonths(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime23.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime28.minusYears(27);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusYears(3);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = property34.setCopy(52);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        int int39 = localDateTime38.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int41 = localDateTime38.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = dateTime30.withField(dateTimeFieldType40, (int) (short) 1);
        int int44 = dateTime13.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime47 = dateTime13.withDurationAdded(2019L, 32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        boolean boolean50 = dateTime13.isSupported(dateTimeFieldType48);
        org.joda.time.DateTime dateTime52 = dateTime13.minusMinutes((-7445));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime28", (dateTime13.compareTo(dateTime28) == 0) == dateTime13.equals(dateTime28));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test486");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime22.plus((long) 'a');
        org.joda.time.DateTime dateTime28 = dateTime22.plusWeeks(11);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 8);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime36 = localTime33.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        int int40 = dateTime17.get(dateTimeField39);
        long long42 = dateTimeField39.roundHalfEven((long) 2);
        int int43 = dateTime12.get(dateTimeField39);
        long long46 = dateTimeField39.add((long) 22, (-3599999L));
        int int47 = dateTimeField39.getMaximumValue();
        int int50 = dateTimeField39.getDifference((long) (-959), (long) 1);
        int int53 = dateTimeField39.getDifference(10121107L, (long) 54618786);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime38", (dateTime30.compareTo(dateTime38) == 0) == dateTime30.equals(dateTime38));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test487");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter22.getZone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        boolean boolean30 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime26.getDayOfYear();
        org.joda.time.DateTime dateTime34 = dateTime26.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime36 = dateTime26.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property40 = localTime39.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime43 = localTime39.toDateTimeToday(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        int int46 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime36.toMutableDateTime(dateTimeZone42);
        long long49 = dateTimeZone23.getMillisKeepLocal(dateTimeZone42, 299086086144L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and mutableDateTime47", (dateTime36.compareTo(mutableDateTime47) == 0) == dateTime36.equals(mutableDateTime47));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test488");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant24.plus(readableDuration28);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTimeISO();
        org.joda.time.Instant instant32 = instant29.minus((long) 53);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.plus(readableDuration33);
        org.joda.time.Chronology chronology35 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test489");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = dateTime5.isSupported(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = dateTime5.minus(10L);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(22);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime9.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(280491302912L, dateTimeZone21);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks(0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = chronology38.add(readablePeriod40, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField44 = chronology38.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.Chronology chronology46 = chronology38.withUTC();
        org.joda.time.DateTime dateTime47 = dateTime29.toDateTime(chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        org.joda.time.DateTime dateTime50 = dateTime47.plusMinutes(35);
        java.lang.String str51 = dateTime50.toString();
        long long52 = dateTime50.getMillis();
        java.lang.String str53 = dateTime50.toString();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = localDateTime56.isSupported(dateTimeFieldType57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.era();
        int int61 = localDateTime56.getValue((int) (byte) 0);
        int int62 = localDateTime56.getYear();
        int int63 = localDateTime56.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime56.withWeekyear((int) '#');
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = localDateTime65.getFields();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.centuryOfEra();
        boolean boolean68 = dateTime50.equals((java.lang.Object) localDateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime25", (dateTime3.compareTo(dateTime25) == 0) == dateTime3.equals(dateTime25));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test490");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.Instant instant31 = instant27.minus((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime32 = instant27.toMutableDateTimeISO();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        int int36 = dateTime35.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime(dateTimeZone37);
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        java.util.Locale locale44 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getVariant();
        java.lang.String str47 = locale41.getDisplayScript(locale44);
        java.util.Calendar calendar48 = dateTime38.toCalendar(locale41);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime53.plus((long) 'a');
        org.joda.time.DateTime dateTime59 = dateTime53.plusWeeks(11);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillis((long) 8);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property65 = localTime64.hourOfDay();
        org.joda.time.LocalTime localTime67 = localTime64.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology68 = localTime67.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime61.toDateTime(chronology68);
        org.joda.time.DurationField durationField70 = chronology68.eras();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property74 = localTime73.hourOfDay();
        org.joda.time.LocalTime localTime75 = property74.withMinimumValue();
        int int76 = localTime75.getHourOfDay();
        long long78 = chronology68.set((org.joda.time.ReadablePartial) localTime75, 364740218880L);
        org.joda.time.DateTimeField dateTimeField79 = chronology68.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = chronology68.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField81 = chronology68.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField82 = chronology68.year();
        org.joda.time.DateTime dateTime83 = dateTime38.withChronology(chronology68);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((java.lang.Object) instant27, chronology68);
        org.joda.time.DateTimeField dateTimeField85 = chronology68.halfdayOfDay();
        java.util.Locale locale89 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet90 = locale89.getUnicodeLocaleKeys();
        java.lang.String str91 = locale89.getVariant();
        java.lang.String str92 = locale89.getDisplayScript();
        java.util.Locale locale93 = locale89.stripExtensions();
        java.util.Set<java.lang.String> strSet94 = locale93.getUnicodeLocaleKeys();
        java.lang.String str95 = dateTimeField85.getAsText(582769012854736L, locale93);
        org.joda.time.DurationField durationField96 = dateTimeField85.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField70, durationField96, and durationField70", !(durationField70.compareTo(durationField96) == 0) || (Math.signum(durationField70.compareTo(durationField70)) == Math.signum(durationField96.compareTo(durationField70))));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test491");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minusDays(21);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) '#', dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int int14 = dateTimeZone10.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(3);
        boolean boolean18 = dateTimeZone10.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTime dateTime19 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(299086438400L, chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime19", (dateTime7.compareTo(dateTime19) == 0) == dateTime7.equals(dateTime19));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test492");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setDate(292278993, 2019, 2);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(32, 9, 32400000);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("+100:00");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        java.util.Calendar.Builder builder17 = builder12.setLocale(locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        java.util.Calendar.Builder builder20 = builder17.setTimeZone(timeZone19);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        java.util.Locale locale26 = new java.util.Locale("/", "100", "0422-02-21");
        java.lang.String str29 = nameProvider21.getName(locale26, "21 Feb 2022 15:01:56 GMT", "/experiment/hi!");
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone19, locale26);
        timeZone19.setRawOffset(737110);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar30", (calendar16.compareTo(calendar30) == 0) == calendar16.equals(calendar30));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test493");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime24.plus((long) 'a');
        org.joda.time.DateTime dateTime30 = dateTime24.plusWeeks(11);
        org.joda.time.DateTime dateTime32 = dateTime30.withMillis((long) 8);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property36 = localTime35.hourOfDay();
        org.joda.time.LocalTime localTime38 = localTime35.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology39 = localTime38.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime32.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.clockhourOfDay();
        long long45 = chronology39.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime46 = dateTime19.withChronology(chronology39);
        org.joda.time.DateTimeField dateTimeField47 = chronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology39.hourOfDay();
        org.joda.time.DurationField durationField49 = chronology39.months();
        org.joda.time.DurationField durationField50 = chronology39.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime22", (dateTime19.compareTo(dateTime22) == 0) == dateTime19.equals(dateTime22));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test494");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField26 = chronology19.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.hourOfHalfday();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime20", (dateTime12.compareTo(dateTime20) == 0) == dateTime12.equals(dateTime20));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test495");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        int int7 = dateTime6.getMonthOfYear();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.LocalTime localTime13 = localTime10.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime16.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime26 = dateTime16.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        boolean boolean32 = localTime10.isSupported(durationFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.millis();
        java.lang.String str34 = durationFieldType33.getName();
        org.joda.time.LocalTime localTime36 = localTime10.withFieldAdded(durationFieldType33, (int) (short) -1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        boolean boolean43 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime42);
        int int44 = dateTime39.getDayOfYear();
        org.joda.time.DateTime dateTime47 = dateTime39.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime49 = dateTime39.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property53 = localTime52.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime56 = localTime52.toDateTimeToday(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        int int59 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime49.toMutableDateTime(dateTimeZone55);
        int int62 = dateTimeZone55.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime63 = localTime36.toDateTimeToday(dateTimeZone55);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property68 = localTime67.hourOfDay();
        org.joda.time.LocalTime localTime70 = localTime67.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.hourOfHalfday();
        boolean boolean73 = dateTimeField72.isLenient();
        org.joda.time.DurationField durationField74 = dateTimeField72.getDurationField();
        java.util.Locale locale78 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int79 = dateTimeField72.getMaximumShortTextLength(locale78);
        java.lang.String str80 = dateTimeZone55.getShortName(709199999L, locale78);
        long long82 = dateTimeZone55.nextTransition((long) 32769);
        org.joda.time.DateTime dateTime83 = dateTime6.withZone(dateTimeZone55);
        int int84 = dateTime83.getWeekOfWeekyear();
        long long85 = dateTime83.getMillis();
        org.joda.time.DateTime.Property property86 = dateTime83.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and mutableDateTime60", (dateTime26.compareTo(mutableDateTime60) == 0) == dateTime26.equals(mutableDateTime60));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test496");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = chronology21.weekyears();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime4", (dateTime1.compareTo(dateTime4) == 0) == dateTime1.equals(dateTime4));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant24.withDurationAdded(readableDuration28, (int) (short) 1);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant30.withDurationAdded(readableDuration31, 24);
        org.joda.time.DateTime dateTime34 = instant30.toDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant30.plus(readableDuration35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant30.minus(readableDuration37);
        long long39 = instant30.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime23", (dateTime12.compareTo(mutableDateTime23) == 0) == dateTime12.equals(mutableDateTime23));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test498");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property3.roundHalfEvenCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime26.plus((long) 'a');
        org.joda.time.DateTime dateTime32 = dateTime26.plusWeeks(11);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillis((long) 8);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.LocalTime localTime40 = localTime37.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime21.withChronology(chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        boolean boolean50 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime46.getDayOfYear();
        org.joda.time.DateTime dateTime54 = dateTime46.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime56 = dateTime46.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property60 = localTime59.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime63 = localTime59.toDateTimeToday(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        int int66 = dateTimeZone62.getOffset((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableDateTime mutableDateTime67 = dateTime56.toMutableDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime68 = dateTime43.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(100L, chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(100L, chronology73);
        boolean boolean75 = dateTime71.isAfter((org.joda.time.ReadableInstant) dateTime74);
        int int76 = dateTime71.getDayOfYear();
        org.joda.time.DateTime dateTime78 = dateTime71.plusYears((int) (short) 0);
        long long79 = dateTime71.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int81 = dateTime71.get(dateTimeFieldType80);
        int int82 = dateTime43.get(dateTimeFieldType80);
        org.joda.time.Chronology chronology83 = dateTime43.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.weeks();
        org.joda.time.DurationField durationField85 = chronology83.centuries();
        boolean boolean86 = property3.equals((java.lang.Object) chronology83);
        org.joda.time.DateTimeField dateTimeField87 = chronology83.minuteOfHour();
        org.joda.time.DurationField durationField88 = chronology83.hours();
        org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.now(chronology83);
        org.joda.time.Chronology chronology90 = chronology83.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime43", (dateTime21.compareTo(dateTime43) == 0) == dateTime21.equals(dateTime43));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test499");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 197);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks(52);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology26);
        boolean boolean28 = dateTimeFormatter27.isPrinter();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronolgy();
        java.util.Locale locale30 = dateTimeFormatter27.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime20", (dateTime15.compareTo(dateTime20) == 0) == dateTime15.equals(dateTime20));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test500");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T15:02:18.271Z");
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(27);
        org.joda.time.DateTime dateTime5 = dateTime1.minusMillis((-18574));
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        int int9 = dateTime8.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        long long39 = chronology33.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime13.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField41 = chronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology33.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology33.getZone();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime8.toMutableDateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = dateTime1.withZoneRetainFields(dateTimeZone43);
        java.util.GregorianCalendar gregorianCalendar46 = dateTime1.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime1.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest17 {

    public static boolean debug = false;

    @Test
    public void test08501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08501");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long11 = dateTimeZone6.getMillisKeepLocal(dateTimeZone9, (long) 3);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        int int14 = timeZone12.getOffset((long) 13);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = timeZone12.getOffset(1645455913, 24, (int) (byte) 100, (int) (short) -1, 822, 42000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 1645455913");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-359999997L) + "'", long11 == (-359999997L));
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 360000000 + "'", int14 == 360000000);
    }

    @Test
    public void test08502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08502");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay(32770, (int) (byte) 10, 2022);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone11);
        boolean boolean13 = timeZone11.observesDaylightTime();
        int int14 = timeZone11.getRawOffset();
        java.util.Calendar.Builder builder15 = builder9.setTimeZone(timeZone11);
        java.util.Calendar.Builder builder16 = builder0.setTimeZone(timeZone11);
        timeZone11.setRawOffset(1645455742);
        java.lang.String str19 = timeZone11.getDisplayName();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456001061,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1645455742,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=41,MILLISECOND=61,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str19, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test08503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08503");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy(52);
        org.joda.time.DurationField durationField6 = property3.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant7 = new org.joda.time.Instant((java.lang.Object) durationField6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test08504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08504");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor((long) 4);
        org.joda.time.ReadablePartial readablePartial10 = null;
        int int11 = dateTimeField7.getMinimumValue(readablePartial10);
        long long14 = dateTimeField7.add(1645434179999L, 422);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime22.plus((long) 'a');
        org.joda.time.DateTime dateTime28 = dateTime22.plusWeeks(11);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 8);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime36 = localTime33.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        long long43 = chronology37.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime44 = dateTime17.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField46 = chronology37.weekOfWeekyear();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property50 = localTime49.hourOfDay();
        org.joda.time.LocalTime localTime51 = property50.roundFloorCopy();
        org.joda.time.LocalTime localTime52 = property50.withMinimumValue();
        org.joda.time.LocalTime localTime54 = property50.addCopy(197);
        int int55 = dateTimeField46.getMaximumValue((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTime58.toString("4", locale60);
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = locale60.getDisplayCountry(locale62);
        java.lang.String str64 = dateTimeField46.getAsText(0, locale60);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale69 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleKeys();
        java.util.Locale locale71 = java.util.Locale.PRC;
        java.lang.String str72 = locale69.getDisplayCountry(locale71);
        java.lang.String str73 = dateTimeZone67.getShortName((long) 3, locale71);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(locale71);
        java.lang.String str75 = dateTimeField46.getAsText(1519200000, locale71);
        java.lang.String str76 = dateTimeField7.getAsShortText(63686358113273L, locale71);
        org.joda.time.DurationField durationField77 = dateTimeField7.getLeapDurationField();
        long long80 = dateTimeField7.add(1645434179999L, 1100);
        long long82 = dateTimeField7.roundHalfFloor(63686358146756L);
        long long84 = dateTimeField7.roundHalfEven(17L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1646953379999L + "'", long14 == 1646953379999L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32771L + "'", long43 == 32771L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 53 + "'", int55 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "4" + "'", str61, "4");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u6cd5\u56fd" + "'", str63, "\u6cd5\u56fd");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str72, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1645456001168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=41,MILLISECOND=198,ZONE_OFFSET=30,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1519200000" + "'", str75, "1519200000");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "3" + "'", str76, "3");
        org.junit.Assert.assertNull(durationField77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1649394179999L + "'", long80 == 1649394179999L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 63686358000000L + "'", long82 == 63686358000000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test08505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime16.plus((long) 'a');
        org.joda.time.DateTime dateTime22 = dateTime16.plusWeeks(11);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime16.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime11.toMutableDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMillis(72);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test08506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08506");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readableDuration16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.lang.String str25 = locale22.getDisplayCountry(locale24);
        java.lang.String str26 = dateTimeZone20.getShortName((long) 3, locale24);
        org.joda.time.DateTime dateTime27 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime28 = dateTime12.withZoneRetainFields(dateTimeZone20);
        java.lang.String str30 = dateTimeZone20.getNameKey((long) 976);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        boolean boolean38 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime37.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean43 = dateTimeZone41.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime37.toDateTime(dateTimeZone41);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property49 = localTime48.hourOfDay();
        org.joda.time.LocalTime localTime50 = property49.roundFloorCopy();
        org.joda.time.LocalTime localTime51 = property49.withMinimumValue();
        org.joda.time.LocalTime localTime52 = property49.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime53 = property49.withMaximumValue();
        org.joda.time.LocalTime localTime54 = property49.withMaximumValue();
        boolean boolean55 = dateTime45.equals((java.lang.Object) localTime54);
        boolean boolean56 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str25, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test08507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08507");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(280484782080L);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime7.plus((long) 'a');
        org.joda.time.DateTime dateTime13 = dateTime7.plusWeeks(11);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime7.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = instant1.toDateTime(dateTimeZone14);
        int int18 = dateTime17.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 30382 + "'", int18 == 30382);
    }

    @Test
    public void test08508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08508");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime16.minus(10L);
        int int21 = property10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField22 = property10.getField();
        org.joda.time.DateTimeField dateTimeField23 = property10.getField();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        int int27 = dateTimeField23.getMaximumTextLength(locale24);
        int int29 = dateTimeField23.getMaximumValue(57600090L);
        boolean boolean31 = dateTimeField23.isLeap(3423965004L);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((java.lang.Object) 3423965004L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u6cd5\u6587\u6cd5\u56fd)" + "'", str25, "\u6cd5\u6587\u6cd5\u56fd)");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08509");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.plusYears((int) 'u');
        org.joda.time.DateTime dateTime13 = dateTime9.plusMonths(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property19 = dateTime16.minuteOfDay();
        java.util.Locale locale22 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        int int24 = property19.getMaximumTextLength(locale22);
        org.joda.time.DateTime dateTime25 = property19.roundHalfCeilingCopy();
        boolean boolean26 = dateTime9.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test08510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08510");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(4);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withWeekyear(1970);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        calendar17.clear(9);
        calendar17.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        boolean boolean30 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime26.getDayOfYear();
        org.joda.time.DateTime dateTime34 = dateTime26.withDurationAdded((long) (short) 0, 100);
        int int35 = dateTime34.getWeekOfWeekyear();
        boolean boolean36 = calendar17.before((java.lang.Object) dateTime34);
        java.lang.String str37 = dateTime34.toString();
        java.util.Date date38 = dateTime34.toDate();
        boolean boolean39 = localDateTime12.equals((java.lang.Object) dateTime34);
        long long40 = dateTime34.getMillis();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusYears(3);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property46 = localDateTime41.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.DateTime dateTime53 = localDateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        org.joda.time.DateTime dateTime55 = dateTime34.withZoneRetainFields(dateTimeZone54);
        int int56 = dateTime34.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.100Z" + "'", str37, "1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
    }

    @Test
    public void test08511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08511");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundHalfEvenCopy();
        int int7 = localTime6.getMillisOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 'a');
        org.joda.time.DateTime dateTime18 = dateTime12.plusWeeks(11);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 8);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property24 = localTime23.hourOfDay();
        org.joda.time.LocalTime localTime26 = localTime23.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime20.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        long long33 = chronology27.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField34 = chronology27.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.hourOfDay();
        long long37 = dateTimeField35.roundCeiling((long) 9);
        int int38 = dateTimeField35.getMinimumValue();
        int int39 = dateTimeField35.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField35.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = localTime6.withField(dateTimeFieldType40, 311);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 311 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32400000 + "'", int7 == 32400000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32771L + "'", long33 == 32771L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3600000L + "'", long37 == 3600000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
    }

    @Test
    public void test08512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08512");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        boolean boolean11 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime7.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime7.plusYears((int) (short) 0);
        long long15 = dateTime7.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int17 = dateTime7.get(dateTimeFieldType16);
        org.joda.time.LocalTime.Property property18 = localTime2.property(dateTimeFieldType16);
        org.joda.time.LocalTime localTime20 = localTime2.plusMinutes(361);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfDay();
        org.joda.time.LocalTime localTime22 = property21.withMaximumValue();
        org.joda.time.LocalTime localTime24 = localTime22.minusSeconds(54157);
        org.joda.time.DateTime dateTime25 = localTime22.toDateTimeToday();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test08513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08513");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        int int17 = timeZone16.getRawOffset();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        int int19 = timeZone18.getRawOffset();
        boolean boolean20 = timeZone16.hasSameRules(timeZone18);
        calendar15.setTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = dateTime23.toString("4", locale25);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone18, locale27);
        java.lang.String str30 = locale27.getDisplayName();
        java.util.Locale.setDefault(locale27);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 30 + "'", int17 == 30);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 30 + "'", int19 == 30);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "4" + "'", str26, "4");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u6cd5\u56fd" + "'", str28, "\u6cd5\u56fd");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645456001427,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=41,MILLISECOND=457,ZONE_OFFSET=30,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u6587" + "'", str30, "\u4e2d\u6587");
    }

    @Test
    public void test08514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08514");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1, locale2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("100");
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1, locale7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("100");
        boolean boolean12 = timeZone1.hasSameRules(timeZone11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone1);
        boolean boolean14 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456001442,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=41,MILLISECOND=442,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456001442,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=41,MILLISECOND=442,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645456001442,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=41,MILLISECOND=442,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08515");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("-959");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test08516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08516");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test08517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08517");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-2), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08518");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
        int int5 = localDateTime2.getCenturyOfEra();
        int int6 = localDateTime2.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusMonths(32772);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDate(40, 0, 73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08519");
        java.io.File file2 = null;
        java.io.File file4 = new java.io.File(file2, "hi!");
        long long5 = file4.length();
        boolean boolean6 = file4.mkdirs();
        boolean boolean7 = file4.exists();
        boolean boolean8 = file4.exists();
        java.io.File file9 = file4.getCanonicalFile();
        java.io.File file10 = java.io.File.createTempFile("2022-02-21T15:03:18.611Z", "32", file9);
        boolean boolean11 = file9.isFile();
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 57344L + "'", long5 == 57344L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/experiment/hi!");
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/experiment/hi!");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment/hi!/2022-02-21T15:03:18.611Z904753356905195985432");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08520");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test08521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08521");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfHour();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) 63686358149128L, chronology13);
        org.joda.time.LocalDate localDate18 = localDate16.minusYears((int) '/');
        org.joda.time.LocalDate localDate20 = localDate16.plusMonths(26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate16.withEra(87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 87 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test08522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08522");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        int int9 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = dateTimeZone5.isStandardOffset(0L);
        java.util.TimeZone timeZone12 = dateTimeZone5.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = locale17.getDisplayCountry(locale19);
        java.lang.String str21 = dateTimeZone15.getShortName((long) 3, locale19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone12, locale19);
        java.lang.String str23 = locale19.getDisplayName();
        java.util.Set<java.lang.String> strSet24 = locale19.getUnicodeLocaleAttributes();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property28 = localTime27.hourOfDay();
        org.joda.time.LocalTime localTime29 = property28.roundFloorCopy();
        org.joda.time.LocalTime localTime30 = property28.withMinimumValue();
        org.joda.time.LocalTime localTime31 = property28.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime32 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime33 = property28.roundHalfCeilingCopy();
        java.util.Locale locale34 = java.util.Locale.UK;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime41 = localTime37.toDateTimeToday(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        int int44 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = dateTimeZone40.isStandardOffset(0L);
        java.util.TimeZone timeZone47 = dateTimeZone40.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale52 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        java.lang.String str56 = nameProvider49.getName(locale52, "hi!", "1970-01-01");
        java.lang.String str57 = dateTimeZone40.getShortName(10L, locale52);
        java.lang.String str58 = locale34.getDisplayVariant(locale52);
        java.lang.String str59 = property28.getAsShortText(locale34);
        java.lang.String str60 = locale34.toLanguageTag();
        java.lang.String str61 = locale19.getDisplayLanguage(locale34);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str20, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645456001718,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=41,MILLISECOND=718,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str23, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(nameProvider49);
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9" + "'", str59, "9");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "en-GB" + "'", str60, "en-GB");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Chinese" + "'", str61, "Chinese");
    }

    @Test
    public void test08523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08523");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime9 = dateTime6.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean12 = dateTimeZone10.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime6.toDateTime(dateTimeZone10);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeZone10.getShortName((long) 15, locale16);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(21L, dateTimeZone10);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        boolean boolean23 = dateTimeFormatter22.isPrinter();
        boolean boolean24 = dateTimeFormatter22.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter22.withPivotYear(32770);
        java.util.Locale locale27 = dateTimeFormatter26.getLocale();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter26.withZone(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight32 = localDate19.toDateMidnight(dateTimeZone28);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FRA" + "'", str17, "FRA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test08524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08524");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime8.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property16 = dateTime8.year();
        org.joda.time.DateTime dateTime18 = dateTime8.withMonthOfYear(5);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime8.plus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime8.plusDays((int) (short) 0);
        int int23 = property4.getDifference((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime8.plus(readablePeriod24);
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.lang.String str31 = locale26.getDisplayVariant(locale30);
        java.util.Locale locale32 = locale26.stripExtensions();
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale26.getDisplayName(locale39);
        java.util.Locale locale44 = new java.util.Locale("2022-02-25T19:02:14.075", "1 janv. 1970 00:00:00");
        java.lang.String str45 = locale39.getDisplayScript(locale44);
        java.util.Locale locale46 = locale39.stripExtensions();
        java.util.Calendar calendar47 = dateTime8.toCalendar(locale46);
        java.lang.String str48 = calendar47.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = calendar47.isSet(2022);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-18574) + "'", int23 == (-18574));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str29, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese (Taiwan)" + "'", str41, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals(locale44.toString(), "2022-02-25t19:02:14.075_1 JANV. 1970 00:00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!");
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "gregory" + "'", str48, "gregory");
    }

    @Test
    public void test08525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08525");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, 10, 21);
        org.joda.time.LocalTime localTime5 = localTime3.minusSeconds(102);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.setRegion("100");
        java.util.Locale locale10 = builder6.build();
        java.util.Locale.Builder builder11 = builder6.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = localTime3.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder16 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder14.setScript("");
        java.util.Locale.Builder builder19 = builder14.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setExtension('u', "Sat Oct 29 08:01:00 GMT 193842");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: Sat Oct 29 08:01:00 GMT 193842 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_100");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08526");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, 10, 21);
        org.joda.time.LocalTime localTime5 = localTime3.minusSeconds(102);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.setRegion("100");
        java.util.Locale locale10 = builder6.build();
        java.util.Locale.Builder builder11 = builder6.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = localTime3.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder16 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.addUnicodeLocaleAttribute("Feb 21, 2022 3:05:02 PM");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Feb 21, 2022 3:05:02 PM [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_100");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08527");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        int int8 = localDateTime7.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str10 = dateTimeFieldType9.getName();
        boolean boolean11 = localDateTime7.isSupported(dateTimeFieldType9);
        java.lang.String str12 = dateTimeFieldType9.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfSecond" + "'", str10, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "millisOfSecond" + "'", str12, "millisOfSecond");
    }

    @Test
    public void test08528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08528");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths(0);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfDay();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 14, chronology5);
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test08529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08529");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withFields((org.joda.time.ReadablePartial) localDate4);
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08530");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        int int5 = localTime4.getHourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime4.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTime9.toString("4", locale11);
        java.lang.String str13 = localTime4.toString("197", locale11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime4.minus(readablePeriod14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime4.withHourOfDay((-7445));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -7445 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "4" + "'", str12, "4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "197" + "'", str13, "197");
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test08531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08531");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        int int3 = localDateTime2.getYearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        boolean boolean10 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime6.getDayOfYear();
        org.joda.time.DateTime dateTime13 = dateTime6.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime17 = dateTime15.plus(0L);
        org.joda.time.DateTime dateTime18 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Instant instant19 = dateTime15.toInstant();
        org.joda.time.DateTime.Property property20 = dateTime15.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime15.withTime(54363, 54395, 81120100, 3600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54363 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test08532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08532");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology19.getZone();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test08533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08533");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.add(0, 8);
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        boolean boolean22 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime18.getDayOfYear();
        org.joda.time.DateTime dateTime25 = dateTime18.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property26 = dateTime18.year();
        org.joda.time.DateTime dateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 1);
        java.util.Date date30 = dateTime29.toDate();
        boolean boolean31 = date14.before(date30);
        date30.setYear(292278993);
        calendar4.setTime(date30);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((java.lang.Object) date30);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-9223312098349552616,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=292267155,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=94,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=7,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 21 15:06:41 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Apr 04 09:34:07 GMT+00:00 292267155");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08534");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        java.util.Locale locale10 = null;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        calendar11.clear(9);
        int int15 = calendar11.getGreatestMinimum((int) (short) 0);
        calendar11.setLenient(false);
        calendar11.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("hi!");
        calendar11.setTimeZone(timeZone25);
        int int27 = timeZone25.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.Calendar.Builder builder29 = builder6.setTimeZone(timeZone25);
        java.util.Calendar.Builder builder34 = builder6.setTimeOfDay(30, 1645455723, (int) (byte) 0, 361);
        java.util.Calendar.Builder builder38 = builder34.setWeekDate((int) '#', 2019, (int) (byte) 0);
        java.util.Calendar.Builder builder42 = builder38.setDate((int) (short) 0, 24, 54122803);
        java.util.Calendar.Builder builder46 = builder42.setDate(361, 1, 1645455913);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100L, chronology48);
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = dateTime49.toCalendar(locale50);
        calendar51.clear(9);
        int int55 = calendar51.getGreatestMinimum((int) (short) 0);
        calendar51.setLenient(false);
        calendar51.set(10, 8, 5, 20, 100);
        calendar51.clear();
        int int66 = calendar51.getMinimum(0);
        java.util.Date date67 = calendar51.getTime();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder68 = builder46.setInstant(date67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=8,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=20,MINUTE=100,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
    }

    @Test
    public void test08535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08535");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfSecond(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = localTime6.toString(dateTimeFormatter7);
        java.lang.String str9 = localTime6.toString();
        org.joda.time.LocalTime.Property property10 = localTime6.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime6.plus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) '#', dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone15);
        int int18 = localDateTime17.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        boolean boolean29 = localDateTime17.equals((java.lang.Object) dateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime17.dayOfMonth();
        int int31 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime17.plusWeeks(2019);
        int int34 = localDateTime17.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property35 = localDateTime17.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime17.plusSeconds(1645455817);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = localTime6.isEqual((org.joda.time.ReadablePartial) localDateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "09:03:00.003" + "'", str8, "09:03:00.003");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "09:03:00.003" + "'", str9, "09:03:00.003");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test08536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08536");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay(32770, (int) (byte) 10, 2022);
        java.util.Calendar.Builder builder12 = builder0.setTimeOfDay(122, (int) (byte) 0, 6);
        java.util.Calendar.Builder builder14 = builder0.setLenient(true);
        java.util.Calendar.Builder builder18 = builder0.setTimeOfDay(32, 1645455790, 277);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder20 = builder18.setInstant((long) 32520000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08537");
        long long1 = java.util.Date.parse("May 31, 988376 9:05:23 PM");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 31127979877522970L + "'", long1 == 31127979877522970L);
    }

    @Test
    public void test08538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08538");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        java.lang.String str5 = localTime4.toString();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(1645455797000L);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime9 = localTime4.withFields((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDateTime12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra(10);
        int int19 = localDateTime16.getEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withMillisOfSecond(100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusYears((int) ' ');
        int int29 = localDateTime26.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withHourOfDay(15);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.millisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        boolean boolean39 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusYears(3);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean48 = localDateTime46.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType47.getField(chronology49);
        int int51 = dateTime38.get(dateTimeFieldType47);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType47.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime26.withFieldAdded(durationFieldType52, 16);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plus(readablePeriod57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.weekyear();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100L, chronology61);
        int int63 = dateTime62.getMillisOfDay();
        org.joda.time.DateTime dateTime65 = dateTime62.plusHours(360000000);
        org.joda.time.DateTime dateTime66 = dateTime65.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime66.withZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTime dateTime71 = dateTime69.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime72 = dateTime71.toLocalDateTime();
        int int73 = dateTime71.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withMillisOfDay(10);
        int int77 = localDateTime74.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plus(readableDuration78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withYear(422);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.plusMinutes(15);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.era();
        int int86 = localDateTime83.get(dateTimeFieldType85);
        int int87 = dateTime71.get(dateTimeFieldType85);
        int int88 = localDateTime58.get(dateTimeFieldType85);
        int int89 = localDateTime23.get(dateTimeFieldType85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime91 = localTime9.withField(dateTimeFieldType85, 54362396);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "09:02:59.903" + "'", str5, "09:02:59.903");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 222 + "'", int73 == 222);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test08539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08539");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        boolean boolean8 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime4.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime14 = dateTime4.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property17.getFieldType();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        org.joda.time.LocalDate localDate21 = localDate0.withFieldAdded(durationFieldType19, 13);
        org.joda.time.LocalDate localDate23 = localDate21.withWeekyear(361);
        int int24 = localDate21.getDayOfYear();
        int int25 = localDate21.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 65 + "'", int24 == 65);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
    }

    @Test
    public void test08540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08540");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekOfWeekyear(5);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate11 = localDate4.minusWeeks(9);
        org.joda.time.LocalDate.Property property12 = localDate4.year();
        org.joda.time.LocalDate localDate13 = property12.withMaximumValue();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime16.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime16.year();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property24.addToCopy(3);
        org.joda.time.DateTime dateTime29 = dateTime27.withYear(12);
        boolean boolean31 = dateTime27.isBefore(364694580000L);
        org.joda.time.DateTime dateTime33 = dateTime27.plus((long) (byte) 0);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now();
        int int35 = localDate34.getCenturyOfEra();
        org.joda.time.LocalDate localDate37 = localDate34.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone40);
        long long45 = dateTimeZone40.adjustOffset((long) 22, false);
        java.lang.String str47 = dateTimeZone40.getNameKey(100L);
        org.joda.time.DateTime dateTime48 = dateTime33.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime49 = localDate13.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate51 = localDate13.withYear(54122803);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 22L + "'", long45 == 22L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test08541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08541");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("17 Oct 2111 15:03:49 GMT", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08542");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.hourOfDay();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(chronology37);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = chronology37.getDateTimeMillis((long) 74, 1645455990, 1645455742, 100, (-2));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645455990 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test08543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08543");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        int int2 = localDateTime0.getDayOfYear();
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withFieldAdded(durationFieldType7, 702);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withFieldAdded(durationFieldType7, 42000);
        int int12 = localDateTime11.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test08544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08544");
        java.io.File file2 = java.io.File.createTempFile("chinois (Chine)", "2022-02-21T15:05:44.092Z");
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/chinois (Chine)32408223934401344732022-02-21T15:05:44.092Z");
    }

    @Test
    public void test08545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08545");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = dateTimeZone8.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withZone(dateTimeZone8);
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        boolean boolean13 = dateTimeFormatter11.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withZoneUTC();
        java.util.Locale locale15 = dateTimeFormatter11.getLocale();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, (int) ' ');
        java.lang.String str20 = dateTimeZone18.getName((long) 32580010);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter11.withZone(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = dateTimeFormatter11.parseLocalTime("21 Oct 2111 15:04:02 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+70:32" + "'", str20, "+70:32");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test08546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08546");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime3.withSecondOfMinute((int) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds(27);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withPeriodAdded(readablePeriod9, 69);
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears(54329);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08547");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField40 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology32.yearOfCentury();
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfDay();
        java.util.Locale locale54 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        int int56 = property51.getMaximumTextLength(locale54);
        java.lang.String str57 = locale45.getDisplayVariant(locale54);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = dateTimeField42.set((-253918561L), "\u30d5\u30e9\u30f3\u30b9", locale54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"????\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test08548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08548");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(dateTimeZone17);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone17.getShortName((long) 15, locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.util.Locale.setDefault(category0, locale31);
        java.lang.String str33 = locale31.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = locale31.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for dayofweek");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale31.toString(), "dayofweek_1970-01-01_1970");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
    }

    @Test
    public void test08549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08549");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.util.Locale locale6 = locale0.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.lang.String str11 = locale9.getVariant();
        java.lang.String str12 = locale9.getDisplayScript();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = locale0.getDisplayName(locale13);
        java.util.Locale locale18 = new java.util.Locale("2022-02-25T19:02:14.075", "1 janv. 1970 00:00:00");
        java.lang.String str19 = locale13.getDisplayScript(locale18);
        java.lang.String str20 = locale13.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str3, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (Taiwan)" + "'", str15, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals(locale18.toString(), "2022-02-25t19:02:14.075_1 JANV. 1970 00:00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08550");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("\u7fa9\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08551");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.setTimeInMillis((long) 'a');
        int int8 = calendar4.getMaximum(0);
        java.util.Date date9 = calendar4.getTime();
        date9.setYear((int) 'a');
        java.util.Date date13 = new java.util.Date((long) 38);
        int int14 = date13.getMonth();
        int int15 = date9.compareTo(date13);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=97,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Jan 01 00:00:00 GMT+00:00 1997");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test08552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08552");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2057-02-19");
        int int2 = localDateTime1.getDayOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test08553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08553");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String str2 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test08554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08554");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime13 = localTime9.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        int int16 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = dateTimeZone12.isStandardOffset(0L);
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        java.time.ZoneId zoneId20 = timeZone19.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = locale24.getDisplayCountry(locale26);
        java.lang.String str28 = dateTimeZone22.getShortName((long) 3, locale26);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone19, locale26);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone19);
        int int31 = calendar30.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone32 = calendar30.getTimeZone();
        java.util.Calendar.Builder builder33 = builder0.setTimeZone(timeZone32);
        java.util.Date date35 = new java.util.Date((long) 3);
        java.time.Instant instant36 = date35.toInstant();
        int int37 = date35.getSeconds();
        date35.setSeconds(1100);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromDateFields(date35);
        int int41 = date35.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder42 = builder33.setInstant(date35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str27, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645456002456,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=42,MILLISECOND=456,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645456002456,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=42,MILLISECOND=456,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder33);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:18:20 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 18 + "'", int41 == 18);
    }

    @Test
    public void test08555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08555");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        boolean boolean8 = dateTimeField7.isLenient();
        long long10 = dateTimeField7.roundHalfEven(63686361763004L);
        java.lang.String str12 = dateTimeField7.getAsText(63686358373808L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 63686361600000L + "'", long10 == 63686361600000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "3" + "'", str12, "3");
    }

    @Test
    public void test08556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08556");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        boolean boolean24 = localTime2.isSupported(durationFieldType23);
        org.joda.time.LocalTime.Property property25 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime27 = property25.addCopy(28031539200L);
        int int28 = localTime27.getMillisOfSecond();
        java.lang.String str30 = localTime27.toString("09:11:00.007");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "09:11:00.007" + "'", str30, "09:11:00.007");
    }

    @Test
    public void test08557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08557");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField40 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology32.year();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology32.getZone();
        org.joda.time.DateTimeField dateTimeField43 = chronology32.clockhourOfDay();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test08558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08558");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property3.withMaximumValue();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.LocalTime localTime10 = property3.addCopy(299087864000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9" + "'", str8, "9");
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test08559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08559");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 7);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        int int3 = localTime1.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test08560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08560");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        java.lang.String str4 = file2.getCanonicalPath();
        boolean boolean5 = file2.exists();
        long long6 = file2.getFreeSpace();
        boolean boolean7 = file2.setReadOnly();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/experiment/hi!" + "'", str4, "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 299087654912L + "'", long6 == 299087654912L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08561");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        int int13 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusDays(7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test08562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08562");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.LocalDate.Property property5 = localDate0.year();
        org.joda.time.LocalDate localDate6 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, (int) ' ');
        java.lang.String str13 = dateTimeZone11.getName((long) 32580010);
        org.joda.time.Interval interval14 = localDate8.toInterval(dateTimeZone11);
        org.joda.time.LocalDate.Property property15 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate17 = property15.addToCopy(1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        int int19 = localDate18.getCenturyOfEra();
        org.joda.time.LocalDate localDate21 = localDate18.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate23 = localDate21.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate25 = localDate21.minusWeeks(100);
        java.lang.String str27 = localDate21.toString("0422-02-21");
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDate localDate30 = localDate21.withField(dateTimeFieldType28, 24);
        boolean boolean31 = localDate17.isSupported(dateTimeFieldType28);
        java.util.Locale locale33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = localDate17.toString("", locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+70:32" + "'", str13, "+70:32");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0422-02-21" + "'", str27, "0422-02-21");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test08563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08563");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        int int12 = calendar4.getFirstDayOfWeek();
        calendar4.setFirstDayOfWeek(16);
        boolean boolean15 = calendar4.isWeekDateSupported();
        long long16 = calendar4.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = calendar4.isSet(3600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=43200100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=16,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 43200100L + "'", long16 == 43200100L);
    }

    @Test
    public void test08564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08564");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime11 = dateTime8.withFieldAdded(durationFieldType9, 10);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime11.withDayOfYear(273);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test08565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08565");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '/');
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.withWeekOfWeekyear(958);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 958 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08566");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        int int3 = dateTimeZone1.getStandardOffset((long) 32769);
        long long7 = dateTimeZone1.convertLocalToUTC((long) 2022, true, 299090817024L);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        int int9 = localDate8.getCenturyOfEra();
        org.joda.time.LocalDate localDate11 = localDate8.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        boolean boolean24 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime20.getDayOfYear();
        org.joda.time.DateTime dateTime27 = dateTime20.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime31 = dateTime29.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime29.getZone();
        long long36 = dateTimeZone32.convertLocalToUTC(280489992192L, true, 299086503936L);
        org.joda.time.DateTime dateTime37 = dateTime16.withZone(dateTimeZone32);
        long long39 = dateTimeZone32.convertUTCToLocal(1645455803777L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2022L + "'", long7 == 2022L);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 280489992192L + "'", long36 == 280489992192L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455803777L + "'", long39 == 1645455803777L);
    }

    @Test
    public void test08567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08567");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        int int5 = localTime4.getMillisOfDay();
        org.joda.time.LocalTime localTime7 = localTime4.withMinuteOfHour(23);
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        boolean boolean9 = localTime7.equals((java.lang.Object) nameProvider8);
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str17 = nameProvider10.getName(locale13, "hi!", "1970-01-01");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str22 = nameProvider10.getName(locale19, "2022-02-21T15:02:11.642Z", "00:03:00.000");
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str27 = nameProvider10.getShortName(locale23, "Mon Feb 21 15:01:51 UTC 2022", "100");
        java.lang.String str30 = nameProvider8.getName(locale23, "Property[dayOfWeek]", "deu");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider8);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = dateTime33.toString("4", locale35);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale35.getDisplayCountry(locale37);
        java.lang.String str39 = locale35.getDisplayCountry();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.lang.String str43 = locale40.getDisplayCountry(locale42);
        java.lang.String str44 = locale40.getDisplayName();
        boolean boolean45 = locale40.hasExtensions();
        java.util.Locale locale46 = locale40.stripExtensions();
        java.lang.String str47 = locale35.getDisplayLanguage(locale46);
        java.util.Set<java.lang.String> strSet48 = locale35.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = dateTime50.toString("4", locale52);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale52.getDisplayCountry(locale54);
        java.lang.String str56 = locale52.getLanguage();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        java.lang.String str60 = dateTimeZone57.getNameKey((long) 8);
        boolean boolean62 = dateTimeZone57.isStandardOffset((long) 1970);
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = dateTimeZone57.getShortName(299090817024L, locale64);
        java.lang.String str66 = locale52.getDisplayName(locale64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(100L, chronology68);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(100L, chronology71);
        boolean boolean73 = dateTime69.isAfter((org.joda.time.ReadableInstant) dateTime72);
        int int74 = dateTime69.getDayOfYear();
        org.joda.time.DateTime dateTime76 = dateTime69.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property77 = dateTime69.year();
        org.joda.time.DateTime dateTime78 = property77.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        java.lang.String str83 = dateTime80.toString("4", locale82);
        java.lang.String str84 = locale82.getScript();
        int int85 = property77.getMaximumTextLength(locale82);
        java.lang.String str86 = locale52.getDisplayCountry(locale82);
        java.lang.String str87 = locale35.getDisplayName(locale52);
        java.lang.String str90 = nameProvider8.getName(locale35, "0001-01-01T00:00:00.000", "1969-12-04T00:00:00.100Z");
        java.util.Locale locale91 = null;
        java.lang.String str94 = nameProvider8.getShortName(locale91, "\u6cd5\u6587", "04.01.1970 09:11:19");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32400000 + "'", int5 == 32400000);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "4" + "'", str36, "4");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u6cd5\u56fd" + "'", str38, "\u6cd5\u56fd");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u6cd5\u56fd" + "'", str39, "\u6cd5\u56fd");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str43, "\u53f0\u6e7e\u5730\u533a");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str44, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u6cd5\u6587" + "'", str47, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "4" + "'", str53, "4");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u6cd5\u56fd" + "'", str55, "\u6cd5\u56fd");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr" + "'", str56, "fr");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)" + "'", str66, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "4" + "'", str83, "4");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "France" + "'", str86, "France");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "fran\347ais (France)" + "'", str87, "fran\347ais (France)");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test08568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08568");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField45 = chronology35.hourOfHalfday();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32771L + "'", long41 == 32771L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test08569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08569");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean5 = file2.setReadable(false);
        long long6 = file2.getTotalSpace();
        java.io.File file7 = file2.getCanonicalFile();
        boolean boolean8 = file2.canWrite();
        boolean boolean10 = file2.setExecutable(false);
        boolean boolean13 = file2.setReadable(true, true);
        boolean boolean15 = file2.setLastModified(299087405056L);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 364740218880L + "'", long6 == 364740218880L);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08570");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        int int10 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMonths((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(0);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime19.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime23 = dateTime19.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime19.getZone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(100L, chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        boolean boolean31 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime27.getDayOfYear();
        org.joda.time.DateTime dateTime35 = dateTime27.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime37 = dateTime27.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int39 = dateTime37.get(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property40.getFieldType();
        boolean boolean43 = dateTime19.isSupported(dateTimeFieldType42);
        int int44 = dateTime11.get(dateTimeFieldType42);
        org.joda.time.DateTime.Property property45 = dateTime11.year();
        boolean boolean47 = dateTime11.isBefore(1645455806065L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime11.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test08571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08571");
        java.io.Reader reader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.BufferedReader bufferedReader2 = new java.io.BufferedReader(reader0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08572");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.plusDays(3);
        int int10 = localDate9.getYear();
        org.joda.time.LocalDate localDate12 = localDate9.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (byte) 100);
        java.util.Date date15 = localDate14.toDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(422);
        org.joda.time.Interval interval18 = localDate14.toInterval(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone17);
        boolean boolean20 = dateTimeFormatter2.isPrinter();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        int int22 = localDate21.getCenturyOfEra();
        org.joda.time.LocalDate localDate24 = localDate21.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        int int26 = property25.getMaximumValue();
        boolean boolean27 = property25.isLeap();
        org.joda.time.LocalDate localDate28 = property25.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTime30.toString("4", locale32);
        java.lang.String str34 = locale32.getScript();
        java.lang.String str35 = property25.getAsShortText(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter36.withDefaultYear(1645455790);
        int int39 = dateTimeFormatter36.getDefaultYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean46 = dateTime44.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = dateTime44.minus(10L);
        org.joda.time.DateTime dateTime50 = dateTime48.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime52 = dateTime48.withMillis((long) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, chronology54);
        int int56 = dateTime55.getMillisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.plusHours(360000000);
        org.joda.time.DateTime dateTime59 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime59.withZoneRetainFields(dateTimeZone60);
        org.joda.time.Chronology chronology63 = dateTime59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime52.toMutableDateTime(chronology63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter36.withChronology(chronology63);
        java.lang.StringBuffer stringBuffer66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        boolean boolean71 = localDateTime69.isSupported(dateTimeFieldType70);
        int int72 = localDateTime69.getCenturyOfEra();
        java.lang.String str73 = localDateTime69.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(100L, chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(100L, chronology78);
        boolean boolean80 = dateTime76.isAfter((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime82 = dateTime79.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone83);
        boolean boolean85 = dateTimeZone83.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone83);
        org.joda.time.DateTime dateTime87 = dateTime79.toDateTime(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = org.joda.time.DateTime.now(dateTimeZone83);
        org.joda.time.LocalDateTime localDateTime89 = org.joda.time.LocalDateTime.now(dateTimeZone83);
        org.joda.time.DateTime dateTime90 = localDateTime69.toDateTime(dateTimeZone83);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter65.printTo(stringBuffer66, (org.joda.time.ReadablePartial) localDateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Apr 09 00:00:00 GMT+00:00 1962");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "4" + "'", str33, "4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "f\351vr." + "'", str35, "f\351vr.");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2000 + "'", int39 == 2000);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20 + "'", int72 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2019-02-21T15:06:42.923" + "'", str73, "2019-02-21T15:06:42.923");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test08573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08573");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        calendar2.setMinimalDaysInFirstWeek(702);
        int int5 = calendar2.getWeekYear();
        int int6 = calendar2.getFirstDayOfWeek();
        boolean boolean7 = calendar2.isWeekDateSupported();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645456002944,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=702,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=42,MILLISECOND=944,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08574");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        java.util.Date date3 = localDateTime0.toDate();
        int int4 = date3.getSeconds();
        java.lang.String str5 = date3.toGMTString();
        int int6 = date3.getYear();
        date3.setTime((long) (byte) -1);
        java.lang.Object obj9 = date3.clone();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 43 + "'", int4 == 43);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "21 Feb 2022 15:06:43 GMT" + "'", str5, "21 Feb 2022 15:06:43 GMT");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 122 + "'", int6 == 122);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "Thu Jan 01 00:00:00 GMT+00:00 1970");
    }

    @Test
    public void test08575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08575");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField18 = chronology12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 54000000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = dateTimeFormatter22.parseMutableDateTime("32580012");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 13L + "'", long17 == 13L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test08576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08576");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getMonth();
        java.util.Date date2 = new java.util.Date();
        date2.setDate(32769);
        boolean boolean5 = date0.after(date2);
        date0.setTime((long) (byte) 0);
        date0.setMonth((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        boolean boolean16 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime12.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime12.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property20 = dateTime12.year();
        org.joda.time.DateTime dateTime22 = dateTime12.withMonthOfYear(5);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime12.plus(readablePeriod23);
        org.joda.time.DateTime dateTime27 = dateTime12.withDurationAdded(0L, (-18574));
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear(14);
        boolean boolean30 = date0.equals((java.lang.Object) dateTime29);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Wed Oct 21 15:06:43 GMT+00:00 2111");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08577");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setRegion("100");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder7 = builder5.setVariant("Chinese");
        java.util.Locale locale8 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder5.addUnicodeLocaleAttribute("\u4e2d\u6587\u53f0\u7063)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "_100");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
    }

    @Test
    public void test08578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08578");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        java.io.File file5 = new java.io.File(file2, "millisOfSecond");
        boolean boolean7 = file2.setWritable(false);
        java.net.URL uRL8 = file2.toURL();
        java.lang.String str9 = file2.getCanonicalPath();
        java.io.File file10 = null;
        java.io.File file12 = new java.io.File(file10, "hi!");
        long long13 = file12.length();
        boolean boolean15 = file12.setReadable(false);
        long long16 = file12.getTotalSpace();
        boolean boolean17 = file12.canRead();
        java.io.File file18 = null;
        java.io.File file20 = new java.io.File(file18, "hi!");
        boolean boolean21 = file20.createNewFile();
        java.nio.file.Path path22 = file20.toPath();
        java.lang.String str23 = file20.getName();
        boolean boolean24 = file20.mkdirs();
        boolean boolean25 = file12.renameTo(file20);
        boolean boolean26 = file20.setReadOnly();
        int int27 = file2.compareTo(file20);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertEquals(file5.getParent(), "hi!");
        org.junit.Assert.assertEquals(file5.toString(), "hi!/millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(uRL8);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/hi!/");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/hi!" + "'", str9, "/experiment/hi!");
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 57344L + "'", long13 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 364740218880L + "'", long16 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull("file20.getParent() == null", file20.getParent());
        org.junit.Assert.assertEquals(file20.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test08579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08579");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int8 = localTime6.get(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        int int12 = property11.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 86399999 + "'", int12 == 86399999);
    }

    @Test
    public void test08580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08580");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.DateTime dateTime6 = dateTime2.withMillisOfSecond(20);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withPeriodAdded(readablePeriod9, 976);
        org.joda.time.DateTime dateTime13 = dateTime6.minusMillis(23);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) (short) -1);
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08581");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale5 = new java.util.Locale("");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("48");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 48 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08582");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        java.lang.String str3 = file2.getCanonicalPath();
        boolean boolean5 = file2.setExecutable(true);
        long long6 = file2.getUsableSpace();
        boolean boolean7 = file2.mkdirs();
        long long8 = file2.getUsableSpace();
        java.io.File file9 = file2.getParentFile();
        long long10 = file2.getUsableSpace();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/experiment/hi!" + "'", str3, "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 280490442752L + "'", long6 == 280490442752L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 280490442752L + "'", long8 == 280490442752L);
        org.junit.Assert.assertNull(file9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 280490442752L + "'", long10 == 280490442752L);
    }

    @Test
    public void test08583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08583");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readableDuration14);
        int int16 = dateTime11.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.minus(readablePeriod17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withYear(22);
        boolean boolean22 = dateTime21.isEqualNow();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean29 = dateTime27.isSupported(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMinutes(3);
        int int32 = dateTime27.getMillisOfSecond();
        org.joda.time.DateTime dateTime34 = dateTime27.minusMillis(25);
        boolean boolean35 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime27);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("1969-12-31 23:59:59");
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.lang.String str42 = locale39.getDisplayCountry(locale41);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = locale39.getDisplayVariant(locale43);
        java.lang.String str45 = locale43.getDisplayCountry();
        java.lang.String str46 = locale38.getDisplayVariant(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = dateTime27.toString("February", locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str42, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "France" + "'", str45, "France");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test08584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08584");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime13 = dateTime11.plus(0L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(3);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus(readablePeriod19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury(13);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime13.toDateTime(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test08585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08585");
        java.util.Locale locale2 = new java.util.Locale("fr", "\u4e2d\u6587");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime9.plus((long) 'a');
        org.joda.time.DateTime dateTime15 = dateTime9.plusWeeks(11);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillis((long) 8);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property21 = localTime20.hourOfDay();
        org.joda.time.LocalTime localTime23 = localTime20.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        int int27 = dateTime4.get(dateTimeField26);
        long long29 = dateTimeField26.roundHalfEven((long) 2);
        long long32 = dateTimeField26.add((long) (byte) 1, (-1L));
        org.joda.time.ReadablePartial readablePartial33 = null;
        int int34 = dateTimeField26.getMaximumValue(readablePartial33);
        long long36 = dateTimeField26.roundHalfCeiling((long) (short) -1);
        java.util.Locale locale41 = new java.util.Locale("21 Oct 2111 15:01:55 GMT", "1", "UTC");
        java.lang.String str42 = dateTimeField26.getAsShortText(2000, locale41);
        java.util.Locale locale47 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        java.lang.String str48 = locale47.getCountry();
        java.lang.String str49 = dateTimeField26.getAsText(0L, locale47);
        java.lang.String str50 = locale2.getDisplayScript(locale47);
        java.lang.String str51 = locale47.getDisplayCountry();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3599999L) + "'", long32 == (-3599999L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals(locale41.toString(), "21 oct 2111 15:01:55 gmt_1_UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2000" + "'", str42, "2000");
        org.junit.Assert.assertEquals(locale47.toString(), "dayofweek_1970-01-01_1970");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "24" + "'", str49, "24");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01" + "'", str51, "1970-01-01");
    }

    @Test
    public void test08586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08586");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(850);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test08587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08587");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant24.plus(readableDuration28);
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTimeISO();
        org.joda.time.Instant instant32 = instant29.minus(13L);
        org.joda.time.Instant instant34 = org.joda.time.Instant.parse("24");
        org.joda.time.Instant instant37 = instant34.withDurationAdded((long) 0, 32580010);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.centuries();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTime dateTime42 = instant32.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.secondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test08588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08588");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate6 = localDate4.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.DateTime dateTime20 = localDate4.toDateTimeAtCurrentTime(dateTimeZone19);
        java.lang.String str22 = dateTimeZone19.getShortName(779000L);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj0, dateTimeZone19);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDate24.getFieldType(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32769");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test08589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08589");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        boolean boolean3 = file2.mkdir();
        java.io.File file4 = file2.getParentFile();
        java.io.File file5 = null;
        java.io.File file7 = new java.io.File(file5, "hi!");
        long long8 = file7.length();
        boolean boolean10 = file7.setReadable(false);
        long long11 = file7.getTotalSpace();
        boolean boolean12 = file7.canRead();
        java.io.File file14 = new java.io.File(file7, "2022-02-21T15:03:01.399");
        boolean boolean17 = file14.setExecutable(false, true);
        boolean boolean18 = file14.delete();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = file4.renameTo(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(file4);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 57344L + "'", long8 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 364740218880L + "'", long11 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(file14.getParent(), "hi!");
        org.junit.Assert.assertEquals(file14.toString(), "hi!/2022-02-21T15:03:01.399");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08590");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getSecondOfMinute();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds(1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(11);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 8);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTime dateTime40 = dateTime18.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.clockhourOfDay();
        org.joda.time.Chronology chronology43 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfWeek();
        org.joda.time.Chronology chronology45 = chronology43.withUTC();
        org.joda.time.DateTime dateTime46 = dateTime1.toDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekOfWeekyear(33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 43 + "'", int5 == 43);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test08591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08591");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        int int5 = property4.getMaximumValue();
        boolean boolean6 = property4.isLeap();
        org.joda.time.LocalDate localDate7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfEra();
        org.joda.time.LocalDate.Property property10 = localDate7.dayOfMonth();
        org.joda.time.LocalDate localDate11 = property10.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test08592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08592");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1296000000000100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = localDate1.get(dateTimeFieldType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test08593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08593");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) '#', dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(4);
        org.joda.time.DateTime dateTime7 = dateTime5.minus((long) 6);
        boolean boolean9 = dateTime5.isBefore(1645455753000L);
        int int10 = dateTime5.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test08594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08594");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(54251);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test08595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08595");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.setTimeInMillis((long) 'a');
        int int8 = calendar4.getMaximum(0);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        int int10 = calendar4.getWeekYear();
        calendar4.set(34019000, 32772, 38, 1970, 1645455790);
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str26 = nameProvider19.getName(locale22, "hi!", "1970-01-01");
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = locale27.getDisplayVariant();
        java.lang.String str31 = nameProvider19.getName(locale27, "21 Feb 2022 15:01:56 GMT", "hourOfHalfday");
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime36 = property35.withMinimumValue();
        int int37 = localTime36.getHourOfDay();
        org.joda.time.LocalTime.Property property38 = localTime36.secondOfMinute();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.lang.String str40 = property38.getAsText(locale39);
        java.lang.String str43 = nameProvider19.getShortName(locale39, "weekyearOfCentury", "21 Feb 2022 15:01:56 GMT");
        java.util.Map<java.lang.String, java.lang.Integer> strMap44 = calendar4.getDisplayNames(5, (int) (short) 1, locale39);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property48 = localTime47.hourOfDay();
        org.joda.time.LocalTime localTime50 = localTime47.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology51 = localTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        boolean boolean53 = locale39.equals((java.lang.Object) chronology51);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=34019000,MONTH=32772,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=38,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=1970,MINUTE=1645455790,SECOND=0,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strMap44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08596");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths(0);
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.secondOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1645455718, chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology5.getDateTimeMillis(0, 933, 0, 302, 1645455971, 0, 115);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 302 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test08597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08597");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.era();
        long long6 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime7 = property5.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        int int10 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusYears(430);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 63686358403420L + "'", long6 == 63686358403420L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2019 + "'", int10 == 2019);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08598");
        java.util.Date date1 = new java.util.Date((long) 1645455801);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Jan 20 01:04:15 GMT+00:00 1970");
    }

    @Test
    public void test08599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08599");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime3.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.LocalDate.Property property19 = localDate0.property(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = property19.roundCeilingCopy();
        org.joda.time.LocalDate localDate21 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        int int23 = localDate22.getCenturyOfEra();
        org.joda.time.LocalDate localDate25 = localDate22.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now();
        int int27 = localDate26.getCenturyOfEra();
        org.joda.time.LocalDate localDate28 = localDate22.withFields((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate.Property property29 = localDate26.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDate26.getFieldType(0);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        boolean boolean39 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime35.getDayOfYear();
        org.joda.time.DateTime dateTime43 = dateTime35.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime45 = dateTime35.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int47 = dateTime45.get(dateTimeFieldType46);
        org.joda.time.DateTime.Property property48 = dateTime45.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property48.getFieldType();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.LocalDate.Property property51 = localDate32.property(dateTimeFieldType49);
        org.joda.time.LocalDate localDate52 = property51.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.seconds();
        boolean boolean54 = localDate52.isSupported(durationFieldType53);
        boolean boolean55 = localDate26.isSupported(durationFieldType53);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        int int57 = localDate56.getCenturyOfEra();
        org.joda.time.LocalDate localDate59 = localDate56.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate61 = localDate59.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime63 = localDate59.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDate59.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime64.getZone();
        org.joda.time.LocalDate localDate66 = org.joda.time.LocalDate.now(dateTimeZone65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate69 = localDate66.withFieldAdded(durationFieldType67, 15);
        org.joda.time.LocalDate localDate71 = localDate26.withFieldAdded(durationFieldType67, (int) 'u');
        org.joda.time.LocalDate localDate73 = localDate21.withFieldAdded(durationFieldType67, 1322);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 20 + "'", int57 == 20);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate73);
    }

    @Test
    public void test08600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08600");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.era();
        long long6 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        int int9 = property5.get();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 63686358403488L + "'", long6 == 63686358403488L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test08601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08601");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str7 = nameProvider0.getName(locale3, "hi!", "1970-01-01");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str12 = nameProvider0.getName(locale9, "2022-02-21T15:02:11.642Z", "00:03:00.000");
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = locale13.getISO3Country();
        java.lang.String str17 = nameProvider0.getShortName(locale13, "Mon Feb 21 15:01:51 UTC 2022", "100");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale21 = new java.util.Locale("", "20");
        java.lang.String str24 = nameProvider0.getName(locale21, "1 Jan 1970 00:12:59 GMT", "10");
        java.util.Locale locale25 = null;
        java.lang.String str28 = nameProvider0.getShortName(locale25, "2022-02-21T15:05:02.263Z", "09:02:27.240");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FRA" + "'", str14, "FRA");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals(locale21.toString(), "_20");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test08602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08602");
        java.io.File file2 = java.io.File.createTempFile("dayofweek", "2022-02-21T15:04:46.514Z");
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/dayofweek59984713527626505472022-02-21T15:04:46.514Z");
    }

    @Test
    public void test08603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08603");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(280484782080L);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime9.plus((long) 'a');
        org.joda.time.DateTime dateTime15 = dateTime9.plusWeeks(11);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillis((long) 8);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property21 = localTime20.hourOfDay();
        org.joda.time.LocalTime localTime23 = localTime20.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(chronology24);
        org.joda.time.DurationField durationField26 = chronology24.eras();
        org.joda.time.DurationField durationField27 = durationFieldType4.getField(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime2.withFieldAdded(durationFieldType4, (-4871));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test08604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08604");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.DateTime.Property property7 = dateTime2.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = dateTimeZone13.isStandardOffset(0L);
        java.util.TimeZone timeZone20 = dateTimeZone13.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str29 = nameProvider22.getName(locale25, "hi!", "1970-01-01");
        java.lang.String str30 = dateTimeZone13.getShortName(10L, locale25);
        java.lang.String str31 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone13);
        org.joda.time.DateTime.Property property33 = dateTime2.centuryOfEra();
        org.joda.time.DateTime.Property property34 = dateTime2.monthOfYear();
        org.joda.time.DateTime dateTime35 = property34.roundFloorCopy();
        java.lang.String str36 = property34.toString();
        int int37 = property34.get();
        org.joda.time.DurationField durationField38 = property34.getLeapDurationField();
        java.lang.String str39 = property34.getAsShortText();
        org.joda.time.DateTime dateTime40 = property34.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.100Z" + "'", str6, "1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[monthOfYear]" + "'", str36, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(durationField38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Jan" + "'", str39, "Jan");
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test08605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08605");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getRangeDurationType();
        org.joda.time.DateTime dateTime9 = dateTime2.withField(dateTimeFieldType6, 21);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType6.getField(chronology15);
        java.lang.String str19 = dateTimeField17.getAsText((long) 51);
        org.joda.time.DurationField durationField20 = dateTimeField17.getRangeDurationField();
        boolean boolean21 = dateTimeField17.isSupported();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears((int) ' ');
        int int27 = localDateTime24.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.minusDays(7);
        int int30 = localDateTime24.getMonthOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        boolean boolean38 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime34.getDayOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.withMillisOfSecond((int) (short) 0);
        boolean boolean45 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime47 = dateTime42.withDayOfMonth(25);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusYears(3);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property54 = localDateTime49.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks(4);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime61 = property59.addToCopy(9);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusYears(197);
        int[] intArray67 = chronology48.get((org.joda.time.ReadablePartial) localDateTime65, (-12959996399978L));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField17.set((org.joda.time.ReadablePartial) localDateTime24, 1645455959, intArray67, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1645455959");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1559, 4, 26, 3600022]");
    }

    @Test
    public void test08606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08606");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(80);
        long long3 = dateTimeZone1.previousTransition((long) 968);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 968L + "'", long3 == 968L);
    }

    @Test
    public void test08607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08607");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = dateTimeFormatter4.parseMutableDateTime("vendredi");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test08608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08608");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((-253920000L));
    }

    @Test
    public void test08609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08609");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withFields((org.joda.time.ReadablePartial) localDate4);
        org.joda.time.LocalDate localDate8 = localDate4.minusMonths(32580010);
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths(102);
        org.joda.time.LocalDate.Property property11 = localDate8.weekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08610");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        int int5 = property3.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = property3.addNoWrapToCopy(1645455822);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
    }

    @Test
    public void test08611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08611");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.era();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        int int12 = localDateTime6.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withDate(50640100, 1645455864, 126000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645455864 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 54403681 + "'", int12 == 54403681);
    }

    @Test
    public void test08612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08612");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        boolean boolean11 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime7.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime7.plusYears((int) (short) 0);
        long long15 = dateTime7.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int17 = dateTime7.get(dateTimeFieldType16);
        org.joda.time.LocalTime.Property property18 = localTime2.property(dateTimeFieldType16);
        org.joda.time.DurationField durationField19 = property18.getLeapDurationField();
        java.util.Locale locale24 = new java.util.Locale("/experiment/hi!", "millis", "2057-02-19");
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime27 = property18.setCopy("dayofweek (1970-01-01,1970)", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayofweek (1970-01-01,1970)\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertEquals(locale24.toString(), "/experiment/hi!_MILLIS_2057-02-19");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2057-02-19" + "'", str26, "2057-02-19");
    }

    @Test
    public void test08613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08613");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.halfdayOfDay();
        long long12 = dateTimeField9.getDifferenceAsLong((long) 1999, (long) 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08614");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) (byte) 100, 1970);
        org.joda.time.DateTimeZone dateTimeZone28 = instant24.getZone();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test08615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08615");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime6 = localTime4.plusSeconds(14);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.plus(readablePeriod7);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test08616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08616");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis(0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        int int15 = dateTime14.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime14.getZone();
        org.joda.time.DateTime dateTime18 = dateTime14.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        int int20 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(968);
        int int24 = localDateTime23.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1972 + "'", int24 == 1972);
    }

    @Test
    public void test08617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08617");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField18 = chronology12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter20.getZone();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 13L + "'", long17 == 13L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeZone21);
    }

    @Test
    public void test08618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08618");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        int int22 = dateTime21.getWeekOfWeekyear();
        boolean boolean23 = calendar4.before((java.lang.Object) dateTime21);
        org.joda.time.DateTime dateTime25 = dateTime21.withWeekyear(11);
        org.joda.time.LocalDate localDate26 = dateTime21.toLocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.dayOfWeek();
        org.joda.time.LocalDate localDate29 = localDate26.plusYears((int) '#');
        int int30 = localDate26.getDayOfMonth();
        org.joda.time.LocalDate localDate32 = localDate26.withYear(12);
        org.joda.time.LocalDate localDate34 = localDate32.minusDays((int) (short) 0);
        org.joda.time.LocalDate.Property property35 = localDate32.weekyear();
        org.joda.time.LocalDate localDate36 = property35.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test08619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08619");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Locale locale12 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale locale16 = new java.util.Locale("", "hi!");
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = new java.util.Locale("");
        java.util.Locale locale22 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = locale22.getVariant();
        java.lang.String str25 = locale22.getISO3Language();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.lang.String str32 = locale30.getVariant();
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.util.Locale locale38 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale38.getVariant();
        java.lang.String str41 = locale35.getDisplayScript(locale38);
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale12, locale16, locale17, locale19, locale22, locale26, locale27, locale30, locale38 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        strSet48.clear();
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet48.spliterator();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "/experiment/hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        java.lang.String[] strArray61 = new java.lang.String[] { "1970-01-01", "", "", "/experiment/hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        boolean boolean64 = strSet55.addAll((java.util.Collection<java.lang.String>) strList62);
        boolean boolean65 = strSet48.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList62, filteringMode66);
        java.util.stream.Stream<java.lang.String> strStream68 = strList62.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream69 = strList62.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode66.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertNotNull(strStream69);
    }

    @Test
    public void test08620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08620");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withDefaultYear((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(100L, chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology30.add(readablePeriod32, (long) 13, (int) ' ');
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter24.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField38 = chronology30.clockhourOfDay();
        int int40 = dateTimeField38.get(280490400000L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 13L + "'", long35 == 13L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test08621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08621");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime1.plusMonths(6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours(422);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        java.util.Locale locale15 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        strSet16.clear();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "/experiment/hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.lang.String[] strArray28 = new java.lang.String[] { "1970-01-01", "", "", "/experiment/hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        boolean boolean31 = strSet22.addAll((java.util.Collection<java.lang.String>) strList29);
        boolean boolean32 = strSet16.removeAll((java.util.Collection<java.lang.String>) strSet22);
        strSet22.clear();
        int int34 = strSet22.size();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.LocalTime localTime40 = localTime37.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfDay();
        java.lang.String str44 = dateTimeField43.getName();
        long long47 = dateTimeField43.set((long) 32, 2720);
        boolean boolean48 = strSet22.contains((java.lang.Object) dateTimeField43);
        long long51 = dateTimeField43.getDifferenceAsLong((long) 1645455974, (-21938550796848000L));
        org.joda.time.tz.NameProvider nameProvider52 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale55 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str59 = nameProvider52.getName(locale55, "hi!", "1970-01-01");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider52);
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.lang.String str64 = nameProvider52.getName(locale61, "2022-02-21T15:02:11.642Z", "00:03:00.000");
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.lang.String str66 = locale65.getISO3Country();
        java.lang.String str69 = nameProvider52.getShortName(locale65, "Mon Feb 21 15:01:51 UTC 2022", "100");
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime71.getZone();
        java.util.Locale locale76 = new java.util.Locale("4 janv. 1970 09:11:19", "FR", "ISOChronology[UTC]");
        java.lang.String str77 = locale76.toLanguageTag();
        java.util.Calendar calendar78 = dateTime71.toCalendar(locale76);
        java.lang.String str79 = locale76.getDisplayCountry();
        java.lang.String str82 = nameProvider52.getName(locale76, "21 Feb 2022 15:03:05 GMT", "java.io.IOException: java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=11,MONTH=117,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=122,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        int int83 = dateTimeField43.getMaximumTextLength(locale76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime84 = property10.setCopy("java.io.IOException: 21 Feb 2022 15:01:57 GMT", locale76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.io.IOException: 21 Feb 2022 15:01:57 GMT\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "secondOfDay" + "'", str44, "secondOfDay");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2720032L + "'", long47 == 2720032L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 21938552442303L + "'", long51 == 21938552442303L);
        org.junit.Assert.assertNotNull(nameProvider52);
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "FRA" + "'", str66, "FRA");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertEquals(locale76.toString(), "4 janv. 1970 09:11:19_FR_ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "und-FR" + "'", str77, "und-FR");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "France" + "'", str79, "France");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
    }

    @Test
    public void test08622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08622");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (short) 100, 3, (int) (byte) 10, (int) '#', 9);
        int int13 = calendar4.getMinimalDaysInFirstWeek();
        int int14 = calendar4.getMinimalDaysInFirstWeek();
        int int15 = calendar4.getMinimalDaysInFirstWeek();
        int int16 = calendar4.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = calendar4.getActualMaximum(46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 46");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-59002865459900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=102,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=9,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test08623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08623");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfDay();
        long long25 = dateTimeField22.add((-253918561L), 1645455822000L);
        long long28 = dateTimeField22.getDifferenceAsLong((long) 311, 299083870208L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5923640958946081439L + "'", long25 == 5923640958946081439L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-83078L) + "'", long28 == (-83078L));
    }

    @Test
    public void test08624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08624");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime9.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime19 = dateTime9.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        long long24 = property22.remainder();
        org.joda.time.DateTime dateTime25 = property22.roundFloorCopy();
        org.joda.time.DateTime dateTime26 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime27 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(3);
        int int33 = localDate32.getYear();
        org.joda.time.LocalDate localDate35 = localDate32.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.Chronology chronology39 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.monthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime26.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 90L + "'", long24 == 90L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test08625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08625");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(9);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusDays((int) (short) -1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime20 = dateTime13.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime28 = localTime24.toDateTimeToday(dateTimeZone27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property34 = dateTime31.minuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int49 = dateTime47.get(dateTimeFieldType48);
        boolean boolean50 = dateTime31.isSupported(dateTimeFieldType48);
        org.joda.time.LocalTime localTime52 = localTime24.withField(dateTimeFieldType48, 11);
        org.joda.time.DateTime.Property property53 = dateTime13.property(dateTimeFieldType48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime6.withField(dateTimeFieldType48, 366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test08626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08626");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        boolean boolean10 = dateTimeZone7.isFixed();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test08627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08627");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime12 = dateTime2.plusMonths(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int14 = dateTime2.get(dateTimeFieldType13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.plusDays(3);
        int int26 = localDate25.getYear();
        org.joda.time.LocalDate localDate28 = localDate25.withWeekOfWeekyear((int) ' ');
        int[] intArray30 = chronology20.get((org.joda.time.ReadablePartial) localDate25, (long) 52);
        org.joda.time.DateTime dateTime31 = dateTime2.toDateTime(chronology20);
        org.joda.time.DurationField durationField32 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField33 = chronology20.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test08628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08628");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.plusDays(3);
        int int10 = localDate9.getYear();
        org.joda.time.LocalDate localDate12 = localDate9.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (byte) 100);
        java.util.Date date15 = localDate14.toDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(422);
        org.joda.time.Interval interval18 = localDate14.toInterval(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone17);
        boolean boolean20 = dateTimeFormatter2.isPrinter();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        int int22 = localDate21.getCenturyOfEra();
        org.joda.time.LocalDate localDate24 = localDate21.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        int int26 = property25.getMaximumValue();
        boolean boolean27 = property25.isLeap();
        org.joda.time.LocalDate localDate28 = property25.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTime30.toString("4", locale32);
        java.lang.String str34 = locale32.getScript();
        java.lang.String str35 = property25.getAsShortText(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter36.withOffsetParsed();
        java.lang.StringBuffer stringBuffer38 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter36.printTo(stringBuffer38, 1645455806065L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Apr 09 00:00:00 GMT+00:00 1962");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "4" + "'", str33, "4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "f\351vr." + "'", str35, "f\351vr.");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
    }

    @Test
    public void test08629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08629");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        int int10 = dateTime9.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime(dateTimeZone11);
        boolean boolean13 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime9);
        int int14 = dateTime9.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.100Z" + "'", str6, "1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
    }

    @Test
    public void test08630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08630");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(271, 64800000, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 271 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        long long25 = instant24.getMillis();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 90L + "'", long25 == 90L);
    }

    @Test
    public void test08632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08632");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        boolean boolean34 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime30.getDayOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond((int) (short) 0);
        boolean boolean41 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime38.withDayOfMonth(25);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes(68513845);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTime47.toString("4", locale49);
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale49.getDisplayCountry(locale51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTime54.toString("4", locale56);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale56.getDisplayCountry(locale58);
        java.lang.String str60 = locale49.getDisplayCountry(locale56);
        java.lang.String str61 = locale49.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.lang.String str63 = locale49.getDisplayLanguage(locale62);
        java.util.Calendar calendar64 = dateTime43.toCalendar(locale49);
        boolean boolean65 = instant24.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableDateTime mutableDateTime66 = instant24.toMutableDateTimeISO();
        org.joda.time.Instant instant69 = instant24.withDurationAdded(63686358390652L, 35);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "4" + "'", str50, "4");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u6cd5\u56fd" + "'", str52, "\u6cd5\u56fd");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "4" + "'", str57, "4");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u6cd5\u56fd" + "'", str59, "\u6cd5\u56fd");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "France" + "'", str60, "France");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u6cd5\u6587" + "'", str63, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=2073600100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=25,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(instant69);
    }

    @Test
    public void test08633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test08634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08634");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        calendar9.clear(9);
        int int13 = calendar9.getGreatestMinimum((int) (short) 0);
        calendar9.roll(9, true);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        boolean boolean23 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime19.getDayOfYear();
        int int25 = dateTime19.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar26 = dateTime19.toGregorianCalendar();
        org.joda.time.Chronology chronology27 = dateTime19.getChronology();
        boolean boolean28 = calendar9.after((java.lang.Object) chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.hourOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(63686358120494L, chronology27);
        java.lang.String str31 = chronology27.toString();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 2922789, chronology27);
        org.joda.time.DurationField durationField33 = chronology27.seconds();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((int) (short) 10, (-959), 2922789, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -959 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test08635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08635");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(1645455801);
        java.lang.StringBuffer stringBuffer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer7, 63686358358941L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test08636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08636");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1970);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        boolean boolean5 = localDate1.equals((java.lang.Object) locale2);
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strStream8);
    }

    @Test
    public void test08637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08637");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = dateTimeZone8.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withZone(dateTimeZone8);
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        boolean boolean13 = dateTimeFormatter11.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withDefaultYear(1962);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = dateTimeFormatter16.parseLocalTime("2022-02-21T15:05:55.020Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test08638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08638");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusMinutes(2019);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        int int9 = property8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy(54126495);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(50734714);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50734714 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08639");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        int int5 = localDate4.getYear();
        org.joda.time.LocalDate localDate7 = localDate4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (byte) 100);
        java.util.Date date10 = localDate9.toDate();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfWeek();
        org.joda.time.LocalDate.Property property12 = localDate9.dayOfYear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Apr 09 00:00:00 GMT+00:00 1962");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08640");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime7 = property6.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test08641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        int int22 = dateTime21.getWeekOfWeekyear();
        boolean boolean23 = calendar4.before((java.lang.Object) dateTime21);
        org.joda.time.DateTime dateTime25 = dateTime21.withWeekyear(11);
        org.joda.time.LocalDate localDate26 = dateTime21.toLocalDate();
        int int27 = localDate26.getYearOfEra();
        org.joda.time.LocalDate.Property property28 = localDate26.dayOfYear();
        org.joda.time.LocalDate localDate30 = localDate26.plusWeeks((int) (byte) 0);
        int int31 = localDate26.getDayOfYear();
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test08642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08642");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime.Property property11 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = property11.withMinimumValue();
        long long13 = property11.remainder();
        org.joda.time.DateTime dateTime14 = property11.roundHalfEvenCopy();
        int int15 = dateTime14.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 259200100L + "'", long13 == 259200100L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test08643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08643");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test08644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08644");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) '#', dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int6 = dateTimeZone2.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears(3);
        boolean boolean10 = dateTimeZone2.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMinuteOfHour(52);
        int int13 = localDateTime12.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(1645455743);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645455743 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 360000000 + "'", int6 == 360000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test08645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08645");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        java.lang.String str3 = file2.getCanonicalPath();
        long long4 = file2.lastModified();
        long long5 = file2.lastModified();
        boolean boolean6 = file2.delete();
        boolean boolean7 = file2.canExecute();
        java.nio.file.Path path8 = file2.toPath();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate12 = property10.setCopy("100");
        int[] intArray13 = localDate12.getValues();
        org.joda.time.LocalDate localDate15 = localDate12.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property16 = localDate15.weekyear();
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(54158083);
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtStartOfDay(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) file2, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.io.File");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/experiment/hi!" + "'", str3, "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 299087405000L + "'", long4 == 299087405000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 299087405000L + "'", long5 == 299087405000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(path8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[100, 2, 22]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test08646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08646");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = property2.setCopy(56);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDurationAdded(readableDuration5, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withYearOfCentury(239);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 239 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test08647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08647");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime12 = dateTime2.plusMonths(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int14 = dateTime2.get(dateTimeFieldType13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.plusDays(3);
        int int26 = localDate25.getYear();
        org.joda.time.LocalDate localDate28 = localDate25.withWeekOfWeekyear((int) ' ');
        int[] intArray30 = chronology20.get((org.joda.time.ReadablePartial) localDate25, (long) 52);
        org.joda.time.DateTime dateTime31 = dateTime2.toDateTime(chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime2.withEra(1645455788);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645455788 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test08648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08648");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = dateTimeFormatter2.getChronolgy();
        java.lang.StringBuffer stringBuffer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer10, (long) 425);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
    }

    @Test
    public void test08649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08649");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.setTimeInMillis((long) 'a');
        calendar4.add(11, (int) '4');
        java.util.Date date10 = calendar4.getTime();
        calendar4.setTimeInMillis((long) 18);
        // The following exception was thrown during execution in test generation
        try {
            calendar4.set(169, 1645455966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=18,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=18,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Sat Jan 03 04:00:00 GMT+00:00 1970");
    }

    @Test
    public void test08650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08650");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfSecond();
        int int4 = localDateTime2.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readableDuration5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear(933);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 933 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test08651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08651");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar14 = dateTime2.toCalendar(locale13);
        java.lang.String str15 = locale13.getDisplayLanguage();
        java.lang.String str16 = locale13.getDisplayName();
        java.lang.String str17 = locale13.getDisplayName();
        java.lang.String str18 = locale13.getISO3Country();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese (Taiwan)" + "'", str16, "Chinese (Taiwan)");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "TWN" + "'", str18, "TWN");
    }

    @Test
    public void test08652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08652");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6, locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale7);
        boolean boolean10 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(1645455721);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime25 = dateTime15.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime32 = localTime28.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        int int35 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime25.toMutableDateTime(dateTimeZone31);
        org.joda.time.Instant instant37 = dateTime25.toInstant();
        org.joda.time.Instant instant39 = instant37.minus(45056L);
        org.joda.time.Chronology chronology40 = instant37.getChronology();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant37.withDurationAdded(readableDuration41, (int) (short) 1);
        org.joda.time.Instant instant45 = instant43.withMillis((long) (byte) 1);
        org.joda.time.Instant instant47 = instant43.plus((long) 59);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(100L, chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime52.plus((long) 'a');
        org.joda.time.DateTime dateTime58 = dateTime52.plusWeeks(11);
        org.joda.time.DateTime dateTime60 = dateTime58.withMillis((long) 8);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property64 = localTime63.hourOfDay();
        org.joda.time.LocalTime localTime66 = localTime63.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology67 = localTime66.getChronology();
        org.joda.time.DateTime dateTime68 = dateTime60.toDateTime(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.clockhourOfDay();
        long long73 = chronology67.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField74 = chronology67.months();
        org.joda.time.DurationField durationField75 = chronology67.halfdays();
        org.joda.time.DateTime dateTime76 = instant43.toDateTime(chronology67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter2.withChronology(chronology67);
        org.joda.time.Chronology chronology78 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 999);
        boolean boolean81 = dateTimeFormatter2.isPrinter();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645456004500,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=44,MILLISECOND=500,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 32771L + "'", long73 == 32771L);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08653");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        int int2 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusSeconds(2000);
        int[] intArray5 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusDays(1100);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 'a');
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        org.joda.time.DateTime dateTime21 = dateTime18.withHourOfDay(1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = dateTime21.isBefore(readableInstant22);
        org.joda.time.DateTime dateTime25 = dateTime21.withYearOfEra(23);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(20);
        org.joda.time.DateTime dateTime28 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = null;
        org.joda.time.format.DateTimeParser dateTimeParser30 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser30);
        org.joda.time.Chronology chronology32 = dateTimeFormatter31.getChronology();
        org.joda.time.Chronology chronology33 = dateTimeFormatter31.getChronology();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        java.util.Locale locale40 = new java.util.Locale("4 janv. 1970 09:11:19", "FR", "ISOChronology[UTC]");
        java.lang.String str41 = locale40.toLanguageTag();
        java.util.Calendar calendar42 = dateTime35.toCalendar(locale40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter31.withLocale(locale40);
        org.joda.time.Chronology chronology44 = dateTimeFormatter31.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter31.withDefaultYear(1969);
        java.util.Locale locale47 = dateTimeFormatter31.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = localDateTime4.toString(dateTimeFormatter31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[2022, 2, 21, 52404526]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNull(chronology32);
        org.junit.Assert.assertNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals(locale40.toString(), "4 janv. 1970 09:11:19_FR_ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und-FR" + "'", str41, "und-FR");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(locale47);
    }

    @Test
    public void test08654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08654");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        org.joda.time.LocalDate.Property property7 = localDate5.year();
        org.joda.time.LocalDate localDate9 = localDate5.plusYears(6);
        int int10 = localDate9.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
    }

    @Test
    public void test08655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08655");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withDefaultYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withDefaultYear(1645455791);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 15, dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter26.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology32 = dateTimeFormatter31.getChronolgy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(chronology32);
    }

    @Test
    public void test08656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08656");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.add(0, 8);
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        boolean boolean22 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime18.getDayOfYear();
        org.joda.time.DateTime dateTime25 = dateTime18.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property26 = dateTime18.year();
        org.joda.time.DateTime dateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.minusSeconds((int) (byte) 1);
        java.util.Date date30 = dateTime29.toDate();
        boolean boolean31 = date14.before(date30);
        date30.setYear(292278993);
        calendar4.setTime(date30);
        java.lang.String str35 = calendar4.getCalendarType();
        java.time.Instant instant36 = calendar4.toInstant();
        calendar4.set(54286939, 1645455733, 145, 1645455767, 72, 17);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = calendar4.get(122);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=54286939,MONTH=1645455733,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=145,DAY_OF_YEAR=94,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=1645455767,MINUTE=72,SECOND=17,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 21 15:06:44 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Apr 04 09:34:07 GMT+00:00 292267155");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gregory" + "'", str35, "gregory");
        org.junit.Assert.assertNotNull(instant36);
    }

    @Test
    public void test08657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08657");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        boolean boolean5 = dateTimeFormatter3.isOffsetParsed();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone7, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withLocale(locale8);
        boolean boolean11 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withDefaultYear(1645455721);
        boolean boolean14 = dateTimeFormatter13.isOffsetParsed();
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale15.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withLocale(locale15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(10);
        int int21 = localDateTime20.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) '#', dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone24);
        int int28 = dateTimeZone24.getOffset((long) 20);
        java.lang.String str30 = dateTimeZone24.getShortName((long) 32400000);
        org.joda.time.DateTime dateTime31 = localDateTime20.toDateTime(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter17.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(1645455954000L, dateTimeZone24);
        java.lang.String str34 = dateTimeZone24.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456004600,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=44,MILLISECOND=600,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 360000000 + "'", int28 == 360000000);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:00" + "'", str30, "+100:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:00" + "'", str34, "+100:00");
    }

    @Test
    public void test08658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08658");
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime16 = dateTime10.plusWeeks(11);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 8);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime24 = localTime21.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfDay();
        long long31 = chronology25.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime32 = dateTime5.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField33 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology25.getZone();
        org.joda.time.DateTimeField dateTimeField36 = chronology25.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(1969, 920, 37, 0, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 32771L + "'", long31 == 32771L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test08659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08659");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        int int22 = dateTime21.getWeekOfWeekyear();
        boolean boolean23 = calendar4.before((java.lang.Object) dateTime21);
        org.joda.time.DateTime dateTime25 = dateTime21.withWeekyear(11);
        org.joda.time.LocalDate localDate26 = dateTime21.toLocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.centuryOfEra();
        org.joda.time.LocalDate localDate29 = localDate26.minusYears(51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = localDate26.withDayOfMonth(54311644);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54311644 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test08660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08660");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property3.addCopy(85500010L);
        org.joda.time.LocalTime localTime7 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime8 = property3.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test08661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08661");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        boolean boolean24 = localTime2.isSupported(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        java.lang.String str26 = durationFieldType25.getName();
        org.joda.time.LocalTime localTime28 = localTime2.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        boolean boolean35 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime41 = dateTime31.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property45 = localTime44.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime48 = localTime44.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        int int51 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime41.toMutableDateTime(dateTimeZone47);
        int int54 = dateTimeZone47.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime55 = localTime28.toDateTimeToday(dateTimeZone47);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property60 = localTime59.hourOfDay();
        org.joda.time.LocalTime localTime62 = localTime59.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology63 = localTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.hourOfHalfday();
        boolean boolean65 = dateTimeField64.isLenient();
        org.joda.time.DurationField durationField66 = dateTimeField64.getDurationField();
        java.util.Locale locale70 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int71 = dateTimeField64.getMaximumShortTextLength(locale70);
        java.lang.String str72 = dateTimeZone47.getShortName(709199999L, locale70);
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str74 = locale73.getDisplayVariant();
        java.lang.String str75 = locale73.toLanguageTag();
        java.lang.String str76 = locale73.getDisplayVariant();
        java.lang.String str77 = locale70.getDisplayCountry(locale73);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millis" + "'", str26, "millis");
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertEquals(locale70.toString(), "dayofweek_1970-01-01_1970");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "zh-CN" + "'", str75, "zh-CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01" + "'", str77, "1970-01-01");
    }

    @Test
    public void test08662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08662");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.DateTime dateTime27 = instant24.toDateTimeISO();
        org.joda.time.Instant instant30 = instant24.withDurationAdded((long) (byte) 0, (int) 'a');
        org.joda.time.Instant instant32 = instant30.plus(1522122789L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
    }

    @Test
    public void test08663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08663");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        boolean boolean41 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime37.getDayOfYear();
        org.joda.time.DateTime dateTime45 = dateTime37.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property51 = localTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        int int57 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime47.toMutableDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime59 = dateTime34.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100L, chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(100L, chronology64);
        boolean boolean66 = dateTime62.isAfter((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime62.getDayOfYear();
        org.joda.time.DateTime dateTime69 = dateTime62.plusYears((int) (short) 0);
        long long70 = dateTime62.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int72 = dateTime62.get(dateTimeFieldType71);
        int int73 = dateTime34.get(dateTimeFieldType71);
        org.joda.time.Chronology chronology74 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfMonth();
        long long79 = chronology74.add(1649603014307L, (long) 422, 540);
        org.joda.time.DateTimeField dateTimeField80 = chronology74.yearOfEra();
        long long82 = dateTimeField80.roundFloor((long) 32607240);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1649603242187L + "'", long79 == 1649603242187L);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test08664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08664");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withDefaultYear((int) (short) 10);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter6.getPrinter();
        boolean boolean26 = dateTimeFormatter6.isParser();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime31 = property30.withMinimumValue();
        int int32 = localTime31.getHourOfDay();
        org.joda.time.LocalTime.Property property33 = localTime31.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.lang.String str39 = dateTime36.toString("4", locale38);
        java.lang.String str40 = localTime31.toString("197", locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter6.withLocale(locale38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = dateTimeFormatter6.print(63686358283169L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimePrinter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "4" + "'", str39, "4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "197" + "'", str40, "197");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test08665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08665");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.era();
        org.joda.time.DateTimeField dateTimeField40 = chronology32.millisOfDay();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test08666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08666");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        long long25 = chronology19.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = chronology19.getDateTimeMillis(445, 425, (-108204186), 54311644);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 425 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32771L + "'", long25 == 32771L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test08667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08667");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime3.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime3.year();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime14 = property11.addToCopy(3);
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = dateTime14.withZoneRetainFields(dateTimeZone17);
        java.lang.String str19 = dateTimeZone17.getID();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(obj0, dateTimeZone17);
        org.joda.time.LocalTime.Property property21 = localTime20.minuteOfHour();
        int int22 = localTime20.size();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test08668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08668");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.era();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.plusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime11.toMutableDateTime(chronology15);
        boolean boolean17 = mutableDateTime16.isBeforeNow();
        int int18 = property5.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.LocalDateTime localDateTime20 = property5.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.era();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfWeek(1645456002);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645456002 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test08669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08669");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean4 = file2.mkdirs();
        boolean boolean5 = file2.exists();
        boolean boolean6 = file2.delete();
        java.io.File file7 = null;
        java.io.File file9 = new java.io.File(file7, "hi!");
        long long10 = file9.length();
        java.lang.String str11 = file9.getCanonicalPath();
        file9.deleteOnExit();
        boolean boolean13 = file9.createNewFile();
        boolean boolean14 = file2.renameTo(file9);
        boolean boolean15 = file2.createNewFile();
        java.io.File file16 = null;
        java.io.File file18 = new java.io.File(file16, "hi!");
        long long19 = file18.length();
        boolean boolean21 = file18.setReadable(false);
        long long22 = file18.getTotalSpace();
        boolean boolean23 = file18.canRead();
        java.io.File file24 = file18.getCanonicalFile();
        boolean boolean25 = file2.renameTo(file24);
        java.io.File file27 = new java.io.File(file2, "gregory");
        boolean boolean28 = file27.mkdir();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 57344L + "'", long10 == 57344L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/experiment/hi!" + "'", str11, "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 57344L + "'", long19 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 364740218880L + "'", long22 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(file24);
// flaky:         org.junit.Assert.assertEquals(file24.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file24.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals(file27.getParent(), "hi!");
        org.junit.Assert.assertEquals(file27.toString(), "hi!/gregory");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test08670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08670");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-21T00:00:00.000+100:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T00:00:00.000+100:00\" is malformed at \"+100:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08671");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(0, 21417);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21417 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08672");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate7 = localDate3.minusWeeks(100);
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfCentury();
        org.joda.time.Chronology chronology9 = localDate3.getChronology();
        java.lang.Object obj10 = null;
        boolean boolean11 = localDate3.equals(obj10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 8);
        org.joda.time.DateTime dateTime16 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(83);
        org.joda.time.DateTime.Property property19 = dateTime16.centuryOfEra();
        int int20 = dateTime16.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 44 + "'", int20 == 44);
    }

    @Test
    public void test08673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08673");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = property7.withMinimumValue();
        boolean boolean10 = dateTime8.isEqual(280488214528L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08674");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        int int5 = localDate4.getYear();
        org.joda.time.LocalDate localDate7 = localDate4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtCurrentTime();
        int int11 = localDate7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 8);
        boolean boolean17 = dateTimeZone12.isStandardOffset((long) 1970);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.lang.String str20 = dateTimeZone12.getShortName(299090817024L, locale19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight22 = localDate7.toDateMidnight(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = localDate7.getValue((-2712971));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -2712971");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test08675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08675");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("21 Oct 2111 15:04:34 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"21 Oct 2111 15:04:34 GMT\" is malformed at \" Oct 2111 15:04:34 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08676");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) '#', dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int5 = localDateTime4.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withCenturyOfEra(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears(40);
        int int10 = localDateTime9.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 982 + "'", int10 == 982);
    }

    @Test
    public void test08677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08677");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        java.lang.String str3 = file2.getCanonicalPath();
        long long4 = file2.lastModified();
        long long5 = file2.lastModified();
        boolean boolean6 = file2.delete();
        java.io.File file7 = file2.getAbsoluteFile();
        boolean boolean8 = file7.delete();
        long long9 = file7.getUsableSpace();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/experiment/hi!" + "'", str3, "/experiment/hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645456004000L + "'", long4 == 1645456004000L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645456004000L + "'", long5 == 1645456004000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 280486891520L + "'", long9 == 280486891520L);
    }

    @Test
    public void test08678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08678");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusYears(1100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withHourOfDay((-12));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -12 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test08679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08679");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) '#', dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime8.plus((long) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears(3);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        int int31 = localDateTime28.getMonthOfYear();
        org.joda.time.DateTime dateTime32 = dateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean33 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight dateMidnight34 = dateTime3.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime3.withDayOfMonth(273);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 273 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test08680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        calendar4.clear();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        calendar4.setTimeZone(timeZone18);
        int int20 = calendar4.getMinimalDaysInFirstWeek();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        java.util.TimeZone timeZone23 = calendar4.getTimeZone();
        long long24 = calendar4.getTimeInMillis();
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-30,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=30,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-30L) + "'", long24 == (-30L));
    }

    @Test
    public void test08681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = localDate1.getField(1);
        int int7 = dateTimeField4.getDifference(100L, 57600013L);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        int int9 = localDate8.getCenturyOfEra();
        org.joda.time.LocalDate localDate11 = localDate8.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        int int13 = property12.getMaximumValue();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((-4871));
        org.joda.time.LocalDate localDate19 = localDate15.withCenturyOfEra(24);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = locale20.getDisplayVariant(locale24);
        java.lang.String str26 = locale24.getDisplayCountry();
        java.lang.String str27 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDate15, locale24);
        java.lang.String str28 = locale24.getCountry();
        java.lang.String str29 = locale24.getDisplayCountry();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str23, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "France" + "'", str26, "France");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "juin" + "'", str27, "juin");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FR" + "'", str28, "FR");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "France" + "'", str29, "France");
    }

    @Test
    public void test08682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08682");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime dateTime6 = dateTime2.minusDays(21);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) '#', dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int13 = dateTimeZone9.getOffset((long) 20);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(3);
        boolean boolean17 = dateTimeZone9.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTime dateTime18 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime19 = dateTime6.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 360000000 + "'", int13 == 360000000);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test08683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08683");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant6.withDurationAdded(readableDuration9, 361);
        org.joda.time.Instant instant12 = instant6.toInstant();
        org.joda.time.Chronology chronology13 = instant6.getChronology();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant6.withDurationAdded(readableDuration14, 1645455888);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test08684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08684");
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException("21 Feb 2022 15:01:57 GMT", throwable6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("18 Feb 2022 05:50:48 GMT", (java.lang.Throwable) iOException7);
        java.io.IOException iOException10 = new java.io.IOException("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=11,MONTH=117,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=122,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", (java.lang.Throwable) iOException7);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=16,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", (java.lang.Throwable) iOException10);
        java.io.IOException iOException13 = new java.io.IOException("\u4e2d\u6587", (java.lang.Throwable) iOException10);
        java.io.IOException iOException14 = new java.io.IOException("", (java.lang.Throwable) iOException13);
        java.lang.String str15 = iOException13.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e2d\u6587" + "'", str15, "\u4e2d\u6587");
    }

    @Test
    public void test08685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08685");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        int int3 = localDate1.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate1.minusDays(5);
        org.joda.time.DateMidnight dateMidnight6 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate8 = localDate1.withWeekyear(311);
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths((int) '/');
        org.joda.time.LocalDate localDate12 = localDate10.withYear(14);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime17 = property16.withMinimumValue();
        org.joda.time.LocalTime localTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localTime18.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int26 = dateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localTime18.isSupported(dateTimeFieldType25);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localTime30.getFieldType(3);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalTime localTime35 = localTime30.withFieldAdded(durationFieldType33, 8);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localTime38.getFieldType(3);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalTime localTime43 = localTime38.withFieldAdded(durationFieldType41, 8);
        boolean boolean44 = localTime30.isSupported(durationFieldType41);
        java.lang.String str45 = durationFieldType41.toString();
        java.lang.String str46 = durationFieldType41.getName();
        org.joda.time.LocalTime localTime48 = localTime18.withFieldAdded(durationFieldType41, 361);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = localDate12.withFieldAdded(durationFieldType41, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "seconds" + "'", str45, "seconds");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "seconds" + "'", str46, "seconds");
        org.junit.Assert.assertNotNull(localTime48);
    }

    @Test
    public void test08686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08686");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withFields((org.joda.time.ReadablePartial) localDate4);
        int int7 = localDate6.getDayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = dateTime10.toCalendar(locale11);
        calendar12.clear(9);
        calendar12.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime21.getDayOfYear();
        org.joda.time.DateTime dateTime29 = dateTime21.withDurationAdded((long) (short) 0, 100);
        int int30 = dateTime29.getWeekOfWeekyear();
        boolean boolean31 = calendar12.before((java.lang.Object) dateTime29);
        org.joda.time.DateTime dateTime33 = dateTime29.withWeekyear(11);
        org.joda.time.LocalDate localDate34 = dateTime29.toLocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfWeek();
        org.joda.time.LocalDate localDate37 = property35.setCopy(7);
        org.joda.time.LocalDate localDate38 = property35.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate39 = property35.roundCeilingCopy();
        boolean boolean40 = localDate6.equals((java.lang.Object) property35);
        int int41 = property35.get();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
    }

    @Test
    public void test08687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08687");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.lang.String str2 = timeZone1.getID();
        boolean boolean3 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.plusDays(3);
        int int10 = localDate9.getYear();
        org.joda.time.LocalDate localDate12 = localDate9.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (byte) 100);
        java.util.Date date15 = localDate12.toDate();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        java.util.Locale locale19 = null;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        calendar20.clear(9);
        int int24 = calendar20.getGreatestMinimum((int) (short) 0);
        calendar20.setLenient(false);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        int int28 = timeZone27.getRawOffset();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        int int30 = timeZone29.getRawOffset();
        boolean boolean31 = timeZone27.hasSameRules(timeZone29);
        calendar20.setTimeZone(timeZone27);
        java.util.Date date33 = calendar20.getTime();
        boolean boolean34 = date15.before(date33);
        boolean boolean35 = timeZone1.inDaylightTime(date15);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456005209,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=45,MILLISECOND=209,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sun Aug 09 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=70,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=30,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 30 + "'", int28 == 30);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 30 + "'", int30 == 30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08688");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        java.util.Date date3 = localDateTime0.toDate();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType7, 197);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays(9);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDateTime10.getValue(2099);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2099");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 15:06:46 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millis" + "'", str8, "millis");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08689");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localDate5.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear(2019);
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.LocalDate.Property property11 = localDate9.centuryOfEra();
        org.joda.time.LocalDate localDate12 = property11.withMinimumValue();
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        int int15 = localDate14.size();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0000-02-21" + "'", str7, "0000-02-21");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test08690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08690");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime13.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.clockhourOfDay();
        org.joda.time.Chronology chronology38 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyear();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromMillisOfDay(816586062000L, chronology38);
        org.joda.time.LocalTime localTime43 = localTime41.plusMinutes(2020);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
    }

    @Test
    public void test08691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08691");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        boolean boolean8 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime4.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime4.year();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) (byte) 1);
        java.util.Date date16 = dateTime15.toDate();
        boolean boolean17 = date0.before(date16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date16);
        date16.setYear(29);
        date16.setHours(34019000);
        date16.setYear((int) ':');
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 15:06:45 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Nov 13 08:59:59 GMT+00:00 5839");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test08692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08692");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths(999);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.joda.time.LocalDate localDate11 = property10.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) localDate11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test08693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08693");
        java.io.File file1 = new java.io.File("1970-03-19T00:00:00.100Z");
        boolean boolean2 = file1.createNewFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "1970-03-19T00:00:00.100Z");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test08694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08694");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.String str16 = nameProvider9.getName(locale12, "\u897f\u5143", "18 Feb 2022 05:51:03 GMT");
        java.util.Locale locale19 = new java.util.Locale(":", "2057-02-19");
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str23 = nameProvider9.getName(locale19, "Mon Mar 08 00:11:18 GMT 5666", "Jan 4, 1970 9:11:19 AM");
        java.lang.String str24 = property7.getAsText(locale19);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(locale19.toString(), ":_2057-02-19");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10" + "'", str24, "10");
    }

    @Test
    public void test08695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08695");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime8.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        boolean boolean24 = localTime2.isSupported(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        java.lang.String str26 = durationFieldType25.getName();
        org.joda.time.LocalTime localTime28 = localTime2.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        boolean boolean35 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime39 = dateTime31.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime41 = dateTime31.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property45 = localTime44.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime48 = localTime44.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        int int51 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime41.toMutableDateTime(dateTimeZone47);
        int int54 = dateTimeZone47.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime55 = localTime28.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime56 = dateTime55.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime58 = dateTime55.withYear(83);
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTime55.toString("1970/01/04 9:11:19", locale60);
        boolean boolean63 = dateTime55.isBefore(82800004L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millis" + "'", str26, "millis");
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970/01/04 9:11:19" + "'", str61, "1970/01/04 9:11:19");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test08696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08696");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        java.lang.String str3 = file2.getCanonicalPath();
        boolean boolean4 = file2.mkdir();
        long long5 = file2.getTotalSpace();
        boolean boolean8 = file2.setExecutable(true, true);
        java.lang.String str9 = file2.getPath();
        boolean boolean10 = file2.exists();
        file2.deleteOnExit();
        boolean boolean12 = file2.canExecute();
        java.lang.String str13 = file2.getName();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/experiment/hi!" + "'", str3, "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 364740218880L + "'", long5 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test08697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08697");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        int int2 = localDateTime0.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int4 = localDateTime0.get(dateTimeFieldType3);
        int int5 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusHours((int) (short) 1);
        org.joda.time.DateTime dateTime8 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusWeeks(287);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test08698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08698");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        boolean boolean8 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime4.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime4.year();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) (byte) 1);
        java.util.Date date16 = dateTime15.toDate();
        boolean boolean17 = date0.before(date16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date16);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfMonth();
        int int20 = property19.get();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 15:06:45 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
    }

    @Test
    public void test08699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08699");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plus(readablePeriod3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfMonth(9);
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        java.lang.Integer int12 = dateTimeFormatter11.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone16.getShortName((long) (-1), locale18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter11.withZone(dateTimeZone16);
        java.util.Locale locale21 = dateTimeFormatter11.getLocale();
        java.util.Locale locale24 = new java.util.Locale("2022-02-25T19:02:14.075", "1 janv. 1970 00:00:00");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter11.withLocale(locale24);
        java.util.Locale locale26 = dateTimeFormatter25.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = localDateTime6.toString("Property[hourOfDay]", locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertEquals(locale24.toString(), "2022-02-25t19:02:14.075_1 JANV. 1970 00:00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "2022-02-25t19:02:14.075_1 JANV. 1970 00:00:00");
    }

    @Test
    public void test08700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08700");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean5 = file2.setReadable(false);
        long long6 = file2.getTotalSpace();
        java.io.File file7 = file2.getCanonicalFile();
        boolean boolean8 = file2.canWrite();
        java.io.File file9 = file2.getParentFile();
        java.io.File file10 = file2.getAbsoluteFile();
        java.io.File file11 = null;
        java.io.File file13 = new java.io.File(file11, "hi!");
        long long14 = file13.length();
        boolean boolean16 = file13.setReadable(false);
        java.io.File file17 = file13.getAbsoluteFile();
        boolean boolean18 = file2.renameTo(file17);
        boolean boolean20 = file2.setLastModified(54212L);
        java.io.File file21 = null;
        java.io.File file23 = new java.io.File(file21, "hi!");
        long long24 = file23.length();
        boolean boolean25 = file23.mkdirs();
        boolean boolean26 = file23.exists();
        boolean boolean27 = file23.exists();
        boolean boolean28 = file23.canRead();
        boolean boolean30 = file23.setWritable(false);
        java.io.File file32 = new java.io.File(file23, "");
        java.lang.String str33 = file23.getPath();
        boolean boolean34 = file2.renameTo(file23);
        long long35 = file23.getUsableSpace();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 364740218880L + "'", long6 == 364740218880L);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment/hi!");
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57344L + "'", long14 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(file17);
// flaky:         org.junit.Assert.assertEquals(file17.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 57344L + "'", long24 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull("file32.getParent() == null", file32.getParent());
        org.junit.Assert.assertEquals(file32.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 280491700224L + "'", long35 == 280491700224L);
    }

    @Test
    public void test08701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08701");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        org.joda.time.LocalDate.Property property7 = localDate5.year();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = dateTimeField8.getAsText(1645455772303L, locale10);
        long long13 = dateTimeField8.remainder(1649602935000L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 8607735000L + "'", long13 == 8607735000L);
    }

    @Test
    public void test08702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08702");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        int int10 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        int int12 = dateTime11.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test08703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08703");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        int int9 = localDate8.getCenturyOfEra();
        org.joda.time.LocalDate localDate11 = localDate8.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateTime dateTime19 = localDate3.toDateTimeAtCurrentTime(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getNameKey((long) 2922789);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test08704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08704");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withPeriodAdded(readablePeriod2, 0);
        int int5 = localDateTime4.getEra();
        org.joda.time.Chronology chronology6 = localDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay(10);
        int int11 = localDateTime10.getYearOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime14.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime25 = dateTime23.plus(0L);
        org.joda.time.DateTime dateTime26 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean27 = dateTimeZone7.equals((java.lang.Object) dateTime23);
        java.lang.Object obj28 = null;
        boolean boolean29 = dateTimeZone7.equals(obj28);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08705");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localDate5.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear(2019);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        int int11 = localDate9.indexOf(dateTimeFieldType10);
        org.joda.time.LocalDate.Property property12 = localDate9.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(1645455742);
        org.joda.time.LocalDate localDate16 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate17 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((int) 'x');
        org.joda.time.LocalDate.Property property20 = localDate17.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0000-02-21" + "'", str7, "0000-02-21");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test08706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08706");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        java.lang.String str15 = property14.getAsShortText();
        org.joda.time.DateTime dateTime16 = property14.withMinimumValue();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfMonth(9);
        java.util.Date date25 = localDateTime24.toDate();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.yearOfCentury();
        long long27 = property26.remainder();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths(0);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime31.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime35 = dateTime31.toLocalDateTime();
        int int36 = property26.getDifference((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        org.joda.time.DateTime.Property property39 = dateTime31.property(dateTimeFieldType37);
        int int40 = dateTime16.get(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Wed Feb 09 15:06:46 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3424005666L + "'", long27 == 3424005666L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test08707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08707");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(423, 83, 54231058);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08708");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime10 = localTime8.withMillisOfDay(54157);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test08709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08709");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("DateTimeField[hourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[hourOfHalfday]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08710");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = dateTime13.toString("4", locale15);
        java.lang.String str17 = locale15.getScript();
        int int18 = property10.getMaximumTextLength(locale15);
        org.joda.time.DateTime dateTime19 = property10.roundHalfCeilingCopy();
        int int20 = dateTime19.getWeekyear();
        int int21 = dateTime19.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "4" + "'", str16, "4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08711");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.centuryOfEra();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology32);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.hourOfHalfday();
        long long42 = dateTimeField39.addWrapField(63686358282231L, 292278993);
        java.lang.String str44 = dateTimeField39.getAsShortText(43L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 63686347482231L + "'", long42 == 63686347482231L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
    }

    @Test
    public void test08712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08712");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(2922789, 32769, 1645455913, 0, 1322);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1322 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08713");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 'a');
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTime dateTime24 = dateTime8.toDateTime(chronology22);
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime30.plus((long) 'a');
        org.joda.time.DateTime dateTime36 = dateTime30.plusWeeks(11);
        org.joda.time.DateTime dateTime38 = dateTime36.withMillis((long) 8);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property42 = localTime41.hourOfDay();
        org.joda.time.LocalTime localTime44 = localTime41.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology45 = localTime44.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime38.toDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.clockhourOfDay();
        long long51 = chronology45.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DurationField durationField52 = chronology45.minutes();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology45.getZone();
        org.joda.time.DateTimeField dateTimeField54 = chronology45.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) property25, chronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 32771L + "'", long51 == 32771L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test08714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08714");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfHour();
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test08715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08715");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale locale9 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet10);
        java.util.stream.Stream<java.lang.String> strStream12 = strSet10.stream();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        boolean boolean15 = strSet10.removeAll((java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        boolean boolean27 = strSet21.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.stream.Stream<java.lang.String> strStream28 = strSet26.stream();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        boolean boolean31 = strSet26.removeAll((java.util.Collection<java.lang.String>) strSet30);
        boolean boolean32 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet26);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfSecond();
        boolean boolean41 = strSet26.contains((java.lang.Object) property40);
        org.joda.time.LocalDateTime localDateTime42 = property40.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = property40.setCopy("09:21:59.903");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"09:21:59.903\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test08716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08716");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        int int25 = dateTimeZone18.getOffset((long) 20);
        java.lang.String str26 = dateTimeZone18.getID();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
    }

    @Test
    public void test08717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08717");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfMonth(23);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfSecond(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withField(dateTimeFieldType10, 11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test08718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08718");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        int int5 = localDate2.getEra();
        int int6 = localDate2.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDate2.getFieldType(32580010);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32580010");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test08719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08719");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfSecond(3);
        org.joda.time.LocalTime localTime8 = localTime6.minusMinutes(1645455761);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = localTime6.withMinuteOfHour(1645455916);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645455916 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test08720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08720");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minus(readableDuration8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusSeconds((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime25 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = dateTime25.withZone(dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withPeriodAdded(readablePeriod31, 197);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(52);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DurationField durationField38 = dateTimeField37.getDurationField();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        int int42 = dateTime41.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime(dateTimeZone43);
        java.util.Locale locale47 = new java.util.Locale("", "hi!");
        java.util.Locale locale50 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = locale47.getDisplayScript(locale50);
        java.util.Calendar calendar54 = dateTime44.toCalendar(locale47);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        int int56 = timeZone55.getRawOffset();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        int int58 = timeZone57.getRawOffset();
        boolean boolean59 = timeZone55.hasSameRules(timeZone57);
        calendar54.setTimeZone(timeZone57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = dateTime62.toString("4", locale64);
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.lang.String str67 = locale64.getDisplayCountry(locale66);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone57, locale66);
        int int69 = dateTimeField37.getMaximumShortTextLength(locale66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = localDateTime13.toString("Taiwan", locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 30 + "'", int56 == 30);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 30 + "'", int58 == 30);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "4" + "'", str65, "4");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u6cd5\u56fd" + "'", str67, "\u6cd5\u56fd");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1645456006062,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=46,MILLISECOND=92,ZONE_OFFSET=30,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test08721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08721");
        java.io.File file2 = new java.io.File("1969-12-31 23:59:59", "09:03:00.003");
        boolean boolean3 = file2.isFile();
        org.junit.Assert.assertEquals(file2.getParent(), "1969-12-31 23:59:59");
        org.junit.Assert.assertEquals(file2.toString(), "1969-12-31 23:59:59/09:03:00.003");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test08722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08722");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        boolean boolean13 = localTime1.equals((java.lang.Object) dateTime12);
        org.joda.time.LocalTime localTime15 = localTime1.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes(197);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localTime15.getValue(770);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 770");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test08723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08723");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((long) 1100, 0);
        org.joda.time.Instant instant32 = instant29.withDurationAdded((long) 'a', 976);
        org.joda.time.Instant instant33 = instant29.toInstant();
        org.joda.time.Instant instant35 = instant33.plus((long) 54292616);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
    }

    @Test
    public void test08724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08724");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(29, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08725");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1645434179);
        java.lang.String str3 = dateTimeZone1.getName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+457:03:54.179" + "'", str3, "+457:03:54.179");
    }

    @Test
    public void test08726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08726");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        int int3 = localDate1.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate1.minusDays(5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime8.plusYears((int) (short) 0);
        long long16 = dateTime8.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int18 = dateTime8.get(dateTimeFieldType17);
        java.util.Date date19 = dateTime8.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int21 = dateTime8.get(dateTimeFieldType20);
        int int22 = localDate1.get(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate1.plus(readablePeriod23);
        org.joda.time.DateTime dateTime25 = localDate24.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 70 + "'", int21 == 70);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test08727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08727");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType5.getField(chronology7);
        org.joda.time.ReadablePartial readablePartial9 = null;
        int[] intArray14 = new int[] { 32769, 'x', (byte) 1, 10 };
        int int15 = dateTimeField8.getMinimumValue(readablePartial9, intArray14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusYears(3);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withHourOfDay((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.minus(readableDuration24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        java.util.Locale locale32 = new java.util.Locale("/", "100", "0422-02-21");
        java.lang.String str33 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime25, (int) ':', locale32);
        java.lang.String str34 = locale32.getDisplayName();
        java.lang.String str35 = locale32.getDisplayLanguage();
        java.util.Locale.setDefault(locale32);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32769, 120, 1, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals(locale32.toString(), "/_100_0422-02-21");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "58" + "'", str33, "58");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/ (100,0422-02-21)" + "'", str34, "/ (100,0422-02-21)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/" + "'", str35, "/");
    }

    @Test
    public void test08728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08728");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1969-12-31 23:59:59");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-12-31 23:59:59\" is malformed at \" 23:59:59\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08729");
        java.util.Locale locale1 = new java.util.Locale("21 Feb 2022 15:05:25 GMT");
        org.junit.Assert.assertEquals(locale1.toString(), "21 feb 2022 15:05:25 gmt");
    }

    @Test
    public void test08730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08730");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        java.util.Date date14 = dateTime13.toDate();
        date14.setTime(280488529920L);
        int int17 = date14.getHours();
        long long18 = date14.getTime();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Nov 21 09:28:49 GMT+00:00 1978");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 280488529920L + "'", long18 == 280488529920L);
    }

    @Test
    public void test08731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08731");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 180000);
    }

    @Test
    public void test08732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08732");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Locale locale7 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.lang.String str9 = locale7.getVariant();
        java.lang.String str10 = locale7.getDisplayScript();
        java.util.Calendar.Builder builder11 = builder4.setLocale(locale7);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Calendar.Builder builder14 = builder11.setLocale(locale12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        int int18 = dateTime17.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime(dateTimeZone19);
        java.util.Locale locale23 = new java.util.Locale("", "hi!");
        java.util.Locale locale26 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.lang.String str28 = locale26.getVariant();
        java.lang.String str29 = locale23.getDisplayScript(locale26);
        java.util.Calendar calendar30 = dateTime20.toCalendar(locale23);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromCalendarFields(calendar30);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay(26);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property39 = localTime38.hourOfDay();
        org.joda.time.LocalTime localTime40 = property39.roundCeilingCopy();
        org.joda.time.LocalTime localTime41 = property39.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property39.getFieldType();
        org.joda.time.LocalTime localTime44 = localTime35.withField(dateTimeFieldType42, 0);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localTime46.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalTime localTime51 = localTime46.withMinuteOfHour(20);
        int int52 = localTime51.getSecondOfMinute();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property56 = localTime55.hourOfDay();
        org.joda.time.LocalTime localTime57 = property56.withMinimumValue();
        org.joda.time.LocalTime localTime58 = property56.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = localTime58.getFieldTypes();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100L, chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusHours(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int66 = dateTime64.get(dateTimeFieldType65);
        boolean boolean67 = localTime58.isSupported(dateTimeFieldType65);
        boolean boolean68 = localTime51.isSupported(dateTimeFieldType65);
        org.joda.time.LocalTime localTime70 = localTime44.withField(dateTimeFieldType65, 31);
        int[] intArray71 = localTime44.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder72 = builder11.setFields(intArray71);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u53f0\u7063" + "'", str13, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 6, 46, 265]");
    }

    @Test
    public void test08733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08733");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        java.util.Date date3 = localDateTime0.toDate();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = localDateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        java.lang.String str8 = durationFieldType7.getName();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType7, 197);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(1645434179);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readablePeriod13);
        java.lang.String str15 = localDateTime10.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plus(readablePeriod16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMonthOfYear(358);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 358 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 15:06:47 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millis" + "'", str8, "millis");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T15:06:46.498" + "'", str15, "2022-02-21T15:06:46.498");
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test08734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08734");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) '#', dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone4);
        int int8 = dateTimeZone4.getOffset((long) 20);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(63686358113845L, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(360000001L, dateTimeZone4);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        int int12 = localDateTime10.getDayOfMonth();
        int int13 = localDateTime10.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localDateTime10.getValue((-38088));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -38088");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 360000000 + "'", int8 == 360000000);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test08735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08735");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.lang.String str17 = localDateTime15.toString("days");
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusHours(270);
        int int20 = localDateTime15.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e0b\u5348202246" + "'", str17, "\u4e0b\u5348202246");
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 46 + "'", int20 == 46);
    }

    @Test
    public void test08736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08736");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean5 = file2.setReadable(false);
        long long6 = file2.getTotalSpace();
        java.io.File file7 = file2.getCanonicalFile();
        boolean boolean8 = file2.canWrite();
        java.io.File file9 = file2.getParentFile();
        java.io.File file10 = file2.getAbsoluteFile();
        java.io.File file11 = null;
        java.io.File file13 = new java.io.File(file11, "hi!");
        long long14 = file13.length();
        boolean boolean16 = file13.setReadable(false);
        java.io.File file17 = file13.getAbsoluteFile();
        boolean boolean18 = file2.renameTo(file17);
        boolean boolean19 = file17.canExecute();
        java.lang.String str20 = file17.getPath();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 364740218880L + "'", long6 == 364740218880L);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment/hi!");
        org.junit.Assert.assertNull("file13.getParent() == null", file13.getParent());
        org.junit.Assert.assertEquals(file13.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57344L + "'", long14 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(file17);
// flaky:         org.junit.Assert.assertEquals(file17.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/experiment/hi!" + "'", str20, "/experiment/hi!");
    }

    @Test
    public void test08737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08737");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.lang.Integer int4 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone8.getShortName((long) (-1), locale10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withZone(dateTimeZone8);
        boolean boolean13 = dateTimeFormatter12.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 86367230);
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter15.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 6);
        boolean boolean19 = dateTimeFormatter18.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant20 = org.joda.time.Instant.parse("\u4e2d\u6587", dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimeParser16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08738");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) '#', dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone3);
        int int7 = dateTimeZone3.getOffset((long) 20);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(63686358113845L, dateTimeZone3);
        int int9 = dateTime8.getMillisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 360000000 + "'", int7 == 360000000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 68513845 + "'", int9 == 68513845);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test08739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08739");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withFields((org.joda.time.ReadablePartial) localDate4);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtStartOfDay();
        int int8 = localDate4.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property9 = localDate4.year();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test08740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08740");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        org.joda.time.LocalTime.Property property17 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property21 = localTime20.hourOfDay();
        org.joda.time.LocalTime localTime23 = localTime20.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        java.lang.String str26 = dateTimeField25.getName();
        long long28 = dateTimeField25.roundHalfFloor((-62135596800000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField25.getType();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        boolean boolean36 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime32.getDayOfYear();
        org.joda.time.DateTime dateTime40 = dateTime32.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime42 = dateTime40.plusSeconds(1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime47.plus((long) 'a');
        org.joda.time.DateTime dateTime53 = dateTime47.plusWeeks(11);
        org.joda.time.DateTime dateTime55 = dateTime53.withMillis((long) 8);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property59 = localTime58.hourOfDay();
        org.joda.time.LocalTime localTime61 = localTime58.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology62 = localTime61.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime55.toDateTime(chronology62);
        org.joda.time.DateTime dateTime64 = dateTime42.withChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.dayOfYear();
        org.joda.time.DurationField durationField69 = chronology62.weeks();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType29.getField(chronology62);
        int int71 = localTime14.get(dateTimeFieldType29);
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime76 = localTime74.minusMillis((int) 'a');
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalTime localTime78 = localTime76.plus(readablePeriod77);
        org.joda.time.LocalTime localTime80 = localTime76.minusMillis(53);
        int int81 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime80);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hourOfHalfday" + "'", str26, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-62135596800000L) + "'", long28 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test08741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08741");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.DateTime dateTime27 = instant24.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfDay(3);
        int int30 = dateTime29.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test08742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08742");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime13 = dateTime11.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("2057-02-19");
        java.lang.String str18 = dateTimeZone14.getName((long) 27, locale17);
        java.lang.String str19 = locale17.getDisplayScript();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08743");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField45 = chronology35.weekyearOfCentury();
        boolean boolean47 = dateTimeField45.isLeap(299087167488L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32771L + "'", long41 == 32771L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test08744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08744");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        boolean boolean5 = dateTimeFormatter3.isOffsetParsed();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone7, locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withLocale(locale8);
        boolean boolean11 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withDefaultYear(1645455721);
        boolean boolean14 = dateTimeFormatter13.isOffsetParsed();
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale15.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withLocale(locale15);
        org.joda.time.Chronology chronology18 = dateTimeFormatter17.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.parse("29 oct. 193842 08:01:00", dateTimeFormatter17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456006509,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=46,MILLISECOND=509,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(chronology18);
    }

    @Test
    public void test08745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08745");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant24.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant24.withDurationAdded(readableDuration28, (int) (short) 1);
        org.joda.time.Instant instant31 = instant24.toInstant();
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        boolean boolean34 = instant31.isBefore(280492089344L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test08746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08746");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property3.withMaximumValue();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.LocalTime localTime9 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime10 = property3.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property3.addNoWrapToCopy(42000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9" + "'", str8, "9");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test08747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08747");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        boolean boolean5 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withZone(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.parse("juin", dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test08748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08748");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str11 = locale8.getDisplayScript();
        java.util.Locale locale12 = locale8.stripExtensions();
        int int13 = property4.getMaximumShortTextLength(locale8);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test08749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08749");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = dateTimeZone8.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withZone(dateTimeZone8);
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        boolean boolean13 = dateTimeFormatter11.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime25 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfHour();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) 63686358149128L, chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter14.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter14.withOffsetParsed();
        boolean boolean35 = dateTimeFormatter14.isPrinter();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08750");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.era();
        long long6 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withCenturyOfEra(32770);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        boolean boolean13 = localDateTime8.isSupported(durationFieldType12);
        boolean boolean14 = localDateTime7.equals((java.lang.Object) durationFieldType12);
        org.joda.time.Chronology chronology15 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 63686358406721L + "'", long6 == 63686358406721L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test08751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08751");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone1.isStandardOffset(63686358126436L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((-59002865459900L), dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
    }

    @Test
    public void test08752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08752");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale3.getDisplayCountry(locale5);
        java.lang.String str7 = dateTimeZone1.getShortName((long) 3, locale5);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale5);
        calendar8.clear();
        boolean boolean10 = calendar8.isWeekDateSupported();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = calendar8.getMinimum(73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 73");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str6, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-30,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=30,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test08753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08753");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = property8.setCopy("+00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08754");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T15:06:38.061Z");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test08755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08755");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setRegion("100");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "_100");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08756");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        int int3 = localDateTime0.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(422);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusMinutes(15);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.era();
        int int12 = localDateTime9.get(dateTimeFieldType11);
        int int13 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMinutes(224);
        int int16 = localDateTime9.getSecondOfMinute();
        int int17 = localDateTime9.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 46 + "'", int16 == 46);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 885 + "'", int17 == 885);
    }

    @Test
    public void test08757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08757");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean5 = file2.setReadable(false);
        long long6 = file2.getTotalSpace();
        boolean boolean7 = file2.canRead();
        java.io.File file8 = file2.getCanonicalFile();
        boolean boolean9 = file8.mkdir();
        long long10 = file8.getFreeSpace();
        boolean boolean13 = file8.setWritable(true, true);
        boolean boolean15 = file8.setReadable(false);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 364740218880L + "'", long6 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 299087392768L + "'", long10 == 299087392768L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08758");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.plusDays(3);
        int int10 = localDate9.getYear();
        org.joda.time.LocalDate localDate12 = localDate9.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (byte) 100);
        java.util.Date date15 = localDate14.toDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(422);
        org.joda.time.Interval interval18 = localDate14.toInterval(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withZone(dateTimeZone17);
        boolean boolean20 = dateTimeFormatter2.isPrinter();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        int int22 = localDate21.getCenturyOfEra();
        org.joda.time.LocalDate localDate24 = localDate21.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        int int26 = property25.getMaximumValue();
        boolean boolean27 = property25.isLeap();
        org.joda.time.LocalDate localDate28 = property25.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = dateTime30.toString("4", locale32);
        java.lang.String str34 = locale32.getScript();
        java.lang.String str35 = property25.getAsShortText(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter36.withDefaultYear(1645455790);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear(45);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.parse("2057-02-19");
        int int43 = localDateTime42.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusMonths(2057);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMonths(295);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = dateTimeFormatter38.print((org.joda.time.ReadablePartial) localDateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Apr 09 00:00:00 GMT+00:00 1962");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "4" + "'", str33, "4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "f\351vr." + "'", str35, "f\351vr.");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test08759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08759");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime8 = dateTime1.plusWeeks(271);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test08760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08760");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1, locale2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("100");
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1, locale7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("100");
        boolean boolean12 = timeZone1.hasSameRules(timeZone11);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        java.lang.String str23 = dateTimeField22.getName();
        long long26 = dateTimeField22.add(1645454200000L, 43);
        java.util.Locale locale29 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.util.Locale locale33 = new java.util.Locale("", "hi!");
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale36.getVariant();
        java.lang.String str39 = locale33.getDisplayScript(locale36);
        java.lang.String str40 = locale29.getDisplayScript(locale33);
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        java.lang.String str43 = locale42.getDisplayName();
        java.lang.String str44 = locale33.getDisplayScript(locale42);
        int int45 = dateTimeField22.getMaximumTextLength(locale42);
        java.lang.String str46 = timeZone11.getDisplayName(true, 0, locale42);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456006982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=46,MILLISECOND=982,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456006982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=46,MILLISECOND=982,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hourOfHalfday" + "'", str23, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645609000000L + "'", long26 == 1645609000000L);
        org.junit.Assert.assertEquals(locale29.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "chinois (Taiwan)" + "'", str43, "chinois (Taiwan)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GMT" + "'", str46, "GMT");
    }

    @Test
    public void test08761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08761");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        java.lang.String str9 = localTime8.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localTime8.getValue(224);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 224");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10:43:00.000" + "'", str9, "10:43:00.000");
    }

    @Test
    public void test08762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08762");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withPeriodAdded(readablePeriod15, 0);
        int int18 = localDateTime17.getEra();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology19.getZone();
        org.joda.time.DateTime dateTime21 = dateTime12.toDateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1100L + "'", long22 == 1100L);
    }

    @Test
    public void test08763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08763");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = dateTime11.minusWeeks(1970);
        org.joda.time.DateTime.Property property18 = dateTime11.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test08764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08764");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (short) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours(0);
        org.joda.time.DateTime dateTime15 = dateTime11.minusYears((-1));
        int int16 = dateTime11.getYearOfEra();
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate18 = dateTime11.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test08765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08765");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        int int3 = localDateTime0.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(422);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusMinutes(15);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withDayOfMonth(24);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.minusMillis(2);
        org.joda.time.LocalDateTime.Property property14 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.minusWeeks(54173);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(270);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMillis(54158083);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withYearOfEra(3855718);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDateTime22.getFields();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
    }

    @Test
    public void test08766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08766");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (short) 100, 3, (int) (byte) 10, (int) '#', 9);
        int int13 = calendar4.getMinimalDaysInFirstWeek();
        java.util.Date date15 = new java.util.Date((long) (byte) 0);
        java.util.Date date21 = new java.util.Date(32770, (-18574), 59, 8, (int) (short) 100);
        boolean boolean22 = date15.after(date21);
        calendar4.setTime(date15);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone25);
        java.util.TimeZone timeZone27 = dateTimeZone25.toTimeZone();
        calendar4.setTimeZone(timeZone27);
        java.time.Instant instant29 = calendar4.toInstant();
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Apr 28 09:40:00 GMT+00:00 33122");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(instant29);
    }

    @Test
    public void test08767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08767");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate13 = localDate10.withFieldAdded(durationFieldType11, 15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate13.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test08768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08768");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean5 = file2.setReadable(false);
        boolean boolean6 = file2.canRead();
        java.io.File file7 = null;
        java.io.File file9 = new java.io.File(file7, "hi!");
        long long10 = file9.length();
        boolean boolean11 = file9.mkdirs();
        boolean boolean12 = file2.renameTo(file9);
        java.lang.String str13 = file9.getCanonicalPath();
        java.lang.String str14 = file9.getCanonicalPath();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 57344L + "'", long10 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/experiment/hi!" + "'", str13, "/experiment/hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/experiment/hi!" + "'", str14, "/experiment/hi!");
    }

    @Test
    public void test08769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08769");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.lang.Integer int4 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter3.getZone();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.LocalTime localTime13 = localTime10.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter20.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.parse("weeks", dateTimeFormatter20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimeParser22);
    }

    @Test
    public void test08770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08770");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate7 = localDate3.minusWeeks(100);
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.withMinimumValue();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours(0);
        org.joda.time.DateTime dateTime16 = dateTime12.minusYears((-1));
        org.joda.time.DateTime dateTime18 = dateTime12.plusMillis(563);
        org.joda.time.DateTime dateTime19 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate21 = localDate9.withWeekOfWeekyear(18);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test08771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08771");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = property1.setCopy("100");
        int[] intArray4 = localDate3.getValues();
        org.joda.time.LocalDate localDate6 = localDate3.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate6.withPeriodAdded(readablePeriod8, 563);
        org.joda.time.LocalDate localDate12 = localDate6.plusYears(9);
        org.joda.time.LocalDate localDate14 = localDate6.withYearOfCentury(0);
        int int15 = localDate14.getDayOfMonth();
        org.joda.time.LocalDate.Property property16 = localDate14.weekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 2, 22]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test08772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08772");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        int int6 = localDate5.getCenturyOfEra();
        org.joda.time.LocalDate localDate8 = localDate5.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate10 = localDate8.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate8.minusWeeks(100);
        org.joda.time.LocalDate localDate14 = localDate12.plusYears(32770);
        org.joda.time.DateTime dateTime15 = dateTime2.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(0);
        boolean boolean18 = dateTime17.isAfterNow();
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08773");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        calendar4.clear();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        calendar4.setTimeZone(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        int int21 = calendar20.getFirstDayOfWeek();
        int int22 = calendar20.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = calendar20.getMinimum(19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645456007256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u7fa9\u5927\u5229\u6587\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=47,MILLISECOND=286,ZONE_OFFSET=30,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test08774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08774");
        java.util.TimeZone timeZone0 = null;
        java.util.TimeZone.setDefault(timeZone0);
    }

    @Test
    public void test08775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08775");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withZoneUTC();
        java.lang.StringBuffer stringBuffer19 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        boolean boolean26 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.plusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime25.toMutableDateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime25.withMillisOfSecond(69);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(stringBuffer19, (org.joda.time.ReadableInstant) dateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test08776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08776");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((long) 1100, 0);
        org.joda.time.Instant instant32 = instant29.withDurationAdded((long) 'a', 976);
        org.joda.time.Instant instant34 = instant29.minus((long) 21);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.plus(readablePeriod36);
        int int38 = dateTime37.getHourOfDay();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test08777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08777");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.plusMinutes(8);
        org.joda.time.Chronology chronology12 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime2.minusYears(30382);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08778");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = property1.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate4 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate6 = property1.addWrapFieldToCopy(1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, 52);
        org.joda.time.LocalDate localDate11 = localDate9.withYear(2018);
        org.joda.time.LocalDate.Property property12 = localDate11.year();
        java.lang.Class<?> wildcardClass13 = localDate11.getClass();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test08779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08779");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale7 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale14 = new java.util.Locale("");
        java.util.Locale locale17 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.lang.String str19 = locale17.getVariant();
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale25.getVariant();
        java.util.Locale locale30 = new java.util.Locale("", "hi!");
        java.util.Locale locale33 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getVariant();
        java.lang.String str36 = locale30.getDisplayScript(locale33);
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale7, locale11, locale12, locale14, locale17, locale21, locale22, locale25, locale33 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.lang.String str43 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        java.lang.String str48 = locale44.getDisplayName();
        java.util.Set<java.lang.String> strSet49 = locale44.getUnicodeLocaleAttributes();
        strSet49.clear();
        java.util.stream.Stream<java.lang.String> strStream51 = strSet49.stream();
        java.lang.String str52 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet49);
        boolean boolean53 = strSet49.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str47, "\u53f0\u6e7e\u5730\u533a");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "chinois (Taiwan)" + "'", str48, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test08780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08780");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setFirstDayOfWeek(271);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar4.getLeastMaximum((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=271,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08781");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime1.plus(readablePeriod5);
        int int7 = localTime6.getSecondOfMinute();
        org.joda.time.LocalTime localTime9 = localTime6.plusMillis(1971);
        org.joda.time.LocalTime localTime11 = localTime6.plusSeconds(2019);
        int int12 = localTime6.size();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test08782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08782");
        java.io.File file1 = new java.io.File("English");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "English");
    }

    @Test
    public void test08783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-359999997L) + "'", long20 == (-359999997L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test08784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08784");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        int int8 = dateTimeZone6.getStandardOffset((long) 20);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(3600, (int) '4', 54241311, 50400100, 0, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50400100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08785");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.plus(readableDuration37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withDurationAdded(readableDuration39, (int) (byte) 1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime41.toMutableDateTime(chronology42);
        boolean boolean44 = dateTime34.equals((java.lang.Object) dateTime41);
        org.joda.time.Chronology chronology45 = dateTime34.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = chronology45.get(readablePeriod47, (long) 50400100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test08786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08786");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        java.util.Date date3 = localDateTime0.toDate();
        int int4 = date3.getSeconds();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromDateFields(date3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMillis(422);
        java.lang.String str8 = localDateTime7.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 25 19:06:47 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 47 + "'", int4 == 47);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-25T19:06:47.992" + "'", str8, "2022-02-25T19:06:47.992");
    }

    @Test
    public void test08787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08787");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        calendar4.clear();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        calendar4.setTimeZone(timeZone18);
        calendar4.setFirstDayOfWeek(99);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = calendar4.getMaximum(17690655);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17690655");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=99,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test08788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08788");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar12);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar12.roll((int) (short) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test08789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08789");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundFloorCopy();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalTime localTime9 = localTime6.withFieldAdded(durationFieldType7, (int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime6.minus(readablePeriod10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property15 = localTime14.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime18 = localTime14.toDateTimeToday(dateTimeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime21.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(100L, chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        boolean boolean31 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime27.getDayOfYear();
        org.joda.time.DateTime dateTime35 = dateTime27.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime37 = dateTime27.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int39 = dateTime37.get(dateTimeFieldType38);
        boolean boolean40 = dateTime21.isSupported(dateTimeFieldType38);
        org.joda.time.LocalTime localTime42 = localTime14.withField(dateTimeFieldType38, 11);
        org.joda.time.LocalTime.Property property43 = localTime11.property(dateTimeFieldType38);
        org.joda.time.LocalTime.Property property44 = localTime11.millisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test08790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08790");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        calendar4.clear();
        int int18 = calendar4.getMinimalDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears(3);
        java.util.Date date22 = localDateTime19.toDate();
        java.lang.String str23 = date22.toGMTString();
        int int24 = date22.getYear();
        java.lang.String str25 = date22.toGMTString();
        boolean boolean26 = calendar4.after((java.lang.Object) str25);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=+100:00,offset=360000000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 25 19:06:47 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "25 Feb 2022 19:06:47 GMT" + "'", str23, "25 Feb 2022 19:06:47 GMT");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 122 + "'", int24 == 122);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "25 Feb 2022 19:06:47 GMT" + "'", str25, "25 Feb 2022 19:06:47 GMT");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08791");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(18398985, 54347);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18398985 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08792");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        calendar4.setMinimalDaysInFirstWeek(9);
        int int14 = calendar4.getWeeksInWeekYear();
        java.lang.String str15 = calendar4.getCalendarType();
        int int16 = calendar4.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = calendar4.isSet(1645455734);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-62133609599900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+100:00,offset=360000000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=9,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=360000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test08793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08793");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        java.lang.String str15 = property14.getAsShortText();
        org.joda.time.DateTime dateTime16 = property14.withMinimumValue();
        org.joda.time.DateTime dateTime17 = property14.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField18 = property14.getField();
        java.util.Locale locale23 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.lang.String str25 = locale23.getVariant();
        java.lang.String str26 = locale23.getDisplayScript();
        java.util.Locale locale27 = locale23.stripExtensions();
        java.lang.String str28 = locale23.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField18.set(3985981L, "/experiment", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"/experiment\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "HI!" + "'", str28, "HI!");
    }

    @Test
    public void test08794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08794");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology21.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology21.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology21.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long42 = chronology21.getDateTimeMillis((int) '#', 54336647, (-48), 933, 902, 8, 1645455914);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 933 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32771L + "'", long27 == 32771L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test08795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08795");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy(52);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        int int8 = localDateTime7.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        int int13 = localDate12.getCenturyOfEra();
        org.joda.time.LocalDate localDate15 = localDate12.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDate17.toString(dateTimeFormatter18);
        org.joda.time.LocalDate localDate21 = localDate17.withWeekyear(2019);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = localDate21.indexOf(dateTimeFieldType22);
        org.joda.time.LocalDate.Property property24 = localDate21.monthOfYear();
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDate25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2019 + "'", int8 == 2019);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0000-02-25" + "'", str19, "0000-02-25");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test08796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08796");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(15);
        int int7 = localDateTime4.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withSecondOfMinute(1100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test08797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08797");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        int int3 = localDate1.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate1.minusDays(5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        boolean boolean12 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime8.plusYears((int) (short) 0);
        long long16 = dateTime8.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int18 = dateTime8.get(dateTimeFieldType17);
        java.util.Date date19 = dateTime8.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int21 = dateTime8.get(dateTimeFieldType20);
        int int22 = localDate1.get(dateTimeFieldType20);
        org.joda.time.LocalDate localDate24 = localDate1.minusWeeks(11);
        org.joda.time.Interval interval25 = localDate1.toInterval();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 56 + "'", int3 == 56);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 70 + "'", int21 == 70);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test08798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08798");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.clear();
        calendar4.setMinimalDaysInFirstWeek(0);
        // The following exception was thrown during execution in test generation
        try {
            calendar4.roll(2057, 513);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08799");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str7 = nameProvider0.getShortName(locale3, "2000", "4");
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str11 = nameProvider0.getShortName(locale8, "UTC", "halfdayOfDay");
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        int int36 = dateTime13.get(dateTimeField35);
        long long38 = dateTimeField35.roundHalfEven((long) 2);
        int int40 = dateTimeField35.getLeapAmount(45056L);
        java.lang.String str42 = dateTimeField35.getAsShortText((long) 3);
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        int int46 = dateTimeField35.getMaximumShortTextLength(locale45);
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale50 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = locale50.getISO3Language();
        java.util.Locale.setDefault(category47, locale50);
        java.util.Locale locale55 = java.util.Locale.getDefault(category47);
        java.lang.String str56 = locale45.getDisplayVariant(locale55);
        java.lang.String str57 = locale45.getDisplayCountry();
        java.lang.String str60 = nameProvider0.getName(locale45, "Feb 25, 2022 12:13:55 AM", "\u897f\u5143");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(100L, chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(100L, chronology65);
        boolean boolean67 = dateTime63.isAfter((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime63.getDayOfYear();
        org.joda.time.DateTime dateTime70 = dateTime63.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime72 = dateTime63.minusWeeks(4);
        org.joda.time.DateTime dateTime74 = dateTime72.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime72.minus(readableDuration75);
        int int77 = dateTime72.getHourOfDay();
        org.joda.time.DateTime.Property property78 = dateTime72.secondOfMinute();
        java.util.Locale locale81 = new java.util.Locale(":", "2057-02-19");
        int int82 = property78.getMaximumTextLength(locale81);
        java.lang.String str83 = locale81.getDisplayLanguage();
        java.lang.String str86 = nameProvider0.getName(locale81, "DateTimeField[dayOfMonth]", "und-1970");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "24" + "'", str42, "24");
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "HI!" + "'", str57, "HI!");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertEquals(locale81.toString(), ":_2057-02-19");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + ":" + "'", str83, ":");
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test08800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime9.withZone(dateTimeZone12);
        java.lang.String str16 = dateTime9.toString("\u661f\u671f\u4e00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u661f\u671f\u4e00" + "'", str16, "\u661f\u671f\u4e00");
    }

    @Test
    public void test08801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        calendar4.set(10, 8, 5, 20, 100);
        calendar4.clear();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        calendar4.setTimeZone(timeZone18);
        calendar4.setFirstDayOfWeek(99);
        // The following exception was thrown during execution in test generation
        try {
            calendar4.roll((int) '/', (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=99,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test08802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08802");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(63686358175263L);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        int int3 = localDateTime2.getMonthOfYear();
        int int4 = localDateTime2.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minus(readablePeriod5);
        int int7 = localDateTime2.getMonthOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime2.getFieldTypes();
        boolean boolean9 = dateTime1.equals((java.lang.Object) dateTimeFieldTypeArray8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08803");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) ' ');
        int int5 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusDays(7);
        int int8 = localDateTime2.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDateTime2.getField((-4871));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -4871");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test08804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08804");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(11);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 8);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        long long44 = chronology38.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime45 = dateTime18.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology38.getZone();
        org.joda.time.DateTime dateTime49 = localTime14.toDateTimeToday(dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime52 = dateTime49.withDurationAdded(readableDuration50, 2720);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTime54.toString("4", locale56);
        int int58 = dateTime54.getYearOfCentury();
        org.joda.time.DateTime dateTime60 = dateTime54.plusMonths(6);
        org.joda.time.DateTime dateTime62 = dateTime60.minusHours(422);
        org.joda.time.DateTime.Property property63 = dateTime62.hourOfDay();
        org.joda.time.DateTime dateTime65 = dateTime62.plusDays(1439);
        boolean boolean66 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32771L + "'", long44 == 32771L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "4" + "'", str57, "4");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test08805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08805");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, 10, 21);
        org.joda.time.LocalTime localTime5 = localTime3.minusSeconds(102);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.setRegion("100");
        java.util.Locale locale10 = builder6.build();
        java.util.Locale.Builder builder11 = builder6.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = localTime3.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder16 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder14.setScript("");
        java.util.Locale.Builder builder19 = builder14.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder14.setRegion("2022-02-21T15:04:18.091Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-21T15:04:18.091Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_100");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        java.util.Locale locale22 = null;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        calendar23.clear(9);
        int int27 = calendar23.getGreatestMinimum((int) (short) 0);
        calendar23.roll(9, true);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, chronology35);
        boolean boolean37 = dateTime33.isAfter((org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime33.getDayOfYear();
        int int39 = dateTime33.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar40 = dateTime33.toGregorianCalendar();
        org.joda.time.Chronology chronology41 = dateTime33.getChronology();
        boolean boolean42 = calendar23.after((java.lang.Object) chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfDay();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(63686358120494L, chronology41);
        boolean boolean45 = localDate17.equals((java.lang.Object) dateTime44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.withDurationAdded(readableDuration46, 32580010);
        org.joda.time.DateTime.Property property49 = dateTime44.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime44.plus(readablePeriod50);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test08807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08807");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1, locale2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("100");
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        boolean boolean7 = timeZone5.observesDaylightTime();
        timeZone5.setRawOffset(54122803);
        timeZone5.setID("1970");
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone5);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime17 = property16.roundFloorCopy();
        org.joda.time.LocalTime localTime18 = property16.withMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        java.util.Locale locale22 = null;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.joda.time.DateTime.Property property24 = dateTime21.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        org.joda.time.DateTime dateTime28 = dateTime21.withField(dateTimeFieldType25, 21);
        org.joda.time.LocalTime.Property property29 = localTime18.property(dateTimeFieldType25);
        org.joda.time.DateTime dateTime30 = localTime18.toDateTimeToday();
        org.joda.time.DateTime dateTime32 = dateTime30.withMillis(35L);
        org.joda.time.DateTime dateTime34 = dateTime30.plusMonths(334);
        boolean boolean35 = calendar12.equals((java.lang.Object) 334);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456008076,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=48,MILLISECOND=76,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+15:02");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456008076,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970\",offset=54122803,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=50,MILLISECOND=879,ZONE_OFFSET=54122803,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08808");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone18);
        boolean boolean21 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        int int23 = dateTime22.getMonthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        boolean boolean30 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime26.getDayOfYear();
        org.joda.time.DateTime dateTime34 = dateTime26.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime36 = dateTime26.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property40 = localTime39.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime43 = localTime39.toDateTimeToday(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        int int46 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime36.toMutableDateTime(dateTimeZone42);
        org.joda.time.Instant instant48 = dateTime36.toInstant();
        org.joda.time.Instant instant50 = instant48.minus(45056L);
        org.joda.time.Chronology chronology51 = instant48.getChronology();
        long long52 = instant48.getMillis();
        org.joda.time.MutableDateTime mutableDateTime53 = instant48.toMutableDateTime();
        org.joda.time.Instant instant56 = instant48.withDurationAdded(23L, 1645455887);
        boolean boolean57 = dateTime22.isBefore((org.joda.time.ReadableInstant) instant56);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 90L + "'", long52 == 90L);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test08809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08809");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime9.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime19 = dateTime9.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        long long24 = property22.remainder();
        org.joda.time.DateTime dateTime25 = property22.roundFloorCopy();
        org.joda.time.DateTime dateTime26 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime27 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(3);
        int int33 = localDate32.getYear();
        org.joda.time.LocalDate localDate35 = localDate32.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.Chronology chronology39 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.monthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime26.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        long long46 = chronology39.add(1032810277618121007L, 280491397120L, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField47 = chronology39.minuteOfDay();
        int int49 = dateTimeField47.getLeapAmount((long) 60);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 90L + "'", long24 == 90L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1032810558109518127L + "'", long46 == 1032810558109518127L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08810");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("Mon Feb 21 15:01:51 UTC 2022");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("2019-02-21T15:03:49.497");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet9 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone11 = provider0.getZone("8");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(dateTimeZone11);
    }

    @Test
    public void test08811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08811");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(3);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(12);
        boolean boolean17 = dateTime13.isBefore(364694580000L);
        org.joda.time.DateTime dateTime19 = dateTime13.plus((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime13.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime25.plus((long) 'a');
        org.joda.time.DateTime dateTime31 = dateTime25.plusWeeks(11);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) 8);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property37 = localTime36.hourOfDay();
        org.joda.time.LocalTime localTime39 = localTime36.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime33.toDateTime(chronology40);
        org.joda.time.DurationField durationField42 = chronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.clockhourOfDay();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property47 = localTime46.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime50 = localTime46.toDateTimeToday(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        int int53 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean55 = dateTimeZone49.isStandardOffset(0L);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.Chronology chronology57 = chronology40.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField58 = chronology40.era();
        boolean boolean59 = dateTime13.equals((java.lang.Object) dateTimeField58);
        int int60 = dateTimeField58.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long63 = dateTimeField58.set((long) 2054, "17 Oct 2111 15:06:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"17 Oct 2111 15:06:00 GMT\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test08812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08812");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        int int22 = dateTime21.getWeekOfWeekyear();
        boolean boolean23 = calendar4.before((java.lang.Object) dateTime21);
        org.joda.time.DateTime dateTime25 = dateTime21.withWeekyear(11);
        org.joda.time.LocalDate localDate26 = dateTime21.toLocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.dayOfWeek();
        org.joda.time.LocalDate localDate29 = property27.setCopy(7);
        org.joda.time.LocalDate localDate30 = property27.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight31 = localDate30.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.plusDays(3);
        int int37 = localDate36.getYear();
        org.joda.time.LocalDate localDate39 = localDate36.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (byte) 100);
        java.util.Date date42 = localDate41.toDate();
        org.joda.time.LocalDate.Property property43 = localDate41.year();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        int int47 = dateTime46.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime(dateTimeZone48);
        java.util.Locale locale52 = new java.util.Locale("", "hi!");
        java.util.Locale locale55 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str57 = locale55.getVariant();
        java.lang.String str58 = locale52.getDisplayScript(locale55);
        java.util.Calendar calendar59 = dateTime49.toCalendar(locale52);
        int int60 = dateTime49.getMinuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime49.plusMillis(0);
        boolean boolean63 = dateTime49.isAfterNow();
        boolean boolean64 = dateTime49.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime49.getZone();
        org.joda.time.Interval interval66 = localDate41.toInterval(dateTimeZone65);
        java.util.TimeZone timeZone67 = dateTimeZone65.toTimeZone();
        boolean boolean68 = localDate30.equals((java.lang.Object) timeZone67);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Apr 09 00:00:00 UTC 1962");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test08813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.plus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((long) 1100, 0);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant26.plus(readableDuration30);
        org.joda.time.Instant instant34 = instant26.withDurationAdded(57L, 1645455738);
        java.lang.Object obj35 = null;
        boolean boolean36 = instant34.equals(obj35);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test08814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08814");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime13 = dateTime11.plus(0L);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime11.toGregorianCalendar();
        org.joda.time.DateTime dateTime16 = dateTime11.withYearOfEra(102);
        org.joda.time.DateTime.Property property17 = dateTime11.dayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test08815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08815");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology21.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology21.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32771L + "'", long27 == 32771L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test08816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08816");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
    }

    @Test
    public void test08817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        java.lang.String str33 = date32.toGMTString();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.fromDateFields(date32);
        java.time.Instant instant35 = date32.toInstant();
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=31127979585244100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=988376,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=149,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=54,SECOND=4,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gregory" + "'", str24, "gregory");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Fri May 28 11:54:04 UTC 988376");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "28 May 988376 11:54:04 GMT" + "'", str33, "28 May 988376 11:54:04 GMT");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(instant35);
    }

    @Test
    public void test08818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08818");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime22.plus((long) 'a');
        org.joda.time.DateTime dateTime28 = dateTime22.plusWeeks(11);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 8);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime36 = localTime33.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        int int40 = dateTime17.get(dateTimeField39);
        long long42 = dateTimeField39.roundHalfEven((long) 2);
        int int43 = dateTime12.get(dateTimeField39);
        int int45 = dateTimeField39.getLeapAmount((long) 20);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property49 = localTime48.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime52 = localTime48.toDateTimeToday(dateTimeZone51);
        org.joda.time.LocalTime localTime54 = localTime48.plusMinutes((int) (short) 100);
        int[] intArray58 = new int[] { 32769, 23, 100 };
        int int59 = dateTimeField39.getMaximumValue((org.joda.time.ReadablePartial) localTime54, intArray58);
        boolean boolean61 = dateTimeField39.isLeap(1645455947000L);
        org.joda.time.DurationField durationField62 = dateTimeField39.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 24 + "'", int43 == 24);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32769, 23, 100]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 24 + "'", int59 == 24);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test08819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08819");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean5 = file2.setReadable(false);
        long long6 = file2.getTotalSpace();
        java.io.File file7 = file2.getCanonicalFile();
        boolean boolean8 = file2.canWrite();
        boolean boolean10 = file2.setExecutable(false);
        boolean boolean13 = file2.setReadable(true, true);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime16.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds(1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime31.plus((long) 'a');
        org.joda.time.DateTime dateTime37 = dateTime31.plusWeeks(11);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillis((long) 8);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property43 = localTime42.hourOfDay();
        org.joda.time.LocalTime localTime45 = localTime42.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology46 = localTime45.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime39.toDateTime(chronology46);
        org.joda.time.DateTime dateTime48 = dateTime26.withChronology(chronology46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(100L, chronology53);
        boolean boolean55 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime51.getDayOfYear();
        org.joda.time.DateTime dateTime59 = dateTime51.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime61 = dateTime51.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property65 = localTime64.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime68 = localTime64.toDateTimeToday(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        int int71 = dateTimeZone67.getOffset((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime61.toMutableDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime73 = dateTime48.toDateTime(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime76 = dateTime73.toDateTime(dateTimeZone75);
        org.joda.time.DateTime.Property property77 = dateTime73.centuryOfEra();
        boolean boolean78 = file2.equals((java.lang.Object) dateTime73);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 364740218880L + "'", long6 == 364740218880L);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test08820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08820");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(80);
        org.joda.time.DateTime dateTime17 = dateTime11.withMonthOfYear((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        org.joda.time.DateTime.Property property19 = dateTime17.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis(1645455870);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test08821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08821");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale7 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale14 = new java.util.Locale("");
        java.util.Locale locale17 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.lang.String str19 = locale17.getVariant();
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale25.getVariant();
        java.util.Locale locale30 = new java.util.Locale("", "hi!");
        java.util.Locale locale33 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale33.getVariant();
        java.lang.String str36 = locale30.getDisplayScript(locale33);
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale7, locale11, locale12, locale14, locale17, locale21, locale22, locale25, locale33 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap41);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.util.Locale locale52 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        boolean boolean54 = strSet48.retainAll((java.util.Collection<java.lang.String>) strSet53);
        java.lang.Object[] objArray55 = strSet53.toArray();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet53);
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = null;
        org.joda.time.format.DateTimeParser dateTimeParser58 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter57, dateTimeParser58);
        boolean boolean60 = dateTimeFormatter59.isPrinter();
        boolean boolean61 = dateTimeFormatter59.isOffsetParsed();
        boolean boolean62 = strSet53.remove((java.lang.Object) dateTimeFormatter59);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = strSet53.add("French (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test08822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08822");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localDate5.toString(dateTimeFormatter6);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear(2019);
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.LocalDate.Property property11 = localDate9.centuryOfEra();
        org.joda.time.LocalDate.Property property12 = localDate9.monthOfYear();
        org.joda.time.LocalDate localDate14 = localDate9.minusYears(122);
        java.lang.Class<?> wildcardClass15 = localDate14.getClass();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0000-02-21" + "'", str7, "0000-02-21");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test08823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08823");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withDefaultYear((int) (short) 10);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimePrinter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test08824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08824");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime3.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = dateTime3.toLocalDateTime();
        int int8 = localDateTime7.size();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusDays((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(903);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08825");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.LocalDate localDate7 = localDate3.minusWeeks(317);
        int int8 = localDate3.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test08826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08826");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, 10, 21);
        org.joda.time.LocalTime localTime5 = localTime3.minusSeconds(102);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.setRegion("100");
        java.util.Locale locale10 = builder6.build();
        java.util.Locale.Builder builder11 = builder6.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = localTime3.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder16 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Builder builder19 = builder14.setLanguage("");
        java.util.Locale.Builder builder21 = builder14.setLanguageTag("Chinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder14.setExtension('4', "hourOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_100");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test08827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08827");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology6.add(readablePeriod8, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField12 = chronology6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1962, chronology6);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusYears((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withDayOfMonth(54347);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54347 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 13L + "'", long11 == 13L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test08828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08828");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        java.util.Date date14 = dateTime13.toDate();
        int int15 = date14.getMinutes();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromDateFields(date14);
        date14.setMinutes(54);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:54:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test08829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08829");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime3.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.LocalDate.Property property19 = localDate0.property(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = property19.roundCeilingCopy();
        org.joda.time.LocalDate localDate21 = property19.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate21.minus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withDayOfMonth(23);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = localDate23.compareTo((org.joda.time.ReadablePartial) localDateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test08830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08830");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime22.withYear(432960000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 432960000 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-359999997L) + "'", long20 == (-359999997L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test08831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08831");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime3.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.LocalDate.Property property19 = localDate0.property(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = property19.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        boolean boolean22 = dateTimeField21.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField21.getType();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = locale27.getVariant();
        java.lang.String str30 = locale27.getISO3Language();
        java.util.Locale.setDefault(category24, locale27);
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category24, locale32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 1970);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        boolean boolean39 = localDate35.equals((java.lang.Object) locale36);
        java.util.Locale.setDefault(category24, locale36);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale36);
        int int42 = dateTimeField21.getMaximumShortTextLength(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField21.getType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645456008718,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=48,MILLISECOND=718,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
    }

    @Test
    public void test08832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08832");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology8 = dateTimeFormatter2.getChronolgy();
        boolean boolean9 = dateTimeFormatter2.isPrinter();
        int int10 = dateTimeFormatter2.getDefaultYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
    }

    @Test
    public void test08833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08833");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfHour();
        org.joda.time.Chronology chronology21 = chronology18.withUTC();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 31, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = durationFieldType4.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(54343114, 3855718, (-625), chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3855718 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test08834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08834");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTime dateTime6 = dateTime2.minusYears((-1));
        boolean boolean7 = dateTime2.isBeforeNow();
        java.util.Locale locale10 = new java.util.Locale("", "20");
        java.util.Calendar calendar11 = dateTime2.toCalendar(locale10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        calendar16.clear(9);
        calendar16.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, chronology27);
        boolean boolean29 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime33 = dateTime25.withDurationAdded((long) (short) 0, 100);
        int int34 = dateTime33.getWeekOfWeekyear();
        boolean boolean35 = calendar16.before((java.lang.Object) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime33.withWeekyear(11);
        org.joda.time.LocalDate localDate38 = dateTime33.toLocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.withWeekyear(0);
        org.joda.time.DateTime dateTime41 = localDate38.toDateTimeAtStartOfDay();
        boolean boolean42 = calendar11.before((java.lang.Object) localDate38);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals(locale10.toString(), "_20");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test08835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08835");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate6.withPeriodAdded(readablePeriod8, 23);
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate13 = localDate3.plusDays(1645455913);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0422-02-21" + "'", str4, "0422-02-21");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test08836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08836");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime3.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 'a');
        org.joda.time.DateTime dateTime24 = dateTime18.plusWeeks(11);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime29.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime13.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.clockhourOfDay();
        org.joda.time.Chronology chronology38 = chronology33.withUTC();
        org.joda.time.Chronology chronology39 = chronology33.withUTC();
        org.joda.time.DurationField durationField40 = chronology39.minutes();
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.DurationField durationField42 = chronology41.hours();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.fromMillisOfDay(32769L, chronology41);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localTime43.getValue(65);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 65");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localTime43);
    }

    @Test
    public void test08837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08837");
        java.io.File file2 = new java.io.File("UTC", "");
        boolean boolean4 = file2.setLastModified(0L);
        boolean boolean7 = file2.setReadable(false, true);
        java.io.File file8 = file2.getParentFile();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test08838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08838");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = dateTimeZone8.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withZone(dateTimeZone8);
        boolean boolean12 = dateTimeFormatter11.isOffsetParsed();
        boolean boolean13 = dateTimeFormatter11.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withZoneUTC();
        boolean boolean15 = dateTimeFormatter11.isOffsetParsed();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder16.setRegion("100");
        java.util.Locale locale20 = builder16.build();
        java.util.Locale locale21 = builder16.build();
        java.lang.String str22 = locale21.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter11.withLocale(locale21);
        java.lang.StringBuffer stringBuffer24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusYears(3);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(stringBuffer24, (org.joda.time.ReadablePartial) localDateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "_100");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "_100");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test08839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08839");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        int int6 = localTime5.size();
        org.joda.time.LocalTime.Property property7 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test08840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08840");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime9.minuteOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime25 = dateTime15.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int27 = dateTime25.get(dateTimeFieldType26);
        boolean boolean28 = dateTime9.isSupported(dateTimeFieldType26);
        org.joda.time.LocalTime localTime30 = localTime2.withField(dateTimeFieldType26, 11);
        org.joda.time.LocalTime localTime32 = localTime30.plusMillis(7);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        int int36 = dateTime35.getMillisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.plusHours(360000000);
        org.joda.time.DateTime dateTime39 = localTime32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int int40 = localTime32.getSecondOfMinute();
        org.joda.time.LocalTime.Property property41 = localTime32.secondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test08841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08841");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(2019, 1970, (-18574));
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.lang.String str14 = locale11.toLanguageTag();
        java.util.Calendar.Builder builder15 = builder6.setLocale(locale11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getMonthOfYear();
        int int18 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusSeconds(2000);
        int[] intArray21 = localDateTime20.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder6.setFields(intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FR" + "'", str12, "FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr-FR" + "'", str14, "fr-FR");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 21, 52408959]");
    }

    @Test
    public void test08842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08842");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        java.time.Instant instant9 = calendar4.toInstant();
        java.util.Date date15 = new java.util.Date(5, (int) (short) -1, (int) (short) 100, 12, (int) (byte) -1);
        calendar4.setTime(date15);
        // The following exception was thrown during execution in test generation
        try {
            calendar4.roll(563, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-2045304060000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1905,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=69,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(instant9);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Mar 10 11:59:00 GMT+00:00 1905");
    }

    @Test
    public void test08843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08843");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withFields((org.joda.time.ReadablePartial) localDate4);
        org.joda.time.LocalDate.Property property7 = localDate4.weekyear();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.LocalDate localDate11 = property7.addToCopy(812);
        org.joda.time.LocalDate localDate12 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property7.roundHalfFloorCopy();
        java.lang.Object obj14 = null;
        boolean boolean15 = property7.equals(obj14);
        long long16 = property7.remainder();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4233600000L + "'", long16 == 4233600000L);
    }

    @Test
    public void test08844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08844");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(11);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) 8);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        long long26 = chronology20.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(35L, chronology20);
        org.joda.time.LocalTime localTime29 = localTime27.minusMinutes(366);
        java.util.Locale locale32 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = locale32.getVariant();
        java.lang.String str35 = locale32.getDisplayScript();
        java.util.Locale locale36 = locale32.stripExtensions();
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale38.getDisplayVariant();
        java.lang.String str41 = locale38.getCountry();
        java.lang.String str42 = locale36.getDisplayCountry(locale38);
        boolean boolean43 = localTime27.equals((java.lang.Object) locale38);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property47 = localTime46.hourOfDay();
        java.lang.String str49 = localTime46.toString("00:03:00.000");
        org.joda.time.LocalTime localTime51 = localTime46.minusMillis(999);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.fromMillisOfDay((long) 20);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(100L, chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int60 = dateTime58.get(dateTimeFieldType59);
        int int61 = localTime53.get(dateTimeFieldType59);
        boolean boolean62 = localTime51.isSupported(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime64 = localTime27.withField(dateTimeFieldType59, 1645455766);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645455766 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32771L + "'", long26 == 32771L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zho" + "'", str39, "zho");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "CN" + "'", str41, "CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "HI!" + "'", str42, "HI!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "00:03:00.000" + "'", str49, "00:03:00.000");
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test08845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08845");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        int int3 = localDateTime0.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes((int) (short) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test08846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08846");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(54173, 54363);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54173 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08847");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Locale locale10 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        boolean boolean12 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet11);
        boolean boolean13 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap22);
        java.util.Locale locale26 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale30 = new java.util.Locale("", "hi!");
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = new java.util.Locale("");
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale36.getVariant();
        java.lang.String str39 = locale36.getISO3Language();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Locale locale44 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getVariant();
        java.util.Locale locale49 = new java.util.Locale("", "hi!");
        java.util.Locale locale52 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        java.lang.String str54 = locale52.getVariant();
        java.lang.String str55 = locale49.getDisplayScript(locale52);
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale26, locale30, locale31, locale33, locale36, locale40, locale41, locale44, locale52 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter(languageRangeList23, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, strMap64);
        java.util.Locale locale66 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        strSet67.clear();
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList65, (java.util.Collection<java.lang.String>) strSet67);
        java.util.Locale.FilteringMode filteringMode70 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strSet67, filteringMode70);
        boolean boolean72 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet67);
        boolean boolean74 = strSet67.remove((java.lang.Object) (byte) -1);
        java.lang.Object[] objArray75 = strSet67.toArray();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals(locale49.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + filteringMode70 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode70.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
    }

    @Test
    public void test08848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08848");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        int int5 = localTime4.getHourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime4.secondOfMinute();
        org.joda.time.LocalTime localTime7 = property6.roundHalfEvenCopy();
        int int8 = property6.getMinimumValueOverall();
        org.joda.time.LocalTime localTime10 = property6.addCopy((long) 1645455721);
        org.joda.time.LocalTime localTime11 = property6.withMaximumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test08849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08849");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTime9.toString("4", locale11);
        java.lang.String str13 = locale11.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeFormatter2.parseMillis("MILLIS");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "4" + "'", str12, "4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test08850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08850");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime19 = localTime16.withPeriodAdded(readablePeriod17, (int) (byte) -1);
        org.joda.time.LocalTime localTime21 = localTime16.plusMinutes(1645455721);
        org.joda.time.LocalTime.Property property22 = localTime16.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test08851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08851");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.roll(9, true);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime14.getDayOfYear();
        int int20 = dateTime14.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = dateTime14.getChronology();
        boolean boolean23 = calendar4.after((java.lang.Object) chronology22);
        java.lang.String str24 = calendar4.getCalendarType();
        calendar4.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date32 = calendar4.getTime();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("100");
        java.lang.String str35 = timeZone34.getID();
        boolean boolean36 = timeZone34.observesDaylightTime();
        calendar4.setTimeZone(timeZone34);
        java.util.Date date39 = new java.util.Date((long) 3);
        java.util.Date date43 = new java.util.Date(563, (int) (byte) 100, (-959));
        boolean boolean44 = date39.after(date43);
        boolean boolean45 = timeZone34.inDaylightTime(date43);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=31127979585244100,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=988376,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=149,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=54,SECOND=4,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "gregory" + "'", str24, "gregory");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Fri May 28 11:54:04 GMT+00:00 988376");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GMT" + "'", str35, "GMT");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Thu Sep 13 00:00:00 GMT+00:00 2468");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test08852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08852");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readableDuration14);
        int int16 = dateTime11.getHourOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.hourOfDay();
        int int18 = property17.get();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        boolean boolean25 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime21.getDayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime21.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime32 = dateTime30.plus(0L);
        int int33 = property17.getDifference((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime32.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1710212160) + "'", int33 == (-1710212160));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test08853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08853");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        int int22 = dateTime21.getWeekOfWeekyear();
        boolean boolean23 = calendar4.before((java.lang.Object) dateTime21);
        java.lang.String str24 = dateTime21.toString();
        org.joda.time.DateTime dateTime26 = dateTime21.plusMinutes(53);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears(32580010);
        org.joda.time.DateTime dateTime30 = dateTime26.plusWeeks(360000000);
        org.joda.time.DateTime dateTime31 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime26.plusWeeks(72);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.100Z" + "'", str24, "1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test08854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08854");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) ' ');
        int int5 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withHourOfDay(15);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMillis(54286939);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay(10);
        int int13 = localDateTime10.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readableDuration14);
        int int16 = localDateTime15.getSecondOfMinute();
        int int17 = localDateTime15.getSecondOfMinute();
        int int18 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.minusMonths(1962);
        org.joda.time.LocalDateTime.Property property21 = localDateTime7.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 49 + "'", int16 == 49);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 49 + "'", int17 == 49);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test08855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08855");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(15);
        int int7 = localDateTime4.getMillisOfDay();
        int int8 = localDateTime4.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08856");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime3.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime3.year();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime14 = property11.addToCopy(3);
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = dateTime14.withZoneRetainFields(dateTimeZone17);
        java.lang.String str19 = dateTimeZone17.getID();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(obj0, dateTimeZone17);
        org.joda.time.LocalTime localTime22 = localTime20.minusHours(903);
        int int23 = localTime20.getMinuteOfHour();
        org.joda.time.LocalTime localTime25 = localTime20.minusSeconds(1645455887);
        org.joda.time.LocalTime localTime27 = localTime20.plusMinutes(43);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(localTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test08857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08857");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale2 = new java.util.Locale("");
        java.lang.String str3 = locale0.getDisplayVariant(locale2);
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.lang.String str5 = locale0.getVariant();
        java.lang.String str6 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "japonais" + "'", str6, "japonais");
    }

    @Test
    public void test08858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08858");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        boolean boolean18 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        boolean boolean23 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime17.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = dateTime11.toDateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfMinute();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime26.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = gregorianCalendar29.getMinimum(1645455997);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1645455997");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
    }

    @Test
    public void test08859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08859");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        java.util.GregorianCalendar gregorianCalendar12 = dateTime9.toGregorianCalendar();
        gregorianCalendar12.set(11, (int) 'u', 0, 122, 9);
        java.util.Date date19 = gregorianCalendar12.getTime();
        java.time.Instant instant20 = gregorianCalendar12.toInstant();
        gregorianCalendar12.set(90608, 7, 54217, 0, 366);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Sat Oct 05 02:09:00 GMT+00:00 20");
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test08860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08860");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMonths(0);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime3.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = dateTime3.toLocalDateTime();
        int int8 = localDateTime7.size();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusDays((int) (byte) 100);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMinutes((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readableDuration14);
        int int16 = localDateTime13.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
    }

    @Test
    public void test08861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08861");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property4 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime6 = localTime3.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(1645455804949L, chronology7);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        long long13 = dateTimeField11.roundHalfFloor((long) 273);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 273L + "'", long13 == 273L);
    }

    @Test
    public void test08862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08862");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        int int5 = property4.getMaximumValue();
        boolean boolean6 = property4.isLeap();
        org.joda.time.LocalDate localDate7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfEra();
        org.joda.time.LocalDate.Property property10 = localDate7.dayOfMonth();
        org.joda.time.LocalDate localDate12 = localDate7.minusMonths((int) '4');
        int int13 = localDate12.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 417 + "'", int13 == 417);
    }

    @Test
    public void test08863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08863");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        boolean boolean8 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime4.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime19.plus((long) 'a');
        org.joda.time.DateTime dateTime25 = dateTime19.plusWeeks(11);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillis((long) 8);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property31 = localTime30.hourOfDay();
        org.joda.time.LocalTime localTime33 = localTime30.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime27.toDateTime(chronology34);
        org.joda.time.DateTime dateTime36 = dateTime14.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.clockhourOfDay();
        org.joda.time.Chronology chronology39 = chronology34.withUTC();
        org.joda.time.Chronology chronology40 = chronology34.withUTC();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromMillisOfDay((long) 15, chronology34);
        org.joda.time.DurationField durationField42 = chronology34.hours();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 1645455927, chronology34);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology34);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test08864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08864");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        int int17 = localTime16.getSecondOfMinute();
        org.joda.time.LocalTime.Property property18 = localTime16.secondOfMinute();
        org.joda.time.LocalTime localTime19 = property18.getLocalTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27 + "'", int17 == 27);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test08865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08865");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DurationField durationField22 = chronology19.years();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField23.getType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test08866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08866");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        java.util.GregorianCalendar gregorianCalendar9 = dateTime8.toGregorianCalendar();
        boolean boolean10 = dateTime8.isAfterNow();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime23 = dateTime13.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property27 = localTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime30 = localTime26.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        int int33 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime23.toMutableDateTime(dateTimeZone29);
        int int36 = dateTimeZone29.getOffset((long) 20);
        org.joda.time.DateTime dateTime37 = dateTime8.toDateTime(dateTimeZone29);
        java.lang.String str39 = dateTimeZone29.getName((long) 51);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, chronology45);
        boolean boolean47 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime43.getDayOfYear();
        org.joda.time.DateTime dateTime51 = dateTime43.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds(1);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(100L, chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withZoneRetainFields(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime58.plus((long) 'a');
        org.joda.time.DateTime dateTime64 = dateTime58.plusWeeks(11);
        org.joda.time.DateTime dateTime66 = dateTime64.withMillis((long) 8);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property70 = localTime69.hourOfDay();
        org.joda.time.LocalTime localTime72 = localTime69.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology73 = localTime72.getChronology();
        org.joda.time.DateTime dateTime74 = dateTime66.toDateTime(chronology73);
        org.joda.time.DateTime dateTime75 = dateTime53.withChronology(chronology73);
        org.joda.time.DurationField durationField76 = chronology73.weekyears();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.weekyear();
        java.util.Locale locale81 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleKeys();
        java.lang.String str83 = locale81.getVariant();
        java.lang.String str84 = locale81.getISO3Language();
        java.lang.String str85 = dateTimeField77.getAsText(57600090L, locale81);
        java.lang.String str86 = dateTimeZone29.getShortName((-3600000L), locale81);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertEquals(locale81.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1970" + "'", str85, "1970");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
    }

    @Test
    public void test08867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08867");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime12 = dateTime2.withMonthOfYear(5);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime2.plus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime2.plusDays((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime16.withWeekyear(59);
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(1999);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test08868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08868");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.minus(10L);
        org.joda.time.DateTime dateTime17 = dateTime15.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime19 = dateTime15.withMillis((long) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, chronology21);
        int int23 = dateTime22.getMillisOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.plusHours(360000000);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime19.toMutableDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(70);
        long long35 = dateTimeZone33.previousTransition((long) 32772);
        org.joda.time.Chronology chronology36 = chronology30.withZone(dateTimeZone33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(721, 54289346, 54372141, 32579903, 2087, 36, 6, dateTimeZone33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32579903 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32772L + "'", long35 == 32772L);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test08869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08869");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean11 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.DateTime dateTime17 = dateTime14.minusHours(82980000);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter20.getZone();
        boolean boolean24 = dateTimeFormatter20.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = dateTime14.toString(dateTimeFormatter20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08870");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        calendar4.setLenient(true);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime21.plus((long) 'a');
        org.joda.time.DateTime dateTime27 = dateTime21.plusWeeks(11);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillis((long) 8);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property33 = localTime32.hourOfDay();
        org.joda.time.LocalTime localTime35 = localTime32.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime29.toDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        long long42 = chronology36.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime43 = dateTime16.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField44 = chronology36.secondOfMinute();
        int int46 = dateTimeField44.get((long) 11);
        long long48 = dateTimeField44.roundFloor(364694580000L);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.toLanguageTag();
        int int51 = dateTimeField44.getMaximumTextLength(locale49);
        long long54 = dateTimeField44.add(20L, 5923642320255734L);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getISO3Language();
        int int57 = dateTimeField44.getMaximumShortTextLength(locale55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = localTime13.toString("fr_CA", locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-62133263999900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 32771L + "'", long42 == 32771L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 364694580000L + "'", long48 == 364694580000L);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 5923642320255734020L + "'", long54 == 5923642320255734020L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "deu" + "'", str56, "deu");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test08871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08871");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField9.getType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime16.minus(10L);
        org.joda.time.DateTime dateTime22 = dateTime20.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime24 = dateTime20.withMillis((long) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(100L, chronology26);
        int int28 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.plusHours(360000000);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime31.withZoneRetainFields(dateTimeZone32);
        org.joda.time.Chronology chronology35 = dateTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime24.toMutableDateTime(chronology35);
        boolean boolean37 = dateTimeFieldType11.isSupported(chronology35);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField40 = chronology35.seconds();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test08872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08872");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("ja");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ja\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08873");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        int int5 = localDate4.getYear();
        org.joda.time.LocalDate localDate7 = localDate4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (byte) 100);
        java.util.Date date10 = localDate9.toDate();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfWeek();
        org.joda.time.LocalDate localDate12 = property11.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = property11.addToCopy(16852);
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks((-125945749));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localDate14.toString("1978-11-21T10:50:02.912Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Apr 09 00:00:00 GMT+00:00 1962");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test08874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08874");
        java.util.Locale locale1 = new java.util.Locale("GMT");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.era();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        java.lang.String str10 = property7.getAsText();
        int int11 = property7.getMinimumValueOverall();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder15 = builder12.setRegion("100");
        java.util.Locale locale16 = builder15.build();
        int int17 = property7.getMaximumTextLength(locale16);
        java.lang.String str18 = locale1.getDisplayLanguage(locale16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = dateTime20.toString("4", locale22);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale22.getDisplayCountry(locale24);
        java.lang.String str26 = locale22.getDisplayCountry();
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale27.getDisplayCountry(locale29);
        java.lang.String str31 = locale27.getDisplayName();
        boolean boolean32 = locale27.hasExtensions();
        java.util.Locale locale33 = locale27.stripExtensions();
        java.lang.String str34 = locale22.getDisplayLanguage(locale33);
        java.lang.String str35 = locale16.getDisplayLanguage(locale33);
        java.lang.String str36 = locale16.getDisplayName();
        org.junit.Assert.assertEquals(locale1.toString(), "gmt");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 63686358409644L + "'", long8 == 63686358409644L);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ap. J.-C." + "'", str10, "ap. J.-C.");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "_100");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gmt" + "'", str18, "gmt");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "4" + "'", str23, "4");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u6cd5\u56fd" + "'", str25, "\u6cd5\u56fd");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "France" + "'", str26, "France");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str30, "\u53f0\u6e7e\u5730\u533a");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "chinois (Taiwan)" + "'", str31, "chinois (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u6cd5\u6587" + "'", str34, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100" + "'", str36, "100");
    }

    @Test
    public void test08875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08875");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate5 = localDate1.withPeriodAdded(readablePeriod3, 23);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate5.minus(readablePeriod6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = localDate7.getFieldType(883);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 883");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test08876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08876");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.DurationField durationField22 = chronology19.years();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime29 = localTime25.toDateTimeToday(dateTimeZone28);
        org.joda.time.LocalTime localTime31 = localTime25.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime33 = localTime25.plusMillis(12);
        org.joda.time.LocalTime localTime35 = localTime33.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime37 = localTime33.minusMillis(32772);
        int int38 = localTime37.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime37.minus(readablePeriod39);
        long long42 = chronology19.set((org.joda.time.ReadablePartial) localTime40, (long) 277);
        org.joda.time.DateTimeField dateTimeField43 = chronology19.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27 + "'", int38 == 27);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 32547240L + "'", long42 == 32547240L);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test08877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08877");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.getDisplayName();
        boolean boolean3 = locale0.equals((java.lang.Object) 280484995072L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fran\347ais (Canada)" + "'", str1, "fran\347ais (Canada)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test08878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08878");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.yearOfEra();
        org.joda.time.DurationField durationField31 = chronology21.weeks();
        org.joda.time.DurationField durationField32 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology21.dayOfYear();
        org.joda.time.DurationField durationField35 = chronology21.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology21.getDateTimeMillis(120, 0, 32770, 34, 1645455836, 2019, 822);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32771L + "'", long27 == 32771L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test08879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08879");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withPeriodAdded(readablePeriod2, 42000);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test08880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08880");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        int int2 = localDate0.getDayOfWeek();
        int int3 = localDate0.getDayOfWeek();
        java.util.Date date4 = localDate0.toDate();
        java.lang.String str5 = date4.toLocaleString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "21 f\351vr. 2022 00:00:00" + "'", str5, "21 f\351vr. 2022 00:00:00");
    }

    @Test
    public void test08881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08881");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(70, (int) ' ');
        java.lang.String str4 = dateTimeZone2.getName((long) 32580010);
        int int6 = dateTimeZone2.getOffsetFromLocal((-61788527999965L));
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plus(readableDuration17);
        boolean boolean19 = dateTimeZone2.isLocalDateTimeGap(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+70:32" + "'", str4, "+70:32");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 253920000 + "'", int6 == 253920000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08882");
        java.io.File file2 = null;
        java.io.File file4 = new java.io.File(file2, "hi!");
        long long5 = file4.length();
        boolean boolean7 = file4.setReadable(false);
        long long8 = file4.getTotalSpace();
        boolean boolean9 = file4.canRead();
        java.io.File file11 = new java.io.File(file4, "2022-02-21T15:03:01.399");
        long long12 = file11.lastModified();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file13 = java.io.File.createTempFile("zho (GREENWICH MEAN TIME,und-100)", "18 Feb 2022 05:53:41 GMT", file11);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No such file or directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file4.getParent() == null", file4.getParent());
        org.junit.Assert.assertEquals(file4.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 57344L + "'", long5 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 364740218880L + "'", long8 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals(file11.getParent(), "hi!");
        org.junit.Assert.assertEquals(file11.toString(), "hi!/2022-02-21T15:03:01.399");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08883");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.Chronology chronology3 = localDate1.getChronology();
        org.joda.time.LocalDate localDate5 = localDate1.withDayOfYear(11);
        org.joda.time.DateTime dateTime6 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale16.getDisplayCountry(locale18);
        java.lang.String str20 = dateTimeZone14.getShortName((long) 3, locale18);
        org.joda.time.DateTime dateTime21 = dateTime12.withZoneRetainFields(dateTimeZone14);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(180000L, dateTimeZone14);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone14);
        boolean boolean24 = localDate5.equals((java.lang.Object) dateTimeZone14);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str19, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08884");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        int int8 = localDate7.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
    }

    @Test
    public void test08885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08885");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        calendar4.set((int) (byte) 1, 1, (-1));
        calendar4.setLenient(true);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        java.util.TimeZone timeZone14 = calendar4.getTimeZone();
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("100");
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17, locale18);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("100");
        boolean boolean22 = timeZone17.hasSameRules(timeZone21);
        boolean boolean23 = timeZone21.observesDaylightTime();
        timeZone21.setRawOffset(54122803);
        timeZone21.setID("1970");
        boolean boolean28 = timeZone14.hasSameRules(timeZone21);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        java.util.Locale locale32 = null;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        calendar33.clear(9);
        int int37 = calendar33.getGreatestMinimum((int) (short) 0);
        calendar33.setLenient(false);
        calendar33.set(10, 8, 5, 20, 100);
        calendar33.clear();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        calendar33.setTimeZone(timeZone47);
        boolean boolean49 = timeZone14.hasSameRules(timeZone47);
        timeZone47.setID("197");
        int int52 = timeZone47.getDSTSavings();
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-62133263999900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=30,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645456009822,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=49,MILLISECOND=822,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+15:02");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"197\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test08886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08886");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(4);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(9);
        org.joda.time.LocalDateTime localDateTime14 = property10.addToCopy(22L);
        org.joda.time.LocalDateTime localDateTime15 = property10.withMaximumValue();
        int int16 = localDateTime15.size();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test08887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08887");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean10 = dateTimeZone8.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withZone(dateTimeZone8);
        int int12 = dateTimeFormatter6.getDefaultYear();
        java.util.Locale locale13 = dateTimeFormatter6.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = dateTimeFormatter6.parseLocalDateTime("UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertNull(locale13);
    }

    @Test
    public void test08888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08888");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("AD");
        java.util.Locale locale4 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale4);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime25 = dateTime15.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int27 = dateTime25.get(dateTimeFieldType26);
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        boolean boolean31 = localTime9.isSupported(durationFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        java.lang.String str33 = durationFieldType32.getName();
        org.joda.time.LocalTime localTime35 = localTime9.withFieldAdded(durationFieldType32, (int) (short) -1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        boolean boolean42 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime38.getDayOfYear();
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime48 = dateTime38.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property52 = localTime51.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime55 = localTime51.toDateTimeToday(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        int int58 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime48.toMutableDateTime(dateTimeZone54);
        int int61 = dateTimeZone54.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime62 = localTime35.toDateTimeToday(dateTimeZone54);
        long long63 = dateTime62.getMillis();
        int int64 = dateTime62.getWeekyear();
        boolean boolean65 = calendar6.before((java.lang.Object) int64);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645456009924,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=49,MILLISECOND=924,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millis" + "'", str33, "millis");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645434179999L + "'", long63 == 1645434179999L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test08889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08889");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime10.withZone(dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withPeriodAdded(readablePeriod16, 197);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(52);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(0L, chronology21);
        long long26 = chronology21.add((long) 317, 280491302912L, 0);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.hourOfHalfday();
        long long30 = dateTimeField27.add((-48845667329000L), (long) 366);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 317L + "'", long26 == 317L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-48844349729000L) + "'", long30 == (-48844349729000L));
    }

    @Test
    public void test08890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08890");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T15:02:18.271Z");
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(27);
        org.joda.time.DateTime dateTime5 = dateTime1.minusMillis((-18574));
        org.joda.time.DateTime dateTime7 = dateTime1.plusMinutes(54122803);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime7.withMonthOfYear(302);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 302 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test08891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08891");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter19.getParser();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter19.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateTimeFormatter19.print(1645455905000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertNull(dateTimeZone22);
    }

    @Test
    public void test08892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08892");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTime dateTime6 = dateTime2.minusYears((-1));
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime9 = property7.addToCopy(9);
        org.joda.time.DateTime dateTime10 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property7.addWrapFieldToCopy(11);
        org.joda.time.DateTime dateTime14 = property7.addToCopy(19);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getNameKey((long) 8);
        long long21 = dateTimeZone15.adjustOffset(0L, false);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        boolean boolean24 = dateTimeZone15.isFixed();
        org.joda.time.DateTime dateTime25 = dateTime14.withZone(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test08893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08893");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 'a');
        org.joda.time.DateTime dateTime26 = dateTime20.plusWeeks(11);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillis((long) 8);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property32 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime34 = localTime31.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime28.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        long long41 = chronology35.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime42 = dateTime15.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.year();
        org.joda.time.DateTime dateTime44 = dateTime13.toDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField45 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology35.centuryOfEra();
        long long49 = dateTimeField46.add(63686358330071L, (long) 120);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32771L + "'", long41 == 32771L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 442369782330071L + "'", long49 == 442369782330071L);
    }

    @Test
    public void test08894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08894");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 100, 2, 11, 4, (int) (short) 0, (int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMillis((-1));
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        org.joda.time.DateTime dateTime12 = property9.addToCopy((long) 31);
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime17.toString(dateTimeFormatter20);
        org.joda.time.DateTime.Property property22 = dateTime17.centuryOfEra();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property26 = localTime25.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime29 = localTime25.toDateTimeToday(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        int int32 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = dateTimeZone28.isStandardOffset(0L);
        java.util.TimeZone timeZone35 = dateTimeZone28.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str44 = nameProvider37.getName(locale40, "hi!", "1970-01-01");
        java.lang.String str45 = dateTimeZone28.getShortName(10L, locale40);
        java.lang.String str46 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) dateTime17, dateTimeZone28);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfCentury(52);
        org.joda.time.DateTime dateTime51 = dateTime49.plusHours(1645455753);
        boolean boolean52 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime14.minusMinutes(54158083);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears(5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.100Z" + "'", str21, "1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test08895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08895");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundFloorCopy();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalTime localTime9 = localTime6.withFieldAdded(durationFieldType7, (int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime6.minus(readablePeriod10);
        org.joda.time.LocalTime localTime13 = localTime6.plusMinutes(0);
        org.joda.time.LocalTime localTime15 = localTime13.plusSeconds(1645455767);
        org.joda.time.LocalTime localTime17 = localTime15.plusSeconds(1645455890);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = localTime17.withHourOfDay(2720);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2720 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test08896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08896");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths(999);
        org.joda.time.LocalDate localDate11 = localDate9.withCenturyOfEra(4);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDate9.getValue(365);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 365");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test08897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08897");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay(1645455753, 971, 54217);
        java.util.Calendar.Builder builder15 = builder10.setTimeOfDay(54241311, 64800000, (int) (byte) 0, 788);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08898");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime22.plus((long) 'a');
        org.joda.time.DateTime dateTime28 = dateTime22.plusWeeks(11);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) 8);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime36 = localTime33.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime30.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        int int40 = dateTime17.get(dateTimeField39);
        long long42 = dateTimeField39.roundHalfEven((long) 2);
        int int43 = dateTime12.get(dateTimeField39);
        long long46 = dateTimeField39.add((long) 22, (-3599999L));
        int int47 = dateTimeField39.getMaximumValue();
        java.lang.String str49 = dateTimeField39.getAsShortText(13L);
        java.util.Locale locale53 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleKeys();
        java.lang.String str55 = locale53.getVariant();
        java.lang.String str56 = locale53.getDisplayScript();
        java.util.Locale locale57 = locale53.stripExtensions();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale57);
        java.lang.String str60 = dateTimeField39.getAsShortText(197, locale57);
        java.lang.String str61 = locale57.getDisplayLanguage();
        java.lang.String str62 = locale57.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = locale57.getUnicodeLocaleType("Jan 4, 1970 9:11:19 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Jan 4, 1970 9:11:19 AM");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 24 + "'", int43 == 24);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-12959996399978L) + "'", long46 == (-12959996399978L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 24 + "'", int47 == 24);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "24" + "'", str49, "24");
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "197" + "'", str60, "197");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test08899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08899");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, chronology12);
        boolean boolean14 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(dateTimeZone17);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeZone17.getShortName((long) 15, locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale27 = java.util.Locale.UK;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property31 = localTime30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime34 = localTime30.toDateTimeToday(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        int int37 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = dateTimeZone33.isStandardOffset(0L);
        java.util.TimeZone timeZone40 = dateTimeZone33.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider42 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str49 = nameProvider42.getName(locale45, "hi!", "1970-01-01");
        java.lang.String str50 = dateTimeZone33.getShortName(10L, locale45);
        java.lang.String str51 = locale27.getDisplayVariant(locale45);
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str53 = locale52.getDisplayCountry();
        java.util.Locale locale56 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("", "hi!");
        java.util.Locale locale63 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleKeys();
        java.lang.String str65 = locale63.getVariant();
        java.lang.String str66 = locale60.getDisplayScript(locale63);
        java.lang.String str67 = locale56.getDisplayScript(locale60);
        java.util.Locale.Category category68 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale69 = java.util.Locale.getDefault(category68);
        java.lang.String str70 = locale69.getDisplayName();
        java.lang.String str71 = locale60.getDisplayScript(locale69);
        java.util.Set<java.lang.String> strSet72 = locale69.getUnicodeLocaleKeys();
        java.lang.String str73 = locale52.getDisplayScript(locale69);
        java.lang.String str74 = locale27.getDisplayLanguage(locale69);
        java.util.Locale.setDefault(category0, locale69);
        java.util.Locale locale76 = java.util.Locale.getDefault(category0);
        java.lang.String str77 = locale76.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FRA" + "'", str24, "FRA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(nameProvider42);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Taiwan" + "'", str53, "Taiwan");
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale63.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + category68 + "' != '" + java.util.Locale.Category.FORMAT + "'", category68.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "French (France)" + "'", str70, "French (France)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "anglais" + "'", str74, "anglais");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "France" + "'", str77, "France");
    }

    @Test
    public void test08900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08900");
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property9 = localTime8.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime12 = localTime8.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        int int15 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.withYearOfEra(20);
        org.joda.time.DateMidnight dateMidnight18 = dateTime14.toDateMidnight();
        org.joda.time.Chronology chronology19 = dateMidnight18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(0, 59, 0, 11, 48, 351, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 351 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test08901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08901");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 8);
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronolgy();
        boolean boolean8 = dateTimeFormatter2.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08902");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(3);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime13.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime13.minuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test08903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08903");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime10 = property3.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property3.addNoWrapToCopy(788);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test08904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08904");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        java.time.Instant instant9 = calendar4.toInstant();
        calendar4.set(19, 317, 0, 1962, 54158083, 14);
        int int17 = calendar4.getWeekYear();
        java.util.TimeZone timeZone18 = calendar4.getTimeZone();
        calendar4.setTimeInMillis(63686358233718L);
        java.time.Instant instant21 = calendar4.toInstant();
        calendar4.setFirstDayOfWeek((int) (byte) 0);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=63686358233718,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=3988,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=53,MILLISECOND=718,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 148 + "'", int17 == 148);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(instant21);
    }

    @Test
    public void test08905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08905");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime11.plus((long) 'a');
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime16.withZone(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.withPeriodAdded(readablePeriod22, 197);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(52);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant29 = org.joda.time.Instant.parse("", dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test08906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08906");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) '#', dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        int int6 = localDateTime4.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test08907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08907");
        java.util.Date date6 = new java.util.Date(308, 1645455923, 334, 365, 8, 16);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromDateFields(date6);
        date6.setMonth(18);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jul 14 05:08:16 GMT+00:00 137123536");
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test08908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08908");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        int int2 = localDateTime0.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int4 = localDateTime0.get(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays((int) 'u');
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.weekyear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test08909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08909");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("21 Feb 2022 15:01:57 GMT", throwable1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException7 = new java.io.IOException("eras");
        java.io.IOException iOException9 = new java.io.IOException("FRA");
        iOException7.addSuppressed((java.lang.Throwable) iOException9);
        iOException2.addSuppressed((java.lang.Throwable) iOException9);
    }

    @Test
    public void test08910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08910");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.plusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime5.toMutableDateTime(chronology9);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        long long16 = dateTime15.getMillis();
        int int17 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMonths(2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645401600000L + "'", long16 == 1645401600000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test08911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08911");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        boolean boolean11 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime7.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime7.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime7.year();
        org.joda.time.DateTime dateTime17 = dateTime7.withMonthOfYear(5);
        int int18 = property4.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDate localDate19 = property4.roundFloorCopy();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test08912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08912");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("18 Feb 2022 05:51:24 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"18 Feb 2022 05:51:24 GMT\" is malformed at \" Feb 2022 05:51:24 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08913");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withDefaultYear((int) (short) 10);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter6.getPrinter();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withLocale(locale26);
        java.lang.StringBuffer stringBuffer28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusYears((int) ' ');
        int int34 = localDateTime31.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withHourOfDay(15);
        org.joda.time.LocalDateTime.Property property37 = localDateTime31.millisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, chronology39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, chronology42);
        boolean boolean44 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusYears(3);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean53 = localDateTime51.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType52.getField(chronology54);
        int int56 = dateTime43.get(dateTimeFieldType52);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType52.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime31.withFieldAdded(durationFieldType57, 16);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime31.plusDays(7);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(stringBuffer28, (org.joda.time.ReadablePartial) localDateTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimePrinter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test08914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08914");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readablePeriod10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(3);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks(4);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.minuteOfHour();
        boolean boolean25 = dateTimeZone13.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.era();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusWeeks(0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test08915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08915");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy((int) (short) 1);
        int int7 = property4.get();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test08916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08916");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withCenturyOfEra(32770);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withPivotYear((int) (short) 0);
        boolean boolean11 = localDateTime3.equals((java.lang.Object) dateTimeFormatter6);
        java.lang.StringBuffer stringBuffer12 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime28.withZone(dateTimeZone31);
        boolean boolean34 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours(0);
        org.joda.time.DateTime dateTime41 = dateTime37.minusYears((-1));
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfWeek();
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        int int44 = localDate43.getCenturyOfEra();
        org.joda.time.LocalDate localDate46 = localDate43.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate48 = localDate46.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone49);
        long long54 = dateTimeZone49.adjustOffset((long) 22, false);
        java.lang.String str56 = dateTimeZone49.getName((long) (short) 100);
        org.joda.time.DateTime dateTime57 = dateTime41.withZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTime dateTime58 = dateTime15.withZoneRetainFields(dateTimeZone49);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer12, (org.joda.time.ReadableInstant) dateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20 + "'", int44 == 20);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 22L + "'", long54 == 22L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test08917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08917");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int8 = localTime6.get(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property9 = localTime6.minuteOfHour();
        java.util.Locale locale10 = null;
        int int11 = property9.getMaximumShortTextLength(locale10);
        org.joda.time.LocalTime localTime13 = property9.setCopy(27);
        java.util.Locale locale15 = new java.util.Locale("HI!");
        java.lang.String str16 = property9.getAsText(locale15);
        org.joda.time.LocalTime localTime17 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property21 = localTime20.hourOfDay();
        org.joda.time.LocalTime localTime22 = property21.roundFloorCopy();
        org.joda.time.LocalTime localTime23 = property21.withMinimumValue();
        org.joda.time.LocalTime localTime24 = property21.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime25 = property21.withMaximumValue();
        org.joda.time.LocalTime localTime27 = property21.addWrapFieldToCopy(976);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime32.plus((long) 'a');
        org.joda.time.DateTime dateTime37 = dateTime36.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime(chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        boolean boolean46 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime45.minusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        boolean boolean51 = dateTimeZone49.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.DateTime dateTime53 = dateTime45.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime54 = dateTime39.toDateTime(dateTimeZone49);
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.plus(readablePeriod56);
        int int58 = property21.getDifference((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean60 = dateTime54.equals((java.lang.Object) 63686358164394L);
        boolean boolean61 = localTime17.equals((java.lang.Object) 63686358164394L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test08918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08918");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Thu");
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.Object obj3 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test08919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08919");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfMonth(23);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        int int10 = localDateTime8.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08920");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra(4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime9.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime19 = dateTime9.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfWeek();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        long long24 = property22.remainder();
        org.joda.time.DateTime dateTime25 = property22.roundFloorCopy();
        org.joda.time.DateTime dateTime26 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime27 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 90L + "'", long24 == 90L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test08921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08921");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate7 = localDate3.minusWeeks(100);
        org.joda.time.LocalDate.Property property8 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property9 = localDate3.weekOfWeekyear();
        java.lang.String str10 = property9.toString();
        org.joda.time.LocalDate localDate11 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property9.roundHalfEvenCopy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime16.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds(1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime31.plus((long) 'a');
        org.joda.time.DateTime dateTime37 = dateTime31.plusWeeks(11);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillis((long) 8);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property43 = localTime42.hourOfDay();
        org.joda.time.LocalTime localTime45 = localTime42.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology46 = localTime45.getChronology();
        org.joda.time.DateTime dateTime47 = dateTime39.toDateTime(chronology46);
        org.joda.time.DateTime dateTime48 = dateTime26.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.hourOfHalfday();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField54 = chronology46.clockhourOfDay();
        long long57 = dateTimeField54.getDifferenceAsLong((long) (short) 10, (long) 2020);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property62 = localTime61.hourOfDay();
        org.joda.time.LocalTime localTime64 = localTime61.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology65 = localTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfHalfday();
        java.lang.String str67 = dateTimeField66.getName();
        java.lang.String str69 = dateTimeField66.getAsShortText(280491302912L);
        boolean boolean70 = dateTimeField66.isLenient();
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.util.Locale locale73 = java.util.Locale.PRC;
        java.lang.String str74 = locale71.getDisplayCountry(locale73);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = locale71.getDisplayVariant(locale75);
        int int77 = dateTimeField66.getMaximumTextLength(locale71);
        java.lang.String str78 = dateTimeField54.getAsShortText(9, locale71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate79 = property9.setCopy("", locale71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[weekOfWeekyear]" + "'", str10, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hourOfHalfday" + "'", str67, "hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "10" + "'", str69, "10");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str74, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "9" + "'", str78, "9");
    }

    @Test
    public void test08922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08922");
        java.io.File file1 = new java.io.File("2022-02-21T15:05:45.635");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "2022-02-21T15:05:45.635");
    }

    @Test
    public void test08923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08923");
        java.io.File file1 = new java.io.File("18 Feb 2022 05:51:11 GMT");
        java.lang.String str2 = file1.getPath();
        java.io.File file3 = null;
        java.io.File file5 = new java.io.File(file3, "hi!");
        java.lang.String str6 = file5.getCanonicalPath();
        boolean boolean7 = file5.mkdir();
        long long8 = file5.getTotalSpace();
        boolean boolean11 = file5.setExecutable(true, true);
        java.lang.String str12 = file5.getPath();
        boolean boolean14 = file5.setLastModified((long) 1100);
        boolean boolean15 = file1.renameTo(file5);
        boolean boolean17 = file1.setReadable(false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "18 Feb 2022 05:51:11 GMT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "18 Feb 2022 05:51:11 GMT" + "'", str2, "18 Feb 2022 05:51:11 GMT");
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/experiment/hi!" + "'", str6, "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 364740218880L + "'", long8 == 364740218880L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08924");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.monthOfYear();
        org.joda.time.DurationField durationField36 = chronology32.centuries();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test08925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08925");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 13, (int) ' ');
        org.joda.time.DateTimeField dateTimeField18 = chronology12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 1645455766);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter22.getPrinter();
        boolean boolean24 = dateTimeFormatter22.isParser();
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 13L + "'", long17 == 13L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(dateTimePrinter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08926");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime11.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property19 = dateTime11.year();
        org.joda.time.DateTime dateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) (byte) 1);
        java.util.Date date23 = dateTime22.toDate();
        java.lang.String str24 = date23.toGMTString();
        calendar4.setTime(date23);
        int int26 = date23.getSeconds();
        java.time.Instant instant27 = date23.toInstant();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears(3);
        java.util.Date date31 = localDateTime28.toDate();
        int int32 = date31.getSeconds();
        java.lang.String str33 = date31.toGMTString();
        boolean boolean34 = date23.before(date31);
        long long35 = date23.getTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusYears(3);
        java.util.Date date39 = localDateTime36.toDate();
        int int40 = date39.getSeconds();
        java.lang.String str41 = date39.toGMTString();
        int int42 = date39.getYear();
        int int43 = date23.compareTo(date39);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-1000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "31 Dec 1969 23:59:59 GMT" + "'", str24, "31 Dec 1969 23:59:59 GMT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Mon Feb 21 15:06:50 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "21 Feb 2022 15:06:50 GMT" + "'", str33, "21 Feb 2022 15:06:50 GMT");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1000L) + "'", long35 == (-1000L));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 21 15:06:50 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "21 Feb 2022 15:06:50 GMT" + "'", str41, "21 Feb 2022 15:06:50 GMT");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 122 + "'", int42 == 122);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test08927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08927");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 'a');
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.plus(readableDuration21);
        int int23 = property7.getDifference((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean24 = localDateTime0.equals((java.lang.Object) int23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) '#', dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone27);
        int int30 = localDateTime29.getMinuteOfHour();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime35.plus((long) 'a');
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        boolean boolean41 = localDateTime29.equals((java.lang.Object) dateTime40);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime0.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, chronology47);
        boolean boolean49 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime45.getDayOfYear();
        org.joda.time.DateTime dateTime53 = dateTime45.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime55 = dateTime53.plusSeconds(1);
        org.joda.time.DateTime dateTime56 = localDateTime42.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfDay(10);
        int int60 = localDateTime57.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plus(readableDuration61);
        int int63 = localDateTime62.getSecondOfMinute();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(100L, chronology65);
        org.joda.time.DateTime dateTime68 = dateTime66.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        org.joda.time.DateTime dateTime71 = dateTime66.withMillis((long) '/');
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusYears(3);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = property75.setCopy(52);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minus(readablePeriod78);
        int int80 = localDateTime79.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int82 = localDateTime79.get(dateTimeFieldType81);
        int int83 = dateTime71.get(dateTimeFieldType81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime62.withField(dateTimeFieldType81, 17);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime42.withField(dateTimeFieldType81, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime42.plusYears((int) (byte) 0);
        int int90 = localDateTime89.size();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1645456010 + "'", int23 == 1645456010);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2019 + "'", int80 == 2019);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 906 + "'", int82 == 906);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
    }

    @Test
    public void test08928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08928");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        int int3 = localDateTime2.getYearOfEra();
        int[] intArray4 = localDateTime2.getValues();
        int int5 = localDateTime2.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[2022, 2, 21, 10]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test08929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08929");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) '#', dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime8.plus((long) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.plus(readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears(3);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        int int31 = localDateTime28.getMonthOfYear();
        org.joda.time.DateTime dateTime32 = dateTime18.withFields((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean33 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime3.plus(readablePeriod34);
        org.joda.time.Instant instant36 = dateTime35.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
    }

    @Test
    public void test08930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08930");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale locale9 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet10);
        java.util.stream.Stream<java.lang.String> strStream12 = strSet10.stream();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        boolean boolean15 = strSet10.removeAll((java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "/", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        boolean boolean27 = strSet21.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.stream.Stream<java.lang.String> strStream28 = strSet26.stream();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        boolean boolean31 = strSet26.removeAll((java.util.Collection<java.lang.String>) strSet30);
        boolean boolean32 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet26);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMinutes(15);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfSecond();
        boolean boolean41 = strSet26.contains((java.lang.Object) property40);
        org.joda.time.LocalDateTime localDateTime43 = property40.addToCopy((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = property40.setCopy("1645434179");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645434179 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test08931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08931");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.era();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusYears(361);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = localDateTime13.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -971 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08932");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(4);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime.Property property8 = localTime4.millisOfSecond();
        int int9 = property8.getMaximumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 999 + "'", int9 == 999);
    }

    @Test
    public void test08933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08933");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.Instant instant6 = dateTime1.toInstant();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        long long9 = instant8.getMillis();
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime10.withDayOfWeek(41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645456011052L + "'", long9 == 1645456011052L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test08934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08934");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(3);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(12);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime20 = property19.roundFloorCopy();
        org.joda.time.LocalTime localTime21 = property19.withMinimumValue();
        org.joda.time.LocalTime localTime22 = property19.roundFloorCopy();
        org.joda.time.LocalTime localTime23 = property19.withMinimumValue();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property27 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime28 = property27.withMinimumValue();
        int int29 = localTime28.getHourOfDay();
        org.joda.time.LocalTime.Property property30 = localTime28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = localTime28.getField(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField32.getType();
        boolean boolean34 = localTime23.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime.Property property35 = dateTime13.property(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test08935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08935");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, chronology5);
        boolean boolean7 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime3.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime14 = dateTime12.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusYears(3);
        java.util.Date date19 = localDateTime16.toDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDateTime16.toDateTime(dateTimeZone20);
        java.lang.String str24 = dateTimeZone20.getNameKey((long) 999);
        long long26 = dateTimeZone15.getMillisKeepLocal(dateTimeZone20, 299090219008L);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 1962, dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Mon Feb 21 15:06:51 GMT 2022");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 299090219008L + "'", long26 == 299090219008L);
    }

    @Test
    public void test08936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08936");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 20);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        boolean boolean3 = localTime1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property8 = localTime7.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2057-02-19");
        int int13 = property8.getMaximumShortTextLength(locale12);
        java.util.Locale.setDefault(locale12);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Set<java.lang.Character> charSet16 = locale12.getExtensionKeys();
        java.lang.String str17 = localTime1.toString("\u610f\u5927\u5229\u6587", locale12);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str17, "\u610f\u5927\u5229\u6587");
    }

    @Test
    public void test08937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08937");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime16.minus(10L);
        int int21 = property10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField22 = property10.getField();
        org.joda.time.DateTimeField dateTimeField23 = property10.getField();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.plusDays(3);
        int int29 = localDate28.getYear();
        org.joda.time.LocalDate localDate31 = localDate28.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (byte) 100);
        java.util.Date date34 = localDate33.toDate();
        org.joda.time.LocalDate.Property property35 = localDate33.yearOfCentury();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        int int38 = property35.getMaximumValue();
        org.joda.time.LocalDate localDate39 = property35.withMinimumValue();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property42 = localDate41.weekyear();
        org.joda.time.LocalDate localDate44 = property42.setCopy("100");
        org.joda.time.LocalDate localDate46 = localDate44.withDayOfYear(10);
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfMonth();
        org.joda.time.LocalDate localDate48 = property47.roundHalfFloorCopy();
        int[] intArray49 = localDate48.getValues();
        int[] intArray51 = dateTimeField23.add((org.joda.time.ReadablePartial) localDate39, 0, intArray49, 82980000);
        org.joda.time.DateTime dateTime52 = localDate39.toDateTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Apr 09 00:00:00 GMT 1962");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[82980100, 1, 10]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[82980100, 1, 10]");
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test08938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08938");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "hi!");
        long long3 = file2.length();
        boolean boolean5 = file2.setReadable(false);
        long long6 = file2.getTotalSpace();
        java.io.File file7 = file2.getCanonicalFile();
        boolean boolean8 = file2.canWrite();
        boolean boolean9 = file2.mkdir();
        long long10 = file2.length();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57344L + "'", long3 == 57344L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 364740218880L + "'", long6 == 364740218880L);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 57344L + "'", long10 == 57344L);
    }

    @Test
    public void test08939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08939");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime16.minus(10L);
        int int21 = property10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField22 = property10.getField();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property27 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime28 = property27.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("2057-02-19");
        int int32 = property27.getMaximumShortTextLength(locale31);
        java.util.Locale.setDefault(locale31);
        java.util.Set<java.lang.Character> charSet34 = locale31.getExtensionKeys();
        java.lang.String str35 = dateTimeField22.getAsShortText(52, locale31);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusYears(3);
        java.util.Date date39 = localDateTime36.toDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDateTime36.toDateTime(dateTimeZone40);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.millis();
        java.lang.String str44 = durationFieldType43.getName();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime36.withFieldAdded(durationFieldType43, 197);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays(1645434179);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minus(readablePeriod49);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMinutes(15);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusWeeks((int) (short) 100);
        int int61 = localDateTime58.getMillisOfSecond();
        int[] intArray62 = localDateTime58.getValues();
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str65 = locale64.getDisplayCountry();
        java.util.Locale locale68 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.util.Locale locale72 = new java.util.Locale("", "hi!");
        java.util.Locale locale75 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleKeys();
        java.lang.String str77 = locale75.getVariant();
        java.lang.String str78 = locale72.getDisplayScript(locale75);
        java.lang.String str79 = locale68.getDisplayScript(locale72);
        java.util.Locale.Category category80 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale81 = java.util.Locale.getDefault(category80);
        java.lang.String str82 = locale81.getDisplayName();
        java.lang.String str83 = locale72.getDisplayScript(locale81);
        java.util.Set<java.lang.String> strSet84 = locale81.getUnicodeLocaleKeys();
        java.lang.String str85 = locale64.getDisplayScript(locale81);
        java.lang.String str86 = locale64.getScript();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField22.set((org.joda.time.ReadablePartial) localDateTime46, 54138253, intArray62, "", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "52" + "'", str35, "52");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Feb 21 15:06:51 GMT 2022");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "millis" + "'", str44, "millis");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[2054, 2, 20, 85500010]");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Taiwan" + "'", str65, "Taiwan");
        org.junit.Assert.assertEquals(locale68.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals(locale72.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale75.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + category80 + "' != '" + java.util.Locale.Category.FORMAT + "'", category80.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test08940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08940");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar40 = dateTime38.toGregorianCalendar();
        int int41 = gregorianCalendar40.getWeekYear();
        java.lang.String str42 = gregorianCalendar40.getCalendarType();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(gregorianCalendar40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "gregory" + "'", str42, "gregory");
    }

    @Test
    public void test08941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08941");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(32770);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, chronology11);
        boolean boolean13 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime9.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withDefaultYear((int) (short) 10);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        int int26 = localDate25.getCenturyOfEra();
        org.joda.time.LocalDate localDate28 = localDate25.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate30 = localDate28.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate28.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        long long38 = dateTimeZone34.convertLocalToUTC((long) 180000, false, (long) 21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter24.withZone(dateTimeZone34);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now();
        int int41 = localDate40.getCenturyOfEra();
        org.joda.time.LocalDate localDate43 = localDate40.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate45 = localDate43.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate47 = localDate43.minusWeeks(100);
        org.joda.time.LocalDate.Property property48 = localDate43.yearOfCentury();
        org.joda.time.Chronology chronology49 = localDate43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfWeek();
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.minuteOfHour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter39.withChronology(chronology49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = dateTimeFormatter39.parseDateTime("+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 180000L + "'", long38 == 180000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test08942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08942");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfSecond(3);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime11 = property10.withMinimumValue();
        int int12 = localTime11.getHourOfDay();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = localTime11.getField(0);
        boolean boolean16 = localTime2.isBefore((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime localTime18 = localTime2.plusMillis(99);
        int int19 = localTime2.getHourOfDay();
        org.joda.time.LocalTime localTime21 = localTime2.plusHours(0);
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test08943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08943");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        int int22 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone18);
        org.joda.time.Instant instant24 = dateTime12.toInstant();
        org.joda.time.Instant instant26 = instant24.minus(45056L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant26.withDurationAdded(readableDuration28, 222);
        org.joda.time.DateTime dateTime31 = instant26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant26.plus(readableDuration32);
        org.joda.time.Instant instant36 = instant33.withDurationAdded((long) 10, (-2712971));
        org.joda.time.Instant instant39 = instant33.withDurationAdded(47L, 368);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test08944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08944");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 3, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = property3.setCopy(21417);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21417 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test08945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08945");
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        int int8 = localDate7.getCenturyOfEra();
        org.joda.time.LocalDate localDate10 = localDate7.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate14 = localDate10.minusWeeks(100);
        org.joda.time.LocalDate.Property property15 = localDate10.yearOfCentury();
        org.joda.time.Chronology chronology16 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfWeek();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(chronology16);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(99, 1645455888, 1439, 27, 54384, 16852, 80, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test08946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08946");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        timeZone0.setID("eras");
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test08947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08947");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate6.withPeriodAdded(readablePeriod8, 23);
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate.Property property12 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate14 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDate localDate18 = localDate16.plusWeeks(56);
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfMonth();
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = localDate16.getField((-57));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -57");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0422-02-21" + "'", str4, "0422-02-21");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test08948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08948");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        int int9 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear(273);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 273 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test08949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08949");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("18 Feb 2022 05:51:41 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=18feb202205:51:41gmt");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08950");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime17.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 8);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property29 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime31 = localTime28.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime12.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.clockhourOfDay();
        org.joda.time.Chronology chronology37 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.halfdayOfDay();
        org.joda.time.DurationField durationField39 = chronology32.weeks();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test08951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08951");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromCalendarFields(calendar15);
        calendar15.setMinimalDaysInFirstWeek(5);
        java.lang.String str19 = calendar15.getCalendarType();
        boolean boolean20 = calendar15.isWeekDateSupported();
        calendar15.setTimeInMillis(180000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=180000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=3,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test08952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08952");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTimeISO();
        boolean boolean5 = mutableDateTime3.isBefore(280489009152L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08953");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) '#', dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int5 = localDateTime4.getMinuteOfHour();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 'a');
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        boolean boolean16 = localDateTime4.equals((java.lang.Object) dateTime15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime4.dayOfMonth();
        int int18 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime4.plusWeeks(2019);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        int int24 = dateTime23.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime4.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = property30.setCopy(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test08954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08954");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay(32770, (int) (byte) 10, 2022);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder11 = builder8.setLocale(locale9);
        java.lang.String str12 = locale9.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
    }

    @Test
    public void test08955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08955");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant0.withDurationAdded(readableDuration2, 15);
        org.joda.time.DateTimeZone dateTimeZone5 = instant4.getZone();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusYears(906);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 240);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08956");
        java.io.File file1 = new java.io.File("18 Feb 2022 05:51:11 GMT");
        java.io.File file3 = new java.io.File(file1, "ISOChronology[UTC]224826339690889501810");
        java.lang.String str4 = file1.getPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "18 Feb 2022 05:51:11 GMT");
        org.junit.Assert.assertEquals(file3.getParent(), "18 Feb 2022 05:51:11 GMT");
        org.junit.Assert.assertEquals(file3.toString(), "18 Feb 2022 05:51:11 GMT/ISOChronology[UTC]224826339690889501810");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "18 Feb 2022 05:51:11 GMT" + "'", str4, "18 Feb 2022 05:51:11 GMT");
    }

    @Test
    public void test08957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08957");
        java.io.File file2 = new java.io.File("UTC", "");
        boolean boolean5 = file2.setExecutable(false, true);
        long long6 = file2.getUsableSpace();
        java.io.File file7 = file2.getCanonicalFile();
        java.nio.file.Path path8 = file7.toPath();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 280488701952L + "'", long6 == 280488701952L);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/UTC");
        org.junit.Assert.assertNotNull(path8);
    }

    @Test
    public void test08958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08958");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate((int) (byte) -1, (int) (byte) 1, (int) ' ');
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100L, chronology8);
        java.util.Locale locale10 = null;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        calendar11.clear(9);
        int int15 = calendar11.getGreatestMinimum((int) (short) 0);
        calendar11.setLenient(false);
        calendar11.set(10, 8, 5, 20, 100);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("hi!");
        calendar11.setTimeZone(timeZone25);
        int int27 = timeZone25.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.Calendar.Builder builder29 = builder6.setTimeZone(timeZone25);
        java.util.Locale locale32 = new java.util.Locale("", "hi!");
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = locale32.getDisplayScript(locale35);
        java.util.Calendar.Builder builder39 = builder29.setLocale(locale32);
        java.util.Calendar.Builder builder43 = builder29.setDate(60, 1645455801, 902);
        java.util.Date date49 = new java.util.Date(13, 0, 2022, 30, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder50 = builder43.setInstant(date49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=8,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=20,MINUTE=100,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals(date49.toString(), "Tue Jul 16 05:59:00 GMT 1918");
    }

    @Test
    public void test08959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08959");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        java.util.Locale locale11 = new java.util.Locale("4 janv. 1970 09:11:19", "FR", "ISOChronology[UTC]");
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Calendar calendar13 = dateTime6.toCalendar(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withDefaultYear(39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = dateTimeFormatter16.print(63686358151750L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals(locale11.toString(), "4 janv. 1970 09:11:19_FR_ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und-FR" + "'", str12, "und-FR");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test08960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08960");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T15:02:18.271Z");
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(27);
        int int4 = dateTime1.getYearOfCentury();
        org.joda.time.DateTime dateTime5 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test08961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08961");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(3);
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra(4);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology8 = null;
        boolean boolean9 = durationFieldType7.isSupported(chronology8);
        boolean boolean10 = localDate6.equals((java.lang.Object) boolean9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDate6.getFieldTypes();
        org.joda.time.LocalDate.Property property12 = localDate6.weekyear();
        org.joda.time.LocalDate localDate14 = localDate6.minusMonths(1970);
        int int15 = localDate14.getDayOfWeek();
        org.joda.time.LocalDate localDate17 = localDate14.minusYears(2057);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test08962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08962");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test08963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08963");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime10 = dateTime4.plusWeeks(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 8);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology19);
        org.joda.time.DurationField durationField21 = chronology19.halfdays();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology19.add(readablePeriod22, (long) (-18574), (int) (short) 1);
        org.joda.time.DurationField durationField26 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.weekOfWeekyear();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getMonth();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, chronology36);
        boolean boolean38 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime34.getDayOfYear();
        org.joda.time.DateTime dateTime41 = dateTime34.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property42 = dateTime34.year();
        org.joda.time.DateTime dateTime43 = property42.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime45 = dateTime43.minusSeconds((int) (byte) 1);
        java.util.Date date46 = dateTime45.toDate();
        boolean boolean47 = date30.before(date46);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date46);
        int int49 = localDate48.getYear();
        org.joda.time.Chronology chronology50 = localDate48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.centuryOfEra();
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeField51.getAsShortText((long) 1645455890, locale53);
        java.lang.String str55 = locale53.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            long long56 = dateTimeField27.set(65336054725312L, "hourOfHalfday", locale53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hourOfHalfday\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-18574L) + "'", long25 == (-18574L));
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 15:06:51 GMT 2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1969 + "'", int49 == 1969);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "19" + "'", str54, "19");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "French (France)" + "'", str55, "French (France)");
    }

    @Test
    public void test08964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08964");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear((int) (short) 0);
        org.joda.time.LocalDate localDate7 = localDate3.minusWeeks(100);
        org.joda.time.LocalDate.Property property8 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property9 = localDate3.weekOfWeekyear();
        java.lang.String str10 = property9.toString();
        org.joda.time.LocalDate localDate11 = property9.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property9.setCopy(54372141);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54372141 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[weekOfWeekyear]" + "'", str10, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test08965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08965");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(54369780, 570, 317, 307, 83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 307 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08966");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("FR");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setLanguageTag("FRA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("zh_CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: zh_CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08967");
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        int int6 = localDate5.getCenturyOfEra();
        org.joda.time.LocalDate localDate8 = localDate5.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        long long16 = dateTimeZone11.adjustOffset((long) 22, false);
        java.lang.String str18 = dateTimeZone11.getName((long) (short) 100);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = builder20.build();
        java.util.Locale locale22 = builder20.build();
        java.lang.String str23 = dateTimeZone11.getName(32769L, locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(108200371, 400, 417, 87, 54267, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 87 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 22L + "'", long16 == 22L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test08968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08968");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '/');
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusYears(3);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property11.setCopy(52);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readablePeriod14);
        int int16 = localDateTime15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int18 = localDateTime15.get(dateTimeFieldType17);
        int int19 = dateTime7.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime21 = dateTime7.minusSeconds(702);
        java.lang.String str22 = dateTime7.toString();
        org.joda.time.DateTime.Property property23 = dateTime7.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2019 + "'", int16 == 2019);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 906 + "'", int18 == 906);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.047Z" + "'", str22, "1970-01-01T00:00:00.047Z");
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test08969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08969");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setRegion("100");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setVariant("f\351vrier");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: fe?vrier [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test08970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08970");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Locale locale12 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.util.Locale locale16 = new java.util.Locale("", "hi!");
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = new java.util.Locale("");
        java.util.Locale locale22 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = locale22.getVariant();
        java.lang.String str25 = locale22.getISO3Language();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.lang.String str32 = locale30.getVariant();
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.util.Locale locale38 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale38.getVariant();
        java.lang.String str41 = locale35.getDisplayScript(locale38);
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale12, locale16, locale17, locale19, locale22, locale26, locale27, locale30, locale38 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, strMap50);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        strSet53.clear();
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList51, (java.util.Collection<java.lang.String>) strSet53);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet53, filteringMode56);
        int int58 = strSet53.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = strSet53.add("java.io.IOException: FRA");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode56.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test08971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08971");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.minus(readableDuration5);
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withFields(readablePartial9);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate14 = property12.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate15 = property12.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean17 = localDate15.isSupported(dateTimeFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DateTime.Property property19 = dateTime10.property(dateTimeFieldType16);
        boolean boolean21 = dateTime10.isEqual((long) 812);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08972");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        int int5 = localTime4.getHourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime4.secondOfMinute();
        org.joda.time.LocalTime localTime7 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.addWrapFieldToCopy(1962);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.eras();
        boolean boolean11 = localTime9.isSupported(durationFieldType10);
        org.joda.time.LocalTime localTime13 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.LocalTime localTime16 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test08973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08973");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDateTime2.isSupported(dateTimeFieldType3);
        int int5 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy(1970);
        java.lang.Class<?> wildcardClass9 = localDateTime8.getClass();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test08974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08974");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalTime localTime7 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = localTime7.plusMinutes(54138253);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(1645455718);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test08975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08975");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        int int7 = dateTime6.getMonthOfYear();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.LocalTime localTime13 = localTime10.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime16.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime26 = dateTime16.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        boolean boolean32 = localTime10.isSupported(durationFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.millis();
        java.lang.String str34 = durationFieldType33.getName();
        org.joda.time.LocalTime localTime36 = localTime10.withFieldAdded(durationFieldType33, (int) (short) -1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, chronology41);
        boolean boolean43 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime42);
        int int44 = dateTime39.getDayOfYear();
        org.joda.time.DateTime dateTime47 = dateTime39.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime49 = dateTime39.minus((long) (byte) 10);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property53 = localTime52.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime56 = localTime52.toDateTimeToday(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        int int59 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime49.toMutableDateTime(dateTimeZone55);
        int int62 = dateTimeZone55.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime63 = localTime36.toDateTimeToday(dateTimeZone55);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property68 = localTime67.hourOfDay();
        org.joda.time.LocalTime localTime70 = localTime67.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.hourOfHalfday();
        boolean boolean73 = dateTimeField72.isLenient();
        org.joda.time.DurationField durationField74 = dateTimeField72.getDurationField();
        java.util.Locale locale78 = new java.util.Locale("dayOfWeek", "1970-01-01", "1970");
        int int79 = dateTimeField72.getMaximumShortTextLength(locale78);
        java.lang.String str80 = dateTimeZone55.getShortName(709199999L, locale78);
        long long82 = dateTimeZone55.nextTransition((long) 32769);
        org.joda.time.DateTime dateTime83 = dateTime6.withZone(dateTimeZone55);
        int int84 = dateTime83.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property85 = dateTime83.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millis" + "'", str34, "millis");
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertEquals(locale78.toString(), "dayofweek_1970-01-01_1970");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 32769L + "'", long82 == 32769L);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test08976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08976");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(1970);
        org.joda.time.DateTime dateTime13 = dateTime11.plus(0L);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime11.toGregorianCalendar();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, chronology16);
        java.util.Locale locale18 = null;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        calendar19.clear(9);
        calendar19.set((int) (short) 100, 3, (int) (byte) 10, (int) '#', 9);
        int int28 = calendar19.getMinimalDaysInFirstWeek();
        int int29 = calendar19.getMinimalDaysInFirstWeek();
        int int30 = calendar19.getMinimalDaysInFirstWeek();
        int int31 = calendar19.getWeekYear();
        calendar19.add(1645455761, 0);
        int int35 = gregorianCalendar14.compareTo(calendar19);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-59002865459900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=102,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=9,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test08977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08977");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        int int5 = localTime4.getMillisOfDay();
        org.joda.time.LocalTime localTime7 = localTime4.withMinuteOfHour(23);
        org.joda.time.LocalTime.Property property8 = localTime4.millisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime26.plus((long) 'a');
        org.joda.time.DateTime dateTime32 = dateTime26.plusWeeks(11);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillis((long) 8);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property38 = localTime37.hourOfDay();
        org.joda.time.LocalTime localTime40 = localTime37.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime34.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime21.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.monthOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.centuryOfEra();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(chronology41);
        java.util.Locale locale50 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(100L, chronology57);
        boolean boolean59 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime55.getDayOfYear();
        org.joda.time.DateTime dateTime63 = dateTime55.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime65 = dateTime63.plusSeconds(1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(100L, chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.withZoneRetainFields(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime70.plus((long) 'a');
        org.joda.time.DateTime dateTime76 = dateTime70.plusWeeks(11);
        org.joda.time.DateTime dateTime78 = dateTime76.withMillis((long) 8);
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property82 = localTime81.hourOfDay();
        org.joda.time.LocalTime localTime84 = localTime81.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology85 = localTime84.getChronology();
        org.joda.time.DateTime dateTime86 = dateTime78.toDateTime(chronology85);
        org.joda.time.DateTime dateTime87 = dateTime65.withChronology(chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.monthOfYear();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField90 = chronology85.centuryOfEra();
        org.joda.time.LocalTime localTime91 = new org.joda.time.LocalTime(chronology85);
        org.joda.time.DateTimeField dateTimeField92 = dateTimeFieldType52.getField(chronology85);
        boolean boolean93 = strSet51.contains((java.lang.Object) dateTimeFieldType52);
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType52.getRangeDurationType();
        int int95 = localTime47.get(dateTimeFieldType52);
        org.joda.time.LocalTime.Property property96 = localTime4.property(dateTimeFieldType52);
        org.joda.time.LocalTime localTime98 = property96.addCopy(1645455900);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32400000 + "'", int5 == 32400000);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 15 + "'", int95 == 15);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(localTime98);
    }

    @Test
    public void test08978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08978");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.DateTime dateTime6 = localTime2.toDateTimeToday(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime2.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime10 = localTime2.plusMillis(12);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis(32772);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime23.plus((long) 'a');
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(11);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillis((long) 8);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property35 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime37 = localTime34.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        long long44 = chronology38.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime45 = dateTime18.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology38.getZone();
        org.joda.time.DateTime dateTime49 = localTime14.toDateTimeToday(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime50.minusYears(361);
        org.joda.time.DateTime dateTime54 = dateTime50.minusSeconds(32772);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32771L + "'", long44 == 32771L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test08979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08979");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.minusWeeks(4);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, chronology18);
        boolean boolean20 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime16.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime16.year();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property24.addToCopy(3);
        org.joda.time.DateTime dateTime29 = dateTime27.withYear(12);
        boolean boolean31 = dateTime27.isBefore(364694580000L);
        org.joda.time.DateTime dateTime33 = dateTime27.plus((long) (byte) 0);
        org.joda.time.DateTime dateTime34 = dateTime27.withLaterOffsetAtOverlap();
        boolean boolean35 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime37 = dateTime27.minusWeeks(883);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test08980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08980");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("1970-01-01T01:00:00.197Z");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08981");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate0.withFields((org.joda.time.ReadablePartial) localDate4);
        int int7 = localDate6.getDayOfWeek();
        org.joda.time.LocalDate.Property property8 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test08982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08982");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("Mon Feb 21 15:01:51 UTC 2022");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("18 Feb 2022 05:50:57 GMT");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("18 Feb 2022 05:53:30 GMT");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test08983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08983");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.100Z");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime6.plusWeeks(11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((long) 8);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(9, 3);
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime17.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime14.toDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        long long27 = chronology21.add(1L, (long) 32770, (int) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime1.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.year();
        org.joda.time.DurationField durationField30 = chronology21.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) durationField30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.MillisDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32771L + "'", long27 == 32771L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test08984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08984");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) (short) 0);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate9.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime8.toDateTime(dateTimeZone15);
        boolean boolean22 = dateTime8.isEqualNow();
        java.util.Date date23 = dateTime8.toDate();
        org.joda.time.DateTime.Property property24 = dateTime8.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = property24.addToCopy((-3600000L));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -359998030 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-359999997L) + "'", long20 == (-359999997L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test08985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08985");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        boolean boolean6 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.plusYears((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.year();
        org.joda.time.DateTime dateTime12 = dateTime2.withMonthOfYear(5);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime2.plus(readablePeriod13);
        org.joda.time.DateTime dateTime17 = dateTime2.withDurationAdded(0L, (-18574));
        int int18 = dateTime17.getDayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays(999);
        boolean boolean21 = dateTime20.isEqualNow();
        int int22 = dateTime20.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.plus(readablePeriod23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(100L, chronology26);
        java.util.Locale locale28 = null;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        calendar29.clear(9);
        calendar29.set((int) (byte) 1, 1, (-1));
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(100L, chronology40);
        boolean boolean42 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime38.getDayOfYear();
        org.joda.time.DateTime dateTime46 = dateTime38.withDurationAdded((long) (short) 0, 100);
        int int47 = dateTime46.getWeekOfWeekyear();
        boolean boolean48 = calendar29.before((java.lang.Object) dateTime46);
        java.lang.String str49 = dateTime46.toString();
        org.joda.time.DateTime dateTime51 = dateTime46.plusMinutes(53);
        boolean boolean52 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=?,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.100Z" + "'", str49, "1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test08986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08986");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        int int5 = property4.getMaximumValue();
        boolean boolean6 = property4.isLeap();
        org.joda.time.LocalDate localDate7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate9 = localDate7.plusDays(32580012);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, 240);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test08987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08987");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTime dateTime6 = dateTime2.minusYears((-1));
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        int int8 = dateTime6.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime6.plusHours(445);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08988");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone6);
        long long11 = dateTimeZone6.adjustOffset((long) 22, false);
        java.lang.String str13 = dateTimeZone6.getName((long) (short) 100);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = builder15.build();
        java.lang.String str18 = dateTimeZone6.getName(32769L, locale17);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        int int20 = localDate19.getCenturyOfEra();
        org.joda.time.LocalDate localDate22 = localDate19.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        int int24 = localDate23.getCenturyOfEra();
        org.joda.time.LocalDate localDate25 = localDate19.withFields((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property27 = localDate23.dayOfMonth();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.time.ZoneId zoneId30 = timeZone28.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) localDate23, dateTimeZone31);
        java.lang.String str33 = dateTimeZone31.toString();
        long long35 = dateTimeZone6.getMillisKeepLocal(dateTimeZone31, 1649603242187L);
        long long37 = dateTimeZone6.convertUTCToLocal((long) 1942);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 22L + "'", long11 == 22L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1649603242187L + "'", long35 == 1649603242187L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1942L + "'", long37 == 1942L);
    }

    @Test
    public void test08989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08989");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime7.plus((long) 'a');
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime(chronology13);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfHour();
        org.joda.time.Chronology chronology18 = chronology15.withUTC();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("100");
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        java.time.ZoneId zoneId22 = timeZone20.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology24 = chronology15.withZone(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology15.add(readablePeriod25, (long) (short) 0, 1645455788);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(1645455937, 333, 1, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645455937 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645456012028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=6,SECOND=52,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test08990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08990");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.withPeriodAdded(readablePeriod9, 422);
        org.joda.time.DateTime.Property property12 = dateTime7.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        boolean boolean19 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime15.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds(1);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = dateTime23.withZoneRetainFields(dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withPeriodAdded(readablePeriod29, 12);
        boolean boolean32 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property33 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy(30);
        java.util.Locale locale40 = new java.util.Locale("2022-02-28T15:03:03.403", "4", "21 Oct 2111 15:01:59 GMT");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = property33.setCopy("Property[hourOfDay]", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[hourOfDay]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-28t15:03:03.403_4_21 Oct 2111 15:01:59 GMT");
    }

    @Test
    public void test08991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08991");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(dateTimeZone4);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getVariant();
        java.lang.String str14 = locale8.getDisplayScript(locale11);
        java.util.Calendar calendar15 = dateTime5.toCalendar(locale8);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromCalendarFields(calendar15);
        calendar15.setMinimalDaysInFirstWeek(5);
        java.lang.String str19 = calendar15.getCalendarType();
        calendar15.set(1969, 56, 22);
        // The following exception was thrown during execution in test generation
        try {
            calendar15.roll(812, 32770);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=1969,MONTH=56,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=22,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
    }

    @Test
    public void test08992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08992");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = dateTime1.toString("4", locale3);
        int int5 = dateTime1.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = dateTime1.minusMonths(292278993);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, chronology13);
        boolean boolean15 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime11.withDurationAdded((long) (short) 0, 100);
        org.joda.time.DateTime dateTime21 = dateTime11.minus((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        int int26 = property24.get();
        java.lang.String str27 = property24.getName();
        int int28 = property24.getMaximumValueOverall();
        org.joda.time.DateTime dateTime29 = property24.getDateTime();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        boolean boolean36 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusYears(3);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType44.getField(chronology46);
        int int48 = dateTime35.get(dateTimeFieldType44);
        boolean boolean49 = dateTime29.isSupported(dateTimeFieldType44);
        org.joda.time.Instant instant50 = dateTime29.toInstant();
        org.joda.time.Instant instant52 = instant50.withMillis((long) 'x');
        boolean boolean53 = instant52.isEqualNow();
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekyear();
        org.joda.time.DateTime dateTime56 = dateTime1.toDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int58 = dateTime56.compareTo(readableInstant57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "dayOfWeek" + "'", str27, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test08993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08993");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) ' ');
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test08994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08994");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate6.withPeriodAdded(readablePeriod8, 23);
        int int11 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate.Property property12 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate14 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfCentury((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate14.withDayOfMonth(2031);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2031 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0422-02-21" + "'", str4, "0422-02-21");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test08995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08995");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime(dateTimeZone6);
        int int8 = dateTime7.getCenturyOfEra();
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(12);
        org.joda.time.DateTime.Property property12 = dateTime7.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = property12.setCopy("Sun Jan 04 09:11:19 GMT 1970");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Sun Jan 04 09:11:19 GMT 1970\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08996");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        int int3 = dateTime2.getMillisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusHours(360000000);
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) 1645455791);
        org.joda.time.DateTime.Property property15 = dateTime11.centuryOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = dateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus(10L);
        org.joda.time.DateTime dateTime26 = dateTime24.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime28 = dateTime24.withMillis((long) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, chronology30);
        int int32 = dateTime31.getMillisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.plusHours(360000000);
        org.joda.time.DateTime dateTime35 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Chronology chronology39 = dateTime35.getChronology();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime28.toMutableDateTime(chronology39);
        boolean boolean41 = dateTime28.isEqualNow();
        org.joda.time.DateTime dateTime43 = dateTime28.withMillis(3244838654357L);
        org.joda.time.DateTime dateTime45 = dateTime28.withMillisOfDay(52);
        boolean boolean46 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test08997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08997");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime2.toCalendar(locale3);
        calendar4.clear(9);
        int int8 = calendar4.getGreatestMinimum((int) (short) 0);
        calendar4.setLenient(false);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        int int12 = timeZone11.getRawOffset();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        int int14 = timeZone13.getRawOffset();
        boolean boolean15 = timeZone11.hasSameRules(timeZone13);
        calendar4.setTimeZone(timeZone11);
        java.util.Date date17 = calendar4.getTime();
        int int19 = calendar4.getActualMaximum(13);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        int int21 = calendar4.getFirstDayOfWeek();
        int int23 = calendar4.getActualMaximum((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            calendar4.setWeekDate((-180000), (-88779), 43038);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 43038");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
    }

    @Test
    public void test08998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08998");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 'a');
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded(readablePeriod15, 197);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks(52);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTime.Property property21 = dateTime19.year();
        org.joda.time.DateTime dateTime23 = dateTime19.minus((long) 54212);
        org.joda.time.DateTime dateTime25 = dateTime19.plusMonths(543);
        org.joda.time.DateTime.Property property26 = dateTime19.millisOfSecond();
        org.joda.time.DateTime dateTime28 = property26.addToCopy(360000001L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test08999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08999");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds(294);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test09000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test09000");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getMonth();
        java.util.Date date2 = new java.util.Date();
        date2.setDate(32769);
        boolean boolean5 = date0.after(date2);
        java.lang.String str6 = date2.toGMTString();
        int int7 = date2.getMonth();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getMonth();
        java.util.Date date10 = new java.util.Date();
        date10.setDate(32769);
        boolean boolean13 = date8.after(date10);
        java.lang.String str14 = date10.toGMTString();
        date10.setSeconds(19);
        java.lang.String str17 = date10.toGMTString();
        boolean boolean18 = date2.before(date10);
        long long19 = date10.getTime();
        int int20 = date10.getMinutes();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, chronology22);
        java.util.Locale locale24 = null;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        calendar25.clear(9);
        int int29 = calendar25.getGreatestMinimum((int) (short) 0);
        calendar25.roll(9, true);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(100L, chronology37);
        boolean boolean39 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime35.getDayOfYear();
        int int41 = dateTime35.getSecondOfMinute();
        java.util.GregorianCalendar gregorianCalendar42 = dateTime35.toGregorianCalendar();
        org.joda.time.Chronology chronology43 = dateTime35.getChronology();
        boolean boolean44 = calendar25.after((java.lang.Object) chronology43);
        java.lang.String str45 = calendar25.getCalendarType();
        calendar25.set((-1), 32770, 360000000, (int) (byte) 10, (int) (short) 100, 844);
        java.util.Date date53 = calendar25.getTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMillisOfDay(10);
        java.util.Date date57 = localDateTime54.toDate();
        int int58 = date57.getDay();
        boolean boolean59 = date53.after(date57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        int int61 = localDateTime60.getMonthOfYear();
        int int62 = localDateTime60.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int64 = localDateTime60.get(dateTimeFieldType63);
        int int65 = localDateTime60.getYear();
        java.util.Date date66 = localDateTime60.toDate();
        date66.setHours(1645455738);
        date66.setDate(32);
        boolean boolean71 = date53.before(date66);
        int int72 = date53.getHours();
        boolean boolean73 = date10.before(date53);
        java.lang.String str74 = date53.toString();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 15:06:52 GMT 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Wed Oct 21 15:06:52 GMT 2111");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "21 Oct 2111 15:06:52 GMT" + "'", str6, "21 Oct 2111 15:06:52 GMT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 21 15:06:52 GMT 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Oct 21 15:06:19 GMT 2111");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "21 Oct 2111 15:06:52 GMT" + "'", str14, "21 Oct 2111 15:06:52 GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "21 Oct 2111 15:06:19 GMT" + "'", str17, "21 Oct 2111 15:06:19 GMT");
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4474883179227L + "'", long19 == 4474883179227L);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=31127979585244100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=988376,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=149,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=54,SECOND=4,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gregory" + "'", str45, "gregory");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Fri May 28 11:54:04 GMT 988376");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Mon Feb 21 15:06:52 GMT 2022");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(date66);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Sun Nov 14 18:06:52 GMT 189734");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 11 + "'", int72 == 11);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Fri May 28 11:54:04 GMT 988376" + "'", str74, "Fri May 28 11:54:04 GMT 988376");
    }
}

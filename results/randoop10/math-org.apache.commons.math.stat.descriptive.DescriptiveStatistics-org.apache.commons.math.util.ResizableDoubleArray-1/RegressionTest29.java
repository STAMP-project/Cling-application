import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest29 {

    public static boolean debug = false;

    @Test
    public void test14501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14501");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        long long22 = descriptiveStatistics0.getN();
        double[] doubleArray23 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
    }

    @Test
    public void test14502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14502");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        resizableDoubleArray0.setElement((int) '#', 2.0d);
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) (short) 10);
        resizableDoubleArray0.setNumElements(12);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0]");
    }

    @Test
    public void test14503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14503");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(11);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.discardFrontElements((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14504");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        double double3 = descriptiveStatistics0.getMean();
        double double4 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test14505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14505");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        float float4 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray5 = resizableDoubleArray0.getValues();
        float float6 = resizableDoubleArray0.getExpansionFactor();
        double double8 = resizableDoubleArray0.addElementRolling((double) 1L);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 10.0f);
        resizableDoubleArray0.clear();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }

    @Test
    public void test14506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14506");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSumsqImpl();
        double double7 = descriptiveStatistics0.getSum();
        double double8 = descriptiveStatistics0.getMean();
        java.lang.String str9 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test14507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14507");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSumsqImpl();
        double double14 = descriptiveStatistics0.getSumsq();
        double double15 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics16.getStandardDeviation();
        double double23 = descriptiveStatistics16.getSum();
        int int24 = descriptiveStatistics16.getWindowSize();
        int int25 = descriptiveStatistics16.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics16.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getKurtosisImpl();
        descriptiveStatistics30.setMaxImpl(univariateStatistic40);
        double double42 = descriptiveStatistics30.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics30.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics30.getVarianceImpl();
        descriptiveStatistics28.setMinImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics28.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics28.getPercentileImpl();
        descriptiveStatistics16.setMinImpl(univariateStatistic47);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double53 = descriptiveStatistics52.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics52.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str56 = descriptiveStatistics55.toString();
        descriptiveStatistics55.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics55.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray60 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int61 = resizableDoubleArray60.start();
        resizableDoubleArray60.addElement((double) 10);
        int int64 = resizableDoubleArray60.getExpansionMode();
        resizableDoubleArray60.addElement((double) (-1L));
        double[] doubleArray67 = resizableDoubleArray60.getElements();
        double double70 = univariateStatistic59.evaluate(doubleArray67, (int) (byte) 1, 1);
        double double71 = descriptiveStatistics52.apply(univariateStatistic59);
        double double72 = descriptiveStatistics52.getSum();
        long long73 = descriptiveStatistics52.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics75 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics75.getVarianceImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic76);
        double double78 = descriptiveStatistics51.apply(univariateStatistic76);
        descriptiveStatistics0.setSumImpl(univariateStatistic76);
        descriptiveStatistics0.clear();
        java.lang.Class<?> wildcardClass81 = descriptiveStatistics0.getClass();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str56, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test14508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14508");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(103, (float) 1L, 2.0f, 54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14509");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double16 = descriptiveStatistics15.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double20 = descriptiveStatistics19.getStandardDeviation();
        long long21 = descriptiveStatistics19.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics19.getMinImpl();
        descriptiveStatistics15.setMaxImpl(univariateStatistic22);
        double double24 = descriptiveStatistics15.getMax();
        double double26 = descriptiveStatistics15.getPercentile(Double.NaN);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str28 = descriptiveStatistics27.toString();
        double double29 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        double double36 = descriptiveStatistics27.apply(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str38 = descriptiveStatistics37.toString();
        descriptiveStatistics37.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics37.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics27.setMeanImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics27.getSkewnessImpl();
        descriptiveStatistics15.setSumsqImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics0.getSumImpl();
        double double48 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double51 = descriptiveStatistics50.getStandardDeviation();
        long long52 = descriptiveStatistics50.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics50.getSkewnessImpl();
        java.lang.String str54 = descriptiveStatistics50.toString();
        double double55 = descriptiveStatistics50.getVariance();
        descriptiveStatistics50.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics50.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics50.getMinImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str28, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str38, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str54, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
    }

    @Test
    public void test14510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14510");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', 2.0f, (float) 100);
        int int4 = resizableDoubleArray3.getExpansionMode();
        double[] doubleArray5 = resizableDoubleArray3.getElements();
        resizableDoubleArray3.contract();
        double double8 = resizableDoubleArray3.addElementRolling((double) 0.0f);
        int int9 = resizableDoubleArray3.getNumElements();
        int int10 = resizableDoubleArray3.getNumElements();
        double[] doubleArray11 = resizableDoubleArray3.getValues();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test14511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14511");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        long long2 = descriptiveStatistics1.getN();
        descriptiveStatistics1.clear();
        java.lang.String str4 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getSumsqImpl();
        double double6 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getVarianceImpl();
        int int14 = descriptiveStatistics7.getWindowSize();
        double double15 = descriptiveStatistics7.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics7.getMaxImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic16);
        double[] doubleArray18 = descriptiveStatistics1.getValues();
        java.lang.String str19 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getMeanImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray23 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 1, 32.0f);
        double double25 = resizableDoubleArray23.addElementRolling((double) ' ');
        double[] doubleArray26 = resizableDoubleArray23.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = univariateStatistic20.evaluate(doubleArray26, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
    }

    @Test
    public void test14512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14512");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.getNumElements();
        double double11 = resizableDoubleArray0.addElementRolling((double) 10.5f);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = resizableDoubleArray0.getElement(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 10 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test14513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14513");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
    }

    @Test
    public void test14514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14514");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        resizableDoubleArray0.setElement(1, (double) 100.0f);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setElement((int) (short) 100, (double) 100);
        resizableDoubleArray0.setExpansionMode(1);
        resizableDoubleArray0.setElement(12, 961.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
    }

    @Test
    public void test14515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14515");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 32);
        int int6 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        float float10 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[32.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test14516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14516");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getSkewnessImpl();
        java.lang.String str9 = descriptiveStatistics5.toString();
        double double10 = descriptiveStatistics5.getVariance();
        descriptiveStatistics5.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics1.getSkewnessImpl();
        double double22 = descriptiveStatistics1.getVariance();
        double double23 = descriptiveStatistics1.getSkewness();
        double double25 = descriptiveStatistics1.getPercentile((double) 99);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test14517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14517");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        double double2 = descriptiveStatistics0.getVariance();
        double double3 = descriptiveStatistics0.getMin();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
    }

    @Test
    public void test14518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14518");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getStandardDeviation();
        double[] doubleArray11 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics12.setWindowSize((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics12.getMaxImpl();
        long long17 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics12.getSkewnessImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics1.getSumsqImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
    }

    @Test
    public void test14519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14519");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        resizableDoubleArray1.addElement(10.0d);
        double[] doubleArray6 = resizableDoubleArray1.getElements();
        int int7 = resizableDoubleArray1.getExpansionMode();
        float float8 = resizableDoubleArray1.getExpansionFactor();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
    }

    @Test
    public void test14520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14520");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        double double9 = resizableDoubleArray0.addElementRolling((double) ' ');
        resizableDoubleArray0.setElement(42, (double) 90);
        resizableDoubleArray0.discardFrontElements(91);
        float float15 = resizableDoubleArray0.getContractionCriteria();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 2.5f + "'", float15 == 2.5f);
    }

    @Test
    public void test14521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14521");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getKurtosis();
        java.lang.String str5 = descriptiveStatistics0.toString();
        double double6 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics7.setMaxImpl(univariateStatistic17);
        double double19 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str21 = descriptiveStatistics20.toString();
        double double22 = descriptiveStatistics20.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        double double29 = descriptiveStatistics20.apply(univariateStatistic28);
        descriptiveStatistics7.setGeometricMeanImpl(univariateStatistic28);
        double double31 = descriptiveStatistics7.getSum();
        long long32 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getKurtosisImpl();
        double[] doubleArray43 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double44 = univariateStatistic39.evaluate(doubleArray43);
        descriptiveStatistics33.setMaxImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics46.getKurtosisImpl();
        long long49 = descriptiveStatistics46.getN();
        double[] doubleArray50 = descriptiveStatistics46.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics46.getMeanImpl();
        descriptiveStatistics33.setGeometricMeanImpl(univariateStatistic52);
        descriptiveStatistics7.setMinImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics7.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        descriptiveStatistics60.setKurtosisImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics67.getSumsqImpl();
        descriptiveStatistics65.setKurtosisImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics65.getKurtosisImpl();
        descriptiveStatistics60.setMaxImpl(univariateStatistic70);
        double double72 = descriptiveStatistics60.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics60.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics60.getVarianceImpl();
        descriptiveStatistics58.setMinImpl(univariateStatistic74);
        double double76 = descriptiveStatistics58.getMin();
        double double77 = descriptiveStatistics58.getGeometricMean();
        double double78 = descriptiveStatistics58.getSum();
        double double79 = descriptiveStatistics58.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics58.getMinImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic80);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.0d + "'", double44 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(univariateStatistic80);
    }

    @Test
    public void test14522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14522");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getGeometricMean();
        double double5 = descriptiveStatistics0.getVariance();
        double double6 = descriptiveStatistics0.getKurtosis();
        double double7 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test14523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14523");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        double double7 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getMeanImpl();
        double double9 = descriptiveStatistics0.getKurtosis();
        double double11 = descriptiveStatistics0.getPercentile((double) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        double double14 = descriptiveStatistics12.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getSkewnessImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic15);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray17 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray18 = resizableDoubleArray17.getElements();
        double[] doubleArray19 = resizableDoubleArray17.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = univariateStatistic15.evaluate(doubleArray19, 36, 54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
    }

    @Test
    public void test14524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14524");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        int int9 = resizableDoubleArray0.getExpansionMode();
        float float10 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
    }

    @Test
    public void test14525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14525");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 1);
        float float13 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setExpansionFactor((float) 2);
        double[] doubleArray16 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) (short) 0);
        resizableDoubleArray0.setNumElements(0);
        resizableDoubleArray0.addElement((double) 36);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.0f + "'", float13 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0]");
    }

    @Test
    public void test14526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14526");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(103, (float) 42);
    }

    @Test
    public void test14527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14527");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1L));
        int int6 = resizableDoubleArray0.start();
        int int7 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test14528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14528");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        int int4 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (byte) 0, (double) (short) -1);
        resizableDoubleArray0.setElement(53, (double) 2.5f);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test14529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14529");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        descriptiveStatistics13.addValue((double) 0);
        int int19 = descriptiveStatistics13.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics13.getGeometricMeanImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double24 = descriptiveStatistics23.getStandardDeviation();
        long long25 = descriptiveStatistics23.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics23.getSkewnessImpl();
        double double27 = descriptiveStatistics0.apply(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        double[] doubleArray31 = descriptiveStatistics28.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics28.getVarianceImpl();
        double double33 = descriptiveStatistics28.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str35 = descriptiveStatistics34.toString();
        double double36 = descriptiveStatistics34.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        descriptiveStatistics34.setSkewnessImpl(univariateStatistic40);
        double double43 = descriptiveStatistics34.getStandardDeviation();
        descriptiveStatistics34.clear();
        double double45 = descriptiveStatistics34.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        descriptiveStatistics51.setKurtosisImpl(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics51.getKurtosisImpl();
        descriptiveStatistics46.setMaxImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        descriptiveStatistics58.setKurtosisImpl(univariateStatistic61);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics58.getKurtosisImpl();
        descriptiveStatistics46.setGeometricMeanImpl(univariateStatistic63);
        descriptiveStatistics34.setSumImpl(univariateStatistic63);
        descriptiveStatistics28.setMinImpl(univariateStatistic63);
        double double67 = descriptiveStatistics0.apply(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics68.getKurtosisImpl();
        long long71 = descriptiveStatistics68.getN();
        double[] doubleArray72 = descriptiveStatistics68.getValues();
        double double73 = descriptiveStatistics68.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics75 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double76 = descriptiveStatistics75.getStandardDeviation();
        long long77 = descriptiveStatistics75.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics75.getKurtosisImpl();
        descriptiveStatistics68.setSumImpl(univariateStatistic78);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics68.getMaxImpl();
        double double81 = descriptiveStatistics0.apply(univariateStatistic80);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics0.getPercentileImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str35, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(univariateStatistic82);
    }

    @Test
    public void test14530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14530");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic17);
        long long19 = descriptiveStatistics0.getN();
        double double20 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double[] doubleArray27 = descriptiveStatistics23.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getMinImpl();
        double double30 = descriptiveStatistics21.apply(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics21.getPercentileImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic31);
        double double33 = descriptiveStatistics0.getMin();
        double double34 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test14531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14531");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        double double3 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.clear();
        double double5 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test14532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14532");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getMean();
        java.lang.String str21 = descriptiveStatistics0.toString();
        long long22 = descriptiveStatistics0.getN();
        double double23 = descriptiveStatistics0.getSum();
        double double24 = descriptiveStatistics0.getMax();
        double double25 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double28 = descriptiveStatistics27.getStandardDeviation();
        long long29 = descriptiveStatistics27.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics27.getSkewnessImpl();
        java.lang.String str31 = descriptiveStatistics27.toString();
        double double32 = descriptiveStatistics27.getVariance();
        descriptiveStatistics27.setWindowSize((int) (short) 100);
        descriptiveStatistics27.setWindowSize((int) (short) -1);
        double double37 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics27.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics44.getKurtosisImpl();
        descriptiveStatistics39.setMaxImpl(univariateStatistic49);
        double double51 = descriptiveStatistics39.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics39.getMinImpl();
        descriptiveStatistics39.setWindowSize((int) (short) 100);
        double double56 = descriptiveStatistics39.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics39.getPercentileImpl();
        descriptiveStatistics27.setMinImpl(univariateStatistic57);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic57);
        double double60 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str31, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
    }

    @Test
    public void test14533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14533");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        descriptiveStatistics23.addValue((double) 0);
        int int29 = descriptiveStatistics23.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics23.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics23.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = null;
        descriptiveStatistics23.setSumImpl(univariateStatistic32);
        java.lang.String str34 = descriptiveStatistics23.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics23.getVarianceImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double39 = descriptiveStatistics38.getMean();
        double[] doubleArray40 = descriptiveStatistics38.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics38.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics38.getKurtosisImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic42);
        java.lang.String str44 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: 0.0\nmax: 0.0\nmean: 0.0\nstd dev: 0.0\nmedian: 0.0\nskewness: NaN\nkurtosis: NaN\n" + "'", str34, "DescriptiveStatistics:\nn: 1\nmin: 0.0\nmax: 0.0\nmean: 0.0\nstd dev: 0.0\nmedian: 0.0\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str44, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test14534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14534");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics9.getKurtosisImpl();
        long long12 = descriptiveStatistics9.getN();
        double[] doubleArray13 = descriptiveStatistics9.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics9.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getMinImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        descriptiveStatistics24.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getSkewnessImpl();
        descriptiveStatistics17.setSumsqImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics17.getVarianceImpl();
        descriptiveStatistics7.setVarianceImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.apply(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double37 = descriptiveStatistics36.getStandardDeviation();
        long long38 = descriptiveStatistics36.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics36.getSkewnessImpl();
        double double41 = descriptiveStatistics36.getPercentile((double) 100L);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics36.getMinImpl();
        double double43 = descriptiveStatistics0.apply(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double46 = descriptiveStatistics45.getMean();
        double double47 = descriptiveStatistics45.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics45.getPercentileImpl();
        double[] doubleArray49 = descriptiveStatistics45.getValues();
        double double50 = descriptiveStatistics45.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics45.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics45.getPercentileImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
    }

    @Test
    public void test14535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14535");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        int int7 = resizableDoubleArray0.start();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        int int9 = resizableDoubleArray0.getExpansionMode();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.setNumElements(10);
        resizableDoubleArray0.addElement((double) 1L);
        double[] doubleArray15 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14536");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double[] doubleArray25 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double28 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getGeometricMeanImpl();
        double double30 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        double[] doubleArray34 = descriptiveStatistics31.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics31.getVarianceImpl();
        descriptiveStatistics27.setSumsqImpl(univariateStatistic35);
        descriptiveStatistics0.setMeanImpl(univariateStatistic35);
        double double38 = descriptiveStatistics0.getMax();
        double double39 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = null;
        descriptiveStatistics0.setMeanImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str43 = descriptiveStatistics42.toString();
        double double44 = descriptiveStatistics42.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics45.getKurtosisImpl();
        double double51 = descriptiveStatistics42.apply(univariateStatistic50);
        double double52 = descriptiveStatistics42.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics42.getSumImpl();
        double double54 = descriptiveStatistics42.getMin();
        double[] doubleArray55 = descriptiveStatistics42.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        descriptiveStatistics56.setKurtosisImpl(univariateStatistic59);
        descriptiveStatistics56.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics56.getPercentileImpl();
        double double63 = descriptiveStatistics56.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getKurtosisImpl();
        double[] doubleArray67 = descriptiveStatistics64.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics64.getVarianceImpl();
        double double69 = descriptiveStatistics56.apply(univariateStatistic68);
        descriptiveStatistics42.setSumsqImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double73 = descriptiveStatistics72.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics72.getGeometricMeanImpl();
        descriptiveStatistics42.setGeometricMeanImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        descriptiveStatistics76.setKurtosisImpl(univariateStatistic79);
        double double81 = descriptiveStatistics42.apply(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics42.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic82);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray85 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int86 = resizableDoubleArray85.getExpansionMode();
        resizableDoubleArray85.addElement((double) 0);
        double double90 = resizableDoubleArray85.addElementRolling((double) 0.0f);
        int int91 = resizableDoubleArray85.start();
        float float92 = resizableDoubleArray85.getContractionCriteria();
        double double94 = resizableDoubleArray85.addElementRolling(1.0d);
        resizableDoubleArray85.setNumElements(97);
        double[] doubleArray97 = resizableDoubleArray85.getElements();
        double double98 = univariateStatistic84.evaluate(doubleArray97);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + 2.5f + "'", float92 == 2.5f);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.0d + "'", double98 == 1.0d);
    }

    @Test
    public void test14537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14537");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        double double10 = resizableDoubleArray0.addElementRolling((double) 102);
        resizableDoubleArray0.setElement(34, 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test14538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14538");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        descriptiveStatistics0.setWindowSize((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        descriptiveStatistics13.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics19.setMaxImpl(univariateStatistic29);
        double double31 = descriptiveStatistics19.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics19.getMinImpl();
        descriptiveStatistics13.setMinImpl(univariateStatistic32);
        descriptiveStatistics11.setMeanImpl(univariateStatistic32);
        double double35 = descriptiveStatistics11.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics36.getKurtosisImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic41);
        double double43 = descriptiveStatistics5.apply(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics5.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics5.getVarianceImpl();
        double double46 = descriptiveStatistics0.apply(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test14539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14539");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double double27 = descriptiveStatistics23.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics28.setMaxImpl(univariateStatistic38);
        descriptiveStatistics23.setSumImpl(univariateStatistic38);
        descriptiveStatistics17.setSumsqImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str43 = descriptiveStatistics42.toString();
        descriptiveStatistics42.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getGeometricMeanImpl();
        double double46 = descriptiveStatistics42.getMax();
        double double47 = descriptiveStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getVarianceImpl();
        descriptiveStatistics17.setMeanImpl(univariateStatistic48);
        descriptiveStatistics0.setSumImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics0.getKurtosisImpl();
        double double52 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics0.getSkewnessImpl();
        long long56 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test14540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14540");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(97, (float) 91, (float) 0L, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14541");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double4 = descriptiveStatistics3.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getMinImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic10);
        descriptiveStatistics0.setMinImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        double double18 = descriptiveStatistics13.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double20 = descriptiveStatistics19.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getMinImpl();
        descriptiveStatistics13.setSumImpl(univariateStatistic21);
        double double23 = descriptiveStatistics0.apply(univariateStatistic21);
        double[] doubleArray24 = descriptiveStatistics0.getValues();
        int int25 = descriptiveStatistics0.getWindowSize();
        double double26 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
    }

    @Test
    public void test14542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14542");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        int int11 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(99, (double) 36);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14543");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.clear();
        resizableDoubleArray1.clear();
        resizableDoubleArray1.addElement((double) (short) 100);
        resizableDoubleArray1.setExpansionMode(0);
    }

    @Test
    public void test14544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14544");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        java.lang.Class<?> wildcardClass12 = resizableDoubleArray0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test14545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14545");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        int int8 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test14546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14546");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double[] doubleArray5 = descriptiveStatistics0.getValues();
        double double6 = descriptiveStatistics0.getSumsq();
        double double7 = descriptiveStatistics0.getMin();
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getVariance();
        double double10 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getVarianceImpl();
        double double12 = descriptiveStatistics0.getVariance();
        long long13 = descriptiveStatistics0.getN();
        double double14 = descriptiveStatistics0.getVariance();
        double double15 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test14547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14547");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) (-1.0f));
        int int14 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    public void test14548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14548");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        int int4 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (byte) 0, (double) (short) -1);
        double double9 = resizableDoubleArray0.addElementRolling(33.0d);
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        float float12 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 33.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
    }

    @Test
    public void test14549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14549");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        double double18 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double20 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        descriptiveStatistics22.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray27 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int28 = resizableDoubleArray27.start();
        resizableDoubleArray27.addElement((double) 10);
        int int31 = resizableDoubleArray27.getExpansionMode();
        resizableDoubleArray27.addElement((double) (-1L));
        double[] doubleArray34 = resizableDoubleArray27.getElements();
        double double37 = univariateStatistic26.evaluate(doubleArray34, (int) (byte) 1, 1);
        double double38 = descriptiveStatistics19.apply(univariateStatistic26);
        double double39 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        descriptiveStatistics40.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics40.getVarianceImpl();
        int int47 = descriptiveStatistics40.getWindowSize();
        double double48 = descriptiveStatistics40.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics40.getMaxImpl();
        double double50 = descriptiveStatistics19.apply(univariateStatistic49);
        descriptiveStatistics0.setMeanImpl(univariateStatistic49);
        java.lang.String str52 = descriptiveStatistics0.toString();
        double double53 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str52, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test14550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14550");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.clear();
        double double6 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test14551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14551");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        double[] doubleArray11 = descriptiveStatistics7.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMinImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics0.clear();
        java.lang.Class<?> wildcardClass16 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
    }

    @Test
    public void test14552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14552");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics16.getStandardDeviation();
        double double23 = descriptiveStatistics16.getSum();
        int int24 = descriptiveStatistics16.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getMaxImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics27.getSumsqImpl();
        double double35 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str37 = descriptiveStatistics36.toString();
        double double38 = descriptiveStatistics36.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        double double45 = descriptiveStatistics36.apply(univariateStatistic44);
        double double46 = descriptiveStatistics36.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics36.getSumImpl();
        descriptiveStatistics27.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics0.getMeanImpl();
        double double51 = descriptiveStatistics0.getSumsq();
        double double52 = descriptiveStatistics0.getSumsq();
        int int53 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(univariateStatistic54);
    }

    @Test
    public void test14553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14553");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double double26 = descriptiveStatistics0.getPercentile((double) (short) 10);
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics0.getMinImpl();
        java.lang.Class<?> wildcardClass30 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass30);
        double double32 = descriptiveStatistics31.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics33.setWindowSize((int) (byte) -1);
        long long36 = descriptiveStatistics33.getN();
        double double37 = descriptiveStatistics33.getMean();
        double double38 = descriptiveStatistics33.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double41 = descriptiveStatistics40.getMax();
        long long42 = descriptiveStatistics40.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics40.getVarianceImpl();
        descriptiveStatistics33.setGeometricMeanImpl(univariateStatistic43);
        double double45 = descriptiveStatistics33.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics33.getMaxImpl();
        descriptiveStatistics31.setMaxImpl(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
    }

    @Test
    public void test14554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14554");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (short) 1);
        int int7 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        int int9 = resizableDoubleArray0.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14555");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        double double14 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str16 = descriptiveStatistics15.toString();
        double double17 = descriptiveStatistics15.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics15.setSkewnessImpl(univariateStatistic21);
        double double24 = descriptiveStatistics15.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double27 = descriptiveStatistics26.getStandardDeviation();
        long long28 = descriptiveStatistics26.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics26.getMinImpl();
        descriptiveStatistics15.setVarianceImpl(univariateStatistic29);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray31 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int32 = resizableDoubleArray31.getExpansionMode();
        resizableDoubleArray31.clear();
        double[] doubleArray34 = resizableDoubleArray31.getElements();
        double[] doubleArray35 = resizableDoubleArray31.getElements();
        double double36 = univariateStatistic29.evaluate(doubleArray35);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic29);
        double double38 = descriptiveStatistics0.getSkewness();
        double double39 = descriptiveStatistics0.getStandardDeviation();
        double double40 = descriptiveStatistics0.getMean();
        double double41 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test14556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14556");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getGeometricMean();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getMax();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getKurtosisImpl();
        double double10 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test14557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14557");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        resizableDoubleArray1.setExpansionMode(0);
        double double6 = resizableDoubleArray1.addElementRolling(625.0d);
        int int7 = resizableDoubleArray1.getNumElements();
        int int8 = resizableDoubleArray1.getNumElements();
        int int9 = resizableDoubleArray1.getNumElements();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[625.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14558");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double12 = descriptiveStatistics11.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getSumImpl();
        double[] doubleArray16 = descriptiveStatistics0.getSortedValues();
        long long17 = descriptiveStatistics0.getN();
        double double18 = descriptiveStatistics0.getMax();
        double double19 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getSkewnessImpl();
        double double22 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getMaxImpl();
        double double24 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test14559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14559");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getKurtosisImpl();
        long long14 = descriptiveStatistics11.getN();
        double double15 = descriptiveStatistics11.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        descriptiveStatistics11.setSumImpl(univariateStatistic26);
        descriptiveStatistics5.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics5.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics36.getKurtosisImpl();
        descriptiveStatistics31.setMaxImpl(univariateStatistic41);
        double double43 = descriptiveStatistics31.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics31.getMinImpl();
        descriptiveStatistics31.setWindowSize((int) (short) 100);
        double double48 = descriptiveStatistics31.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics31.getPercentileImpl();
        descriptiveStatistics5.setMinImpl(univariateStatistic49);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics1.getSumImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic52);
    }

    @Test
    public void test14560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14560");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.clear();
        resizableDoubleArray1.clear();
        resizableDoubleArray1.addElement((double) (short) 100);
        double double7 = resizableDoubleArray1.addElementRolling(11224.999999999996d);
        resizableDoubleArray1.contract();
        resizableDoubleArray1.setElement(102, (double) 100.5f);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test14561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14561");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) (-1));
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
    }

    @Test
    public void test14562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14562");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        int int2 = resizableDoubleArray1.start();
        resizableDoubleArray1.setElement(32, (double) (-1L));
        float float6 = resizableDoubleArray1.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
    }

    @Test
    public void test14563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14563");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        int int8 = descriptiveStatistics0.getWindowSize();
        int int9 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic24);
        double double26 = descriptiveStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics14.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics14.getVarianceImpl();
        descriptiveStatistics12.setMinImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics12.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics12.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic31);
        double double33 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.clear();
        double[] doubleArray35 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic36);
    }

    @Test
    public void test14564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14564");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMin();
        double double4 = descriptiveStatistics1.getPercentile((double) (short) 100);
        double double5 = descriptiveStatistics1.getStandardDeviation();
        double double6 = descriptiveStatistics1.getMax();
        double double7 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test14565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14565");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        long long10 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics11.setWindowSize((int) (byte) -1);
        long long14 = descriptiveStatistics11.getN();
        double double15 = descriptiveStatistics11.getMean();
        double double16 = descriptiveStatistics11.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double19 = descriptiveStatistics18.getMax();
        long long20 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getVarianceImpl();
        descriptiveStatistics11.setGeometricMeanImpl(univariateStatistic21);
        descriptiveStatistics1.setMinImpl(univariateStatistic21);
        double double24 = descriptiveStatistics1.getGeometricMean();
        double double25 = descriptiveStatistics1.getSkewness();
        double double26 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str28 = descriptiveStatistics27.toString();
        double double29 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics27.setSkewnessImpl(univariateStatistic33);
        double double36 = descriptiveStatistics27.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double39 = descriptiveStatistics38.getStandardDeviation();
        long long40 = descriptiveStatistics38.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics38.getMinImpl();
        descriptiveStatistics27.setVarianceImpl(univariateStatistic41);
        int int43 = descriptiveStatistics27.getWindowSize();
        java.lang.String str44 = descriptiveStatistics27.toString();
        double double45 = descriptiveStatistics27.getKurtosis();
        double double46 = descriptiveStatistics27.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics27.getSkewnessImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str28, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str44, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
    }

    @Test
    public void test14566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14566");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (short) 1);
        int int7 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        float float9 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        float float11 = resizableDoubleArray0.getContractionCriteria();
        int int12 = resizableDoubleArray0.getNumElements();
        double double14 = resizableDoubleArray0.addElementRolling((double) 12);
        int int15 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 12.0]");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.5f + "'", float11 == 2.5f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test14567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14567");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.addElement((double) 1.0f);
        resizableDoubleArray0.addElement(52.0d);
        resizableDoubleArray0.addElement((double) 1L);
        double double21 = resizableDoubleArray0.addElementRolling(2704.0d);
        resizableDoubleArray0.clear();
        int int23 = resizableDoubleArray0.getNumElements();
        double[] doubleArray24 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14568");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) (byte) 10);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(35, (double) 1.0f);
        double double21 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.setElement(91, 32.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test14569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14569");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics13.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double double22 = descriptiveStatistics18.getMax();
        double double23 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double25 = descriptiveStatistics24.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getMinImpl();
        descriptiveStatistics18.setSumImpl(univariateStatistic26);
        descriptiveStatistics13.setSumImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics29.setMaxImpl(univariateStatistic39);
        double double41 = descriptiveStatistics13.apply(univariateStatistic39);
        double double42 = descriptiveStatistics0.apply(univariateStatistic39);
        double double43 = descriptiveStatistics0.getMax();
        descriptiveStatistics0.setWindowSize(32);
        long long46 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test14570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14570");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getKurtosisImpl();
        double double3 = descriptiveStatistics1.getSum();
        double double4 = descriptiveStatistics1.getSum();
        double double5 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        double double8 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics6.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics6.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double18 = descriptiveStatistics17.getStandardDeviation();
        long long19 = descriptiveStatistics17.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getMinImpl();
        descriptiveStatistics6.setVarianceImpl(univariateStatistic20);
        int int22 = descriptiveStatistics6.getWindowSize();
        java.lang.String str23 = descriptiveStatistics6.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        descriptiveStatistics24.setMaxImpl(univariateStatistic34);
        double double36 = descriptiveStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics24.getMinImpl();
        descriptiveStatistics24.setWindowSize((int) (short) 100);
        double double41 = descriptiveStatistics24.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic42);
        double[] doubleArray44 = descriptiveStatistics6.getSortedValues();
        double double45 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics6.getPercentileImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
    }

    @Test
    public void test14571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14571");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(1, (float) ' ');
        int int3 = resizableDoubleArray2.getNumElements();
        int int4 = resizableDoubleArray2.getExpansionMode();
        resizableDoubleArray2.addElement((double) 0);
        resizableDoubleArray2.contract();
        double[] doubleArray8 = resizableDoubleArray2.getElements();
        resizableDoubleArray2.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray2.setExpansionMode(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
    }

    @Test
    public void test14572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14572");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        double double10 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        double double12 = resizableDoubleArray0.getElement((int) (short) 0);
        double double14 = resizableDoubleArray0.addElementRolling(52.0d);
        double[] doubleArray15 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setContractionCriteria((float) 53);
        resizableDoubleArray0.addElement((double) (byte) 1);
        int int20 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test14573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14573");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getNumElements();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        double double7 = resizableDoubleArray0.addElementRolling(0.0d);
        double double9 = resizableDoubleArray0.addElementRolling((double) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 100, (double) 90);
        resizableDoubleArray0.addElement((double) 102);
        float float15 = resizableDoubleArray0.getContractionCriteria();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 2.5f + "'", float15 == 2.5f);
    }

    @Test
    public void test14574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14574");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics11.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        double double21 = descriptiveStatistics17.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getKurtosisImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic32);
        descriptiveStatistics17.setSumImpl(univariateStatistic32);
        descriptiveStatistics11.setSumsqImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str37 = descriptiveStatistics36.toString();
        descriptiveStatistics36.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics36.getGeometricMeanImpl();
        double double40 = descriptiveStatistics36.getMax();
        double double41 = descriptiveStatistics36.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics36.getVarianceImpl();
        descriptiveStatistics11.setMeanImpl(univariateStatistic42);
        double double44 = descriptiveStatistics11.getMean();
        double double45 = descriptiveStatistics11.getMean();
        double double46 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getKurtosisImpl();
        double[] doubleArray50 = descriptiveStatistics47.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics47.getVarianceImpl();
        double double52 = descriptiveStatistics47.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics47.getGeometricMeanImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic53);
        double double55 = descriptiveStatistics0.apply(univariateStatistic53);
        double double56 = descriptiveStatistics0.getSumsq();
        double double57 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test14575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14575");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        resizableDoubleArray1.setExpansionMode(0);
        float float5 = resizableDoubleArray1.getContractionCriteria();
        double[] doubleArray6 = resizableDoubleArray1.getElements();
        double[] doubleArray7 = resizableDoubleArray1.getElements();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test14576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14576");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(14, (float) 42);
    }

    @Test
    public void test14577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14577");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getSumsqImpl();
        double[] doubleArray10 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSkewnessImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getGeometricMeanImpl();
        double double14 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test14578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14578");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics3.setWindowSize((int) (byte) -1);
        long long6 = descriptiveStatistics3.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getKurtosisImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic7);
        double double9 = descriptiveStatistics1.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getVarianceImpl();
        double double11 = descriptiveStatistics1.getGeometricMean();
        double double12 = descriptiveStatistics1.getVariance();
        int int13 = descriptiveStatistics1.getWindowSize();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test14579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14579");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 1.0f);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement((int) '4', 53.0d);
        resizableDoubleArray0.addElement(0.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test14580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14580");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        int int7 = descriptiveStatistics0.getWindowSize();
        double[] doubleArray8 = descriptiveStatistics0.getSortedValues();
        java.lang.String str9 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test14581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14581");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double[] doubleArray4 = descriptiveStatistics1.getSortedValues();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double9 = descriptiveStatistics8.getStandardDeviation();
        long long10 = descriptiveStatistics8.getN();
        double double11 = descriptiveStatistics8.getMin();
        double double12 = descriptiveStatistics8.getMax();
        double double13 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic16);
        double[] doubleArray18 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics8.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getMaxImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
    }

    @Test
    public void test14582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14582");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        double double16 = descriptiveStatistics14.getVariance();
        double double17 = descriptiveStatistics14.getSum();
        long long18 = descriptiveStatistics14.getN();
        int int19 = descriptiveStatistics14.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics20.setMaxImpl(univariateStatistic30);
        double double32 = descriptiveStatistics20.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str34 = descriptiveStatistics33.toString();
        double double35 = descriptiveStatistics33.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics36.getKurtosisImpl();
        double double42 = descriptiveStatistics33.apply(univariateStatistic41);
        descriptiveStatistics20.setGeometricMeanImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics20.getPercentileImpl();
        descriptiveStatistics14.setSumImpl(univariateStatistic44);
        double double46 = descriptiveStatistics0.apply(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str34, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
    }

    @Test
    public void test14583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14583");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        double double20 = descriptiveStatistics0.getMean();
        double double21 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test14584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14584");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        double double8 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics6.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics6.getStandardDeviation();
        descriptiveStatistics6.clear();
        double double17 = descriptiveStatistics6.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics18.setGeometricMeanImpl(univariateStatistic35);
        descriptiveStatistics6.setSumImpl(univariateStatistic35);
        descriptiveStatistics0.setMinImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics0.getSkewnessImpl();
        descriptiveStatistics0.clear();
        double double41 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test14585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14585");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 100, (float) 3);
    }

    @Test
    public void test14586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14586");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double double7 = resizableDoubleArray0.addElementRolling((double) 2.0f);
        resizableDoubleArray0.clear();
        int int9 = resizableDoubleArray0.getNumElements();
        float float10 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test14587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14587");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(103, (float) 11, (float) 102);
        int int4 = resizableDoubleArray3.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test14588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14588");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (short) 1);
        int int7 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setContractionCriteria(2.0f);
        double double12 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.addElement(5.656854249492381d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test14589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14589");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        double[] doubleArray13 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics14.getKurtosisImpl();
        double[] doubleArray23 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double24 = univariateStatistic19.evaluate(doubleArray23);
        descriptiveStatistics10.setMaxImpl(univariateStatistic19);
        descriptiveStatistics0.setMaxImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics0.getSumsqImpl();
        double double28 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.0d + "'", double24 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test14590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14590");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(100, (float) 11);
        resizableDoubleArray2.contract();
    }

    @Test
    public void test14591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14591");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        double double7 = descriptiveStatistics5.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic11);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic11);
        double double15 = descriptiveStatistics0.getGeometricMean();
        double double17 = descriptiveStatistics0.getPercentile((double) 100L);
        double double18 = descriptiveStatistics0.getMin();
        double double19 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getMaxImpl();
        double double22 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test14592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14592");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        double[] doubleArray11 = descriptiveStatistics7.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMinImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic13);
        long long15 = descriptiveStatistics0.getN();
        double double16 = descriptiveStatistics0.getSkewness();
        double double18 = descriptiveStatistics0.getPercentile((double) (byte) 1);
        double double19 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
    }

    @Test
    public void test14593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14593");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double double5 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.addValue((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double10 = descriptiveStatistics9.getStandardDeviation();
        long long11 = descriptiveStatistics9.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics9.getMinImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getMeanImpl();
        double[] doubleArray15 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        double[] doubleArray20 = descriptiveStatistics16.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getSumImpl();
        descriptiveStatistics16.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = null;
        descriptiveStatistics16.setSkewnessImpl(univariateStatistic24);
        double[] doubleArray26 = descriptiveStatistics16.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double double37 = descriptiveStatistics33.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getKurtosisImpl();
        descriptiveStatistics38.setMaxImpl(univariateStatistic48);
        descriptiveStatistics33.setSumImpl(univariateStatistic48);
        descriptiveStatistics27.setSumsqImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str53 = descriptiveStatistics52.toString();
        descriptiveStatistics52.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics52.getGeometricMeanImpl();
        double double56 = descriptiveStatistics52.getMax();
        double double57 = descriptiveStatistics52.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics52.getVarianceImpl();
        descriptiveStatistics27.setMeanImpl(univariateStatistic58);
        double double60 = descriptiveStatistics27.getMean();
        double double61 = descriptiveStatistics27.getMean();
        double double62 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics63.getKurtosisImpl();
        double[] doubleArray66 = descriptiveStatistics63.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics63.getVarianceImpl();
        double double68 = descriptiveStatistics63.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics63.getGeometricMeanImpl();
        descriptiveStatistics27.setMaxImpl(univariateStatistic69);
        double double71 = descriptiveStatistics16.apply(univariateStatistic69);
        double double72 = descriptiveStatistics0.apply(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        descriptiveStatistics74.setKurtosisImpl(univariateStatistic77);
        descriptiveStatistics74.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics74.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics74.getMeanImpl();
        int int82 = descriptiveStatistics74.getWindowSize();
        double double83 = descriptiveStatistics74.getMean();
        double double84 = descriptiveStatistics74.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics74.getMeanImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic85);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str53, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.000000000000002d + "'", double72 == 10.000000000000002d);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(univariateStatistic85);
    }

    @Test
    public void test14594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14594");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double2 = descriptiveStatistics1.getMean();
        double double3 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getPercentileImpl();
        double[] doubleArray5 = descriptiveStatistics1.getValues();
        double double6 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics7.setMaxImpl(univariateStatistic17);
        double double19 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics7.getMinImpl();
        descriptiveStatistics7.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        double double29 = descriptiveStatistics23.getStandardDeviation();
        double double30 = descriptiveStatistics23.getSum();
        int int31 = descriptiveStatistics23.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics23.getMaxImpl();
        descriptiveStatistics7.setSkewnessImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        descriptiveStatistics34.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics34.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics34.getSumsqImpl();
        double double42 = descriptiveStatistics34.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str44 = descriptiveStatistics43.toString();
        double double45 = descriptiveStatistics43.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        double double52 = descriptiveStatistics43.apply(univariateStatistic51);
        double double53 = descriptiveStatistics43.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics43.getSumImpl();
        descriptiveStatistics34.setGeometricMeanImpl(univariateStatistic54);
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics7.getMeanImpl();
        double double58 = descriptiveStatistics7.getStandardDeviation();
        double double59 = descriptiveStatistics7.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics7.getMaxImpl();
        double double61 = descriptiveStatistics1.apply(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics1.getSkewnessImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str44, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(univariateStatistic62);
    }

    @Test
    public void test14595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14595");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic9);
        double[] doubleArray11 = descriptiveStatistics1.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics1.getMaxImpl();
        double double14 = descriptiveStatistics1.getSumsq();
        long long15 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double18 = descriptiveStatistics17.getStandardDeviation();
        long long19 = descriptiveStatistics17.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double22 = descriptiveStatistics21.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double25 = descriptiveStatistics24.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double29 = descriptiveStatistics28.getStandardDeviation();
        long long30 = descriptiveStatistics28.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getMinImpl();
        descriptiveStatistics24.setMaxImpl(univariateStatistic31);
        descriptiveStatistics21.setMinImpl(univariateStatistic31);
        descriptiveStatistics17.setSumImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics17.getMaxImpl();
        double double36 = descriptiveStatistics17.getVariance();
        double[] doubleArray37 = descriptiveStatistics17.getValues();
        double double38 = descriptiveStatistics17.getMin();
        double double39 = descriptiveStatistics17.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics17.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics17.getSkewnessImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
    }

    @Test
    public void test14596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14596");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        double double17 = descriptiveStatistics0.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getMaxImpl();
        double double19 = descriptiveStatistics0.getSumsq();
        double double20 = descriptiveStatistics0.getVariance();
        double double21 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
    }

    @Test
    public void test14597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14597");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getKurtosis();
        descriptiveStatistics0.clear();
        descriptiveStatistics0.setWindowSize(97);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        descriptiveStatistics24.setMaxImpl(univariateStatistic34);
        double double36 = descriptiveStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics24.getGeometricMeanImpl();
        double double38 = descriptiveStatistics24.getStandardDeviation();
        double double39 = descriptiveStatistics24.getVariance();
        long long40 = descriptiveStatistics24.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics24.getSumImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic41);
    }

    @Test
    public void test14598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14598");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 100);
        int int2 = resizableDoubleArray1.getExpansionMode();
        resizableDoubleArray1.setElement((int) (short) 10, (double) (short) -1);
        float float6 = resizableDoubleArray1.getContractionCriteria();
        int int7 = resizableDoubleArray1.getNumElements();
        resizableDoubleArray1.setNumElements(10);
        resizableDoubleArray1.clear();
        resizableDoubleArray1.addElement(0.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.5f + "'", float6 == 2.5f);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
    }

    @Test
    public void test14599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14599");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        resizableDoubleArray0.addElement((double) (byte) 1);
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 35.0f);
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) ' ');
        float float19 = resizableDoubleArray0.getContractionCriteria();
        float float20 = resizableDoubleArray0.getContractionCriteria();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 2.5f + "'", float19 == 2.5f);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 2.5f + "'", float20 == 2.5f);
    }

    @Test
    public void test14600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14600");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double3 = descriptiveStatistics2.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getSkewnessImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        double[] doubleArray9 = descriptiveStatistics6.getValues();
        double double10 = descriptiveStatistics6.getVariance();
        double double11 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        double double14 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics12.setSkewnessImpl(univariateStatistic18);
        double double21 = descriptiveStatistics12.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        long long25 = descriptiveStatistics22.getN();
        double[] doubleArray26 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics22.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics22.getMinImpl();
        descriptiveStatistics12.setMinImpl(univariateStatistic28);
        descriptiveStatistics6.setMeanImpl(univariateStatistic28);
        descriptiveStatistics6.setWindowSize((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics6.getSumImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic33);
        double double35 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test14601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14601");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        int int7 = resizableDoubleArray0.getNumElements();
        int int8 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor(31.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test14602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14602");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        int int4 = resizableDoubleArray1.getNumElements();
        double[] doubleArray5 = resizableDoubleArray1.getElements();
        float float6 = resizableDoubleArray1.getContractionCriteria();
        double[] doubleArray7 = resizableDoubleArray1.getValues();
        resizableDoubleArray1.addElement(10.448979591836734d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.448979591836734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.5f + "'", float6 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.448979591836734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14603");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 32.0f);
        int int11 = resizableDoubleArray0.getNumElements();
        int int12 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(99, (double) 99);
        double double18 = resizableDoubleArray0.addElementRolling(16.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test14604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14604");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMax();
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getKurtosis();
        double double10 = descriptiveStatistics0.getMean();
        double double11 = descriptiveStatistics0.getVariance();
        double double12 = descriptiveStatistics0.getVariance();
        java.lang.String str13 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test14605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14605");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        double double11 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic13);
    }

    @Test
    public void test14606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14606");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        double double6 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getVarianceImpl();
        double double8 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getVarianceImpl();
        long long10 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getMinImpl();
        double double12 = descriptiveStatistics0.getMean();
        double double13 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.clear();
        double[] doubleArray15 = descriptiveStatistics0.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    }

    @Test
    public void test14607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14607");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        double[] doubleArray6 = descriptiveStatistics2.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics2.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics2.getMinImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        descriptiveStatistics17.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getSkewnessImpl();
        descriptiveStatistics10.setSumsqImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics10.getVarianceImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getMaxImpl();
        descriptiveStatistics0.addValue(0.34098781653129445d);
        int int31 = descriptiveStatistics0.getWindowSize();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test14608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14608");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        double[] doubleArray6 = descriptiveStatistics2.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics2.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics2.getMeanImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics1.getKurtosisImpl();
        double double12 = descriptiveStatistics1.getMax();
        double double13 = descriptiveStatistics1.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics1.getVarianceImpl();
        double[] doubleArray15 = descriptiveStatistics1.getSortedValues();
        double double17 = descriptiveStatistics1.getPercentile(66.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test14609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14609");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        double double13 = descriptiveStatistics11.getVariance();
        double double14 = descriptiveStatistics11.getSum();
        double double16 = descriptiveStatistics11.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str18 = descriptiveStatistics17.toString();
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getGeometricMeanImpl();
        double double21 = descriptiveStatistics17.getMax();
        double[] doubleArray22 = descriptiveStatistics17.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getMaxImpl();
        double double24 = descriptiveStatistics11.apply(univariateStatistic23);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics0.getVarianceImpl();
        double double27 = descriptiveStatistics0.getMax();
        long long28 = descriptiveStatistics0.getN();
        double double29 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test14610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14610");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getKurtosisImpl();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        java.lang.String str6 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        double double8 = descriptiveStatistics0.getMax();
        long long9 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        descriptiveStatistics10.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = null;
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic18);
        double[] doubleArray20 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getKurtosisImpl();
        long long30 = descriptiveStatistics27.getN();
        double double31 = descriptiveStatistics27.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        descriptiveStatistics32.setMaxImpl(univariateStatistic42);
        descriptiveStatistics27.setSumImpl(univariateStatistic42);
        descriptiveStatistics21.setSumsqImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str47 = descriptiveStatistics46.toString();
        descriptiveStatistics46.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics46.getGeometricMeanImpl();
        double double50 = descriptiveStatistics46.getMax();
        double double51 = descriptiveStatistics46.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics46.getVarianceImpl();
        descriptiveStatistics21.setMeanImpl(univariateStatistic52);
        double double54 = descriptiveStatistics21.getMean();
        double double55 = descriptiveStatistics21.getMean();
        double double56 = descriptiveStatistics21.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics57.getKurtosisImpl();
        double[] doubleArray60 = descriptiveStatistics57.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics57.getVarianceImpl();
        double double62 = descriptiveStatistics57.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics57.getGeometricMeanImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic63);
        double double65 = descriptiveStatistics10.apply(univariateStatistic63);
        double double66 = descriptiveStatistics10.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics67.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics67.getKurtosisImpl();
        long long70 = descriptiveStatistics67.getN();
        descriptiveStatistics67.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics75 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics75.getSumsqImpl();
        descriptiveStatistics73.setKurtosisImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics80.getSumsqImpl();
        descriptiveStatistics78.setKurtosisImpl(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics78.getKurtosisImpl();
        descriptiveStatistics73.setMaxImpl(univariateStatistic83);
        double double85 = descriptiveStatistics73.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics73.getMinImpl();
        descriptiveStatistics67.setMinImpl(univariateStatistic86);
        double double88 = descriptiveStatistics67.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics90 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics90.getKurtosisImpl();
        descriptiveStatistics67.setSkewnessImpl(univariateStatistic91);
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic91);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic94 = descriptiveStatistics10.getMinImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic94);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: -1.0\nmax: -1.0\nmean: -1.0\nstd dev: 0.0\nmedian: -1.0\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 1\nmin: -1.0\nmax: -1.0\nmean: -1.0\nstd dev: 0.0\nmedian: -1.0\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str47, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(descriptiveStatistics75);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic91);
        org.junit.Assert.assertNotNull(univariateStatistic94);
    }

    @Test
    public void test14611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14611");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setElement((int) '4', (double) '4');
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        float float14 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.addElement(40.5d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52.0]");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.0f + "'", float14 == 2.0f);
    }

    @Test
    public void test14612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14612");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        int int8 = descriptiveStatistics0.getWindowSize();
        int int9 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic24);
        double double26 = descriptiveStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics14.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics14.getVarianceImpl();
        descriptiveStatistics12.setMinImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics12.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics12.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics0.getKurtosisImpl();
        double double35 = descriptiveStatistics0.getMin();
        double double36 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test14613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14613");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getSkewnessImpl();
        java.lang.String str15 = descriptiveStatistics11.toString();
        double double16 = descriptiveStatistics11.getVariance();
        descriptiveStatistics11.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics11.getPercentileImpl();
        descriptiveStatistics7.setMinImpl(univariateStatistic25);
        long long27 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics7.getSkewnessImpl();
        double double30 = descriptiveStatistics0.apply(univariateStatistic29);
        double double31 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics32.getKurtosisImpl();
        long long35 = descriptiveStatistics32.getN();
        double[] doubleArray36 = descriptiveStatistics32.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics32.getSumImpl();
        double double38 = descriptiveStatistics32.getStandardDeviation();
        double double39 = descriptiveStatistics32.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics32.getVarianceImpl();
        double double41 = descriptiveStatistics32.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics32.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics32.getSumImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str15, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
    }

    @Test
    public void test14614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14614");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double double3 = descriptiveStatistics0.getStandardDeviation();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
    }

    @Test
    public void test14615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14615");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        float float5 = resizableDoubleArray0.getContractionCriteria();
        float float6 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = resizableDoubleArray0.getElement(36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 36 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.5f + "'", float6 == 2.5f);
    }

    @Test
    public void test14616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14616");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(36, 2.0f);
        int int3 = resizableDoubleArray2.start();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test14617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14617");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        float float9 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        int int11 = resizableDoubleArray0.getExpansionMode();
        double double13 = resizableDoubleArray0.addElementRolling((double) 1);
        int int14 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) 'a', (double) (-1L));
        resizableDoubleArray0.setNumElements((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14618");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        float float2 = resizableDoubleArray0.getContractionCriteria();
        int int3 = resizableDoubleArray0.getExpansionMode();
        float float4 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 2.0f);
        resizableDoubleArray0.discardFrontElements((int) (short) 1);
        resizableDoubleArray0.addElement((double) 31);
        resizableDoubleArray0.setNumElements(92);
        resizableDoubleArray0.addElement((double) 68);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.5f + "'", float2 == 2.5f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.5f + "'", float4 == 2.5f);
    }

    @Test
    public void test14619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14619");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getMean();
        java.lang.String str21 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getSkewnessImpl();
        double double23 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test14620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14620");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        int int7 = resizableDoubleArray0.start();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        int int9 = resizableDoubleArray0.getExpansionMode();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement(625.0d);
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        int int14 = resizableDoubleArray0.start();
        double double16 = resizableDoubleArray0.getElement((int) (short) 0);
        resizableDoubleArray0.addElement((double) 100.0f);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 625.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test14621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14621");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(10, (float) '#', (float) 100L);
        int int4 = resizableDoubleArray3.start();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test14622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14622");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.setElement(0, (double) 100);
        resizableDoubleArray0.addElement(2.5d);
        int int12 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = resizableDoubleArray0.getElement(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 31 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test14623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14623");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(37, (float) 1, 10.5f, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14624");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(101, (float) 0L, (float) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14625");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics16.getVarianceImpl();
        descriptiveStatistics14.setMinImpl(univariateStatistic30);
        double double32 = descriptiveStatistics14.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics14.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        long long37 = descriptiveStatistics34.getN();
        double[] doubleArray38 = descriptiveStatistics34.getValues();
        double double39 = descriptiveStatistics34.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double42 = descriptiveStatistics41.getStandardDeviation();
        long long43 = descriptiveStatistics41.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics34.setSumImpl(univariateStatistic44);
        descriptiveStatistics14.setSumImpl(univariateStatistic44);
        descriptiveStatistics0.setSumImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = null;
        descriptiveStatistics0.setMeanImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics51.getKurtosisImpl();
        long long54 = descriptiveStatistics51.getN();
        double[] doubleArray55 = descriptiveStatistics51.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics51.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics51.getMinImpl();
        double double58 = descriptiveStatistics51.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = null;
        descriptiveStatistics51.setSumImpl(univariateStatistic59);
        descriptiveStatistics51.setWindowSize((int) (byte) 1);
        double double63 = descriptiveStatistics51.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double65 = descriptiveStatistics64.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getSkewnessImpl();
        double double67 = descriptiveStatistics64.getMean();
        descriptiveStatistics64.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getSumImpl();
        descriptiveStatistics51.setKurtosisImpl(univariateStatistic69);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic72);
    }

    @Test
    public void test14626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14626");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.addValue(11225.0d);
        double double20 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double23 = descriptiveStatistics22.getStandardDeviation();
        long long24 = descriptiveStatistics22.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getSkewnessImpl();
        java.lang.String str26 = descriptiveStatistics22.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getKurtosisImpl();
        descriptiveStatistics22.setMeanImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        descriptiveStatistics31.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics31.getGeometricMeanImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str40 = descriptiveStatistics39.toString();
        double double41 = descriptiveStatistics39.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        double double48 = descriptiveStatistics39.apply(univariateStatistic47);
        double double49 = descriptiveStatistics39.getSumsq();
        double double50 = descriptiveStatistics39.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        descriptiveStatistics51.setKurtosisImpl(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics51.getKurtosisImpl();
        descriptiveStatistics39.setSumsqImpl(univariateStatistic56);
        double double58 = descriptiveStatistics22.apply(univariateStatistic56);
        double double59 = descriptiveStatistics22.getSkewness();
        double double60 = descriptiveStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics22.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics22.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic62);
        double double64 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 11224.999999999996d + "'", double20 == 11224.999999999996d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 11225.0d + "'", double64 == 11225.0d);
        org.junit.Assert.assertNotNull(univariateStatistic65);
    }

    @Test
    public void test14627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14627");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(103, (float) 32);
        resizableDoubleArray2.setElement((int) '4', (double) 0);
        double double7 = resizableDoubleArray2.addElementRolling((double) 92);
        resizableDoubleArray2.addElement((double) 101);
        double[] doubleArray10 = resizableDoubleArray2.getElements();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 92.0, 101.0]");
    }

    @Test
    public void test14628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14628");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        double[] doubleArray17 = descriptiveStatistics14.getSortedValues();
        double double18 = univariateStatistic12.evaluate(doubleArray17);
        descriptiveStatistics0.setMeanImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        descriptiveStatistics20.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics20.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics20.getSumsqImpl();
        double double28 = descriptiveStatistics20.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics20.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double31 = descriptiveStatistics30.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double35 = descriptiveStatistics34.getStandardDeviation();
        long long36 = descriptiveStatistics34.getN();
        double[] doubleArray37 = descriptiveStatistics34.getSortedValues();
        double double38 = univariateStatistic32.evaluate(doubleArray37);
        descriptiveStatistics20.setMeanImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double42 = descriptiveStatistics41.getStandardDeviation();
        long long43 = descriptiveStatistics41.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics41.getSkewnessImpl();
        java.lang.String str45 = descriptiveStatistics41.toString();
        double double46 = descriptiveStatistics41.getVariance();
        descriptiveStatistics41.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        descriptiveStatistics41.setSkewnessImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics41.getPercentileImpl();
        descriptiveStatistics20.setSumsqImpl(univariateStatistic55);
        double double57 = descriptiveStatistics20.getSum();
        double double58 = descriptiveStatistics20.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics20.getPercentileImpl();
        double double60 = descriptiveStatistics0.apply(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
    }

    @Test
    public void test14629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14629");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        descriptiveStatistics1.setWindowSize((int) (short) -1);
        double double11 = descriptiveStatistics1.getMean();
        long long12 = descriptiveStatistics1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test14630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14630");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        long long8 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getSumsqImpl();
        int int10 = descriptiveStatistics0.getWindowSize();
        double double12 = descriptiveStatistics0.getPercentile(5.4999999999999964d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
    }

    @Test
    public void test14631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14631");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics0.apply(univariateStatistic26);
        int int29 = descriptiveStatistics0.getWindowSize();
        double double30 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test14632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14632");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.contract();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        int int14 = resizableDoubleArray0.start();
        double double16 = resizableDoubleArray0.addElementRolling(35.0d);
        resizableDoubleArray0.addElement((double) 12);
        resizableDoubleArray0.addElement((double) 37);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test14633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14633");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.clear();
        double[] doubleArray5 = descriptiveStatistics0.getValues();
        double double6 = descriptiveStatistics0.getSum();
        double double7 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double10 = descriptiveStatistics9.getStandardDeviation();
        long long11 = descriptiveStatistics9.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics9.getSkewnessImpl();
        double double14 = descriptiveStatistics9.getPercentile((double) 100L);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double17 = descriptiveStatistics16.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getGeometricMeanImpl();
        double double19 = descriptiveStatistics16.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getKurtosisImpl();
        double[] doubleArray23 = descriptiveStatistics20.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics20.getVarianceImpl();
        descriptiveStatistics16.setSumsqImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        descriptiveStatistics26.addValue((double) 0);
        int int32 = descriptiveStatistics26.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics26.getGeometricMeanImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics9.setMaxImpl(univariateStatistic33);
        descriptiveStatistics0.setSumImpl(univariateStatistic33);
        double[] doubleArray37 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test14634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14634");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        float float6 = resizableDoubleArray0.getContractionCriteria();
        double double8 = resizableDoubleArray0.addElementRolling((double) 2.0f);
        double double10 = resizableDoubleArray0.addElementRolling((double) 2);
        resizableDoubleArray0.addElement((double) 0L);
        resizableDoubleArray0.contract();
        int int14 = resizableDoubleArray0.getExpansionMode();
        float float15 = resizableDoubleArray0.getExpansionFactor();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.5f + "'", float6 == 2.5f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 2.0f + "'", float15 == 2.0f);
    }

    @Test
    public void test14635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14635");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.clear();
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 34);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14636");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        resizableDoubleArray3.addElement((double) (-1L));
        double double7 = resizableDoubleArray3.addElementRolling(11.999999999999991d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
    }

    @Test
    public void test14637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14637");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        float float4 = resizableDoubleArray3.getContractionCriteria();
        int int5 = resizableDoubleArray3.getExpansionMode();
        double[] doubleArray6 = resizableDoubleArray3.getValues();
        double[] doubleArray7 = resizableDoubleArray3.getValues();
        double[] doubleArray8 = resizableDoubleArray3.getValues();
        resizableDoubleArray3.setExpansionFactor(31.0f);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 32.0f + "'", float4 == 32.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14638");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        double double22 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        descriptiveStatistics24.setMaxImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        double double41 = descriptiveStatistics24.apply(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double43 = descriptiveStatistics42.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double46 = descriptiveStatistics45.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double50 = descriptiveStatistics49.getStandardDeviation();
        long long51 = descriptiveStatistics49.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics49.getMinImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic52);
        descriptiveStatistics42.setMinImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getKurtosisImpl();
        long long58 = descriptiveStatistics55.getN();
        double double59 = descriptiveStatistics55.getMax();
        double double60 = descriptiveStatistics55.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double62 = descriptiveStatistics61.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics61.getMinImpl();
        descriptiveStatistics55.setSumImpl(univariateStatistic63);
        double double65 = descriptiveStatistics42.apply(univariateStatistic63);
        descriptiveStatistics24.setMinImpl(univariateStatistic63);
        java.lang.String str67 = descriptiveStatistics24.toString();
        descriptiveStatistics24.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics69.setWindowSize((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics69.getMeanImpl();
        descriptiveStatistics24.setVarianceImpl(univariateStatistic72);
        descriptiveStatistics0.setMinImpl(univariateStatistic72);
        double double75 = descriptiveStatistics0.getVariance();
        double double76 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str67, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test14639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14639");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        double double3 = descriptiveStatistics1.getSumsq();
        double double4 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics5.setGeometricMeanImpl(univariateStatistic22);
        double double24 = descriptiveStatistics5.getMin();
        double[] doubleArray25 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics26.setWindowSize((int) (byte) -1);
        int int29 = descriptiveStatistics26.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics26.setGeometricMeanImpl(univariateStatistic33);
        double double36 = descriptiveStatistics5.apply(univariateStatistic33);
        descriptiveStatistics1.setMeanImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics1.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics1.getMinImpl();
        double[] doubleArray40 = descriptiveStatistics1.getSortedValues();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
    }

    @Test
    public void test14640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14640");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics21.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics21.getMinImpl();
        descriptiveStatistics21.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        double double43 = descriptiveStatistics37.getStandardDeviation();
        double double44 = descriptiveStatistics37.getSum();
        int int45 = descriptiveStatistics37.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics37.getMaxImpl();
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        descriptiveStatistics48.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics48.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics48.getSumsqImpl();
        double double56 = descriptiveStatistics48.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str58 = descriptiveStatistics57.toString();
        double double59 = descriptiveStatistics57.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        descriptiveStatistics60.setKurtosisImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics60.getKurtosisImpl();
        double double66 = descriptiveStatistics57.apply(univariateStatistic65);
        double double67 = descriptiveStatistics57.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics57.getSumImpl();
        descriptiveStatistics48.setGeometricMeanImpl(univariateStatistic68);
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics71.getKurtosisImpl();
        long long74 = descriptiveStatistics71.getN();
        descriptiveStatistics71.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics71.getGeometricMeanImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic76);
        long long78 = descriptiveStatistics21.getN();
        double double79 = descriptiveStatistics21.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics81 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double82 = descriptiveStatistics81.getStandardDeviation();
        long long83 = descriptiveStatistics81.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics81.getSkewnessImpl();
        java.lang.String str85 = descriptiveStatistics81.toString();
        double double86 = descriptiveStatistics81.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics81.getPercentileImpl();
        double double88 = descriptiveStatistics21.apply(univariateStatistic87);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic87);
        long long90 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics1.getMaxImpl();
        double double92 = descriptiveStatistics1.getKurtosis();
        double double93 = descriptiveStatistics1.getMax();
        double double94 = descriptiveStatistics1.getVariance();
        double[] doubleArray95 = descriptiveStatistics1.getValues();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str58, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str85, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
    }

    @Test
    public void test14641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14641");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getNumElements();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        double double8 = resizableDoubleArray0.addElementRolling(52.49999999999999d);
        resizableDoubleArray0.setNumElements((int) '4');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, 52.49999999999999]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test14642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14642");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(53, 2.0f, 52.0f);
    }

    @Test
    public void test14643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14643");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        java.lang.String str16 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        double double27 = descriptiveStatistics18.apply(univariateStatistic26);
        double double28 = descriptiveStatistics18.getVariance();
        double double29 = descriptiveStatistics18.getSum();
        double double30 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics18.getSumImpl();
        double double32 = descriptiveStatistics0.apply(univariateStatistic31);
        double double33 = descriptiveStatistics0.getMean();
        double double34 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test14644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14644");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(1, (float) 100L, (float) 103);
        resizableDoubleArray3.clear();
    }

    @Test
    public void test14645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14645");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) (byte) 10);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.setExpansionFactor(2.0f);
        resizableDoubleArray0.clear();
        int int21 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(11224.999999999996d);
        double double25 = resizableDoubleArray0.getElement(0);
        double double27 = resizableDoubleArray0.getElement(0);
        resizableDoubleArray0.setElement((int) (short) 0, 4.5d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 11224.999999999996d + "'", double25 == 11224.999999999996d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 11224.999999999996d + "'", double27 == 11224.999999999996d);
    }

    @Test
    public void test14646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14646");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getVarianceImpl();
        double double19 = descriptiveStatistics0.getPercentile(10.000000000000002d);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test14647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14647");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double[] doubleArray21 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double22 = univariateStatistic17.evaluate(doubleArray21);
        descriptiveStatistics11.setMaxImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        double[] doubleArray28 = descriptiveStatistics24.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getMeanImpl();
        descriptiveStatistics11.setGeometricMeanImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        descriptiveStatistics33.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics33.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics33.getPercentileImpl();
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic40);
        descriptiveStatistics0.setMeanImpl(univariateStatistic40);
        double double43 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getKurtosisImpl();
        long long47 = descriptiveStatistics44.getN();
        double[] doubleArray48 = descriptiveStatistics44.getValues();
        double double49 = descriptiveStatistics44.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics44.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics44.getMaxImpl();
        double double53 = descriptiveStatistics0.apply(univariateStatistic52);
        double double54 = descriptiveStatistics0.getVariance();
        double[] doubleArray55 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double58 = descriptiveStatistics57.getStandardDeviation();
        long long59 = descriptiveStatistics57.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics57.getMinImpl();
        double double61 = descriptiveStatistics57.getMax();
        double double62 = descriptiveStatistics57.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics57.getKurtosisImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic63);
        double double65 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.0d + "'", double22 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test14648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14648");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double31 = descriptiveStatistics30.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics0.getSumImpl();
        long long35 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic36);
    }

    @Test
    public void test14649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14649");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        float float4 = resizableDoubleArray3.getContractionCriteria();
        int int5 = resizableDoubleArray3.getExpansionMode();
        int int6 = resizableDoubleArray3.start();
        resizableDoubleArray3.setElement((int) (short) 1, (double) 100L);
        resizableDoubleArray3.clear();
        int int11 = resizableDoubleArray3.getNumElements();
        double[] doubleArray12 = resizableDoubleArray3.getValues();
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 32.0f + "'", float4 == 32.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14650");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#', (-1.0f), (float) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14651");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        long long17 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getPercentileImpl();
        double double19 = descriptiveStatistics0.getVariance();
        double double20 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.clear();
        double double22 = descriptiveStatistics0.getSumsq();
        double double23 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test14652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14652");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.discardFrontElements(0);
        resizableDoubleArray0.setExpansionMode((int) (byte) 1);
        resizableDoubleArray0.setExpansionMode((int) (short) 1);
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }

    @Test
    public void test14653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14653");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 1, 11.0f);
    }

    @Test
    public void test14654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14654");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
    }

    @Test
    public void test14655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14655");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getKurtosisImpl();
        descriptiveStatistics0.addValue((double) (short) 10);
        int int15 = descriptiveStatistics0.getWindowSize();
        long long16 = descriptiveStatistics0.getN();
        double[] doubleArray17 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
    }

    @Test
    public void test14656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14656");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 2.5f);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 2.5]");
    }

    @Test
    public void test14657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14657");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        descriptiveStatistics8.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics8.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        descriptiveStatistics15.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics8.setSumsqImpl(univariateStatistic21);
        double double23 = descriptiveStatistics8.getStandardDeviation();
        double double24 = descriptiveStatistics8.getSum();
        double double25 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str27 = descriptiveStatistics26.toString();
        double double28 = descriptiveStatistics26.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        double double35 = descriptiveStatistics26.apply(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double38 = descriptiveStatistics37.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getGeometricMeanImpl();
        descriptiveStatistics26.setMeanImpl(univariateStatistic39);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic39);
        descriptiveStatistics0.setSumImpl(univariateStatistic39);
        descriptiveStatistics0.addValue((double) 32.0f);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics0.getSumsqImpl();
        double double46 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test14658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14658");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) 'a');
        long long2 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        double double5 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray7 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int8 = resizableDoubleArray7.start();
        resizableDoubleArray7.setExpansionMode((int) (short) 1);
        int int11 = resizableDoubleArray7.getNumElements();
        float float12 = resizableDoubleArray7.getContractionCriteria();
        int int13 = resizableDoubleArray7.getExpansionMode();
        int int14 = resizableDoubleArray7.getNumElements();
        double[] doubleArray15 = resizableDoubleArray7.getValues();
        double double16 = univariateStatistic6.evaluate(doubleArray15);
        descriptiveStatistics1.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray18 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int19 = resizableDoubleArray18.getExpansionMode();
        resizableDoubleArray18.setElement(0, (double) 0.0f);
        resizableDoubleArray18.clear();
        resizableDoubleArray18.setExpansionFactor(2.5f);
        int int26 = resizableDoubleArray18.getNumElements();
        double[] doubleArray27 = resizableDoubleArray18.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = univariateStatistic6.evaluate(doubleArray27, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.5f + "'", float12 == 2.5f);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    }

    @Test
    public void test14659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14659");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setNumElements(10);
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        double double10 = resizableDoubleArray0.addElementRolling((-1.0d));
        double double12 = resizableDoubleArray0.getElement(0);
        float float13 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.contract();
        int int15 = resizableDoubleArray0.start();
        double double17 = resizableDoubleArray0.addElementRolling(10.0d);
        double[] doubleArray18 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.5f + "'", float13 == 2.5f);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 10.0]");
    }

    @Test
    public void test14660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14660");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics16.getStandardDeviation();
        double double23 = descriptiveStatistics16.getSum();
        int int24 = descriptiveStatistics16.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getMaxImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic25);
        java.lang.String str27 = descriptiveStatistics0.toString();
        double double28 = descriptiveStatistics0.getMean();
        double[] doubleArray29 = descriptiveStatistics0.getValues();
        double double30 = descriptiveStatistics0.getSum();
        double double31 = descriptiveStatistics0.getGeometricMean();
        double double32 = descriptiveStatistics0.getVariance();
        double double33 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test14661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14661");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.getNumElements();
        float float10 = resizableDoubleArray0.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
    }

    @Test
    public void test14662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14662");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        double double8 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics6.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics6.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        double[] doubleArray20 = descriptiveStatistics16.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        descriptiveStatistics6.setMinImpl(univariateStatistic22);
        descriptiveStatistics0.setMeanImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getSumsqImpl();
        double double26 = descriptiveStatistics0.getSum();
        java.lang.Class<?> wildcardClass27 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
    }

    @Test
    public void test14663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14663");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double3 = descriptiveStatistics2.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray10 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int11 = resizableDoubleArray10.start();
        resizableDoubleArray10.addElement((double) 10);
        int int14 = resizableDoubleArray10.getExpansionMode();
        resizableDoubleArray10.addElement((double) (-1L));
        double[] doubleArray17 = resizableDoubleArray10.getElements();
        double double20 = univariateStatistic9.evaluate(doubleArray17, (int) (byte) 1, 1);
        double double21 = descriptiveStatistics2.apply(univariateStatistic9);
        double double22 = descriptiveStatistics2.getSum();
        long long23 = descriptiveStatistics2.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getVarianceImpl();
        descriptiveStatistics2.setKurtosisImpl(univariateStatistic26);
        double double28 = descriptiveStatistics1.apply(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics29.setMaxImpl(univariateStatistic39);
        double double41 = descriptiveStatistics29.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics29.getMinImpl();
        descriptiveStatistics29.setWindowSize((int) (short) 100);
        java.lang.String str45 = descriptiveStatistics29.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics29.getVarianceImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str49 = descriptiveStatistics48.toString();
        java.lang.String str50 = descriptiveStatistics48.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics51.getKurtosisImpl();
        long long54 = descriptiveStatistics51.getN();
        descriptiveStatistics51.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics51.getSkewnessImpl();
        descriptiveStatistics48.setSumsqImpl(univariateStatistic57);
        double double59 = descriptiveStatistics48.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics48.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics48.getMaxImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic61);
        double double63 = descriptiveStatistics1.getMin();
        long long64 = descriptiveStatistics1.getN();
        double[] doubleArray65 = descriptiveStatistics1.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str49, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
    }

    @Test
    public void test14664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14664");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double6 = descriptiveStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics5.setMinImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        double double19 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSkewnessImpl();
        double double21 = descriptiveStatistics1.getSum();
        double double22 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test14665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14665");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement((int) (short) 0, 10.0d);
        int int7 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test14666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14666");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        int int5 = resizableDoubleArray0.getNumElements();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.addElement((double) 1);
        double double10 = resizableDoubleArray0.addElementRolling(97.0d);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor(53.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test14667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14667");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        double double6 = descriptiveStatistics0.getPercentile(Double.NaN);
        double double7 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double19 = descriptiveStatistics18.getStandardDeviation();
        long long20 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getMinImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics0.setMinImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getMean();
        double double25 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
    }

    @Test
    public void test14668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14668");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 0, 102.5d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test14669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14669");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics9.getKurtosisImpl();
        long long12 = descriptiveStatistics9.getN();
        double[] doubleArray13 = descriptiveStatistics9.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics9.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getMinImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        descriptiveStatistics24.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getSkewnessImpl();
        descriptiveStatistics17.setSumsqImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics17.getVarianceImpl();
        descriptiveStatistics7.setVarianceImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.apply(univariateStatistic32);
        double double35 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics0.getSumImpl();
        double double37 = descriptiveStatistics0.getSumsq();
        double double38 = descriptiveStatistics0.getSumsq();
        double double39 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double42 = descriptiveStatistics41.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics41.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double46 = descriptiveStatistics45.getStandardDeviation();
        long long47 = descriptiveStatistics45.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics45.getMinImpl();
        descriptiveStatistics41.setMaxImpl(univariateStatistic48);
        double double50 = descriptiveStatistics41.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic51);
        int int53 = descriptiveStatistics0.getWindowSize();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test14670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14670");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        int int8 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setContractionCriteria((float) 'a');
        resizableDoubleArray0.setElement(103, (double) '#');
        double double16 = resizableDoubleArray0.addElementRolling(9.545941546018392d);
        double double18 = resizableDoubleArray0.getElement((int) '4');
        resizableDoubleArray0.addElement(0.9897959183673456d);
        int int21 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test14671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14671");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        double double6 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getVarianceImpl();
        double double8 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str11 = descriptiveStatistics10.toString();
        double double12 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getKurtosisImpl();
        double double19 = descriptiveStatistics10.apply(univariateStatistic18);
        double double20 = descriptiveStatistics10.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics10.getSumImpl();
        double double22 = descriptiveStatistics10.getMin();
        double[] doubleArray23 = descriptiveStatistics10.getSortedValues();
        double double24 = descriptiveStatistics10.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics10.getMeanImpl();
        long long26 = descriptiveStatistics10.getN();
        double double27 = descriptiveStatistics10.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        double[] doubleArray31 = descriptiveStatistics28.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics28.getVarianceImpl();
        double double33 = descriptiveStatistics28.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics28.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double37 = descriptiveStatistics36.getStandardDeviation();
        long long38 = descriptiveStatistics36.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics36.getSkewnessImpl();
        java.lang.String str40 = descriptiveStatistics36.toString();
        double double41 = descriptiveStatistics36.getVariance();
        descriptiveStatistics36.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics36.getGeometricMeanImpl();
        descriptiveStatistics28.setMeanImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics10.setSumImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics10.getMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic48);
        double double50 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test14672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14672");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getSumsq();
        double double7 = descriptiveStatistics0.getMin();
        double double8 = descriptiveStatistics0.getMax();
        double double9 = descriptiveStatistics0.getVariance();
        double double10 = descriptiveStatistics0.getSum();
        double double11 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test14673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14673");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        resizableDoubleArray0.setElement(1, (double) 100.0f);
        float float7 = resizableDoubleArray0.getExpansionFactor();
        double double9 = resizableDoubleArray0.getElement(1);
        int int10 = resizableDoubleArray0.getExpansionMode();
        float float11 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.0f + "'", float7 == 2.0f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.0f + "'", float11 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0]");
    }

    @Test
    public void test14674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14674");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getKurtosisImpl();
        double double7 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        double double17 = descriptiveStatistics8.getStandardDeviation();
        descriptiveStatistics8.clear();
        double double19 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics20.setMaxImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics32.getKurtosisImpl();
        descriptiveStatistics20.setGeometricMeanImpl(univariateStatistic37);
        descriptiveStatistics8.setSumImpl(univariateStatistic37);
        double double40 = descriptiveStatistics8.getSkewness();
        double double41 = descriptiveStatistics8.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double44 = descriptiveStatistics43.getStandardDeviation();
        long long45 = descriptiveStatistics43.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics43.getSkewnessImpl();
        java.lang.String str47 = descriptiveStatistics43.toString();
        double double48 = descriptiveStatistics43.getVariance();
        descriptiveStatistics43.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        descriptiveStatistics51.setKurtosisImpl(univariateStatistic54);
        descriptiveStatistics43.setSkewnessImpl(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics43.getPercentileImpl();
        descriptiveStatistics8.setGeometricMeanImpl(univariateStatistic57);
        double double59 = descriptiveStatistics0.apply(univariateStatistic57);
        double double60 = descriptiveStatistics0.getMax();
        double double61 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics0.getPercentileImpl();
        java.lang.Class<?> wildcardClass63 = descriptiveStatistics0.getClass();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str47, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test14675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14675");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double double6 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        resizableDoubleArray0.setElement(101, (double) '4');
        resizableDoubleArray0.setContractionCriteria((float) (byte) 100);
        resizableDoubleArray0.addElement(9.545941546018392d);
        int int14 = resizableDoubleArray0.getNumElements();
        double[] doubleArray15 = resizableDoubleArray0.getValues();
        int int16 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 103 + "'", int14 == 103);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test14676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14676");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        long long5 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        double double9 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getSumImpl();
        descriptiveStatistics6.setMinImpl(univariateStatistic12);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics16.getSumsqImpl();
        double double24 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        double[] doubleArray29 = descriptiveStatistics26.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        double[] doubleArray39 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double40 = univariateStatistic35.evaluate(doubleArray39);
        descriptiveStatistics26.setMaxImpl(univariateStatistic35);
        descriptiveStatistics16.setMaxImpl(univariateStatistic35);
        double double43 = descriptiveStatistics16.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics16.getSkewnessImpl();
        long long45 = descriptiveStatistics16.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double48 = descriptiveStatistics47.getStandardDeviation();
        long long49 = descriptiveStatistics47.getN();
        double[] doubleArray50 = descriptiveStatistics47.getSortedValues();
        double double51 = descriptiveStatistics47.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double54 = descriptiveStatistics53.getStandardDeviation();
        long long55 = descriptiveStatistics53.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double58 = descriptiveStatistics57.getStandardDeviation();
        long long59 = descriptiveStatistics57.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics57.getSkewnessImpl();
        java.lang.String str61 = descriptiveStatistics57.toString();
        double double62 = descriptiveStatistics57.getVariance();
        descriptiveStatistics57.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics67.getSumsqImpl();
        descriptiveStatistics65.setKurtosisImpl(univariateStatistic68);
        descriptiveStatistics57.setSkewnessImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics57.getPercentileImpl();
        descriptiveStatistics53.setMinImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics53.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics74.getKurtosisImpl();
        descriptiveStatistics53.setMaxImpl(univariateStatistic76);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray78 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int79 = resizableDoubleArray78.getExpansionMode();
        resizableDoubleArray78.addElement((double) 0);
        double double83 = resizableDoubleArray78.addElementRolling((double) 0.0f);
        resizableDoubleArray78.setElement((int) (byte) 10, (double) (short) -1);
        resizableDoubleArray78.addElement((double) (byte) 1);
        double[] doubleArray89 = resizableDoubleArray78.getElements();
        double double90 = univariateStatistic76.evaluate(doubleArray89);
        descriptiveStatistics47.setGeometricMeanImpl(univariateStatistic76);
        descriptiveStatistics16.setMeanImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic93 = descriptiveStatistics16.getMaxImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic93);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.0d + "'", double40 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str61, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 5.4999999999999964d + "'", double90 == 5.4999999999999964d);
        org.junit.Assert.assertNotNull(univariateStatistic93);
    }

    @Test
    public void test14677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14677");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(68);
        resizableDoubleArray1.addElement(52.5d);
    }

    @Test
    public void test14678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14678");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        int int11 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double double14 = resizableDoubleArray0.addElementRolling((double) (-1L));
        resizableDoubleArray0.clear();
        int int16 = resizableDoubleArray0.getNumElements();
        int int17 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (byte) 0);
        resizableDoubleArray0.addElement(52.0d);
        resizableDoubleArray0.setElement(103, (double) 4);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14679");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        long long7 = descriptiveStatistics0.getN();
        double double8 = descriptiveStatistics0.getStandardDeviation();
        double double9 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic16);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray18 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int19 = resizableDoubleArray18.getExpansionMode();
        int int20 = resizableDoubleArray18.getNumElements();
        double[] doubleArray21 = resizableDoubleArray18.getElements();
        double[] doubleArray22 = resizableDoubleArray18.getElements();
        resizableDoubleArray18.setNumElements((int) (byte) 100);
        resizableDoubleArray18.discardFrontElements((int) (byte) 100);
        double[] doubleArray27 = resizableDoubleArray18.getValues();
        float float28 = resizableDoubleArray18.getExpansionFactor();
        resizableDoubleArray18.setContractionCriteria((float) 100L);
        float float31 = resizableDoubleArray18.getContractionCriteria();
        resizableDoubleArray18.clear();
        resizableDoubleArray18.setNumElements(90);
        double[] doubleArray35 = resizableDoubleArray18.getValues();
        double double36 = univariateStatistic16.evaluate(doubleArray35);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 2.0f + "'", float28 == 2.0f);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 100.0f + "'", float31 == 100.0f);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test14680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14680");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getSum();
        double double5 = descriptiveStatistics1.getMin();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test14681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14681");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        double double15 = descriptiveStatistics10.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getVarianceImpl();
        double double17 = descriptiveStatistics0.apply(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double20 = descriptiveStatistics19.getMean();
        double double21 = descriptiveStatistics19.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics19.getPercentileImpl();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        double double24 = descriptiveStatistics19.getSkewness();
        double double25 = descriptiveStatistics19.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getKurtosisImpl();
        double[] doubleArray36 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double37 = univariateStatistic32.evaluate(doubleArray36);
        descriptiveStatistics26.setMaxImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics40.setWindowSize((int) ' ');
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        descriptiveStatistics43.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics43.getSkewnessImpl();
        descriptiveStatistics40.setSumsqImpl(univariateStatistic49);
        descriptiveStatistics26.setMeanImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double54 = descriptiveStatistics53.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getGeometricMeanImpl();
        descriptiveStatistics26.setMinImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics26.getPercentileImpl();
        descriptiveStatistics19.setSkewnessImpl(univariateStatistic57);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.0d + "'", double37 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
    }

    @Test
    public void test14682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14682");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics11.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        double double21 = descriptiveStatistics17.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getKurtosisImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic32);
        descriptiveStatistics17.setSumImpl(univariateStatistic32);
        descriptiveStatistics11.setSumsqImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str37 = descriptiveStatistics36.toString();
        descriptiveStatistics36.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics36.getGeometricMeanImpl();
        double double40 = descriptiveStatistics36.getMax();
        double double41 = descriptiveStatistics36.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics36.getVarianceImpl();
        descriptiveStatistics11.setMeanImpl(univariateStatistic42);
        double double44 = descriptiveStatistics11.getMean();
        double double45 = descriptiveStatistics11.getMean();
        double double46 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getKurtosisImpl();
        double[] doubleArray50 = descriptiveStatistics47.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics47.getVarianceImpl();
        double double52 = descriptiveStatistics47.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics47.getGeometricMeanImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic53);
        double double55 = descriptiveStatistics0.apply(univariateStatistic53);
        double double56 = descriptiveStatistics0.getStandardDeviation();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = descriptiveStatistics0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test14683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14683");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double double14 = descriptiveStatistics10.getMax();
        double double15 = descriptiveStatistics10.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double17 = descriptiveStatistics16.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getMinImpl();
        descriptiveStatistics10.setSumImpl(univariateStatistic18);
        descriptiveStatistics5.setSumImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics5.apply(univariateStatistic31);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic31);
        long long35 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double39 = descriptiveStatistics38.getMax();
        long long40 = descriptiveStatistics38.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics38.getVarianceImpl();
        double[] doubleArray42 = descriptiveStatistics38.getSortedValues();
        double double43 = univariateStatistic36.evaluate(doubleArray42);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test14684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14684");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) (short) 100);
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        int int13 = resizableDoubleArray0.getExpansionMode();
        float float14 = resizableDoubleArray0.getExpansionFactor();
        int int15 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.0f + "'", float14 == 2.0f);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test14685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14685");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray11 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics8.getVarianceImpl();
        double double13 = descriptiveStatistics0.apply(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = null;
        descriptiveStatistics0.setMeanImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getPercentileImpl();
        double double17 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test14686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14686");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics13.setMaxImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics13.setGeometricMeanImpl(univariateStatistic30);
        double double32 = descriptiveStatistics13.getMin();
        double double33 = descriptiveStatistics13.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str35 = descriptiveStatistics34.toString();
        java.lang.String str36 = descriptiveStatistics34.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getKurtosisImpl();
        long long40 = descriptiveStatistics37.getN();
        descriptiveStatistics37.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics37.getSkewnessImpl();
        descriptiveStatistics34.setSumsqImpl(univariateStatistic43);
        double double45 = descriptiveStatistics34.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics34.getSkewnessImpl();
        double double47 = descriptiveStatistics13.apply(univariateStatistic46);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str50 = descriptiveStatistics49.toString();
        double double51 = descriptiveStatistics49.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        double double58 = descriptiveStatistics49.apply(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double61 = descriptiveStatistics60.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getGeometricMeanImpl();
        descriptiveStatistics49.setMeanImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics49.getSumImpl();
        double[] doubleArray65 = descriptiveStatistics49.getSortedValues();
        long long66 = descriptiveStatistics49.getN();
        double double67 = descriptiveStatistics49.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics49.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str35, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str36, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic70);
    }

    @Test
    public void test14687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14687");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        double[] doubleArray17 = descriptiveStatistics14.getSortedValues();
        double double18 = univariateStatistic12.evaluate(doubleArray17);
        descriptiveStatistics0.setMeanImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getSkewnessImpl();
        java.lang.String str25 = descriptiveStatistics21.toString();
        double double26 = descriptiveStatistics21.getVariance();
        descriptiveStatistics21.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getPercentileImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic35);
        long long37 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double39 = descriptiveStatistics38.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str42 = descriptiveStatistics41.toString();
        descriptiveStatistics41.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics41.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray46 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int47 = resizableDoubleArray46.start();
        resizableDoubleArray46.addElement((double) 10);
        int int50 = resizableDoubleArray46.getExpansionMode();
        resizableDoubleArray46.addElement((double) (-1L));
        double[] doubleArray53 = resizableDoubleArray46.getElements();
        double double56 = univariateStatistic45.evaluate(doubleArray53, (int) (byte) 1, 1);
        double double57 = descriptiveStatistics38.apply(univariateStatistic45);
        double double58 = descriptiveStatistics38.getMean();
        java.lang.String str59 = descriptiveStatistics38.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics38.getMeanImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic60);
        double double62 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        descriptiveStatistics63.setKurtosisImpl(univariateStatistic66);
        descriptiveStatistics63.clear();
        long long69 = descriptiveStatistics63.getN();
        long long70 = descriptiveStatistics63.getN();
        double double71 = descriptiveStatistics63.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics63.getSkewnessImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str42, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str59, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(univariateStatistic72);
    }

    @Test
    public void test14688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14688");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 52, (float) (-1L), 93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14689");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(37, (float) 99);
    }

    @Test
    public void test14690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14690");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        double double6 = descriptiveStatistics1.getPercentile((double) 100L);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getMinImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = descriptiveStatistics1.getElement(93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 93 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test14691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14691");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getGeometricMeanImpl();
        descriptiveStatistics0.setWindowSize((int) (byte) 1);
        long long10 = descriptiveStatistics0.getN();
        double double11 = descriptiveStatistics0.getMax();
        int int12 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSumsqImpl();
        double double14 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test14692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14692");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        double double14 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getSkewnessImpl();
        double double16 = descriptiveStatistics0.getSum();
        double double17 = descriptiveStatistics0.getKurtosis();
        descriptiveStatistics0.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getVarianceImpl();
        java.lang.String str21 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test14693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14693");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        descriptiveStatistics2.setKurtosisImpl(univariateStatistic5);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics2.setMaxImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getMaxImpl();
        long long17 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        descriptiveStatistics18.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics18.getVarianceImpl();
        int int25 = descriptiveStatistics18.getWindowSize();
        double double26 = descriptiveStatistics18.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics18.getMaxImpl();
        double double28 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic29);
        double[] doubleArray31 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        descriptiveStatistics32.setMaxImpl(univariateStatistic42);
        double double44 = descriptiveStatistics32.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics32.getMinImpl();
        descriptiveStatistics32.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics49.getKurtosisImpl();
        double double55 = descriptiveStatistics49.getStandardDeviation();
        double double56 = descriptiveStatistics49.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics49.getPercentileImpl();
        descriptiveStatistics32.setVarianceImpl(univariateStatistic57);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
    }

    @Test
    public void test14694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14694");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        double double13 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getSkewnessImpl();
        double double15 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getKurtosisImpl();
        descriptiveStatistics16.setGeometricMeanImpl(univariateStatistic33);
        double double35 = descriptiveStatistics16.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double37 = descriptiveStatistics36.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getKurtosisImpl();
        long long41 = descriptiveStatistics38.getN();
        descriptiveStatistics38.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics49.getKurtosisImpl();
        descriptiveStatistics44.setMaxImpl(univariateStatistic54);
        double double56 = descriptiveStatistics44.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics44.getMinImpl();
        descriptiveStatistics38.setMinImpl(univariateStatistic57);
        descriptiveStatistics36.setMeanImpl(univariateStatistic57);
        descriptiveStatistics16.setSumImpl(univariateStatistic57);
        descriptiveStatistics0.setMeanImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics0.getMaxImpl();
        double double63 = descriptiveStatistics0.getSum();
        double double64 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test14695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14695");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        long long2 = descriptiveStatistics1.getN();
        descriptiveStatistics1.clear();
        java.lang.String str4 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics6.getKurtosisImpl();
        double[] doubleArray15 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double16 = univariateStatistic11.evaluate(doubleArray15);
        descriptiveStatistics5.setMaxImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics18.getMeanImpl();
        descriptiveStatistics5.setGeometricMeanImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        double double30 = descriptiveStatistics26.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics36.getKurtosisImpl();
        descriptiveStatistics31.setMaxImpl(univariateStatistic41);
        descriptiveStatistics26.setSumImpl(univariateStatistic41);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics5.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics46.getKurtosisImpl();
        long long49 = descriptiveStatistics46.getN();
        descriptiveStatistics46.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics46.getVarianceImpl();
        int int53 = descriptiveStatistics46.getWindowSize();
        double double54 = descriptiveStatistics46.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics46.getKurtosisImpl();
        descriptiveStatistics5.setSumsqImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics5.getMeanImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray59 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int60 = resizableDoubleArray59.getExpansionMode();
        int int61 = resizableDoubleArray59.getNumElements();
        double[] doubleArray62 = resizableDoubleArray59.getElements();
        float float63 = resizableDoubleArray59.getExpansionFactor();
        int int64 = resizableDoubleArray59.getNumElements();
        resizableDoubleArray59.contract();
        float float66 = resizableDoubleArray59.getExpansionFactor();
        int int67 = resizableDoubleArray59.getNumElements();
        double[] doubleArray68 = resizableDoubleArray59.getElements();
        double double69 = univariateStatistic58.evaluate(doubleArray68);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics1.getPercentileImpl();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.0d + "'", double16 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 2.0f + "'", float63 == 2.0f);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 2.0f + "'", float66 == 2.0f);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(univariateStatistic71);
    }

    @Test
    public void test14696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14696");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#', (float) 100);
        resizableDoubleArray2.setElement(35, 10006.25d);
    }

    @Test
    public void test14697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14697");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics14.setWindowSize((int) ' ');
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getSkewnessImpl();
        descriptiveStatistics14.setSumsqImpl(univariateStatistic23);
        descriptiveStatistics0.setMeanImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double28 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getGeometricMeanImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics0.getPercentileImpl();
        double double33 = descriptiveStatistics0.getPercentile(5.4999999999999964d);
        double double34 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.addValue((double) 31.0f);
        double double37 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test14698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14698");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        int int7 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 100.0f);
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        float float11 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.0f + "'", float11 == 2.0f);
    }

    @Test
    public void test14699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14699");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        double double10 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getSkewnessImpl();
        java.lang.String str16 = descriptiveStatistics12.toString();
        double double17 = descriptiveStatistics12.getVariance();
        descriptiveStatistics12.setWindowSize((int) (short) 100);
        descriptiveStatistics12.setWindowSize((int) (short) -1);
        double double22 = descriptiveStatistics12.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics12.getMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic23);
        descriptiveStatistics0.setWindowSize(92);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test14700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14700");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setContractionCriteria((float) 100);
        resizableDoubleArray0.setElement((int) (byte) 1, 0.0d);
        double[] doubleArray8 = resizableDoubleArray0.getValues();
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14701");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        resizableDoubleArray0.setElement((int) '#', 2.0d);
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) (short) 10);
        resizableDoubleArray0.addElement((double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0]");
    }

    @Test
    public void test14702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14702");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        double double17 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        double double25 = descriptiveStatistics19.getStandardDeviation();
        double double26 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics19.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double30 = descriptiveStatistics29.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getGeometricMeanImpl();
        double double32 = descriptiveStatistics29.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        double[] doubleArray36 = descriptiveStatistics33.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics33.getVarianceImpl();
        descriptiveStatistics29.setSumsqImpl(univariateStatistic37);
        double double39 = descriptiveStatistics19.apply(univariateStatistic37);
        long long40 = descriptiveStatistics19.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics19.getKurtosisImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray42 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int43 = resizableDoubleArray42.getExpansionMode();
        resizableDoubleArray42.addElement((double) 0);
        double double47 = resizableDoubleArray42.addElementRolling((double) 0.0f);
        resizableDoubleArray42.setElement((int) (byte) 10, (double) (short) -1);
        float float51 = resizableDoubleArray42.getExpansionFactor();
        double[] doubleArray52 = resizableDoubleArray42.getElements();
        double[] doubleArray53 = resizableDoubleArray42.getElements();
        double[] doubleArray54 = resizableDoubleArray42.getValues();
        double double55 = univariateStatistic41.evaluate(doubleArray54);
        descriptiveStatistics0.setSumImpl(univariateStatistic41);
        int int57 = descriptiveStatistics0.getWindowSize();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 2.0f + "'", float51 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test14703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14703");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double double27 = descriptiveStatistics23.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics28.setMaxImpl(univariateStatistic38);
        descriptiveStatistics23.setSumImpl(univariateStatistic38);
        descriptiveStatistics17.setSumsqImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str43 = descriptiveStatistics42.toString();
        descriptiveStatistics42.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getGeometricMeanImpl();
        double double46 = descriptiveStatistics42.getMax();
        double double47 = descriptiveStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getVarianceImpl();
        descriptiveStatistics17.setMeanImpl(univariateStatistic48);
        descriptiveStatistics0.setSumImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics0.getVarianceImpl();
        double double52 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
    }

    @Test
    public void test14704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14704");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        float float9 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement(1, 32.0d);
        double[] doubleArray14 = resizableDoubleArray0.getElements();
        double double16 = resizableDoubleArray0.addElementRolling((double) '#');
        resizableDoubleArray0.addElement((double) 12);
        double double20 = resizableDoubleArray0.addElementRolling((-0.5d));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 32.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 32.0d + "'", double20 == 32.0d);
    }

    @Test
    public void test14705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14705");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double[] doubleArray1 = descriptiveStatistics0.getSortedValues();
        double double2 = descriptiveStatistics0.getMin();
        double double3 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double5 = descriptiveStatistics4.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        descriptiveStatistics6.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic22);
        double double24 = descriptiveStatistics12.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics6.setMinImpl(univariateStatistic25);
        descriptiveStatistics4.setMeanImpl(univariateStatistic25);
        double double28 = descriptiveStatistics4.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        descriptiveStatistics4.setKurtosisImpl(univariateStatistic34);
        double double36 = descriptiveStatistics4.getVariance();
        double double37 = descriptiveStatistics4.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics4.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics4.getSumImpl();
        double double40 = descriptiveStatistics4.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics4.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
    }

    @Test
    public void test14706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14706");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics6.setMaxImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getMeanImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic25);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double29 = descriptiveStatistics28.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        descriptiveStatistics30.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setMinImpl(univariateStatistic49);
        descriptiveStatistics28.setMeanImpl(univariateStatistic49);
        descriptiveStatistics1.setMinImpl(univariateStatistic49);
        double double53 = descriptiveStatistics1.getMax();
        double double54 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str57 = descriptiveStatistics56.toString();
        descriptiveStatistics56.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics56.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics61.getKurtosisImpl();
        long long64 = descriptiveStatistics61.getN();
        double double65 = descriptiveStatistics61.getMax();
        double double66 = descriptiveStatistics61.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double68 = descriptiveStatistics67.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics67.getMinImpl();
        descriptiveStatistics61.setSumImpl(univariateStatistic69);
        descriptiveStatistics56.setSumImpl(univariateStatistic69);
        double double72 = descriptiveStatistics56.getMin();
        java.lang.String str73 = descriptiveStatistics56.toString();
        long long74 = descriptiveStatistics56.getN();
        double[] doubleArray75 = descriptiveStatistics56.getSortedValues();
        double double76 = univariateStatistic55.evaluate(doubleArray75);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str57, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str73, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test14707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14707");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(0, 0.0f, (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14708");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 2.5f);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement((int) (byte) 10, 100.0d);
        double double14 = resizableDoubleArray0.getElement((int) (byte) 1);
        double[] doubleArray15 = resizableDoubleArray0.getElements();
        float float16 = resizableDoubleArray0.getContractionCriteria();
        int int17 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(0, 0.7889257564765737d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2.5d + "'", double14 == 2.5d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 2.5f + "'", float16 == 2.5f);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14709");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.contract();
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        int int11 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14710");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        double double6 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getVarianceImpl();
        double double8 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getVarianceImpl();
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        double double11 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getMaxImpl();
        double[] doubleArray13 = descriptiveStatistics0.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }

    @Test
    public void test14711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14711");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics16.getStandardDeviation();
        double double23 = descriptiveStatistics16.getSum();
        int int24 = descriptiveStatistics16.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getMaxImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic25);
        java.lang.String str27 = descriptiveStatistics0.toString();
        double double28 = descriptiveStatistics0.getMean();
        double[] doubleArray29 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics0.getSumsqImpl();
        double double31 = descriptiveStatistics0.getMax();
        double[] doubleArray32 = descriptiveStatistics0.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
    }

    @Test
    public void test14712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14712");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(102, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14713");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double[] doubleArray12 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setNumElements(1);
        resizableDoubleArray0.discardFrontElements(0);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setElement((int) (byte) -1, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Cannot set an element at a negative index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0]");
    }

    @Test
    public void test14714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14714");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        double double11 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.addValue((double) 100);
        double double15 = descriptiveStatistics0.getPercentile((double) (short) 10);
        descriptiveStatistics0.setWindowSize(31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getSumImpl();
        descriptiveStatistics18.clear();
        double double26 = descriptiveStatistics18.getPercentile((double) 32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getKurtosisImpl();
        double[] doubleArray30 = descriptiveStatistics27.getValues();
        double double31 = descriptiveStatistics27.getMean();
        double[] doubleArray32 = descriptiveStatistics27.getValues();
        double double33 = descriptiveStatistics27.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double36 = descriptiveStatistics35.getStandardDeviation();
        long long37 = descriptiveStatistics35.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics35.getSkewnessImpl();
        java.lang.String str39 = descriptiveStatistics35.toString();
        double double40 = descriptiveStatistics35.getVariance();
        descriptiveStatistics35.setWindowSize((int) (short) 100);
        descriptiveStatistics35.setWindowSize((int) (short) -1);
        double double45 = descriptiveStatistics35.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics35.getVarianceImpl();
        descriptiveStatistics27.setSkewnessImpl(univariateStatistic47);
        descriptiveStatistics18.setMaxImpl(univariateStatistic47);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str39, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
    }

    @Test
    public void test14715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14715");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        double double17 = descriptiveStatistics8.getStandardDeviation();
        descriptiveStatistics8.clear();
        double double19 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic20);
        java.lang.String str22 = descriptiveStatistics0.toString();
        double double23 = descriptiveStatistics0.getStandardDeviation();
        double double24 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getVarianceImpl();
        double[] doubleArray26 = descriptiveStatistics0.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
    }

    @Test
    public void test14716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14716");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics16.getStandardDeviation();
        double double23 = descriptiveStatistics16.getSum();
        int int24 = descriptiveStatistics16.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getMaxImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str28 = descriptiveStatistics27.toString();
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics27.getGeometricMeanImpl();
        double double31 = descriptiveStatistics27.getMax();
        double double32 = descriptiveStatistics27.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getVarianceImpl();
        double double34 = descriptiveStatistics27.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double37 = descriptiveStatistics36.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str39 = descriptiveStatistics38.toString();
        double double40 = descriptiveStatistics38.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        descriptiveStatistics38.setSkewnessImpl(univariateStatistic44);
        double double47 = descriptiveStatistics38.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        descriptiveStatistics48.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics48.getPercentileImpl();
        double double55 = descriptiveStatistics48.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics56.getKurtosisImpl();
        double[] doubleArray59 = descriptiveStatistics56.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics56.getVarianceImpl();
        double double61 = descriptiveStatistics48.apply(univariateStatistic60);
        double double62 = descriptiveStatistics38.apply(univariateStatistic60);
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic60);
        descriptiveStatistics27.setMeanImpl(univariateStatistic60);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic60);
        int int66 = descriptiveStatistics0.getWindowSize();
        double[] doubleArray67 = descriptiveStatistics0.getValues();
        double double68 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str28, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str39, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test14717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14717");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getGeometricMeanImpl();
        double double14 = descriptiveStatistics0.getStandardDeviation();
        double double15 = descriptiveStatistics0.getVariance();
        long long16 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double19 = descriptiveStatistics18.getStandardDeviation();
        long long20 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getSkewnessImpl();
        java.lang.String str22 = descriptiveStatistics18.toString();
        double double23 = descriptiveStatistics18.getVariance();
        descriptiveStatistics18.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        descriptiveStatistics18.setSkewnessImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = null;
        descriptiveStatistics0.setMinImpl(univariateStatistic35);
        double double37 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
    }

    @Test
    public void test14718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14718");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics12.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setSumImpl(univariateStatistic29);
        double double32 = descriptiveStatistics0.getSkewness();
        double double33 = descriptiveStatistics0.getKurtosis();
        double double34 = descriptiveStatistics0.getSumsq();
        descriptiveStatistics0.clear();
        double double36 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test14719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14719");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(36, (float) 103);
    }

    @Test
    public void test14720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14720");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test14721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14721");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        double double1 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.clear();
        double double3 = descriptiveStatistics0.getMean();
        double double4 = descriptiveStatistics0.getSumsq();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test14722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14722");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics7.setWindowSize((int) (byte) -1);
        long long10 = descriptiveStatistics7.getN();
        double double11 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getSumImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic12);
        double double14 = descriptiveStatistics1.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test14723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14723");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double31 = descriptiveStatistics30.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.getStandardDeviation();
        double double35 = descriptiveStatistics0.getMean();
        double double36 = descriptiveStatistics0.getStandardDeviation();
        double double37 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test14724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14724");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.addValue(100.0d);
        double double10 = descriptiveStatistics0.getSkewness();
        double double11 = descriptiveStatistics0.getStandardDeviation();
        int int12 = descriptiveStatistics0.getWindowSize();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str15 = descriptiveStatistics14.toString();
        double double16 = descriptiveStatistics14.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics14.setSkewnessImpl(univariateStatistic20);
        double double23 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double26 = descriptiveStatistics25.getStandardDeviation();
        long long27 = descriptiveStatistics25.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getMinImpl();
        descriptiveStatistics14.setVarianceImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double32 = descriptiveStatistics31.getStandardDeviation();
        long long33 = descriptiveStatistics31.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics31.getSkewnessImpl();
        java.lang.String str35 = descriptiveStatistics31.toString();
        double double36 = descriptiveStatistics31.getVariance();
        descriptiveStatistics31.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        descriptiveStatistics31.setSkewnessImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        descriptiveStatistics45.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics45.getSkewnessImpl();
        descriptiveStatistics31.setVarianceImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics31.getSumImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str56 = descriptiveStatistics55.toString();
        double double57 = descriptiveStatistics55.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        descriptiveStatistics58.setKurtosisImpl(univariateStatistic61);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics58.getKurtosisImpl();
        double double64 = descriptiveStatistics55.apply(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str66 = descriptiveStatistics65.toString();
        descriptiveStatistics65.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics65.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics65.getSumsqImpl();
        descriptiveStatistics55.setMeanImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        descriptiveStatistics71.setKurtosisImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        descriptiveStatistics76.setKurtosisImpl(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics76.getKurtosisImpl();
        descriptiveStatistics71.setMaxImpl(univariateStatistic81);
        double double83 = descriptiveStatistics71.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics71.getMinImpl();
        descriptiveStatistics71.setWindowSize((int) (short) 100);
        java.lang.String str87 = descriptiveStatistics71.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics71.getVarianceImpl();
        descriptiveStatistics55.setGeometricMeanImpl(univariateStatistic88);
        descriptiveStatistics14.setGeometricMeanImpl(univariateStatistic88);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic88);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic92 = descriptiveStatistics0.getMaxImpl();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str15, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str35, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str56, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str66, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str87, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertNotNull(univariateStatistic92);
    }

    @Test
    public void test14725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14725");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getSkewnessImpl();
        java.lang.String str15 = descriptiveStatistics11.toString();
        double double16 = descriptiveStatistics11.getVariance();
        descriptiveStatistics11.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics11.getPercentileImpl();
        descriptiveStatistics7.setMinImpl(univariateStatistic25);
        long long27 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics7.getSkewnessImpl();
        double double30 = descriptiveStatistics0.apply(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str15, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
    }

    @Test
    public void test14726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14726");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = null;
        descriptiveStatistics1.setVarianceImpl(univariateStatistic23);
        descriptiveStatistics1.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics26.setWindowSize((int) (byte) -1);
        long long29 = descriptiveStatistics26.getN();
        double double30 = descriptiveStatistics26.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
    }

    @Test
    public void test14727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14727");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.clear();
        resizableDoubleArray1.clear();
        resizableDoubleArray1.addElement((double) (short) 100);
        double double7 = resizableDoubleArray1.addElementRolling(11224.999999999996d);
        resizableDoubleArray1.setElement(11, (double) 2);
        resizableDoubleArray1.addElement(10.5d);
        resizableDoubleArray1.setNumElements(90);
        double double16 = resizableDoubleArray1.addElementRolling((double) (byte) 1);
        resizableDoubleArray1.addElement(11.999999999999991d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11224.999999999996d + "'", double16 == 11224.999999999996d);
    }

    @Test
    public void test14728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14728");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        double[] doubleArray2 = resizableDoubleArray1.getElements();
        double[] doubleArray3 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.clear();
        double double6 = resizableDoubleArray1.addElementRolling(2704.0d);
        double[] doubleArray7 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.contract();
        int int9 = resizableDoubleArray1.getNumElements();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14729");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        double double2 = descriptiveStatistics0.getMin();
        double double3 = descriptiveStatistics0.getMax();
        descriptiveStatistics0.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMaxImpl();
        double double7 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double[] doubleArray12 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics8.getMinImpl();
        double double15 = descriptiveStatistics8.getMax();
        descriptiveStatistics8.addValue((double) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics8.getMeanImpl();
        double double19 = descriptiveStatistics8.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str21 = descriptiveStatistics20.toString();
        double double22 = descriptiveStatistics20.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        double double29 = descriptiveStatistics20.apply(univariateStatistic28);
        double double30 = descriptiveStatistics20.getSumsq();
        double double31 = descriptiveStatistics20.getMean();
        double double32 = descriptiveStatistics20.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str34 = descriptiveStatistics33.toString();
        descriptiveStatistics33.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics33.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getKurtosisImpl();
        long long41 = descriptiveStatistics38.getN();
        double double42 = descriptiveStatistics38.getMax();
        double double43 = descriptiveStatistics38.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double45 = descriptiveStatistics44.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getMinImpl();
        descriptiveStatistics38.setSumImpl(univariateStatistic46);
        descriptiveStatistics33.setSumImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics54.getKurtosisImpl();
        descriptiveStatistics49.setMaxImpl(univariateStatistic59);
        double double61 = descriptiveStatistics33.apply(univariateStatistic59);
        double double62 = descriptiveStatistics20.apply(univariateStatistic59);
        double double63 = descriptiveStatistics20.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics20.getPercentileImpl();
        double double65 = descriptiveStatistics8.apply(univariateStatistic64);
        descriptiveStatistics0.setMeanImpl(univariateStatistic64);
        double double67 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str34, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test14730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14730");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double[] doubleArray9 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getSumImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic10);
        descriptiveStatistics1.clear();
        double double13 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        descriptiveStatistics14.addValue((double) 0);
        int int20 = descriptiveStatistics14.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics21.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics21.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getVarianceImpl();
        descriptiveStatistics14.setMeanImpl(univariateStatistic35);
        descriptiveStatistics1.setMaxImpl(univariateStatistic35);
        double double38 = descriptiveStatistics1.getSumsq();
        double double40 = descriptiveStatistics1.getPercentile((double) 2.5f);
        double double41 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test14731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14731");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        double double10 = resizableDoubleArray0.addElementRolling((double) 102);
        int int11 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements(101);
        resizableDoubleArray0.clear();
        double[] doubleArray15 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    }

    @Test
    public void test14732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14732");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        descriptiveStatistics2.setKurtosisImpl(univariateStatistic5);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics2.setMaxImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getMaxImpl();
        double double17 = descriptiveStatistics1.getStandardDeviation();
        long long18 = descriptiveStatistics1.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test14733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14733");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 0L);
        int int10 = resizableDoubleArray0.getNumElements();
        double double12 = resizableDoubleArray0.addElementRolling((double) 35);
        double double14 = resizableDoubleArray0.addElementRolling(Double.NaN);
        resizableDoubleArray0.addElement((double) 32);
        double[] doubleArray17 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 35.0, NaN, 32.0]");
    }

    @Test
    public void test14734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14734");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double[] doubleArray5 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getMaxImpl();
        double double7 = descriptiveStatistics1.getKurtosis();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test14735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14735");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(101, 35.5f);
        resizableDoubleArray2.setNumElements((int) ' ');
    }

    @Test
    public void test14736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14736");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        int int6 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setNumElements((int) '4');
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        int int11 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setElement(12, 0.0d);
        resizableDoubleArray0.setElement(13, 2704.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test14737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14737");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) (byte) 0, (double) (-1));
        int int10 = resizableDoubleArray0.getExpansionMode();
        float float11 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        float float13 = resizableDoubleArray0.getExpansionFactor();
        int int14 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.0f + "'", float11 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0]");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.0f + "'", float13 == 2.0f);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14738");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getMin();
        double double7 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double11 = descriptiveStatistics10.getStandardDeviation();
        double double12 = descriptiveStatistics10.getVariance();
        double double13 = descriptiveStatistics10.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str15 = descriptiveStatistics14.toString();
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        double[] doubleArray20 = descriptiveStatistics17.getValues();
        double double21 = descriptiveStatistics17.getVariance();
        double double22 = descriptiveStatistics17.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic23);
        descriptiveStatistics10.setVarianceImpl(univariateStatistic23);
        double double26 = descriptiveStatistics0.apply(univariateStatistic23);
        double double27 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getSkewnessImpl();
        double double29 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str15, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test14739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14739");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        double double13 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getSkewnessImpl();
        double double15 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getKurtosisImpl();
        descriptiveStatistics16.setGeometricMeanImpl(univariateStatistic33);
        double double35 = descriptiveStatistics16.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double37 = descriptiveStatistics36.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getKurtosisImpl();
        long long41 = descriptiveStatistics38.getN();
        descriptiveStatistics38.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics49.getKurtosisImpl();
        descriptiveStatistics44.setMaxImpl(univariateStatistic54);
        double double56 = descriptiveStatistics44.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics44.getMinImpl();
        descriptiveStatistics38.setMinImpl(univariateStatistic57);
        descriptiveStatistics36.setMeanImpl(univariateStatistic57);
        descriptiveStatistics16.setSumImpl(univariateStatistic57);
        descriptiveStatistics0.setMeanImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray63 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int64 = resizableDoubleArray63.getExpansionMode();
        int int65 = resizableDoubleArray63.getNumElements();
        double[] doubleArray66 = resizableDoubleArray63.getElements();
        double[] doubleArray67 = resizableDoubleArray63.getElements();
        resizableDoubleArray63.setNumElements((int) (byte) 100);
        resizableDoubleArray63.discardFrontElements((int) (byte) 100);
        double[] doubleArray72 = resizableDoubleArray63.getElements();
        double double73 = univariateStatistic62.evaluate(doubleArray72);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test14740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14740");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 100, 11.5f, (float) 33);
    }

    @Test
    public void test14741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14741");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (short) 0, (double) (byte) 100);
        resizableDoubleArray0.addElement((double) 10.0f);
        double double8 = resizableDoubleArray0.getElement(0);
        resizableDoubleArray0.setNumElements((int) '#');
        double double12 = resizableDoubleArray0.getElement(2);
        resizableDoubleArray0.setElement(55, 98.03960396039604d);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test14742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14742");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        double[] doubleArray4 = resizableDoubleArray1.getValues();
        int int5 = resizableDoubleArray1.getNumElements();
        int int6 = resizableDoubleArray1.getNumElements();
        resizableDoubleArray1.setContractionCriteria((float) 100);
        double[] doubleArray9 = resizableDoubleArray1.getValues();
        double double11 = resizableDoubleArray1.addElementRolling(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test14743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14743");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        double double11 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getKurtosisImpl();
        long long23 = descriptiveStatistics20.getN();
        descriptiveStatistics20.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics20.getSkewnessImpl();
        descriptiveStatistics13.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics13.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics13.getMinImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = descriptiveStatistics0.apply(univariateStatistic32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
    }

    @Test
    public void test14744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14744");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double[] doubleArray5 = descriptiveStatistics0.getValues();
        double double6 = descriptiveStatistics0.getSumsq();
        java.lang.String str7 = descriptiveStatistics0.toString();
        double double8 = descriptiveStatistics0.getVariance();
        java.lang.Class<?> wildcardClass9 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass9);
        double double11 = descriptiveStatistics10.getMean();
        double double13 = descriptiveStatistics10.getPercentile((double) 2);
        long long14 = descriptiveStatistics10.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test14745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14745");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
    }

    @Test
    public void test14746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14746");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        int int7 = resizableDoubleArray0.getNumElements();
        int int8 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setElement(10, (double) 101);
        double[] doubleArray12 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 101.0]");
    }

    @Test
    public void test14747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14747");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        resizableDoubleArray0.setElement(91, 5.4999999999999964d);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test14748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14748");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        int int2 = resizableDoubleArray1.getNumElements();
        double[] doubleArray3 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.setContractionCriteria((float) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
    }

    @Test
    public void test14749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14749");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        double double9 = resizableDoubleArray0.addElementRolling((double) 10);
        resizableDoubleArray0.addElement((double) ' ');
        double double13 = resizableDoubleArray0.getElement(0);
        int int14 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 1L);
        resizableDoubleArray0.addElement((double) 54);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 103 + "'", int14 == 103);
    }

    @Test
    public void test14750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14750");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getGeometricMean();
        long long6 = descriptiveStatistics0.getN();
        double double7 = descriptiveStatistics0.getVariance();
        double double8 = descriptiveStatistics0.getMax();
        long long9 = descriptiveStatistics0.getN();
        double double10 = descriptiveStatistics0.getGeometricMean();
        double double12 = descriptiveStatistics0.getPercentile((double) 36);
        double double13 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics14.getSumsqImpl();
        double double22 = descriptiveStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics14.getSumImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test14751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14751");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        double double7 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double[] doubleArray12 = descriptiveStatistics8.getValues();
        double double13 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double16 = descriptiveStatistics15.getStandardDeviation();
        long long17 = descriptiveStatistics15.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics8.setSumImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray24 = descriptiveStatistics21.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics21.getVarianceImpl();
        double double26 = descriptiveStatistics21.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getGeometricMeanImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic27);
        descriptiveStatistics1.setSumImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str31 = descriptiveStatistics30.toString();
        double double32 = descriptiveStatistics30.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        double double39 = descriptiveStatistics30.apply(univariateStatistic38);
        double double40 = descriptiveStatistics30.getGeometricMean();
        double double41 = descriptiveStatistics30.getStandardDeviation();
        descriptiveStatistics30.addValue((double) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics44.getKurtosisImpl();
        double double50 = descriptiveStatistics44.getStandardDeviation();
        double double51 = descriptiveStatistics44.getSum();
        int int52 = descriptiveStatistics44.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics44.getMaxImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic53);
        double double55 = descriptiveStatistics1.apply(univariateStatistic53);
        int int56 = descriptiveStatistics1.getWindowSize();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str31, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test14752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14752");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        double double5 = descriptiveStatistics1.getMean();
        double double6 = descriptiveStatistics1.getSum();
        double double7 = descriptiveStatistics1.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test14753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14753");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        double double6 = descriptiveStatistics0.getMean();
        double double7 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double10 = descriptiveStatistics9.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        double double13 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic17);
        double double20 = descriptiveStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getPercentileImpl();
        double double28 = descriptiveStatistics21.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        double[] doubleArray32 = descriptiveStatistics29.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getVarianceImpl();
        double double34 = descriptiveStatistics21.apply(univariateStatistic33);
        double double35 = descriptiveStatistics11.apply(univariateStatistic33);
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic33);
        double double37 = descriptiveStatistics9.getGeometricMean();
        double double38 = descriptiveStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics9.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getKurtosisImpl();
        long long45 = descriptiveStatistics42.getN();
        double[] doubleArray46 = descriptiveStatistics42.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getMeanImpl();
        descriptiveStatistics41.setSumsqImpl(univariateStatistic48);
        descriptiveStatistics9.setVarianceImpl(univariateStatistic48);
        descriptiveStatistics0.setMinImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics0.getSkewnessImpl();
        double double53 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test14754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14754");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics9.getKurtosisImpl();
        long long12 = descriptiveStatistics9.getN();
        double[] doubleArray13 = descriptiveStatistics9.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics9.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getMinImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        descriptiveStatistics24.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getSkewnessImpl();
        descriptiveStatistics17.setSumsqImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics17.getVarianceImpl();
        descriptiveStatistics7.setVarianceImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.apply(univariateStatistic32);
        double double35 = descriptiveStatistics0.getStandardDeviation();
        double[] doubleArray36 = descriptiveStatistics0.getValues();
        long long37 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test14755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14755");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSkewnessImpl();
        double double13 = descriptiveStatistics0.getMean();
        long long14 = descriptiveStatistics0.getN();
        double double15 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getGeometricMeanImpl();
        double double17 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test14756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14756");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', (float) '4', (float) 36, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14757");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        int int7 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.discardFrontElements(0);
        resizableDoubleArray0.addElement(32.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test14758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14758");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        descriptiveStatistics1.clear();
        long long22 = descriptiveStatistics1.getN();
        double double23 = descriptiveStatistics1.getSumsq();
        double double24 = descriptiveStatistics1.getStandardDeviation();
        long long25 = descriptiveStatistics1.getN();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test14759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14759");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double2 = descriptiveStatistics1.getMean();
        double double3 = descriptiveStatistics1.getSumsq();
        double double4 = descriptiveStatistics1.getStandardDeviation();
        descriptiveStatistics1.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getGeometricMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic6);
    }

    @Test
    public void test14760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14760");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getSum();
        long long21 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getMinImpl();
        long long23 = descriptiveStatistics0.getN();
        int int24 = descriptiveStatistics0.getWindowSize();
        double double25 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test14761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14761");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double double25 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str27 = descriptiveStatistics26.toString();
        double double28 = descriptiveStatistics26.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        double double35 = descriptiveStatistics26.apply(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str37 = descriptiveStatistics36.toString();
        descriptiveStatistics36.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics36.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics26.setMeanImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getKurtosisImpl();
        descriptiveStatistics42.setMaxImpl(univariateStatistic52);
        double double54 = descriptiveStatistics42.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics42.getMinImpl();
        descriptiveStatistics42.setWindowSize((int) (short) 100);
        java.lang.String str58 = descriptiveStatistics42.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics42.getVarianceImpl();
        descriptiveStatistics26.setGeometricMeanImpl(univariateStatistic59);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic59);
        descriptiveStatistics0.clear();
        descriptiveStatistics0.addValue((double) (-1L));
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str66 = descriptiveStatistics65.toString();
        descriptiveStatistics65.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str69 = descriptiveStatistics68.toString();
        double double70 = descriptiveStatistics68.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        descriptiveStatistics71.setKurtosisImpl(univariateStatistic74);
        descriptiveStatistics68.setSkewnessImpl(univariateStatistic74);
        double double77 = descriptiveStatistics68.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double80 = descriptiveStatistics79.getStandardDeviation();
        long long81 = descriptiveStatistics79.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics79.getMinImpl();
        descriptiveStatistics68.setVarianceImpl(univariateStatistic82);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics68.getMeanImpl();
        descriptiveStatistics65.setMeanImpl(univariateStatistic84);
        int int86 = descriptiveStatistics65.getWindowSize();
        int int87 = descriptiveStatistics65.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics65.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics65.getGeometricMeanImpl();
        double double90 = descriptiveStatistics65.getGeometricMean();
        double double91 = descriptiveStatistics65.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic92 = descriptiveStatistics65.getSumImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic92);
        double double94 = descriptiveStatistics0.getSum();
        double[] doubleArray95 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str58, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str66, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str69, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertNotNull(univariateStatistic89);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(univariateStatistic92);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1.0d) + "'", double94 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-1.0]");
    }

    @Test
    public void test14762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14762");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        java.lang.String str16 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        double[] doubleArray23 = descriptiveStatistics18.getValues();
        double double24 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics18.getSumsqImpl();
        double double26 = descriptiveStatistics0.apply(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        long long37 = descriptiveStatistics34.getN();
        double[] doubleArray38 = descriptiveStatistics34.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics34.getMinImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str43 = descriptiveStatistics42.toString();
        double double44 = descriptiveStatistics42.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        descriptiveStatistics42.setSkewnessImpl(univariateStatistic48);
        double double51 = descriptiveStatistics42.getStandardDeviation();
        double[] doubleArray52 = descriptiveStatistics42.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics42.getMeanImpl();
        descriptiveStatistics27.setSumsqImpl(univariateStatistic53);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray56 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray57 = resizableDoubleArray56.getValues();
        int int58 = resizableDoubleArray56.getNumElements();
        double[] doubleArray59 = resizableDoubleArray56.getValues();
        double double62 = univariateStatistic53.evaluate(doubleArray59, 10, (int) (byte) 0);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.addValue((double) 11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic67);
    }

    @Test
    public void test14763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14763");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getMean();
        java.lang.String str21 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test14764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14764");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic22);
        double double24 = descriptiveStatistics0.getVariance();
        double double25 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.setWindowSize(3);
        java.lang.String str28 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str30 = descriptiveStatistics29.toString();
        descriptiveStatistics29.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics29.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        long long37 = descriptiveStatistics34.getN();
        double double38 = descriptiveStatistics34.getMax();
        double double39 = descriptiveStatistics34.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double41 = descriptiveStatistics40.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getMinImpl();
        descriptiveStatistics34.setSumImpl(univariateStatistic42);
        descriptiveStatistics29.setSumImpl(univariateStatistic42);
        double double45 = descriptiveStatistics29.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics29.getVarianceImpl();
        descriptiveStatistics29.addValue(11225.0d);
        double double49 = descriptiveStatistics29.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics29.getMaxImpl();
        double double51 = descriptiveStatistics29.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double54 = descriptiveStatistics53.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getGeometricMeanImpl();
        double double56 = descriptiveStatistics53.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics57.getKurtosisImpl();
        long long60 = descriptiveStatistics57.getN();
        double[] doubleArray61 = descriptiveStatistics57.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics57.getSumImpl();
        descriptiveStatistics53.setSkewnessImpl(univariateStatistic62);
        descriptiveStatistics29.setMaxImpl(univariateStatistic62);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str28, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str30, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 11224.999999999996d + "'", double49 == 11224.999999999996d);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic66);
    }

    @Test
    public void test14765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14765");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(2);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str3 = descriptiveStatistics2.toString();
        descriptiveStatistics2.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics2.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        double double17 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics8.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics8.getMeanImpl();
        descriptiveStatistics2.setGeometricMeanImpl(univariateStatistic19);
        double double21 = descriptiveStatistics1.apply(univariateStatistic19);
        double double22 = descriptiveStatistics1.getStandardDeviation();
        double double23 = descriptiveStatistics1.getSkewness();
        double double24 = descriptiveStatistics1.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str3, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test14766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14766");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        double[] doubleArray16 = descriptiveStatistics13.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics13.getVarianceImpl();
        double double18 = descriptiveStatistics13.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getGeometricMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double23 = descriptiveStatistics22.getStandardDeviation();
        double[] doubleArray24 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getKurtosisImpl();
        long long30 = descriptiveStatistics27.getN();
        double[] doubleArray31 = descriptiveStatistics27.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getMinImpl();
        double double34 = descriptiveStatistics25.apply(univariateStatistic33);
        descriptiveStatistics22.setSumsqImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        double double38 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics22.setSkewnessImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str42 = descriptiveStatistics41.toString();
        double double43 = descriptiveStatistics41.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        descriptiveStatistics41.setSkewnessImpl(univariateStatistic47);
        double double50 = descriptiveStatistics41.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double53 = descriptiveStatistics52.getStandardDeviation();
        long long54 = descriptiveStatistics52.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics52.getMinImpl();
        descriptiveStatistics41.setVarianceImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics41.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        descriptiveStatistics58.setKurtosisImpl(univariateStatistic61);
        descriptiveStatistics58.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getKurtosisImpl();
        long long67 = descriptiveStatistics64.getN();
        double double68 = descriptiveStatistics64.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics69.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics69.setKurtosisImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        descriptiveStatistics74.setKurtosisImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics74.getKurtosisImpl();
        descriptiveStatistics69.setMaxImpl(univariateStatistic79);
        descriptiveStatistics64.setSumImpl(univariateStatistic79);
        descriptiveStatistics58.setSumsqImpl(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics83 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str84 = descriptiveStatistics83.toString();
        descriptiveStatistics83.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics83.getGeometricMeanImpl();
        double double87 = descriptiveStatistics83.getMax();
        double double88 = descriptiveStatistics83.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics83.getVarianceImpl();
        descriptiveStatistics58.setMeanImpl(univariateStatistic89);
        descriptiveStatistics41.setSumImpl(univariateStatistic89);
        descriptiveStatistics22.setSumsqImpl(univariateStatistic89);
        double double93 = descriptiveStatistics0.apply(univariateStatistic89);
        double double94 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str42, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str84, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(univariateStatistic89);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test14767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14767");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.discardFrontElements(1);
        resizableDoubleArray0.setElement((int) (short) 0, (double) 100);
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setExpansionMode((int) (byte) 1);
        resizableDoubleArray0.setNumElements(100);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14768");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getGeometricMeanImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        descriptiveStatistics9.addValue((double) (short) -1);
        double double13 = descriptiveStatistics9.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics9.getSkewnessImpl();
        double double15 = descriptiveStatistics9.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        descriptiveStatistics23.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getSkewnessImpl();
        descriptiveStatistics16.setSumsqImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics16.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double[] doubleArray37 = descriptiveStatistics33.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getSumImpl();
        double double39 = descriptiveStatistics33.getStandardDeviation();
        double double40 = descriptiveStatistics33.getVariance();
        descriptiveStatistics33.addValue(100.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics16.setSumsqImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str46 = descriptiveStatistics45.toString();
        descriptiveStatistics45.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics45.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics45.getSumsqImpl();
        double double50 = descriptiveStatistics16.apply(univariateStatistic49);
        descriptiveStatistics9.setMeanImpl(univariateStatistic49);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic49);
        double double53 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str46, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test14769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14769");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic13);
        double double15 = descriptiveStatistics0.getStandardDeviation();
        double double16 = descriptiveStatistics0.getSum();
        double double17 = descriptiveStatistics0.getMean();
        int int18 = descriptiveStatistics0.getWindowSize();
        double double19 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test14770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14770");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double7 = descriptiveStatistics6.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray13 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int14 = resizableDoubleArray13.start();
        resizableDoubleArray13.addElement((double) 10);
        resizableDoubleArray13.setElement(1, (double) (short) 0);
        resizableDoubleArray13.contract();
        double double22 = resizableDoubleArray13.addElementRolling(1.0d);
        int int23 = resizableDoubleArray13.start();
        double[] doubleArray24 = resizableDoubleArray13.getElements();
        double double25 = univariateStatistic12.evaluate(doubleArray24);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5d + "'", double25 == 0.5d);
    }

    @Test
    public void test14771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14771");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (short) 1);
        int int7 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setContractionCriteria(2.0f);
        double double12 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.setNumElements(36);
        resizableDoubleArray0.addElement((double) 35);
        resizableDoubleArray0.addElement(1.2600062499999993E8d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test14772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14772");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double9 = descriptiveStatistics8.getStandardDeviation();
        long long10 = descriptiveStatistics8.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getSkewnessImpl();
        java.lang.String str12 = descriptiveStatistics8.toString();
        double double13 = descriptiveStatistics8.getVariance();
        descriptiveStatistics8.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getSumsqImpl();
        double[] doubleArray19 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic20);
    }

    @Test
    public void test14773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14773");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray11 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics8.getVarianceImpl();
        double double13 = descriptiveStatistics0.apply(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getMaxImpl();
        double double16 = descriptiveStatistics0.getPercentile((double) 2);
        double double17 = descriptiveStatistics0.getSumsq();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = descriptiveStatistics0.getElement(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 52 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test14774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14774");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getVarianceImpl();
        double double12 = descriptiveStatistics0.getMax();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getPercentileImpl();
        double double16 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test14775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14775");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        double double17 = descriptiveStatistics0.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        double[] doubleArray22 = descriptiveStatistics19.getValues();
        double double23 = descriptiveStatistics19.getMean();
        double double24 = descriptiveStatistics19.getStandardDeviation();
        double double25 = descriptiveStatistics19.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        descriptiveStatistics26.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        descriptiveStatistics32.setMaxImpl(univariateStatistic42);
        double double44 = descriptiveStatistics32.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics32.getMinImpl();
        descriptiveStatistics26.setMinImpl(univariateStatistic45);
        double[] doubleArray47 = descriptiveStatistics26.getValues();
        double double48 = descriptiveStatistics26.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics49.getKurtosisImpl();
        long long52 = descriptiveStatistics49.getN();
        descriptiveStatistics49.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics49.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics49.getPercentileImpl();
        double double57 = descriptiveStatistics49.getMean();
        int int58 = descriptiveStatistics49.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics49.getGeometricMeanImpl();
        descriptiveStatistics26.setGeometricMeanImpl(univariateStatistic59);
        descriptiveStatistics19.setSumImpl(univariateStatistic59);
        double double62 = descriptiveStatistics0.apply(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test14776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14776");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double[] doubleArray12 = descriptiveStatistics8.getValues();
        descriptiveStatistics8.addValue(1.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics8.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        descriptiveStatistics16.addValue((double) 0);
        int int22 = descriptiveStatistics16.getWindowSize();
        double double23 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics16.getMeanImpl();
        double double25 = descriptiveStatistics16.getKurtosis();
        double double27 = descriptiveStatistics16.getPercentile((double) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        double double30 = descriptiveStatistics28.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getSkewnessImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic31);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic31);
        descriptiveStatistics0.setMinImpl(univariateStatistic31);
        double double35 = descriptiveStatistics0.getMean();
        double double36 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getKurtosisImpl();
        long long40 = descriptiveStatistics37.getN();
        double[] doubleArray41 = descriptiveStatistics37.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getSumImpl();
        double double43 = descriptiveStatistics37.getVariance();
        double double44 = descriptiveStatistics37.getMax();
        double double45 = descriptiveStatistics37.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics37.getSkewnessImpl();
        long long47 = descriptiveStatistics37.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double50 = descriptiveStatistics49.getStandardDeviation();
        long long51 = descriptiveStatistics49.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics49.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double54 = descriptiveStatistics53.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double57 = descriptiveStatistics56.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics56.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double61 = descriptiveStatistics60.getStandardDeviation();
        long long62 = descriptiveStatistics60.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics60.getMinImpl();
        descriptiveStatistics56.setMaxImpl(univariateStatistic63);
        descriptiveStatistics53.setMinImpl(univariateStatistic63);
        descriptiveStatistics49.setSumImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics49.getMaxImpl();
        double double68 = descriptiveStatistics49.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics49.getGeometricMeanImpl();
        descriptiveStatistics37.setVarianceImpl(univariateStatistic69);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray71 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int72 = resizableDoubleArray71.start();
        resizableDoubleArray71.addElement((double) (byte) 0);
        resizableDoubleArray71.contract();
        resizableDoubleArray71.clear();
        int int77 = resizableDoubleArray71.getExpansionMode();
        resizableDoubleArray71.clear();
        resizableDoubleArray71.addElement(1.0d);
        double[] doubleArray81 = resizableDoubleArray71.getValues();
        resizableDoubleArray71.clear();
        resizableDoubleArray71.setElement((int) (short) 100, 52.0d);
        double[] doubleArray86 = resizableDoubleArray71.getValues();
        double double89 = univariateStatistic69.evaluate(doubleArray86, (int) (short) 10, 53);
        descriptiveStatistics0.setSumImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic91);
    }

    @Test
    public void test14777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14777");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        resizableDoubleArray1.addElement(10.0d);
        double[] doubleArray6 = resizableDoubleArray1.getElements();
        int int7 = resizableDoubleArray1.getExpansionMode();
        resizableDoubleArray1.setContractionCriteria((float) 54);
        float float10 = resizableDoubleArray1.getContractionCriteria();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 54.0f + "'", float10 == 54.0f);
    }

    @Test
    public void test14778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14778");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (short) 0, (double) (byte) 100);
        int int5 = resizableDoubleArray0.getExpansionMode();
        float float6 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.addElement((double) 10.5f);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = resizableDoubleArray0.getElement(54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 54 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
    }

    @Test
    public void test14779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14779");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getMinImpl();
        double[] doubleArray6 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSumsqImpl();
        double double14 = descriptiveStatistics7.getSkewness();
        double double15 = descriptiveStatistics7.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics17.setWindowSize((int) ' ');
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        descriptiveStatistics20.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics20.getSkewnessImpl();
        descriptiveStatistics17.setSumsqImpl(univariateStatistic26);
        descriptiveStatistics7.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics7.getPercentileImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic29);
    }

    @Test
    public void test14780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14780");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getVarianceImpl();
        double double14 = descriptiveStatistics0.getMean();
        double double15 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics16.setWindowSize((int) (byte) -1);
        long long19 = descriptiveStatistics16.getN();
        double double20 = descriptiveStatistics16.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str22 = descriptiveStatistics21.toString();
        double double23 = descriptiveStatistics21.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic27);
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic27);
        double double31 = descriptiveStatistics16.getGeometricMean();
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics16.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics16.getSumImpl();
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        descriptiveStatistics36.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics36.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getKurtosisImpl();
        long long48 = descriptiveStatistics45.getN();
        double[] doubleArray49 = descriptiveStatistics45.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics45.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics45.getMinImpl();
        double double52 = descriptiveStatistics43.apply(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        descriptiveStatistics53.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics53.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getKurtosisImpl();
        long long63 = descriptiveStatistics60.getN();
        descriptiveStatistics60.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics60.getSkewnessImpl();
        descriptiveStatistics53.setSumsqImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics53.getVarianceImpl();
        descriptiveStatistics43.setVarianceImpl(univariateStatistic68);
        double double70 = descriptiveStatistics36.apply(univariateStatistic68);
        double double71 = descriptiveStatistics36.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics36.getVarianceImpl();
        descriptiveStatistics16.setSumImpl(univariateStatistic72);
        double double74 = descriptiveStatistics0.apply(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test14781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14781");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getSkewnessImpl();
        long long11 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getKurtosisImpl();
        double double15 = descriptiveStatistics12.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double17 = descriptiveStatistics16.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getSumImpl();
        descriptiveStatistics12.setMinImpl(univariateStatistic18);
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
    }

    @Test
    public void test14782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14782");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        resizableDoubleArray1.setExpansionMode(0);
        double[] doubleArray5 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.setNumElements(97);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
    }

    @Test
    public void test14783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14783");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        java.lang.String str17 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        double[] doubleArray28 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double29 = univariateStatistic24.evaluate(doubleArray28);
        descriptiveStatistics18.setMaxImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double double35 = descriptiveStatistics31.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        descriptiveStatistics31.setSumImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics57.getKurtosisImpl();
        descriptiveStatistics52.setMaxImpl(univariateStatistic62);
        double double64 = descriptiveStatistics52.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics52.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics52.getVarianceImpl();
        descriptiveStatistics50.setMinImpl(univariateStatistic66);
        descriptiveStatistics31.setMeanImpl(univariateStatistic66);
        descriptiveStatistics18.setSumImpl(univariateStatistic66);
        double double70 = descriptiveStatistics0.apply(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics0.getMinImpl();
        double double72 = descriptiveStatistics0.getMax();
        java.lang.String str73 = descriptiveStatistics0.toString();
        long long74 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.0d + "'", double29 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str73, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test14784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14784");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double9 = descriptiveStatistics8.getStandardDeviation();
        long long10 = descriptiveStatistics8.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getSkewnessImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic11);
        double double13 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test14785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14785");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double7 = descriptiveStatistics6.getStandardDeviation();
        long long8 = descriptiveStatistics6.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics6.getSkewnessImpl();
        java.lang.String str10 = descriptiveStatistics6.toString();
        java.lang.String str11 = descriptiveStatistics6.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics6.getSumImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic12);
        double double14 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test14786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14786");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double[] doubleArray5 = descriptiveStatistics0.getValues();
        descriptiveStatistics0.setWindowSize((int) '#');
        double double9 = descriptiveStatistics0.getPercentile((double) 100L);
        double[] doubleArray10 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test14787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14787");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(2);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        double double4 = descriptiveStatistics2.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics2.getSkewnessImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic5);
        double double7 = descriptiveStatistics1.getMin();
        double double8 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        double double17 = descriptiveStatistics10.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = null;
        descriptiveStatistics10.setSumImpl(univariateStatistic18);
        descriptiveStatistics10.setWindowSize((int) (byte) 1);
        java.lang.String str22 = descriptiveStatistics10.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double[] doubleArray27 = descriptiveStatistics23.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getSumImpl();
        descriptiveStatistics23.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = null;
        descriptiveStatistics23.setSkewnessImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics23.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str35 = descriptiveStatistics34.toString();
        double double36 = descriptiveStatistics34.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        double double43 = descriptiveStatistics34.apply(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getKurtosisImpl();
        long long47 = descriptiveStatistics44.getN();
        descriptiveStatistics44.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        descriptiveStatistics51.setKurtosisImpl(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics51.getKurtosisImpl();
        double[] doubleArray60 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double61 = univariateStatistic56.evaluate(doubleArray60);
        descriptiveStatistics44.setSkewnessImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics44.getGeometricMeanImpl();
        descriptiveStatistics34.setMinImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics34.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics34.getSkewnessImpl();
        descriptiveStatistics23.setMeanImpl(univariateStatistic66);
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic66);
        descriptiveStatistics9.setSumsqImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics9.getGeometricMeanImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str35, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2.0d + "'", double61 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic70);
    }

    @Test
    public void test14788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14788");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double[] doubleArray9 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getSumImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double14 = descriptiveStatistics13.getStandardDeviation();
        long long15 = descriptiveStatistics13.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics13.getSkewnessImpl();
        java.lang.String str17 = descriptiveStatistics13.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics13.setMeanImpl(univariateStatistic20);
        double double22 = descriptiveStatistics13.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str24 = descriptiveStatistics23.toString();
        descriptiveStatistics23.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics13.setGeometricMeanImpl(univariateStatistic27);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics1.getSumsqImpl();
        double double31 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        int int33 = descriptiveStatistics32.getWindowSize();
        double double34 = descriptiveStatistics32.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str36 = descriptiveStatistics35.toString();
        double double37 = descriptiveStatistics35.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics38.getKurtosisImpl();
        double double44 = descriptiveStatistics35.apply(univariateStatistic43);
        double double45 = descriptiveStatistics35.getSumsq();
        double double46 = descriptiveStatistics35.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getKurtosisImpl();
        descriptiveStatistics35.setSumsqImpl(univariateStatistic52);
        descriptiveStatistics32.setVarianceImpl(univariateStatistic52);
        double double55 = descriptiveStatistics32.getMax();
        double double56 = descriptiveStatistics32.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics32.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str59 = descriptiveStatistics58.toString();
        double double60 = descriptiveStatistics58.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        descriptiveStatistics61.setKurtosisImpl(univariateStatistic64);
        descriptiveStatistics58.setSkewnessImpl(univariateStatistic64);
        double double67 = descriptiveStatistics58.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double70 = descriptiveStatistics69.getStandardDeviation();
        long long71 = descriptiveStatistics69.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics69.getMinImpl();
        descriptiveStatistics58.setVarianceImpl(univariateStatistic72);
        descriptiveStatistics32.setMaxImpl(univariateStatistic72);
        descriptiveStatistics1.setMeanImpl(univariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str24, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str36, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str59, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic72);
    }

    @Test
    public void test14789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14789");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(31, (float) 42, (float) 12, 68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14790");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        java.lang.Class<?> wildcardClass15 = descriptiveStatistics1.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics18.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics18.getGeometricMeanImpl();
        java.lang.String str25 = descriptiveStatistics18.toString();
        java.lang.Class<?> wildcardClass26 = descriptiveStatistics18.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        long long31 = descriptiveStatistics28.getN();
        descriptiveStatistics28.addValue((double) 0);
        int int34 = descriptiveStatistics28.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics28.getMinImpl();
        double double36 = descriptiveStatistics28.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str38 = descriptiveStatistics37.toString();
        double double39 = descriptiveStatistics37.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        descriptiveStatistics37.setSkewnessImpl(univariateStatistic43);
        double double46 = descriptiveStatistics37.getStandardDeviation();
        double double47 = descriptiveStatistics37.getMean();
        double double48 = descriptiveStatistics37.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics37.getVarianceImpl();
        descriptiveStatistics28.setGeometricMeanImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics28.getMeanImpl();
        descriptiveStatistics27.setSkewnessImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        descriptiveStatistics53.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics53.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getKurtosisImpl();
        long long63 = descriptiveStatistics60.getN();
        descriptiveStatistics60.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics60.getSkewnessImpl();
        descriptiveStatistics53.setSumsqImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics53.getVarianceImpl();
        double double69 = descriptiveStatistics53.getMean();
        double[] doubleArray70 = descriptiveStatistics53.getSortedValues();
        double double71 = univariateStatistic51.evaluate(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics17.setPercentileImpl(univariateStatistic51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str38, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test14791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14791");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(10, (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14792");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray11 = descriptiveStatistics8.getValues();
        double double12 = descriptiveStatistics8.getVariance();
        double double13 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic14);
        descriptiveStatistics5.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double19 = descriptiveStatistics18.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getSkewnessImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic20);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        descriptiveStatistics23.addValue((double) 0);
        int int29 = descriptiveStatistics23.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics23.getGeometricMeanImpl();
        descriptiveStatistics23.setWindowSize((int) (byte) 1);
        long long33 = descriptiveStatistics23.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        descriptiveStatistics34.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        double double44 = descriptiveStatistics40.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics50.getKurtosisImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic55);
        descriptiveStatistics40.setSumImpl(univariateStatistic55);
        descriptiveStatistics34.setSumsqImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics34.getPercentileImpl();
        double double60 = descriptiveStatistics23.apply(univariateStatistic59);
        descriptiveStatistics1.setPercentileImpl(univariateStatistic59);
        descriptiveStatistics1.setWindowSize(102);
        long long64 = descriptiveStatistics1.getN();
        double double65 = descriptiveStatistics1.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test14793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14793");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        float float10 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setContractionCriteria((float) 100L);
        float float13 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements(90);
        double[] doubleArray17 = resizableDoubleArray0.getValues();
        float float18 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 100.0f + "'", float13 == 100.0f);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 2.0f + "'", float18 == 2.0f);
    }

    @Test
    public void test14794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14794");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double[] doubleArray5 = descriptiveStatistics0.getValues();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        double double9 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics7.setSkewnessImpl(univariateStatistic13);
        double double16 = descriptiveStatistics7.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double19 = descriptiveStatistics18.getStandardDeviation();
        long long20 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getMinImpl();
        descriptiveStatistics7.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics7.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        descriptiveStatistics24.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        double double34 = descriptiveStatistics30.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getKurtosisImpl();
        descriptiveStatistics35.setMaxImpl(univariateStatistic45);
        descriptiveStatistics30.setSumImpl(univariateStatistic45);
        descriptiveStatistics24.setSumsqImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str50 = descriptiveStatistics49.toString();
        descriptiveStatistics49.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics49.getGeometricMeanImpl();
        double double53 = descriptiveStatistics49.getMax();
        double double54 = descriptiveStatistics49.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics49.getVarianceImpl();
        descriptiveStatistics24.setMeanImpl(univariateStatistic55);
        descriptiveStatistics7.setSumImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str59 = descriptiveStatistics58.toString();
        descriptiveStatistics58.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics61.getKurtosisImpl();
        double[] doubleArray64 = descriptiveStatistics61.getValues();
        double double65 = descriptiveStatistics61.getVariance();
        double double66 = descriptiveStatistics61.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics61.getKurtosisImpl();
        descriptiveStatistics58.setMaxImpl(univariateStatistic67);
        descriptiveStatistics58.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double72 = descriptiveStatistics71.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics71.getSkewnessImpl();
        descriptiveStatistics58.setMaxImpl(univariateStatistic73);
        descriptiveStatistics7.setSkewnessImpl(univariateStatistic73);
        descriptiveStatistics0.setSumImpl(univariateStatistic73);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics0.getMinImpl();
        double double78 = descriptiveStatistics0.getGeometricMean();
        java.lang.String str79 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str59, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str79, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test14795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14795");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        double double17 = descriptiveStatistics8.getStandardDeviation();
        descriptiveStatistics8.clear();
        double double19 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic20);
        java.lang.String str22 = descriptiveStatistics0.toString();
        double double23 = descriptiveStatistics0.getMean();
        double double24 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test14796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14796");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getSkewnessImpl();
        java.lang.String str9 = descriptiveStatistics5.toString();
        double double10 = descriptiveStatistics5.getVariance();
        descriptiveStatistics5.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic19);
        long long21 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSumImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test14797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14797");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMean();
        double[] doubleArray7 = descriptiveStatistics1.getSortedValues();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test14798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14798");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        java.lang.String str6 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test14799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14799");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        int int7 = resizableDoubleArray0.start();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        int int9 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(52, 4.5d);
        double double14 = resizableDoubleArray0.addElementRolling((double) 13);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test14800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14800");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(34, 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14801");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        double double7 = resizableDoubleArray0.addElementRolling((double) 11);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.contract();
        double double11 = resizableDoubleArray0.addElementRolling((double) 53);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test14802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14802");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getVarianceImpl();
        double double18 = descriptiveStatistics0.getMin();
        double double19 = descriptiveStatistics0.getMean();
        double double20 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test14803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14803");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.addValue((double) (short) 100);
        int int10 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic11);
    }

    @Test
    public void test14804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14804");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(10, (float) '#');
        double double4 = resizableDoubleArray2.addElementRolling(52.0d);
        resizableDoubleArray2.setElement((int) (short) 1, (double) '4');
        resizableDoubleArray2.clear();
        resizableDoubleArray2.setElement(31, (double) 101);
        int int12 = resizableDoubleArray2.getNumElements();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    }

    @Test
    public void test14805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14805");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 1, (float) 11);
        resizableDoubleArray2.addElement((double) (-1.0f));
        int int5 = resizableDoubleArray2.start();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14806");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        int int7 = resizableDoubleArray0.start();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        int int9 = resizableDoubleArray0.getExpansionMode();
        double double11 = resizableDoubleArray0.addElementRolling((double) 1L);
        resizableDoubleArray0.addElement((double) 100.0f);
        int int14 = resizableDoubleArray0.getNumElements();
        double[] doubleArray15 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 100.0]");
    }

    @Test
    public void test14807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14807");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        double[] doubleArray25 = descriptiveStatistics21.getValues();
        double double26 = descriptiveStatistics21.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double29 = descriptiveStatistics28.getStandardDeviation();
        long long30 = descriptiveStatistics28.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getKurtosisImpl();
        descriptiveStatistics21.setSumImpl(univariateStatistic31);
        descriptiveStatistics1.setSumImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(10);
        double double37 = descriptiveStatistics36.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics36.getSkewnessImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic39);
        double double41 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test14808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14808");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(1, (float) 35, 98.0f);
    }

    @Test
    public void test14809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14809");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double6 = descriptiveStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics5.setMinImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getMaxImpl();
        double double20 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double23 = descriptiveStatistics22.getStandardDeviation();
        long long24 = descriptiveStatistics22.getN();
        double double25 = descriptiveStatistics22.getMin();
        double double26 = descriptiveStatistics22.getMax();
        double double27 = descriptiveStatistics22.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str29 = descriptiveStatistics28.toString();
        descriptiveStatistics28.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double double37 = descriptiveStatistics33.getMax();
        double double38 = descriptiveStatistics33.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double40 = descriptiveStatistics39.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics39.getMinImpl();
        descriptiveStatistics33.setSumImpl(univariateStatistic41);
        descriptiveStatistics28.setSumImpl(univariateStatistic41);
        double double44 = descriptiveStatistics28.getVariance();
        double double45 = descriptiveStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics46.getKurtosisImpl();
        long long49 = descriptiveStatistics46.getN();
        double[] doubleArray50 = descriptiveStatistics46.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getSumImpl();
        double double52 = descriptiveStatistics46.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics46.getSumImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic53);
        double[] doubleArray55 = descriptiveStatistics28.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics56.getKurtosisImpl();
        long long59 = descriptiveStatistics56.getN();
        double[] doubleArray60 = descriptiveStatistics56.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics56.getSumImpl();
        descriptiveStatistics56.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = null;
        descriptiveStatistics56.setSkewnessImpl(univariateStatistic64);
        double[] doubleArray66 = descriptiveStatistics56.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics56.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics56.getVarianceImpl();
        descriptiveStatistics28.setGeometricMeanImpl(univariateStatistic68);
        descriptiveStatistics22.setSumImpl(univariateStatistic68);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
    }

    @Test
    public void test14810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14810");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        double double9 = resizableDoubleArray0.addElementRolling(1.0d);
        int int10 = resizableDoubleArray0.getExpansionMode();
        int int11 = resizableDoubleArray0.getNumElements();
        double double13 = resizableDoubleArray0.addElementRolling(52.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = resizableDoubleArray0.getElement((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 52 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test14811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14811");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getSumsq();
        int int6 = descriptiveStatistics1.getWindowSize();
        double double7 = descriptiveStatistics1.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test14812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14812");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double double5 = resizableDoubleArray0.addElementRolling(Double.NaN);
        double double7 = resizableDoubleArray0.addElementRolling((double) 10L);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test14813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14813");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) (byte) 1);
        double double7 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        resizableDoubleArray0.setElement(97, (double) 33);
        float float11 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray12 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.5f + "'", float11 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 33.0]");
    }

    @Test
    public void test14814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14814");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        descriptiveStatistics13.setSumImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        descriptiveStatistics34.setMaxImpl(univariateStatistic44);
        double double46 = descriptiveStatistics34.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics34.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics34.getVarianceImpl();
        descriptiveStatistics32.setMinImpl(univariateStatistic48);
        descriptiveStatistics13.setMeanImpl(univariateStatistic48);
        descriptiveStatistics0.setSumImpl(univariateStatistic48);
        descriptiveStatistics0.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics54.getKurtosisImpl();
        double[] doubleArray57 = descriptiveStatistics54.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics54.getVarianceImpl();
        descriptiveStatistics54.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getKurtosisImpl();
        double[] doubleArray63 = descriptiveStatistics60.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics60.getVarianceImpl();
        double double65 = descriptiveStatistics60.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics60.getGeometricMeanImpl();
        descriptiveStatistics54.setSumsqImpl(univariateStatistic66);
        java.lang.String str68 = descriptiveStatistics54.toString();
        double double69 = descriptiveStatistics54.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics54.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic70);
        double double72 = descriptiveStatistics0.getMean();
        double double73 = descriptiveStatistics0.getMin();
        double double74 = descriptiveStatistics0.getVariance();
        long long75 = descriptiveStatistics0.getN();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str68, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test14815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14815");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        double double10 = resizableDoubleArray0.addElementRolling(40.5d);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test14816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14816");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        int int4 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) (byte) 100);
        double[] doubleArray8 = resizableDoubleArray0.getValues();
        int int9 = resizableDoubleArray0.start();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement(101, (double) 4);
        int int15 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 102 + "'", int15 == 102);
    }

    @Test
    public void test14817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14817");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        int int6 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements(100);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14818");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSkewnessImpl();
        double double8 = descriptiveStatistics0.getSum();
        double double9 = descriptiveStatistics0.getMax();
        java.lang.Class<?> wildcardClass10 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
    }

    @Test
    public void test14819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14819");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        long long6 = descriptiveStatistics0.getN();
        double[] doubleArray7 = descriptiveStatistics0.getValues();
        java.lang.String str8 = descriptiveStatistics0.toString();
        double double9 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.addValue((double) 33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getKurtosisImpl();
        long long15 = descriptiveStatistics12.getN();
        double[] doubleArray16 = descriptiveStatistics12.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getSumImpl();
        double double18 = descriptiveStatistics12.getVariance();
        double double19 = descriptiveStatistics12.getMax();
        double double20 = descriptiveStatistics12.getMean();
        double double21 = descriptiveStatistics12.getKurtosis();
        double double22 = descriptiveStatistics12.getVariance();
        double double23 = descriptiveStatistics12.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double26 = descriptiveStatistics25.getStandardDeviation();
        long long27 = descriptiveStatistics25.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getMinImpl();
        double double29 = descriptiveStatistics25.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        double[] doubleArray40 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double41 = univariateStatistic36.evaluate(doubleArray40);
        descriptiveStatistics30.setMaxImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics43.getKurtosisImpl();
        long long46 = descriptiveStatistics43.getN();
        double[] doubleArray47 = descriptiveStatistics43.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics43.getMeanImpl();
        descriptiveStatistics30.setGeometricMeanImpl(univariateStatistic49);
        descriptiveStatistics25.setGeometricMeanImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double53 = descriptiveStatistics52.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics54.getKurtosisImpl();
        long long57 = descriptiveStatistics54.getN();
        descriptiveStatistics54.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        descriptiveStatistics60.setKurtosisImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics67.getSumsqImpl();
        descriptiveStatistics65.setKurtosisImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics65.getKurtosisImpl();
        descriptiveStatistics60.setMaxImpl(univariateStatistic70);
        double double72 = descriptiveStatistics60.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics60.getMinImpl();
        descriptiveStatistics54.setMinImpl(univariateStatistic73);
        descriptiveStatistics52.setMeanImpl(univariateStatistic73);
        descriptiveStatistics25.setMinImpl(univariateStatistic73);
        double double77 = descriptiveStatistics25.getMax();
        double double78 = descriptiveStatistics25.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics25.getMaxImpl();
        descriptiveStatistics12.setSumsqImpl(univariateStatistic79);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2.0d + "'", double41 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(univariateStatistic79);
    }

    @Test
    public void test14820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14820");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 100, (float) 100);
        resizableDoubleArray2.addElement((double) (byte) 0);
    }

    @Test
    public void test14821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14821");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement(2, (double) (-1));
        int int13 = resizableDoubleArray0.start();
        int int14 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test14822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14822");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double9 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double12 = descriptiveStatistics11.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double16 = descriptiveStatistics15.getStandardDeviation();
        long long17 = descriptiveStatistics15.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics15.getMinImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic18);
        descriptiveStatistics8.setMinImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double23 = descriptiveStatistics22.getStandardDeviation();
        long long24 = descriptiveStatistics22.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getMinImpl();
        double double26 = descriptiveStatistics22.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getKurtosisImpl();
        double[] doubleArray37 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double38 = univariateStatistic33.evaluate(doubleArray37);
        descriptiveStatistics27.setMaxImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        double[] doubleArray44 = descriptiveStatistics40.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics40.getMeanImpl();
        descriptiveStatistics27.setGeometricMeanImpl(univariateStatistic46);
        descriptiveStatistics22.setGeometricMeanImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double50 = descriptiveStatistics49.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics51.getKurtosisImpl();
        long long54 = descriptiveStatistics51.getN();
        descriptiveStatistics51.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        descriptiveStatistics62.setKurtosisImpl(univariateStatistic65);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics62.getKurtosisImpl();
        descriptiveStatistics57.setMaxImpl(univariateStatistic67);
        double double69 = descriptiveStatistics57.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics57.getMinImpl();
        descriptiveStatistics51.setMinImpl(univariateStatistic70);
        descriptiveStatistics49.setMeanImpl(univariateStatistic70);
        descriptiveStatistics22.setMinImpl(univariateStatistic70);
        double double74 = descriptiveStatistics22.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics22.getGeometricMeanImpl();
        double double76 = descriptiveStatistics8.apply(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics78.setWindowSize((int) ' ');
        double double81 = descriptiveStatistics78.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics78.getSumsqImpl();
        double double83 = descriptiveStatistics78.getSum();
        double[] doubleArray84 = descriptiveStatistics78.getValues();
        double double85 = univariateStatistic75.evaluate(doubleArray84);
        double double86 = descriptiveStatistics0.apply(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2.0d + "'", double38 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertNotNull(univariateStatistic89);
    }

    @Test
    public void test14823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14823");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        double double10 = descriptiveStatistics0.getMean();
        double double11 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.setWindowSize((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getKurtosisImpl();
        double double15 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
    }

    @Test
    public void test14824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14824");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.contract();
        float float7 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.0f + "'", float7 == 2.0f);
    }

    @Test
    public void test14825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14825");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        int int4 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) (byte) 100);
        double[] doubleArray8 = resizableDoubleArray0.getValues();
        int int9 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.discardFrontElements(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14826");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double double13 = descriptiveStatistics0.getMax();
        double double14 = descriptiveStatistics0.getMean();
        long long15 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str17 = descriptiveStatistics16.toString();
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics16.getGeometricMeanImpl();
        double double20 = descriptiveStatistics16.getMax();
        double double21 = descriptiveStatistics16.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getVarianceImpl();
        double double23 = descriptiveStatistics16.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double25 = descriptiveStatistics24.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str28 = descriptiveStatistics27.toString();
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics27.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray32 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int33 = resizableDoubleArray32.start();
        resizableDoubleArray32.addElement((double) 10);
        int int36 = resizableDoubleArray32.getExpansionMode();
        resizableDoubleArray32.addElement((double) (-1L));
        double[] doubleArray39 = resizableDoubleArray32.getElements();
        double double42 = univariateStatistic31.evaluate(doubleArray39, (int) (byte) 1, 1);
        double double43 = descriptiveStatistics24.apply(univariateStatistic31);
        double double44 = descriptiveStatistics24.getSum();
        long long45 = descriptiveStatistics24.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getVarianceImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic48);
        descriptiveStatistics16.setSumImpl(univariateStatistic48);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic48);
        double double52 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str28, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test14827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14827");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        java.lang.String str7 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getKurtosisImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic18);
        double double20 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics8.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic21);
        double double23 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test14828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14828");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        double double16 = descriptiveStatistics10.getVariance();
        double double17 = descriptiveStatistics10.getMax();
        double double18 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics10.getSkewnessImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getMaxImpl();
        long long22 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getSkewnessImpl();
        double[] doubleArray24 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
    }

    @Test
    public void test14829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14829");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        float float9 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        int int11 = resizableDoubleArray0.getExpansionMode();
        double double13 = resizableDoubleArray0.addElementRolling((double) 1);
        resizableDoubleArray0.addElement(0.9897959183673456d);
        int int16 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    }

    @Test
    public void test14830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14830");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement((int) (short) 100, 0.0d);
        int int8 = resizableDoubleArray0.start();
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setContractionCriteria(97.0f);
        java.lang.Class<?> wildcardClass12 = resizableDoubleArray0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 101 + "'", int9 == 101);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test14831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14831");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics14.setWindowSize((int) ' ');
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getSkewnessImpl();
        descriptiveStatistics14.setSumsqImpl(univariateStatistic23);
        descriptiveStatistics0.setMeanImpl(univariateStatistic23);
        double double26 = descriptiveStatistics0.getVariance();
        double double27 = descriptiveStatistics0.getGeometricMean();
        double double28 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test14832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14832");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        int int5 = resizableDoubleArray0.getNumElements();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.addElement((double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = resizableDoubleArray0.getElement(68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 68 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14833");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setWindowSize(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
    }

    @Test
    public void test14834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14834");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
    }

    @Test
    public void test14835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14835");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        double double8 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics6.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics6.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        double[] doubleArray20 = descriptiveStatistics16.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        descriptiveStatistics6.setMinImpl(univariateStatistic22);
        descriptiveStatistics0.setMeanImpl(univariateStatistic22);
        java.lang.String str25 = descriptiveStatistics0.toString();
        double[] doubleArray26 = descriptiveStatistics0.getValues();
        double double27 = descriptiveStatistics0.getKurtosis();
        double double28 = descriptiveStatistics0.getMean();
        double double29 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test14836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14836");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getSum();
        long long21 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getVarianceImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str28 = descriptiveStatistics27.toString();
        double double29 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics27.setSkewnessImpl(univariateStatistic33);
        double double36 = descriptiveStatistics27.getStandardDeviation();
        double double37 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double40 = descriptiveStatistics39.getStandardDeviation();
        long long41 = descriptiveStatistics39.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics39.getSkewnessImpl();
        java.lang.String str43 = descriptiveStatistics39.toString();
        double double44 = descriptiveStatistics39.getVariance();
        descriptiveStatistics39.setWindowSize((int) (short) 100);
        descriptiveStatistics39.setWindowSize((int) (short) -1);
        double double49 = descriptiveStatistics39.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics39.getMeanImpl();
        descriptiveStatistics27.setGeometricMeanImpl(univariateStatistic50);
        double double52 = descriptiveStatistics0.apply(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics0.getSumImpl();
        double double54 = descriptiveStatistics0.getSum();
        long long55 = descriptiveStatistics0.getN();
        double double56 = descriptiveStatistics0.getMax();
        double double57 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str28, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test14837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14837");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) (byte) 10);
        int int15 = resizableDoubleArray0.start();
        int int16 = resizableDoubleArray0.start();
        double double18 = resizableDoubleArray0.addElementRolling(99.00990099009901d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 99.00990099009901, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test14838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14838");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic13);
        double double15 = descriptiveStatistics0.getStandardDeviation();
        double double16 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str18 = descriptiveStatistics17.toString();
        double double19 = descriptiveStatistics17.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        descriptiveStatistics17.setSkewnessImpl(univariateStatistic23);
        double double26 = descriptiveStatistics17.getStandardDeviation();
        descriptiveStatistics17.clear();
        double double28 = descriptiveStatistics17.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics29.setMaxImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics29.setGeometricMeanImpl(univariateStatistic46);
        descriptiveStatistics17.setSumImpl(univariateStatistic46);
        double double49 = descriptiveStatistics17.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics17.getGeometricMeanImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double53 = descriptiveStatistics52.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics52.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str56 = descriptiveStatistics55.toString();
        descriptiveStatistics55.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics55.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray60 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int61 = resizableDoubleArray60.start();
        resizableDoubleArray60.addElement((double) 10);
        int int64 = resizableDoubleArray60.getExpansionMode();
        resizableDoubleArray60.addElement((double) (-1L));
        double[] doubleArray67 = resizableDoubleArray60.getElements();
        double double70 = univariateStatistic59.evaluate(doubleArray67, (int) (byte) 1, 1);
        double double71 = descriptiveStatistics52.apply(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics72.getKurtosisImpl();
        long long75 = descriptiveStatistics72.getN();
        double[] doubleArray76 = descriptiveStatistics72.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics72.getSumImpl();
        double double78 = descriptiveStatistics72.getVariance();
        double double79 = descriptiveStatistics72.getMax();
        int int80 = descriptiveStatistics72.getWindowSize();
        double double81 = descriptiveStatistics72.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics72.getPercentileImpl();
        descriptiveStatistics52.setMinImpl(univariateStatistic82);
        descriptiveStatistics0.setSumImpl(univariateStatistic82);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics0.getPercentileImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setWindowSize(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str56, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic85);
    }

    @Test
    public void test14839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14839");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        float float12 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (byte) 0, 0.0d);
        double[] doubleArray16 = resizableDoubleArray0.getValues();
        int int17 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
    }

    @Test
    public void test14840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14840");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        double double2 = descriptiveStatistics1.getMin();
        descriptiveStatistics1.addValue((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double7 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics8.setWindowSize((int) (byte) -1);
        long long11 = descriptiveStatistics8.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic12);
        double double14 = descriptiveStatistics6.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics6.getVarianceImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic15);
        double double17 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics1.getPercentileImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic18);
    }

    @Test
    public void test14841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14841");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMax();
        double double8 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.addValue((double) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getKurtosisImpl();
        long long14 = descriptiveStatistics11.getN();
        double[] doubleArray15 = descriptiveStatistics11.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics11.getMeanImpl();
        long long18 = descriptiveStatistics11.getN();
        java.lang.String str19 = descriptiveStatistics11.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics11.getSumImpl();
        double double21 = descriptiveStatistics0.apply(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
    }

    @Test
    public void test14842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14842");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getSkewnessImpl();
        java.lang.String str9 = descriptiveStatistics5.toString();
        double double10 = descriptiveStatistics5.getVariance();
        descriptiveStatistics5.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic19);
        long long21 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics1.getSumsqImpl();
        double double23 = descriptiveStatistics1.getGeometricMean();
        double double24 = descriptiveStatistics1.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test14843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14843");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double[] doubleArray12 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics8.getMinImpl();
        double double15 = descriptiveStatistics6.apply(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        descriptiveStatistics23.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getSkewnessImpl();
        descriptiveStatistics16.setSumsqImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics16.getVarianceImpl();
        descriptiveStatistics6.setVarianceImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics6.getSumsqImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic33);
        double double35 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.addValue((double) 53);
        double double38 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getKurtosisImpl();
        double[] doubleArray49 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double50 = univariateStatistic45.evaluate(doubleArray49);
        descriptiveStatistics39.setMaxImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics52.getKurtosisImpl();
        long long55 = descriptiveStatistics52.getN();
        double[] doubleArray56 = descriptiveStatistics52.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics52.getMeanImpl();
        descriptiveStatistics39.setGeometricMeanImpl(univariateStatistic58);
        double double60 = descriptiveStatistics39.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str62 = descriptiveStatistics61.toString();
        descriptiveStatistics61.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics61.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics66.getKurtosisImpl();
        long long69 = descriptiveStatistics66.getN();
        double double70 = descriptiveStatistics66.getMax();
        double double71 = descriptiveStatistics66.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double73 = descriptiveStatistics72.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics72.getMinImpl();
        descriptiveStatistics66.setSumImpl(univariateStatistic74);
        descriptiveStatistics61.setSumImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics77.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics79.getSumsqImpl();
        descriptiveStatistics77.setKurtosisImpl(univariateStatistic80);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics82 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics82.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics84 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics84.getSumsqImpl();
        descriptiveStatistics82.setKurtosisImpl(univariateStatistic85);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics82.getKurtosisImpl();
        descriptiveStatistics77.setMaxImpl(univariateStatistic87);
        double double89 = descriptiveStatistics61.apply(univariateStatistic87);
        descriptiveStatistics39.setVarianceImpl(univariateStatistic87);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic87);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 53.0d + "'", double38 == 53.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2.0d + "'", double50 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str62, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(descriptiveStatistics79);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(descriptiveStatistics82);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertNotNull(descriptiveStatistics84);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test14844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14844");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 10);
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray17 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double18 = univariateStatistic13.evaluate(doubleArray17);
        descriptiveStatistics7.setMaxImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics7.getSumsqImpl();
        double double22 = descriptiveStatistics7.getPercentile(1.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str24 = descriptiveStatistics23.toString();
        double double25 = descriptiveStatistics23.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        descriptiveStatistics23.setSkewnessImpl(univariateStatistic29);
        double double32 = descriptiveStatistics23.getStandardDeviation();
        descriptiveStatistics23.clear();
        double double34 = descriptiveStatistics23.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics23.getGeometricMeanImpl();
        descriptiveStatistics7.setSumsqImpl(univariateStatistic35);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray37 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int38 = resizableDoubleArray37.getExpansionMode();
        resizableDoubleArray37.addElement((double) 0);
        double double42 = resizableDoubleArray37.addElementRolling((double) 0.0f);
        resizableDoubleArray37.setElement((int) (byte) 10, (double) (short) -1);
        int int46 = resizableDoubleArray37.getNumElements();
        resizableDoubleArray37.clear();
        resizableDoubleArray37.clear();
        double[] doubleArray49 = resizableDoubleArray37.getValues();
        double double50 = univariateStatistic35.evaluate(doubleArray49);
        descriptiveStatistics0.setMaxImpl(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2.0d + "'", double18 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str24, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 11 + "'", int46 == 11);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test14845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14845");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getSkewnessImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getPercentileImpl();
        double double18 = descriptiveStatistics0.getMean();
        double double19 = descriptiveStatistics0.getSumsq();
        double double20 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test14846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14846");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        descriptiveStatistics1.setWindowSize((int) (short) -1);
        double double11 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getSumsqImpl();
        double double13 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test14847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14847");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        double double17 = descriptiveStatistics0.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        int int23 = descriptiveStatistics18.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics18.getGeometricMeanImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic24);
        double double26 = descriptiveStatistics0.getSum();
        double double27 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics28.setMaxImpl(univariateStatistic38);
        double double40 = descriptiveStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics28.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics28.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics28.getPercentileImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
    }

    @Test
    public void test14848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14848");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        float float10 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.addElement((double) 98);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[98.0]");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test14849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14849");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSkewnessImpl();
        double double24 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics1.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics1.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double29 = descriptiveStatistics28.getMax();
        long long30 = descriptiveStatistics28.getN();
        double double31 = descriptiveStatistics28.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = null;
        descriptiveStatistics28.setSkewnessImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics28.getMeanImpl();
        double[] doubleArray35 = descriptiveStatistics28.getSortedValues();
        double double36 = univariateStatistic26.evaluate(doubleArray35);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test14850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14850");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics12.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setSumImpl(univariateStatistic29);
        double double32 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics0.getGeometricMeanImpl();
        double double34 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getKurtosisImpl();
        long long38 = descriptiveStatistics35.getN();
        double[] doubleArray39 = descriptiveStatistics35.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getSumImpl();
        double double41 = descriptiveStatistics35.getStandardDeviation();
        double double42 = descriptiveStatistics35.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics35.getVarianceImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic43);
        java.lang.String str45 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getKurtosisImpl();
        long long50 = descriptiveStatistics47.getN();
        double double51 = descriptiveStatistics47.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str53 = descriptiveStatistics52.toString();
        descriptiveStatistics52.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics52.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics57.getKurtosisImpl();
        long long60 = descriptiveStatistics57.getN();
        double double61 = descriptiveStatistics57.getMax();
        double double62 = descriptiveStatistics57.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double64 = descriptiveStatistics63.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics63.getMinImpl();
        descriptiveStatistics57.setSumImpl(univariateStatistic65);
        descriptiveStatistics52.setSumImpl(univariateStatistic65);
        double double68 = descriptiveStatistics52.getVariance();
        long long69 = descriptiveStatistics52.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics52.getPercentileImpl();
        descriptiveStatistics47.setMinImpl(univariateStatistic70);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic70);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str53, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(univariateStatistic73);
    }

    @Test
    public void test14851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14851");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        float float4 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement(100, (double) 100);
        resizableDoubleArray0.setElement(0, 1.0d);
        resizableDoubleArray0.addElement((double) ' ');
        resizableDoubleArray0.setElement((int) 'a', 0.5d);
        double[] doubleArray16 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setContractionCriteria((float) 37);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 100.0, 32.0]");
    }

    @Test
    public void test14852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14852");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', 2.0f, (float) 100);
        int int4 = resizableDoubleArray3.getExpansionMode();
        double[] doubleArray5 = resizableDoubleArray3.getElements();
        resizableDoubleArray3.contract();
        double double8 = resizableDoubleArray3.addElementRolling((double) 0.0f);
        resizableDoubleArray3.contract();
        double double11 = resizableDoubleArray3.addElementRolling((double) 100L);
        float float12 = resizableDoubleArray3.getExpansionFactor();
        resizableDoubleArray3.setContractionCriteria(52.0f);
        double[] doubleArray15 = resizableDoubleArray3.getElements();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    }

    @Test
    public void test14853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14853");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSumImpl();
        double double5 = descriptiveStatistics1.getKurtosis();
        double double6 = descriptiveStatistics1.getKurtosis();
        int int7 = descriptiveStatistics1.getWindowSize();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test14854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14854");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getVariance();
        double[] doubleArray8 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics9.getKurtosisImpl();
        long long12 = descriptiveStatistics9.getN();
        double[] doubleArray13 = descriptiveStatistics9.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics9.getSumImpl();
        double double15 = descriptiveStatistics9.getVariance();
        double double16 = descriptiveStatistics9.getMax();
        double double17 = descriptiveStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics9.getSkewnessImpl();
        double[] doubleArray19 = descriptiveStatistics9.getSortedValues();
        double double20 = descriptiveStatistics9.getVariance();
        double double21 = descriptiveStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        descriptiveStatistics22.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics22.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics22.getMeanImpl();
        int int30 = descriptiveStatistics22.getWindowSize();
        double double31 = descriptiveStatistics22.getVariance();
        double[] doubleArray32 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double39 = descriptiveStatistics38.getStandardDeviation();
        double double40 = descriptiveStatistics38.getVariance();
        double double41 = descriptiveStatistics38.getSum();
        long long42 = descriptiveStatistics38.getN();
        int int43 = descriptiveStatistics38.getWindowSize();
        double double44 = descriptiveStatistics38.getMax();
        descriptiveStatistics38.addValue((double) 32.0f);
        double double48 = descriptiveStatistics38.getPercentile((double) 10L);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics38.getMinImpl();
        double double50 = descriptiveStatistics22.apply(univariateStatistic49);
        descriptiveStatistics9.setVarianceImpl(univariateStatistic49);
        descriptiveStatistics0.setMeanImpl(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 32.0d + "'", double48 == 32.0d);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test14855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14855");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.addValue(100.0d);
        double double10 = descriptiveStatistics0.getSkewness();
        long long11 = descriptiveStatistics0.getN();
        double double12 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics13.getSumsqImpl();
        double double21 = descriptiveStatistics13.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics13.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getKurtosisImpl();
        long long28 = descriptiveStatistics25.getN();
        double[] doubleArray29 = descriptiveStatistics25.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getMinImpl();
        double double32 = descriptiveStatistics23.apply(univariateStatistic31);
        descriptiveStatistics13.setMeanImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics13.getGeometricMeanImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        descriptiveStatistics37.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics37.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getKurtosisImpl();
        long long47 = descriptiveStatistics44.getN();
        descriptiveStatistics44.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getSkewnessImpl();
        descriptiveStatistics37.setSumsqImpl(univariateStatistic50);
        double double52 = descriptiveStatistics37.getStandardDeviation();
        double double53 = descriptiveStatistics37.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str55 = descriptiveStatistics54.toString();
        double double56 = descriptiveStatistics54.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        descriptiveStatistics54.setSkewnessImpl(univariateStatistic60);
        double double63 = descriptiveStatistics54.getStandardDeviation();
        descriptiveStatistics54.clear();
        double double65 = descriptiveStatistics54.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        descriptiveStatistics71.setKurtosisImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics71.getKurtosisImpl();
        descriptiveStatistics66.setMaxImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics80.getSumsqImpl();
        descriptiveStatistics78.setKurtosisImpl(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics78.getKurtosisImpl();
        descriptiveStatistics66.setGeometricMeanImpl(univariateStatistic83);
        descriptiveStatistics54.setSumImpl(univariateStatistic83);
        double double86 = descriptiveStatistics54.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics54.getGeometricMeanImpl();
        descriptiveStatistics37.setMaxImpl(univariateStatistic87);
        descriptiveStatistics0.setMeanImpl(univariateStatistic87);
        double double90 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str55, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 100.00000000000004d + "'", double90 == 100.00000000000004d);
    }

    @Test
    public void test14856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14856");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        long long17 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getPercentileImpl();
        double[] doubleArray19 = descriptiveStatistics0.getValues();
        double double20 = descriptiveStatistics0.getStandardDeviation();
        double double21 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test14857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14857");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.contract();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        int int14 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 100, (double) (-1L));
        float float18 = resizableDoubleArray0.getExpansionFactor();
        int int19 = resizableDoubleArray0.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setNumElements((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of elements must be zero or a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 2.0f + "'", float18 == 2.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test14858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14858");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        double double9 = resizableDoubleArray0.addElementRolling((double) 10);
        int int10 = resizableDoubleArray0.getNumElements();
        int int11 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(11, 152.99999999999997d);
        int int15 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 102 + "'", int10 == 102);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 102 + "'", int15 == 102);
    }

    @Test
    public void test14859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14859");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.addElement((double) 1.0f);
        int int16 = resizableDoubleArray0.start();
        resizableDoubleArray0.setNumElements(31);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test14860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14860");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = null;
        descriptiveStatistics0.setMinImpl(univariateStatistic4);
        double double6 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMinImpl();
        descriptiveStatistics7.clear();
        long long15 = descriptiveStatistics7.getN();
        double double16 = descriptiveStatistics7.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double19 = descriptiveStatistics18.getStandardDeviation();
        long long20 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getSkewnessImpl();
        java.lang.String str22 = descriptiveStatistics18.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics18.setMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getGeometricMeanImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str36 = descriptiveStatistics35.toString();
        double double37 = descriptiveStatistics35.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics38.getKurtosisImpl();
        double double44 = descriptiveStatistics35.apply(univariateStatistic43);
        double double45 = descriptiveStatistics35.getSumsq();
        double double46 = descriptiveStatistics35.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getKurtosisImpl();
        descriptiveStatistics35.setSumsqImpl(univariateStatistic52);
        double double54 = descriptiveStatistics18.apply(univariateStatistic52);
        double double55 = descriptiveStatistics18.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics18.getPercentileImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray57 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int58 = resizableDoubleArray57.getExpansionMode();
        resizableDoubleArray57.clear();
        double[] doubleArray60 = resizableDoubleArray57.getElements();
        double[] doubleArray61 = resizableDoubleArray57.getElements();
        double[] doubleArray62 = resizableDoubleArray57.getElements();
        int int63 = resizableDoubleArray57.getNumElements();
        double double65 = resizableDoubleArray57.addElementRolling((double) (short) 100);
        resizableDoubleArray57.contract();
        float float67 = resizableDoubleArray57.getContractionCriteria();
        double[] doubleArray68 = resizableDoubleArray57.getElements();
        resizableDoubleArray57.setNumElements((int) '#');
        double[] doubleArray71 = resizableDoubleArray57.getElements();
        double double72 = univariateStatistic56.evaluate(doubleArray71);
        double double73 = descriptiveStatistics7.apply(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        descriptiveStatistics74.setKurtosisImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics79.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics81 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics81.getSumsqImpl();
        descriptiveStatistics79.setKurtosisImpl(univariateStatistic82);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics79.getKurtosisImpl();
        descriptiveStatistics74.setMaxImpl(univariateStatistic84);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics86 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics86.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics88 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics88.getSumsqImpl();
        descriptiveStatistics86.setKurtosisImpl(univariateStatistic89);
        double double91 = descriptiveStatistics74.apply(univariateStatistic89);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic92 = descriptiveStatistics74.getMaxImpl();
        descriptiveStatistics7.setVarianceImpl(univariateStatistic92);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic92);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str36, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 2.5f + "'", float67 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics79);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(descriptiveStatistics81);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertNotNull(descriptiveStatistics86);
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertNotNull(descriptiveStatistics88);
        org.junit.Assert.assertNotNull(univariateStatistic89);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(univariateStatistic92);
    }

    @Test
    public void test14861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14861");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(10);
        java.lang.Class<?> wildcardClass2 = descriptiveStatistics1.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass2);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass2);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getMeanImpl();
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
    }

    @Test
    public void test14862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14862");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getMeanImpl();
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics18.setSkewnessImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getSkewnessImpl();
        descriptiveStatistics18.setSkewnessImpl(univariateStatistic33);
        descriptiveStatistics0.setMaxImpl(univariateStatistic33);
        long long36 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double39 = descriptiveStatistics38.getMax();
        double double40 = descriptiveStatistics38.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics38.getMaxImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic41);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray43 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int44 = resizableDoubleArray43.getExpansionMode();
        resizableDoubleArray43.addElement(0.0d);
        resizableDoubleArray43.clear();
        resizableDoubleArray43.clear();
        double[] doubleArray49 = resizableDoubleArray43.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double52 = univariateStatistic41.evaluate(doubleArray49, (int) ' ', 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
    }

    @Test
    public void test14863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14863");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        descriptiveStatistics1.addValue((double) 101);
        double double9 = descriptiveStatistics1.getMin();
        descriptiveStatistics1.setWindowSize(103);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 101.0d + "'", double9 == 101.0d);
    }

    @Test
    public void test14864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14864");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double double13 = resizableDoubleArray0.getElement(10);
        float float14 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setNumElements((int) '4');
        int int17 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.5f + "'", float14 == 2.5f);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14865");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(99, (float) (-1), 52.0f, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14866");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 100, (float) (short) 10, 10.0f);
        resizableDoubleArray3.setElement((int) (byte) 100, 10.0d);
        double double8 = resizableDoubleArray3.addElementRolling((double) '4');
        resizableDoubleArray3.setContractionCriteria((float) 31);
        resizableDoubleArray3.setNumElements(12);
        resizableDoubleArray3.clear();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test14867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14867");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double[] doubleArray15 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str17 = descriptiveStatistics16.toString();
        double double18 = descriptiveStatistics16.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics16.setSkewnessImpl(univariateStatistic22);
        double double25 = descriptiveStatistics16.getStandardDeviation();
        descriptiveStatistics16.clear();
        double double27 = descriptiveStatistics16.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics28.setMaxImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getKurtosisImpl();
        descriptiveStatistics28.setGeometricMeanImpl(univariateStatistic45);
        descriptiveStatistics16.setSumImpl(univariateStatistic45);
        long long48 = descriptiveStatistics16.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics59.getKurtosisImpl();
        descriptiveStatistics54.setMaxImpl(univariateStatistic64);
        double double66 = descriptiveStatistics54.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics54.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics54.getVarianceImpl();
        descriptiveStatistics52.setMinImpl(univariateStatistic68);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic68);
        double double71 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test14868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14868");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        descriptiveStatistics1.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMeanImpl();
        int int5 = descriptiveStatistics1.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getSkewnessImpl();
        double double7 = descriptiveStatistics1.getMax();
        long long8 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str11 = descriptiveStatistics10.toString();
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics10.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        double double19 = descriptiveStatistics15.getMax();
        double double20 = descriptiveStatistics15.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double22 = descriptiveStatistics21.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getMinImpl();
        descriptiveStatistics15.setSumImpl(univariateStatistic23);
        descriptiveStatistics10.setSumImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        descriptiveStatistics26.setMaxImpl(univariateStatistic36);
        double double38 = descriptiveStatistics10.apply(univariateStatistic36);
        double double39 = descriptiveStatistics10.getSkewness();
        double double40 = descriptiveStatistics10.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str42 = descriptiveStatistics41.toString();
        double double43 = descriptiveStatistics41.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        descriptiveStatistics41.setSkewnessImpl(univariateStatistic47);
        double double50 = descriptiveStatistics41.getStandardDeviation();
        descriptiveStatistics41.clear();
        descriptiveStatistics41.addValue((double) (short) 10);
        double double54 = descriptiveStatistics41.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics41.getMaxImpl();
        descriptiveStatistics10.setMaxImpl(univariateStatistic55);
        descriptiveStatistics1.setSumImpl(univariateStatistic55);
        double double58 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics1.getSkewnessImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str42, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(univariateStatistic59);
    }

    @Test
    public void test14869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14869");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics16.getVarianceImpl();
        descriptiveStatistics14.setMinImpl(univariateStatistic30);
        double double32 = descriptiveStatistics14.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics14.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        long long37 = descriptiveStatistics34.getN();
        double[] doubleArray38 = descriptiveStatistics34.getValues();
        double double39 = descriptiveStatistics34.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double42 = descriptiveStatistics41.getStandardDeviation();
        long long43 = descriptiveStatistics41.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics34.setSumImpl(univariateStatistic44);
        descriptiveStatistics14.setSumImpl(univariateStatistic44);
        descriptiveStatistics0.setSumImpl(univariateStatistic44);
        double[] doubleArray48 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics0.getSkewnessImpl();
        double[] doubleArray50 = descriptiveStatistics0.getValues();
        double double51 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double54 = descriptiveStatistics53.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getKurtosisImpl();
        long long58 = descriptiveStatistics55.getN();
        descriptiveStatistics55.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        descriptiveStatistics61.setKurtosisImpl(univariateStatistic64);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics66.getKurtosisImpl();
        descriptiveStatistics61.setMaxImpl(univariateStatistic71);
        double double73 = descriptiveStatistics61.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics61.getMinImpl();
        descriptiveStatistics55.setMinImpl(univariateStatistic74);
        descriptiveStatistics53.setMeanImpl(univariateStatistic74);
        descriptiveStatistics53.addValue((double) 1L);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics53.getVarianceImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic79);
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic79);
    }

    @Test
    public void test14870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14870");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = null;
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic5);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getMeanImpl();
        double[] doubleArray8 = descriptiveStatistics1.getValues();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test14871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14871");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics1.setWindowSize((int) ' ');
        double double4 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getMeanImpl();
        long long6 = descriptiveStatistics1.getN();
        double double7 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getKurtosisImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
    }

    @Test
    public void test14872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14872");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setElement(2, (double) 32.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(102.5d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
    }

    @Test
    public void test14873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14873");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setExpansionMode(0);
        double[] doubleArray11 = resizableDoubleArray0.getValues();
        double double13 = resizableDoubleArray0.addElementRolling((double) 0L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test14874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14874");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        double[] doubleArray19 = descriptiveStatistics15.getValues();
        double double20 = descriptiveStatistics15.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double23 = descriptiveStatistics22.getStandardDeviation();
        long long24 = descriptiveStatistics22.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getKurtosisImpl();
        descriptiveStatistics15.setSumImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics15.getMaxImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics1.getMaxImpl();
        double double30 = descriptiveStatistics1.getMean();
        double double32 = descriptiveStatistics1.getPercentile((double) 2.0f);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test14875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14875");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(3);
        double double2 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
    }

    @Test
    public void test14876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14876");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double7 = descriptiveStatistics6.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        descriptiveStatistics8.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic24);
        double double26 = descriptiveStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics8.setMinImpl(univariateStatistic27);
        descriptiveStatistics6.setMeanImpl(univariateStatistic27);
        double double30 = descriptiveStatistics6.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic36);
        double double38 = descriptiveStatistics0.apply(univariateStatistic36);
        double double39 = descriptiveStatistics0.getMean();
        double double40 = descriptiveStatistics0.getSumsq();
        descriptiveStatistics0.setWindowSize(92);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test14877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14877");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 'a');
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        double double8 = resizableDoubleArray0.addElementRolling((double) 32);
        int int9 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(36, 31.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14878");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        resizableDoubleArray0.contract();
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test14879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14879");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        double double17 = descriptiveStatistics8.getStandardDeviation();
        descriptiveStatistics8.clear();
        double double19 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic20);
        double[] doubleArray22 = descriptiveStatistics0.getSortedValues();
        descriptiveStatistics0.clear();
        long long24 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        double[] doubleArray30 = descriptiveStatistics25.getValues();
        double double31 = descriptiveStatistics25.getSumsq();
        double double32 = descriptiveStatistics25.getMin();
        double double33 = descriptiveStatistics25.getMean();
        double double34 = descriptiveStatistics25.getVariance();
        double double35 = descriptiveStatistics25.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics25.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics25.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getKurtosisImpl();
        long long41 = descriptiveStatistics38.getN();
        double[] doubleArray42 = descriptiveStatistics38.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics38.getSumImpl();
        double double44 = descriptiveStatistics38.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics38.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics38.getSkewnessImpl();
        descriptiveStatistics25.setGeometricMeanImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics48.getKurtosisImpl();
        double double54 = descriptiveStatistics48.getStandardDeviation();
        double double55 = descriptiveStatistics48.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics48.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double59 = descriptiveStatistics58.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics58.getGeometricMeanImpl();
        double double61 = descriptiveStatistics58.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getKurtosisImpl();
        double[] doubleArray65 = descriptiveStatistics62.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics62.getVarianceImpl();
        descriptiveStatistics58.setSumsqImpl(univariateStatistic66);
        double double68 = descriptiveStatistics48.apply(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getVarianceImpl();
        descriptiveStatistics48.setMaxImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics48.getGeometricMeanImpl();
        double double74 = descriptiveStatistics48.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics48.getKurtosisImpl();
        double double76 = descriptiveStatistics48.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics48.getSkewnessImpl();
        descriptiveStatistics25.setSumImpl(univariateStatistic77);
        descriptiveStatistics0.setMeanImpl(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(univariateStatistic77);
    }

    @Test
    public void test14880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14880");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 0L);
        resizableDoubleArray0.contract();
        double double12 = resizableDoubleArray0.getElement(1);
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setElement(3, 20.25d);
        resizableDoubleArray0.setElement((int) 'a', (double) 34);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 0.0]");
    }

    @Test
    public void test14881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14881");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        descriptiveStatistics0.addValue(0.0d);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.addValue(1024.0d);
        double double12 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test14882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14882");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double double5 = resizableDoubleArray0.addElementRolling(Double.NaN);
        int int6 = resizableDoubleArray0.start();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test14883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14883");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        double double9 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str18 = descriptiveStatistics17.toString();
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics7.setMeanImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics25.setMaxImpl(univariateStatistic35);
        double double37 = descriptiveStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics25.getMinImpl();
        descriptiveStatistics25.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        double double47 = descriptiveStatistics41.getStandardDeviation();
        double double48 = descriptiveStatistics41.getSum();
        int int49 = descriptiveStatistics41.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics41.getMaxImpl();
        descriptiveStatistics25.setSkewnessImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        descriptiveStatistics52.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics52.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics52.getSumsqImpl();
        double double60 = descriptiveStatistics52.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str62 = descriptiveStatistics61.toString();
        double double63 = descriptiveStatistics61.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getKurtosisImpl();
        double double70 = descriptiveStatistics61.apply(univariateStatistic69);
        double double71 = descriptiveStatistics61.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics61.getSumImpl();
        descriptiveStatistics52.setGeometricMeanImpl(univariateStatistic72);
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics25.getMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str62, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic75);
    }

    @Test
    public void test14884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14884");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) (byte) 10);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.setExpansionFactor(2.0f);
        resizableDoubleArray0.clear();
        int int21 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(11224.999999999996d);
        double double25 = resizableDoubleArray0.getElement(0);
        double[] doubleArray26 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 11224.999999999996d + "'", double25 == 11224.999999999996d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[11224.999999999996]");
    }

    @Test
    public void test14885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14885");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        int int12 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setContractionCriteria((float) 2);
        int int15 = resizableDoubleArray0.start();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement(11, 52.49999999999999d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test14886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14886");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        double double10 = resizableDoubleArray0.addElementRolling((double) (byte) 1);
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = resizableDoubleArray0.getElement(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 97 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test14887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14887");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics4.getKurtosisImpl();
        long long7 = descriptiveStatistics4.getN();
        double[] doubleArray8 = descriptiveStatistics4.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics4.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getMinImpl();
        double double11 = descriptiveStatistics4.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        double double14 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics12.setSkewnessImpl(univariateStatistic18);
        double double21 = descriptiveStatistics12.getStandardDeviation();
        descriptiveStatistics12.clear();
        double double23 = descriptiveStatistics12.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics12.getGeometricMeanImpl();
        descriptiveStatistics4.setGeometricMeanImpl(univariateStatistic24);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic24);
        descriptiveStatistics0.setWindowSize((int) (short) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic29);
    }

    @Test
    public void test14888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14888");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setElement(101, (double) 0L);
        float float13 = resizableDoubleArray0.getContractionCriteria();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.5f + "'", float13 == 2.5f);
    }

    @Test
    public void test14889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14889");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) (byte) 0, (double) (-1));
        resizableDoubleArray0.addElement(2.0d);
        resizableDoubleArray0.setElement((int) (short) 1, (double) 10.5f);
        double double16 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.addElement(34.99999999999999d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
    }

    @Test
    public void test14890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14890");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10, (float) (byte) 10, 32.0f, 1);
        double[] doubleArray5 = resizableDoubleArray4.getElements();
        double[] doubleArray6 = resizableDoubleArray4.getValues();
        resizableDoubleArray4.contract();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14891");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        java.lang.String str6 = descriptiveStatistics1.toString();
        long long7 = descriptiveStatistics1.getN();
        double double8 = descriptiveStatistics1.getVariance();
        double double9 = descriptiveStatistics1.getMean();
        double double10 = descriptiveStatistics1.getStandardDeviation();
        double double11 = descriptiveStatistics1.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test14892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14892");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement((int) (short) 100, 52.0d);
        double[] doubleArray15 = resizableDoubleArray0.getValues();
        double[] doubleArray16 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52.0]");
    }

    @Test
    public void test14893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14893");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setElement(101, (double) 0L);
        double double14 = resizableDoubleArray0.getElement(2);
        int int15 = resizableDoubleArray0.start();
        float float16 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setExpansionMode(1);
        double[] doubleArray19 = resizableDoubleArray0.getElements();
        double[] doubleArray20 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 2.5f + "'", float16 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14894");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 1);
        float float13 = resizableDoubleArray0.getExpansionFactor();
        float float14 = resizableDoubleArray0.getContractionCriteria();
        double double16 = resizableDoubleArray0.addElementRolling((double) 101);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.0f + "'", float13 == 2.0f);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.5f + "'", float14 == 2.5f);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test14895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14895");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(102, 35.0f, (float) 'a');
        resizableDoubleArray3.setContractionCriteria(35.5f);
        double[] doubleArray6 = resizableDoubleArray3.getElements();
        int int7 = resizableDoubleArray3.getNumElements();
        int int8 = resizableDoubleArray3.getExpansionMode();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test14896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14896");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSkewnessImpl();
        double double8 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        double double16 = descriptiveStatistics10.getStandardDeviation();
        double double17 = descriptiveStatistics10.getSum();
        int int18 = descriptiveStatistics10.getWindowSize();
        int int19 = descriptiveStatistics10.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics10.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        descriptiveStatistics24.setMaxImpl(univariateStatistic34);
        double double36 = descriptiveStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics24.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics24.getVarianceImpl();
        descriptiveStatistics22.setMinImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics22.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics22.getPercentileImpl();
        descriptiveStatistics10.setMinImpl(univariateStatistic41);
        long long43 = descriptiveStatistics10.getN();
        java.lang.String str44 = descriptiveStatistics10.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getVarianceImpl();
        double double49 = descriptiveStatistics47.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double51 = descriptiveStatistics50.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double54 = descriptiveStatistics53.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double58 = descriptiveStatistics57.getStandardDeviation();
        long long59 = descriptiveStatistics57.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics57.getMinImpl();
        descriptiveStatistics53.setMaxImpl(univariateStatistic60);
        descriptiveStatistics50.setMinImpl(univariateStatistic60);
        descriptiveStatistics47.setSumImpl(univariateStatistic60);
        descriptiveStatistics10.setSumImpl(univariateStatistic60);
        double double65 = descriptiveStatistics10.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic66);
        double[] doubleArray68 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str44, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
    }

    @Test
    public void test14897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14897");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        long long5 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        double double9 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getSumImpl();
        descriptiveStatistics6.setMinImpl(univariateStatistic12);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic12);
        int int15 = descriptiveStatistics1.getWindowSize();
        double double16 = descriptiveStatistics1.getMean();
        descriptiveStatistics1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test14898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14898");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMean();
        double double7 = descriptiveStatistics1.getStandardDeviation();
        double double8 = descriptiveStatistics1.getSumsq();
        double double9 = descriptiveStatistics1.getGeometricMean();
        double double10 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics1.getPercentileImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
    }

    @Test
    public void test14899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14899");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.clear();
        resizableDoubleArray1.clear();
        double double5 = resizableDoubleArray1.addElementRolling(20.25d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test14900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14900");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        long long8 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getSumsqImpl();
        int int10 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
    }

    @Test
    public void test14901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14901");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) 'a');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getMinImpl();
        org.junit.Assert.assertNotNull(univariateStatistic2);
    }

    @Test
    public void test14902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14902");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double31 = descriptiveStatistics30.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.getStandardDeviation();
        double[] doubleArray35 = descriptiveStatistics0.getValues();
        double double36 = descriptiveStatistics0.getKurtosis();
        int int37 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics0.getKurtosisImpl();
        double double39 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test14903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14903");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSkewnessImpl();
        double double14 = descriptiveStatistics0.getPercentile(1.0d);
        double double15 = descriptiveStatistics0.getSum();
        double[] doubleArray16 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic17);
    }

    @Test
    public void test14904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14904");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        resizableDoubleArray0.setElement(32, (double) 100.0f);
        resizableDoubleArray0.contract();
        int int11 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (byte) 0);
        resizableDoubleArray0.addElement((double) 52.0f);
        double[] doubleArray16 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 33 + "'", int11 == 33);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0]");
    }

    @Test
    public void test14905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14905");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100);
        double double13 = resizableDoubleArray0.getElement(0);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test14906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14906");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        double double2 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.addValue(10.0d);
        int int5 = descriptiveStatistics0.getWindowSize();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test14907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14907");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double double26 = descriptiveStatistics0.getPercentile((double) (short) 10);
        long long27 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test14908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14908");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double31 = descriptiveStatistics30.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.getStandardDeviation();
        double[] doubleArray35 = descriptiveStatistics0.getValues();
        double double36 = descriptiveStatistics0.getMax();
        double double37 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test14909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14909");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str3 = descriptiveStatistics2.toString();
        descriptiveStatistics2.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics2.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        double double11 = descriptiveStatistics7.getMax();
        double double12 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double14 = descriptiveStatistics13.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getMinImpl();
        descriptiveStatistics7.setSumImpl(univariateStatistic15);
        descriptiveStatistics2.setSumImpl(univariateStatistic15);
        double double18 = descriptiveStatistics2.getMin();
        java.lang.String str19 = descriptiveStatistics2.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray30 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double31 = univariateStatistic26.evaluate(doubleArray30);
        descriptiveStatistics20.setMaxImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double double37 = descriptiveStatistics33.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getKurtosisImpl();
        descriptiveStatistics38.setMaxImpl(univariateStatistic48);
        descriptiveStatistics33.setSumImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics59.getKurtosisImpl();
        descriptiveStatistics54.setMaxImpl(univariateStatistic64);
        double double66 = descriptiveStatistics54.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics54.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics54.getVarianceImpl();
        descriptiveStatistics52.setMinImpl(univariateStatistic68);
        descriptiveStatistics33.setMeanImpl(univariateStatistic68);
        descriptiveStatistics20.setSumImpl(univariateStatistic68);
        double double72 = descriptiveStatistics2.apply(univariateStatistic68);
        double double73 = descriptiveStatistics0.apply(univariateStatistic68);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics0.getPercentileImpl();
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str3, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2.0d + "'", double31 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(univariateStatistic75);
    }

    @Test
    public void test14910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14910");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        double[] doubleArray20 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double21 = univariateStatistic16.evaluate(doubleArray20);
        descriptiveStatistics10.setMaxImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double[] doubleArray27 = descriptiveStatistics23.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getMeanImpl();
        descriptiveStatistics10.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic29);
        double double32 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic36);
        double[] doubleArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double41 = univariateStatistic36.evaluate(doubleArray38, 101, 98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
    }

    @Test
    public void test14911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14911");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getGeometricMeanImpl();
        double double9 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = null;
        descriptiveStatistics0.setSumsqImpl(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test14912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14912");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        float float2 = resizableDoubleArray0.getContractionCriteria();
        int int3 = resizableDoubleArray0.getExpansionMode();
        float float4 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 2.0f);
        double double8 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.5f + "'", float2 == 2.5f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.5f + "'", float4 == 2.5f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.0d + "'", double8 == 2.0d);
    }

    @Test
    public void test14913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14913");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        int int22 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics25.setMaxImpl(univariateStatistic35);
        double double37 = descriptiveStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics25.getMinImpl();
        double double39 = descriptiveStatistics25.getMin();
        double double40 = descriptiveStatistics25.getMax();
        double double41 = descriptiveStatistics25.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics42.setWindowSize((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics42.getMaxImpl();
        descriptiveStatistics25.setSkewnessImpl(univariateStatistic46);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic46);
        descriptiveStatistics0.setWindowSize(90);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
    }

    @Test
    public void test14914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14914");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        double double2 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.addValue(10.0d);
        double double5 = descriptiveStatistics0.getGeometricMean();
        double double6 = descriptiveStatistics0.getMin();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        double double8 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.000000000000002d + "'", double5 == 10.000000000000002d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test14915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14915");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double double27 = descriptiveStatistics23.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics28.setMaxImpl(univariateStatistic38);
        descriptiveStatistics23.setSumImpl(univariateStatistic38);
        descriptiveStatistics17.setSumsqImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str43 = descriptiveStatistics42.toString();
        descriptiveStatistics42.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getGeometricMeanImpl();
        double double46 = descriptiveStatistics42.getMax();
        double double47 = descriptiveStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getVarianceImpl();
        descriptiveStatistics17.setMeanImpl(univariateStatistic48);
        descriptiveStatistics0.setSumImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str52 = descriptiveStatistics51.toString();
        descriptiveStatistics51.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics54.getKurtosisImpl();
        double[] doubleArray57 = descriptiveStatistics54.getValues();
        double double58 = descriptiveStatistics54.getVariance();
        double double59 = descriptiveStatistics54.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics54.getKurtosisImpl();
        descriptiveStatistics51.setMaxImpl(univariateStatistic60);
        descriptiveStatistics51.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double65 = descriptiveStatistics64.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getSkewnessImpl();
        descriptiveStatistics51.setMaxImpl(univariateStatistic66);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics69.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics69.setKurtosisImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        descriptiveStatistics74.setKurtosisImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics74.getKurtosisImpl();
        descriptiveStatistics69.setMaxImpl(univariateStatistic79);
        double double81 = descriptiveStatistics69.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics82 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str83 = descriptiveStatistics82.toString();
        double double84 = descriptiveStatistics82.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics85 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics85.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics87 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics87.getSumsqImpl();
        descriptiveStatistics85.setKurtosisImpl(univariateStatistic88);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics85.getKurtosisImpl();
        double double91 = descriptiveStatistics82.apply(univariateStatistic90);
        descriptiveStatistics69.setGeometricMeanImpl(univariateStatistic90);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic90);
        double double94 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic95 = descriptiveStatistics0.getMaxImpl();
        int int96 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic97 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str52, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(descriptiveStatistics82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str83, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(descriptiveStatistics85);
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertNotNull(descriptiveStatistics87);
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(univariateStatistic95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic97);
    }

    @Test
    public void test14916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14916");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        descriptiveStatistics11.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics18.setWindowSize((int) ' ');
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getSkewnessImpl();
        descriptiveStatistics18.setSumsqImpl(univariateStatistic27);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic27);
        long long30 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(1);
        long long33 = descriptiveStatistics32.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics32.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics32.getPercentileImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray36 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int37 = resizableDoubleArray36.getExpansionMode();
        int int38 = resizableDoubleArray36.getNumElements();
        int int39 = resizableDoubleArray36.start();
        resizableDoubleArray36.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray43 = resizableDoubleArray36.getValues();
        double double45 = resizableDoubleArray36.addElementRolling(0.0d);
        resizableDoubleArray36.discardFrontElements((int) (short) 0);
        float float48 = resizableDoubleArray36.getExpansionFactor();
        double[] doubleArray49 = resizableDoubleArray36.getElements();
        float float50 = resizableDoubleArray36.getContractionCriteria();
        resizableDoubleArray36.clear();
        double double53 = resizableDoubleArray36.addElementRolling(100.0d);
        int int54 = resizableDoubleArray36.getExpansionMode();
        double[] doubleArray55 = resizableDoubleArray36.getValues();
        double double56 = univariateStatistic35.evaluate(doubleArray55);
        descriptiveStatistics1.setMaxImpl(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 2.0f + "'", float48 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 2.5f + "'", float50 == 2.5f);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test14917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14917");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics21.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics21.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getVarianceImpl();
        descriptiveStatistics19.setMinImpl(univariateStatistic35);
        descriptiveStatistics0.setMeanImpl(univariateStatistic35);
        int int38 = descriptiveStatistics0.getWindowSize();
        double double39 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
    }

    @Test
    public void test14918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14918");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        descriptiveStatistics9.addValue((double) 2.5f);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics9.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic14);
    }

    @Test
    public void test14919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14919");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        int int7 = resizableDoubleArray0.getNumElements();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (short) 1, 31.0d);
        resizableDoubleArray0.setContractionCriteria(32.0f);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 31.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
    }

    @Test
    public void test14920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14920");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double11 = descriptiveStatistics10.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getGeometricMeanImpl();
        double double13 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        double[] doubleArray17 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics14.getVarianceImpl();
        descriptiveStatistics10.setSumsqImpl(univariateStatistic18);
        double double20 = descriptiveStatistics0.apply(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getVarianceImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic23);
        double double25 = descriptiveStatistics0.getMean();
        double double26 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test14921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14921");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray11 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics8.getVarianceImpl();
        double double13 = descriptiveStatistics0.apply(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double17 = descriptiveStatistics16.getStandardDeviation();
        double double18 = descriptiveStatistics16.getVariance();
        double double19 = descriptiveStatistics16.getSum();
        double double21 = descriptiveStatistics16.getPercentile(2.0d);
        double double22 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str24 = descriptiveStatistics23.toString();
        descriptiveStatistics23.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics23.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        long long31 = descriptiveStatistics28.getN();
        double double32 = descriptiveStatistics28.getMax();
        double double33 = descriptiveStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double35 = descriptiveStatistics34.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getMinImpl();
        descriptiveStatistics28.setSumImpl(univariateStatistic36);
        descriptiveStatistics23.setSumImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics44.getKurtosisImpl();
        descriptiveStatistics39.setMaxImpl(univariateStatistic49);
        double double51 = descriptiveStatistics23.apply(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double54 = descriptiveStatistics53.getStandardDeviation();
        double double55 = descriptiveStatistics53.getVariance();
        double double56 = descriptiveStatistics53.getSum();
        long long57 = descriptiveStatistics53.getN();
        int int58 = descriptiveStatistics53.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getKurtosisImpl();
        descriptiveStatistics59.setMaxImpl(univariateStatistic69);
        double double71 = descriptiveStatistics59.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str73 = descriptiveStatistics72.toString();
        double double74 = descriptiveStatistics72.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics75 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics75.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics77.getSumsqImpl();
        descriptiveStatistics75.setKurtosisImpl(univariateStatistic78);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics75.getKurtosisImpl();
        double double81 = descriptiveStatistics72.apply(univariateStatistic80);
        descriptiveStatistics59.setGeometricMeanImpl(univariateStatistic80);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics59.getPercentileImpl();
        descriptiveStatistics53.setSumImpl(univariateStatistic83);
        descriptiveStatistics23.setPercentileImpl(univariateStatistic83);
        descriptiveStatistics16.setMinImpl(univariateStatistic83);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic83);
        double double88 = descriptiveStatistics0.getSkewness();
        descriptiveStatistics0.addValue(0.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = null;
        descriptiveStatistics0.setMeanImpl(univariateStatistic91);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str24, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str73, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(descriptiveStatistics75);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test14922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14922");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double double26 = descriptiveStatistics0.getPercentile((double) (short) 10);
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics0.getMaxImpl();
        long long30 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 2);
        double double33 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test14923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14923");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        descriptiveStatistics0.clear();
        long long12 = descriptiveStatistics0.getN();
        double double13 = descriptiveStatistics0.getSumsq();
        java.lang.String str14 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test14924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14924");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics13.apply(univariateStatistic21);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getMin();
        double double25 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics0.getMaxImpl();
        double double27 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test14925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14925");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double[] doubleArray3 = descriptiveStatistics1.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double[] doubleArray10 = descriptiveStatistics6.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics6.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics6.getMinImpl();
        double double13 = descriptiveStatistics4.apply(univariateStatistic12);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        double double17 = descriptiveStatistics15.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics15.getMinImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic18);
        double[] doubleArray20 = descriptiveStatistics1.getValues();
        double[] doubleArray21 = descriptiveStatistics1.getSortedValues();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
    }

    @Test
    public void test14926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14926");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', 2.0f, (float) 100);
        int int4 = resizableDoubleArray3.getExpansionMode();
        double[] doubleArray5 = resizableDoubleArray3.getElements();
        resizableDoubleArray3.contract();
        double double8 = resizableDoubleArray3.addElementRolling((double) 0.0f);
        resizableDoubleArray3.contract();
        double double11 = resizableDoubleArray3.addElementRolling((double) 100L);
        float float12 = resizableDoubleArray3.getExpansionFactor();
        int int13 = resizableDoubleArray3.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = resizableDoubleArray3.getElement(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 1 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test14927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14927");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 1, (float) (byte) 100);
        double[] doubleArray3 = resizableDoubleArray2.getElements();
        resizableDoubleArray2.setElement(12, (double) (byte) 10);
        resizableDoubleArray2.setElement(0, (double) 55);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
    }

    @Test
    public void test14928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14928");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getMax();
        double double9 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMinImpl();
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double14 = descriptiveStatistics13.getStandardDeviation();
        double double15 = descriptiveStatistics13.getVariance();
        double double16 = descriptiveStatistics13.getSum();
        long long17 = descriptiveStatistics13.getN();
        int int18 = descriptiveStatistics13.getWindowSize();
        double double19 = descriptiveStatistics13.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics13.getGeometricMeanImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
    }

    @Test
    public void test14929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14929");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        double[] doubleArray20 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double21 = univariateStatistic16.evaluate(doubleArray20);
        descriptiveStatistics10.setMaxImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double[] doubleArray27 = descriptiveStatistics23.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getMeanImpl();
        descriptiveStatistics10.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic29);
        java.lang.String str32 = descriptiveStatistics0.toString();
        double double33 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str32, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
    }

    @Test
    public void test14930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14930");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 1, 0.0d);
        float float10 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setContractionCriteria((float) 91);
        resizableDoubleArray0.setContractionCriteria((float) 102);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
    }

    @Test
    public void test14931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14931");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4');
        int int2 = resizableDoubleArray1.getNumElements();
        resizableDoubleArray1.setElement((int) (short) 10, 11224.999999999996d);
        double double7 = resizableDoubleArray1.addElementRolling(100.00000000000004d);
        int int8 = resizableDoubleArray1.start();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test14932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14932");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((-1), (float) 10, (float) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14933");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        double double7 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double11 = descriptiveStatistics10.getStandardDeviation();
        double double12 = descriptiveStatistics10.getVariance();
        double double13 = descriptiveStatistics10.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str15 = descriptiveStatistics14.toString();
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        double[] doubleArray20 = descriptiveStatistics17.getValues();
        double double21 = descriptiveStatistics17.getVariance();
        double double22 = descriptiveStatistics17.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic23);
        descriptiveStatistics10.setVarianceImpl(univariateStatistic23);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getKurtosisImpl();
        double[] doubleArray30 = descriptiveStatistics27.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics27.getVarianceImpl();
        double double32 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str34 = descriptiveStatistics33.toString();
        double double35 = descriptiveStatistics33.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        descriptiveStatistics33.setSkewnessImpl(univariateStatistic39);
        double double42 = descriptiveStatistics33.getStandardDeviation();
        descriptiveStatistics33.clear();
        double double44 = descriptiveStatistics33.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics50.getKurtosisImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics57.getKurtosisImpl();
        descriptiveStatistics45.setGeometricMeanImpl(univariateStatistic62);
        descriptiveStatistics33.setSumImpl(univariateStatistic62);
        descriptiveStatistics27.setMinImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics27.getSkewnessImpl();
        descriptiveStatistics27.clear();
        double[] doubleArray68 = descriptiveStatistics27.getSortedValues();
        double double69 = univariateStatistic23.evaluate(doubleArray68);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str15, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str34, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test14934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14934");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getSumImpl();
        long long9 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test14935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14935");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getVarianceImpl();
        double[] doubleArray15 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getSumImpl();
        double double17 = descriptiveStatistics0.getMax();
        double double18 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        descriptiveStatistics21.addValue((double) 0);
        int int27 = descriptiveStatistics21.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics21.getGeometricMeanImpl();
        descriptiveStatistics21.setWindowSize((int) (byte) 1);
        long long31 = descriptiveStatistics21.getN();
        double double32 = descriptiveStatistics21.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double35 = descriptiveStatistics34.getStandardDeviation();
        long long36 = descriptiveStatistics34.getN();
        double double37 = descriptiveStatistics34.getMin();
        double double38 = descriptiveStatistics34.getMax();
        double double39 = descriptiveStatistics34.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double42 = descriptiveStatistics41.getStandardDeviation();
        long long43 = descriptiveStatistics41.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics41.getSkewnessImpl();
        java.lang.String str45 = descriptiveStatistics41.toString();
        double double46 = descriptiveStatistics41.getVariance();
        descriptiveStatistics41.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        descriptiveStatistics41.setSkewnessImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        descriptiveStatistics55.setKurtosisImpl(univariateStatistic58);
        descriptiveStatistics55.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics55.getSkewnessImpl();
        descriptiveStatistics41.setVarianceImpl(univariateStatistic61);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics41.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics41.getSkewnessImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic64);
        descriptiveStatistics21.setMeanImpl(univariateStatistic64);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic64);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray69 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4');
        int int70 = resizableDoubleArray69.getNumElements();
        int int71 = resizableDoubleArray69.getNumElements();
        double[] doubleArray72 = resizableDoubleArray69.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double75 = univariateStatistic64.evaluate(doubleArray72, 93, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test14936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14936");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.setElement((int) 'a', (double) (short) 0);
        resizableDoubleArray1.clear();
        resizableDoubleArray1.addElement(152.99999999999997d);
    }

    @Test
    public void test14937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14937");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        double[] doubleArray6 = descriptiveStatistics2.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics2.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics2.getMeanImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        java.lang.String str11 = descriptiveStatistics1.toString();
        double double12 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics1.getPercentileImpl();
        double double15 = descriptiveStatistics1.getMin();
        descriptiveStatistics1.setWindowSize(14);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test14938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14938");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getGeometricMeanImpl();
        double double14 = descriptiveStatistics0.getStandardDeviation();
        double double15 = descriptiveStatistics0.getMin();
        double double16 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test14939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14939");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double double15 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getGeometricMeanImpl();
        int int17 = descriptiveStatistics1.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getSumsqImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test14940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14940");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getSum();
        long long21 = descriptiveStatistics0.getN();
        java.lang.String str22 = descriptiveStatistics0.toString();
        double double23 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = null;
        descriptiveStatistics0.setMinImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        double[] doubleArray30 = descriptiveStatistics26.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getSumImpl();
        double double32 = descriptiveStatistics26.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics26.getSkewnessImpl();
        double double34 = descriptiveStatistics26.getSum();
        descriptiveStatistics26.addValue(2.5d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getKurtosisImpl();
        long long40 = descriptiveStatistics37.getN();
        double[] doubleArray41 = descriptiveStatistics37.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getSumImpl();
        double double43 = descriptiveStatistics37.getStandardDeviation();
        double double44 = descriptiveStatistics37.getVariance();
        double double45 = descriptiveStatistics37.getMin();
        double double46 = descriptiveStatistics37.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics37.getPercentileImpl();
        double double48 = descriptiveStatistics37.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic49);
        double double51 = descriptiveStatistics26.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics26.getPercentileImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2.5d + "'", double51 == 2.5d);
        org.junit.Assert.assertNotNull(univariateStatistic52);
    }

    @Test
    public void test14941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14941");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setContractionCriteria(10.0f);
        resizableDoubleArray0.clear();
        int int14 = resizableDoubleArray0.getNumElements();
        int int15 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test14942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14942");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        double double7 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double10 = descriptiveStatistics9.getStandardDeviation();
        long long11 = descriptiveStatistics9.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics9.getSkewnessImpl();
        java.lang.String str13 = descriptiveStatistics9.toString();
        descriptiveStatistics9.addValue(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics19.setMaxImpl(univariateStatistic29);
        double double31 = descriptiveStatistics19.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics19.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics19.getVarianceImpl();
        descriptiveStatistics17.setMinImpl(univariateStatistic33);
        descriptiveStatistics9.setSumsqImpl(univariateStatistic33);
        long long36 = descriptiveStatistics9.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        double[] doubleArray46 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double47 = univariateStatistic42.evaluate(doubleArray46);
        descriptiveStatistics9.setSkewnessImpl(univariateStatistic42);
        descriptiveStatistics0.setMinImpl(univariateStatistic42);
        double double50 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2.0d + "'", double47 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test14943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14943");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        float float5 = resizableDoubleArray0.getContractionCriteria();
        float float6 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.5f + "'", float6 == 2.5f);
    }

    @Test
    public void test14944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14944");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getMean();
        double double12 = descriptiveStatistics0.getKurtosis();
        descriptiveStatistics0.clear();
        double double14 = descriptiveStatistics0.getGeometricMean();
        double double15 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.setWindowSize(36);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test14945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14945");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(91, (float) 103);
    }

    @Test
    public void test14946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14946");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        descriptiveStatistics1.addValue(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        double double23 = descriptiveStatistics11.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics11.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics11.getVarianceImpl();
        descriptiveStatistics9.setMinImpl(univariateStatistic25);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        long long31 = descriptiveStatistics28.getN();
        double[] doubleArray32 = descriptiveStatistics28.getValues();
        int int33 = descriptiveStatistics28.getWindowSize();
        double double34 = descriptiveStatistics28.getMax();
        double[] doubleArray35 = descriptiveStatistics28.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double38 = descriptiveStatistics37.getStandardDeviation();
        double[] doubleArray39 = descriptiveStatistics37.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getKurtosisImpl();
        long long45 = descriptiveStatistics42.getN();
        double[] doubleArray46 = descriptiveStatistics42.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getMinImpl();
        double double49 = descriptiveStatistics40.apply(univariateStatistic48);
        descriptiveStatistics37.setSumsqImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        double double53 = descriptiveStatistics51.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics51.getMinImpl();
        descriptiveStatistics37.setSkewnessImpl(univariateStatistic54);
        descriptiveStatistics28.setSkewnessImpl(univariateStatistic54);
        descriptiveStatistics1.setMinImpl(univariateStatistic54);
        double double58 = descriptiveStatistics1.getSkewness();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test14947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14947");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double double13 = resizableDoubleArray0.getElement(10);
        float float14 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        double double18 = resizableDoubleArray0.getElement(52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.5f + "'", float14 == 2.5f);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test14948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14948");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double3 = descriptiveStatistics2.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray10 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int11 = resizableDoubleArray10.start();
        resizableDoubleArray10.addElement((double) 10);
        int int14 = resizableDoubleArray10.getExpansionMode();
        resizableDoubleArray10.addElement((double) (-1L));
        double[] doubleArray17 = resizableDoubleArray10.getElements();
        double double20 = univariateStatistic9.evaluate(doubleArray17, (int) (byte) 1, 1);
        double double21 = descriptiveStatistics2.apply(univariateStatistic9);
        double double22 = descriptiveStatistics2.getSum();
        long long23 = descriptiveStatistics2.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getVarianceImpl();
        descriptiveStatistics2.setKurtosisImpl(univariateStatistic26);
        double double28 = descriptiveStatistics1.apply(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics1.getMaxImpl();
        double double30 = descriptiveStatistics1.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics1.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
    }

    @Test
    public void test14949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14949");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getMinImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic10);
        double[] doubleArray12 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test14950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14950");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getVarianceImpl();
        double double9 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str11 = descriptiveStatistics10.toString();
        double double12 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic16);
        double double19 = descriptiveStatistics10.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getMinImpl();
        descriptiveStatistics10.setVarianceImpl(univariateStatistic24);
        int int26 = descriptiveStatistics10.getWindowSize();
        java.lang.String str27 = descriptiveStatistics10.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double30 = descriptiveStatistics29.getStandardDeviation();
        long long31 = descriptiveStatistics29.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics29.getMinImpl();
        double double33 = descriptiveStatistics29.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getKurtosisImpl();
        double[] doubleArray44 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double45 = univariateStatistic40.evaluate(doubleArray44);
        descriptiveStatistics34.setMaxImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getKurtosisImpl();
        long long50 = descriptiveStatistics47.getN();
        double[] doubleArray51 = descriptiveStatistics47.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics47.getMeanImpl();
        descriptiveStatistics34.setGeometricMeanImpl(univariateStatistic53);
        descriptiveStatistics29.setGeometricMeanImpl(univariateStatistic53);
        descriptiveStatistics10.setSumImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic57);
        double double59 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.0d + "'", double45 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
    }

    @Test
    public void test14951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14951");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double[] doubleArray21 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double22 = univariateStatistic17.evaluate(doubleArray21);
        descriptiveStatistics11.setMaxImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        double[] doubleArray28 = descriptiveStatistics24.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getMeanImpl();
        descriptiveStatistics11.setGeometricMeanImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        descriptiveStatistics33.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics33.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics33.getPercentileImpl();
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic40);
        descriptiveStatistics0.setMeanImpl(univariateStatistic40);
        double double43 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getKurtosisImpl();
        long long47 = descriptiveStatistics44.getN();
        double[] doubleArray48 = descriptiveStatistics44.getValues();
        double double49 = descriptiveStatistics44.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics44.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics44.getMaxImpl();
        double double53 = descriptiveStatistics0.apply(univariateStatistic52);
        double double54 = descriptiveStatistics0.getVariance();
        double[] doubleArray55 = descriptiveStatistics0.getSortedValues();
        double double56 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.0d + "'", double22 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test14952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14952");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        double double7 = descriptiveStatistics0.getMin();
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getSum();
        double double10 = descriptiveStatistics0.getMin();
        double double11 = descriptiveStatistics0.getMean();
        java.lang.String str12 = descriptiveStatistics0.toString();
        long long13 = descriptiveStatistics0.getN();
        double double14 = descriptiveStatistics0.getMax();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = descriptiveStatistics0.getPercentile(100.00000000000004d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 100.00000000000004");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test14953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14953");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        descriptiveStatistics1.addValue((double) 101);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics9.getSumsqImpl();
        double double17 = descriptiveStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        double[] doubleArray22 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        double[] doubleArray32 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double33 = univariateStatistic28.evaluate(doubleArray32);
        descriptiveStatistics19.setMaxImpl(univariateStatistic28);
        descriptiveStatistics9.setMaxImpl(univariateStatistic28);
        double double36 = descriptiveStatistics9.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str38 = descriptiveStatistics37.toString();
        double double39 = descriptiveStatistics37.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        descriptiveStatistics37.setSkewnessImpl(univariateStatistic43);
        double double46 = descriptiveStatistics37.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double49 = descriptiveStatistics48.getStandardDeviation();
        long long50 = descriptiveStatistics48.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics48.getMinImpl();
        descriptiveStatistics37.setVarianceImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double55 = descriptiveStatistics54.getStandardDeviation();
        long long56 = descriptiveStatistics54.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics54.getSkewnessImpl();
        java.lang.String str58 = descriptiveStatistics54.toString();
        double double59 = descriptiveStatistics54.getVariance();
        descriptiveStatistics54.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        descriptiveStatistics62.setKurtosisImpl(univariateStatistic65);
        descriptiveStatistics54.setSkewnessImpl(univariateStatistic65);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        descriptiveStatistics68.setKurtosisImpl(univariateStatistic71);
        descriptiveStatistics68.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics68.getSkewnessImpl();
        descriptiveStatistics54.setVarianceImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics54.getSumImpl();
        descriptiveStatistics37.setMaxImpl(univariateStatistic76);
        descriptiveStatistics9.setSkewnessImpl(univariateStatistic76);
        descriptiveStatistics1.setMeanImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics1.getMaxImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double82 = descriptiveStatistics1.getElement(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 52 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.0d + "'", double33 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str38, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str58, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(univariateStatistic80);
    }

    @Test
    public void test14954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14954");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.addElement((double) 54);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
    }

    @Test
    public void test14955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14955");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double[] doubleArray10 = descriptiveStatistics6.getValues();
        double double11 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double14 = descriptiveStatistics13.getStandardDeviation();
        long long15 = descriptiveStatistics13.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics13.getKurtosisImpl();
        descriptiveStatistics6.setSumImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics6.getMaxImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic18);
        double double20 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test14956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14956");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getKurtosis();
        java.lang.String str5 = descriptiveStatistics0.toString();
        double double6 = descriptiveStatistics0.getMin();
        java.lang.String str7 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double double10 = descriptiveStatistics0.getMax();
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getMaxImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test14957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14957");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        double[] doubleArray2 = resizableDoubleArray1.getElements();
        double[] doubleArray3 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.clear();
        double double6 = resizableDoubleArray1.addElementRolling(2704.0d);
        resizableDoubleArray1.setContractionCriteria((float) 100);
        resizableDoubleArray1.setElement(42, (double) 52.5f);
        resizableDoubleArray1.discardFrontElements(42);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test14958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14958");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double31 = descriptiveStatistics30.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.getStandardDeviation();
        double[] doubleArray35 = descriptiveStatistics0.getValues();
        double double36 = descriptiveStatistics0.getKurtosis();
        int int37 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str39 = descriptiveStatistics38.toString();
        double double40 = descriptiveStatistics38.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        descriptiveStatistics38.setSkewnessImpl(univariateStatistic44);
        double double47 = descriptiveStatistics38.getStandardDeviation();
        descriptiveStatistics38.clear();
        descriptiveStatistics38.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics51.getKurtosisImpl();
        double[] doubleArray54 = descriptiveStatistics51.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getKurtosisImpl();
        long long58 = descriptiveStatistics55.getN();
        double[] doubleArray59 = descriptiveStatistics55.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics55.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics55.getMinImpl();
        double double62 = descriptiveStatistics55.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str64 = descriptiveStatistics63.toString();
        double double65 = descriptiveStatistics63.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        descriptiveStatistics63.setSkewnessImpl(univariateStatistic69);
        double double72 = descriptiveStatistics63.getStandardDeviation();
        descriptiveStatistics63.clear();
        double double74 = descriptiveStatistics63.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics63.getGeometricMeanImpl();
        descriptiveStatistics55.setGeometricMeanImpl(univariateStatistic75);
        descriptiveStatistics51.setSumsqImpl(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics51.getMeanImpl();
        descriptiveStatistics38.setSumImpl(univariateStatistic78);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = null;
        descriptiveStatistics38.setMeanImpl(univariateStatistic80);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics38.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic82);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str39, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str64, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic84);
    }

    @Test
    public void test14959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14959");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        float float4 = resizableDoubleArray3.getContractionCriteria();
        int int5 = resizableDoubleArray3.getExpansionMode();
        int int6 = resizableDoubleArray3.start();
        resizableDoubleArray3.setElement((int) (short) 1, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray3.setExpansionMode((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 32.0f + "'", float4 == 32.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test14960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14960");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        double double17 = descriptiveStatistics0.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSumsqImpl();
        double[] doubleArray20 = descriptiveStatistics0.getValues();
        double double21 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test14961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14961");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        int int9 = resizableDoubleArray0.getExpansionMode();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(0, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test14962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14962");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics16.getStandardDeviation();
        double double23 = descriptiveStatistics16.getSum();
        int int24 = descriptiveStatistics16.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getMaxImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic25);
        java.lang.String str27 = descriptiveStatistics0.toString();
        double double28 = descriptiveStatistics0.getMean();
        double[] doubleArray29 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics0.getSumsqImpl();
        double double31 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test14963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14963");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        double double13 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getSkewnessImpl();
        double double15 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getKurtosisImpl();
        descriptiveStatistics16.setGeometricMeanImpl(univariateStatistic33);
        double double35 = descriptiveStatistics16.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double37 = descriptiveStatistics36.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getKurtosisImpl();
        long long41 = descriptiveStatistics38.getN();
        descriptiveStatistics38.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics49.getKurtosisImpl();
        descriptiveStatistics44.setMaxImpl(univariateStatistic54);
        double double56 = descriptiveStatistics44.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics44.getMinImpl();
        descriptiveStatistics38.setMinImpl(univariateStatistic57);
        descriptiveStatistics36.setMeanImpl(univariateStatistic57);
        descriptiveStatistics16.setSumImpl(univariateStatistic57);
        descriptiveStatistics0.setMeanImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        descriptiveStatistics63.setKurtosisImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        descriptiveStatistics68.setKurtosisImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics68.getKurtosisImpl();
        descriptiveStatistics63.setMaxImpl(univariateStatistic73);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics75 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics75.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics77.getSumsqImpl();
        descriptiveStatistics75.setKurtosisImpl(univariateStatistic78);
        double double80 = descriptiveStatistics63.apply(univariateStatistic78);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics63.getMaxImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic81);
        double double83 = descriptiveStatistics0.getVariance();
        int int84 = descriptiveStatistics0.getWindowSize();
        double double85 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics75);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test14964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14964");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        int int1 = descriptiveStatistics0.getWindowSize();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics6.getKurtosisImpl();
        double double12 = descriptiveStatistics3.apply(univariateStatistic11);
        double double13 = descriptiveStatistics3.getSumsq();
        double double14 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics3.setSumsqImpl(univariateStatistic20);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic20);
        double double23 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str25 = descriptiveStatistics24.toString();
        descriptiveStatistics24.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics24.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        long long32 = descriptiveStatistics29.getN();
        double double33 = descriptiveStatistics29.getMax();
        double double34 = descriptiveStatistics29.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double36 = descriptiveStatistics35.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getMinImpl();
        descriptiveStatistics29.setSumImpl(univariateStatistic37);
        descriptiveStatistics24.setSumImpl(univariateStatistic37);
        double double40 = descriptiveStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double43 = descriptiveStatistics42.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getGeometricMeanImpl();
        double double45 = descriptiveStatistics42.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics46.getKurtosisImpl();
        long long49 = descriptiveStatistics46.getN();
        double[] doubleArray50 = descriptiveStatistics46.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getSumImpl();
        descriptiveStatistics42.setSkewnessImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double55 = descriptiveStatistics54.getStandardDeviation();
        long long56 = descriptiveStatistics54.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics54.getSkewnessImpl();
        java.lang.String str58 = descriptiveStatistics54.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getKurtosisImpl();
        descriptiveStatistics54.setMeanImpl(univariateStatistic61);
        double double63 = descriptiveStatistics54.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str65 = descriptiveStatistics64.toString();
        descriptiveStatistics64.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics64.getKurtosisImpl();
        descriptiveStatistics54.setGeometricMeanImpl(univariateStatistic68);
        descriptiveStatistics42.setGeometricMeanImpl(univariateStatistic68);
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic68);
        double double72 = descriptiveStatistics0.apply(univariateStatistic68);
        java.lang.Class<?> wildcardClass73 = univariateStatistic68.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass73);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.moment.Kurtosis cannot be cast to org.apache.commons.math.stat.descriptive.DescriptiveStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str58, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str65, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test14965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14965");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.contract();
        resizableDoubleArray1.clear();
        resizableDoubleArray1.setContractionCriteria((float) 33);
        double double7 = resizableDoubleArray1.addElementRolling(6.25d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test14966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14966");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.addValue((double) 'a');
        long long19 = descriptiveStatistics0.getN();
        double double20 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test14967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14967");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        double double9 = resizableDoubleArray0.addElementRolling(1.0d);
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) -1);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test14968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14968");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.clear();
        long long8 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        double double14 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics12.setSkewnessImpl(univariateStatistic18);
        double double21 = descriptiveStatistics12.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double24 = descriptiveStatistics23.getStandardDeviation();
        long long25 = descriptiveStatistics23.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics23.getMinImpl();
        descriptiveStatistics12.setVarianceImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics12.getMeanImpl();
        descriptiveStatistics9.setMeanImpl(univariateStatistic28);
        int int30 = descriptiveStatistics9.getWindowSize();
        double double31 = descriptiveStatistics9.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics9.getPercentileImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getKurtosisImpl();
        long long38 = descriptiveStatistics35.getN();
        double[] doubleArray39 = descriptiveStatistics35.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getSumImpl();
        double double41 = descriptiveStatistics35.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double44 = descriptiveStatistics43.getStandardDeviation();
        long long45 = descriptiveStatistics43.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics43.getSkewnessImpl();
        descriptiveStatistics35.setSkewnessImpl(univariateStatistic46);
        double double48 = descriptiveStatistics35.getStandardDeviation();
        double double49 = descriptiveStatistics35.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics35.getSkewnessImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
    }

    @Test
    public void test14969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14969");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement((int) (byte) 100, (double) 100L);
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        int int7 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.discardFrontElements((int) (short) 1);
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 101 + "'", int7 == 101);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
    }

    @Test
    public void test14970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14970");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        int int5 = descriptiveStatistics0.getWindowSize();
        double double6 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        double double9 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics7.setSkewnessImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getSkewnessImpl();
        descriptiveStatistics7.setSkewnessImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics7.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic24);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray26 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int27 = resizableDoubleArray26.getExpansionMode();
        resizableDoubleArray26.addElement((double) 0);
        double double31 = resizableDoubleArray26.addElementRolling((double) 0.0f);
        int int32 = resizableDoubleArray26.start();
        resizableDoubleArray26.addElement((double) 1.0f);
        double[] doubleArray35 = resizableDoubleArray26.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double38 = univariateStatistic24.evaluate(doubleArray35, 36, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
    }

    @Test
    public void test14971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14971");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        double double7 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test14972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14972");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        long long4 = descriptiveStatistics0.getN();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        descriptiveStatistics0.addValue(97.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic8);
    }

    @Test
    public void test14973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14973");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        int int8 = descriptiveStatistics0.getWindowSize();
        double double9 = descriptiveStatistics0.getVariance();
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double17 = descriptiveStatistics16.getStandardDeviation();
        double double18 = descriptiveStatistics16.getVariance();
        double double19 = descriptiveStatistics16.getSum();
        long long20 = descriptiveStatistics16.getN();
        int int21 = descriptiveStatistics16.getWindowSize();
        double double22 = descriptiveStatistics16.getMax();
        descriptiveStatistics16.addValue((double) 32.0f);
        double double26 = descriptiveStatistics16.getPercentile((double) 10L);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics16.getMinImpl();
        double double28 = descriptiveStatistics0.apply(univariateStatistic27);
        double double29 = descriptiveStatistics0.getMin();
        long long30 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test14974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14974");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(31);
        int int2 = resizableDoubleArray1.getNumElements();
        int int3 = resizableDoubleArray1.getExpansionMode();
        resizableDoubleArray1.setContractionCriteria(98.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test14975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14975");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        double double14 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getMeanImpl();
        double double16 = descriptiveStatistics0.getStandardDeviation();
        int int17 = descriptiveStatistics0.getWindowSize();
        double double18 = descriptiveStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test14976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14976");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        double double8 = descriptiveStatistics0.getVariance();
        double double9 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test14977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14977");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        long long7 = descriptiveStatistics0.getN();
        int int8 = descriptiveStatistics0.getWindowSize();
        double double9 = descriptiveStatistics0.getGeometricMean();
        long long10 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test14978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14978");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSumsq();
        double double12 = descriptiveStatistics0.getMin();
        double double13 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test14979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14979");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        double double6 = descriptiveStatistics0.getVariance();
        java.lang.String str7 = descriptiveStatistics0.toString();
        double double8 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test14980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14980");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        descriptiveStatistics10.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        double[] doubleArray26 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double27 = univariateStatistic22.evaluate(doubleArray26);
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics0.getSkewnessImpl();
        double double33 = descriptiveStatistics0.getVariance();
        double double34 = descriptiveStatistics0.getSum();
        double double35 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str38 = descriptiveStatistics37.toString();
        double double39 = descriptiveStatistics37.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        descriptiveStatistics37.setSkewnessImpl(univariateStatistic43);
        double double46 = descriptiveStatistics37.getStandardDeviation();
        double double47 = descriptiveStatistics37.getMean();
        double double48 = descriptiveStatistics37.getVariance();
        descriptiveStatistics37.addValue((double) 35.0f);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics37.getVarianceImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2.0d + "'", double27 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str38, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic51);
    }

    @Test
    public void test14981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14981");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getKurtosisImpl();
        long long23 = descriptiveStatistics20.getN();
        double[] doubleArray24 = descriptiveStatistics20.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics20.getSumImpl();
        double double26 = descriptiveStatistics20.getVariance();
        double double27 = descriptiveStatistics20.getMax();
        int int28 = descriptiveStatistics20.getWindowSize();
        double double29 = descriptiveStatistics20.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics20.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic30);
        double double32 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getKurtosisImpl();
        double double41 = descriptiveStatistics35.getStandardDeviation();
        double double42 = descriptiveStatistics35.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics35.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double46 = descriptiveStatistics45.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getGeometricMeanImpl();
        double double48 = descriptiveStatistics45.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics49.getKurtosisImpl();
        double[] doubleArray52 = descriptiveStatistics49.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics49.getVarianceImpl();
        descriptiveStatistics45.setSumsqImpl(univariateStatistic53);
        double double55 = descriptiveStatistics35.apply(univariateStatistic53);
        long long56 = descriptiveStatistics35.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics35.getKurtosisImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray58 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int59 = resizableDoubleArray58.getExpansionMode();
        resizableDoubleArray58.addElement((double) 0);
        double double63 = resizableDoubleArray58.addElementRolling((double) 0.0f);
        resizableDoubleArray58.setElement((int) (byte) 10, (double) (short) -1);
        float float67 = resizableDoubleArray58.getExpansionFactor();
        double[] doubleArray68 = resizableDoubleArray58.getElements();
        double[] doubleArray69 = resizableDoubleArray58.getElements();
        double[] doubleArray70 = resizableDoubleArray58.getValues();
        double double71 = univariateStatistic57.evaluate(doubleArray70);
        double double72 = univariateStatistic34.evaluate(doubleArray70);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 2.0f + "'", float67 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
    }

    @Test
    public void test14982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14982");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        double[] doubleArray20 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics21.setWindowSize((int) (byte) -1);
        int int24 = descriptiveStatistics21.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics21.setGeometricMeanImpl(univariateStatistic28);
        double double31 = descriptiveStatistics0.apply(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics0.getMaxImpl();
        double double33 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double36 = descriptiveStatistics35.getStandardDeviation();
        long long37 = descriptiveStatistics35.getN();
        double double38 = descriptiveStatistics35.getMin();
        double double39 = descriptiveStatistics35.getMax();
        double double40 = descriptiveStatistics35.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double43 = descriptiveStatistics42.getStandardDeviation();
        long long44 = descriptiveStatistics42.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getSkewnessImpl();
        java.lang.String str46 = descriptiveStatistics42.toString();
        double double47 = descriptiveStatistics42.getVariance();
        descriptiveStatistics42.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        descriptiveStatistics42.setSkewnessImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        descriptiveStatistics56.setKurtosisImpl(univariateStatistic59);
        descriptiveStatistics56.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics56.getSkewnessImpl();
        descriptiveStatistics42.setVarianceImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics42.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics42.getSkewnessImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic65);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics35.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics35.getGeometricMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic68);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str46, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
    }

    @Test
    public void test14983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14983");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.addElement(10.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = resizableDoubleArray0.getElement(98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 98 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
    }

    @Test
    public void test14984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14984");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double12 = descriptiveStatistics11.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getSumImpl();
        double[] doubleArray16 = descriptiveStatistics0.getSortedValues();
        long long17 = descriptiveStatistics0.getN();
        double double18 = descriptiveStatistics0.getMax();
        double double19 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
    }

    @Test
    public void test14985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14985");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        int int7 = resizableDoubleArray0.start();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        int int9 = resizableDoubleArray0.getExpansionMode();
        double double11 = resizableDoubleArray0.addElementRolling((double) 1L);
        resizableDoubleArray0.addElement(23.583333333333332d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test14986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14986");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSumImpl(univariateStatistic8);
        descriptiveStatistics0.setWindowSize((int) (byte) 1);
        java.lang.String str12 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        double[] doubleArray18 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics14.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getMinImpl();
        double double21 = descriptiveStatistics14.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        descriptiveStatistics22.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getKurtosisImpl();
        long long30 = descriptiveStatistics27.getN();
        double double31 = descriptiveStatistics27.getMax();
        double double32 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double34 = descriptiveStatistics33.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getMinImpl();
        descriptiveStatistics27.setSumImpl(univariateStatistic35);
        descriptiveStatistics22.setSumImpl(univariateStatistic35);
        double double38 = descriptiveStatistics22.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics22.getVarianceImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic39);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic39);
        double double42 = descriptiveStatistics0.getMean();
        double double43 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test14987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14987");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.contract();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test14988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14988");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getMaxImpl();
        descriptiveStatistics1.addValue((-1.0d));
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getMaxImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic12);
    }

    @Test
    public void test14989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14989");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test14990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14990");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getMean();
        double[] doubleArray5 = descriptiveStatistics0.getValues();
        double double6 = descriptiveStatistics0.getMin();
        double double7 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
    }

    @Test
    public void test14991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14991");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getMeanImpl();
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        descriptiveStatistics18.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getGeometricMeanImpl();
        double double22 = descriptiveStatistics18.getMax();
        double[] doubleArray23 = descriptiveStatistics18.getSortedValues();
        double double24 = descriptiveStatistics18.getMean();
        double double25 = descriptiveStatistics18.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double28 = descriptiveStatistics27.getMax();
        double double29 = descriptiveStatistics27.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics27.getMaxImpl();
        descriptiveStatistics18.setMeanImpl(univariateStatistic30);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic30);
        double double34 = descriptiveStatistics0.getPercentile((double) 1.0f);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test14992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14992");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setElement(100, 0.0d);
        double[] doubleArray8 = resizableDoubleArray0.getValues();
        double double10 = resizableDoubleArray0.getElement(0);
        resizableDoubleArray0.addElement((double) 1.0f);
        resizableDoubleArray0.addElement((double) 10.0f);
        float float15 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray16 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 2.0f + "'", float15 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 10.0]");
    }

    @Test
    public void test14993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14993");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double5 = descriptiveStatistics1.getGeometricMean();
        double double6 = descriptiveStatistics1.getMin();
        double double7 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getMinImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
    }

    @Test
    public void test14994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14994");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getVariance();
        double double8 = descriptiveStatistics0.getSumsq();
        double double9 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test14995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14995");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        double double5 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getMinImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test14996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14996");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics11.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        double double21 = descriptiveStatistics17.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getKurtosisImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic32);
        descriptiveStatistics17.setSumImpl(univariateStatistic32);
        descriptiveStatistics11.setSumsqImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str37 = descriptiveStatistics36.toString();
        descriptiveStatistics36.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics36.getGeometricMeanImpl();
        double double40 = descriptiveStatistics36.getMax();
        double double41 = descriptiveStatistics36.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics36.getVarianceImpl();
        descriptiveStatistics11.setMeanImpl(univariateStatistic42);
        double double44 = descriptiveStatistics11.getMean();
        double double45 = descriptiveStatistics11.getMean();
        double double46 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getKurtosisImpl();
        double[] doubleArray50 = descriptiveStatistics47.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics47.getVarianceImpl();
        double double52 = descriptiveStatistics47.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics47.getGeometricMeanImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic53);
        double double55 = descriptiveStatistics0.apply(univariateStatistic53);
        double double56 = descriptiveStatistics0.getSumsq();
        double double57 = descriptiveStatistics0.getSum();
        double double58 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
    }

    @Test
    public void test14997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14997");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement(Double.NaN);
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setElement((int) 'a', 52.0d);
        resizableDoubleArray0.addElement((double) 91);
        double double13 = resizableDoubleArray0.addElementRolling(97.0d);
        float float14 = resizableDoubleArray0.getContractionCriteria();
        double double16 = resizableDoubleArray0.getElement(32);
        resizableDoubleArray0.setElement((int) '#', (double) 52);
        double[] doubleArray20 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[NaN, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.5f + "'", float14 == 2.5f);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52.0, 91.0, 97.0]");
    }

    @Test
    public void test14998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14998");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        int int6 = resizableDoubleArray0.getNumElements();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.addElement(3937519.5312499977d);
        resizableDoubleArray0.discardFrontElements((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test14999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14999");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        double double11 = descriptiveStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double double18 = descriptiveStatistics9.apply(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double21 = descriptiveStatistics20.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getGeometricMeanImpl();
        descriptiveStatistics9.setMeanImpl(univariateStatistic22);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double27 = descriptiveStatistics26.getStandardDeviation();
        long long28 = descriptiveStatistics26.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics26.getMinImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray30 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int31 = resizableDoubleArray30.getExpansionMode();
        resizableDoubleArray30.addElement(0.0d);
        int int34 = resizableDoubleArray30.getExpansionMode();
        double[] doubleArray35 = resizableDoubleArray30.getElements();
        double double36 = univariateStatistic29.evaluate(doubleArray35);
        descriptiveStatistics0.setMinImpl(univariateStatistic29);
        double double38 = descriptiveStatistics0.getVariance();
        double double39 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test15000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test15000");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        int int22 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getKurtosisImpl();
        descriptiveStatistics0.addValue(52.0d);
        descriptiveStatistics0.addValue(7867.263046424288d);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        int int6 = resizableDoubleArray0.getNumElements();
        int int7 = resizableDoubleArray0.getNumElements();
        int int8 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) '4', 1.0d);
        resizableDoubleArray0.addElement(0.34098781653129445d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        double double18 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = null;
        descriptiveStatistics19.setSkewnessImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics19.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics19.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic28);
        double double30 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double33 = descriptiveStatistics32.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics32.getGeometricMeanImpl();
        descriptiveStatistics32.setWindowSize(100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics32.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getKurtosisImpl();
        double[] doubleArray49 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double50 = univariateStatistic45.evaluate(doubleArray49);
        descriptiveStatistics39.setMaxImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics52.getKurtosisImpl();
        long long55 = descriptiveStatistics52.getN();
        double[] doubleArray56 = descriptiveStatistics52.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics52.getMeanImpl();
        descriptiveStatistics39.setGeometricMeanImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getKurtosisImpl();
        long long63 = descriptiveStatistics60.getN();
        double double64 = descriptiveStatistics60.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics67.getSumsqImpl();
        descriptiveStatistics65.setKurtosisImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        descriptiveStatistics70.setKurtosisImpl(univariateStatistic73);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics70.getKurtosisImpl();
        descriptiveStatistics65.setMaxImpl(univariateStatistic75);
        descriptiveStatistics60.setSumImpl(univariateStatistic75);
        descriptiveStatistics39.setSkewnessImpl(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics39.getSkewnessImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray80 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int81 = resizableDoubleArray80.getExpansionMode();
        resizableDoubleArray80.addElement((double) 0);
        double double85 = resizableDoubleArray80.addElementRolling((double) 0.0f);
        resizableDoubleArray80.setElement((int) (byte) 10, (double) (short) -1);
        int int89 = resizableDoubleArray80.getNumElements();
        int int90 = resizableDoubleArray80.start();
        double[] doubleArray91 = resizableDoubleArray80.getElements();
        double double92 = univariateStatistic79.evaluate(doubleArray91);
        double double93 = univariateStatistic38.evaluate(doubleArray91);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2.0d + "'", double50 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 11 + "'", int89 == 11);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) ' ', (float) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray2.setContractionCriteria((float) 90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        double double13 = descriptiveStatistics0.getMax();
        double double14 = descriptiveStatistics0.getMean();
        long long15 = descriptiveStatistics0.getN();
        descriptiveStatistics0.clear();
        descriptiveStatistics0.addValue(100.00000000000004d);
        double double19 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double22 = descriptiveStatistics21.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getGeometricMeanImpl();
        double double24 = descriptiveStatistics21.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getKurtosisImpl();
        long long28 = descriptiveStatistics25.getN();
        double[] doubleArray29 = descriptiveStatistics25.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getSumImpl();
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic30);
        descriptiveStatistics21.clear();
        double double33 = descriptiveStatistics21.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        long long37 = descriptiveStatistics34.getN();
        descriptiveStatistics34.addValue((double) 0);
        int int40 = descriptiveStatistics34.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        descriptiveStatistics41.setMaxImpl(univariateStatistic51);
        double double53 = descriptiveStatistics41.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics41.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics41.getVarianceImpl();
        descriptiveStatistics34.setMeanImpl(univariateStatistic55);
        descriptiveStatistics21.setMaxImpl(univariateStatistic55);
        double double58 = descriptiveStatistics21.getSumsq();
        long long59 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics21.getMaxImpl();
        double double61 = descriptiveStatistics21.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double64 = descriptiveStatistics63.getStandardDeviation();
        long long65 = descriptiveStatistics63.getN();
        double double66 = descriptiveStatistics63.getMin();
        double double67 = descriptiveStatistics63.getMax();
        double double68 = descriptiveStatistics63.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getKurtosisImpl();
        descriptiveStatistics63.setSkewnessImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics63.getGeometricMeanImpl();
        double double74 = descriptiveStatistics63.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics63.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double78 = descriptiveStatistics77.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics77.getSumImpl();
        descriptiveStatistics21.setSumsqImpl(univariateStatistic79);
        descriptiveStatistics0.setMinImpl(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.00000000000004d + "'", double19 == 100.00000000000004d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(univariateStatistic82);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        descriptiveStatistics2.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getKurtosisImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic18);
        double double20 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics8.getMinImpl();
        descriptiveStatistics2.setMinImpl(univariateStatistic21);
        descriptiveStatistics0.setMeanImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        descriptiveStatistics32.setMaxImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics44.getKurtosisImpl();
        descriptiveStatistics32.setGeometricMeanImpl(univariateStatistic49);
        double double51 = descriptiveStatistics32.getMin();
        double[] doubleArray52 = descriptiveStatistics32.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics32.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics32.getMinImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics56.setWindowSize((int) (byte) -1);
        int int59 = descriptiveStatistics56.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        descriptiveStatistics61.setKurtosisImpl(univariateStatistic64);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics61.getKurtosisImpl();
        double[] doubleArray70 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double71 = univariateStatistic66.evaluate(doubleArray70);
        descriptiveStatistics60.setMaxImpl(univariateStatistic66);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray73 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int74 = resizableDoubleArray73.getExpansionMode();
        resizableDoubleArray73.addElement(0.0d);
        int int77 = resizableDoubleArray73.getExpansionMode();
        float float78 = resizableDoubleArray73.getContractionCriteria();
        resizableDoubleArray73.setNumElements(10);
        double[] doubleArray81 = resizableDoubleArray73.getElements();
        double double82 = univariateStatistic66.evaluate(doubleArray81);
        descriptiveStatistics56.setMinImpl(univariateStatistic66);
        double[] doubleArray84 = descriptiveStatistics56.getValues();
        double double85 = univariateStatistic54.evaluate(doubleArray84);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2.0d + "'", double71 == 2.0d);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 2.5f + "'", float78 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(32);
        double[] doubleArray2 = descriptiveStatistics1.getValues();
        double double3 = descriptiveStatistics1.getStandardDeviation();
        double double4 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double[] doubleArray21 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double22 = univariateStatistic17.evaluate(doubleArray21);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic17);
        double double24 = descriptiveStatistics5.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics5.getVarianceImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.0d + "'", double22 == 2.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic25);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10, 12.5f);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        double double7 = descriptiveStatistics0.getMean();
        double double8 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (short) 1);
        int int7 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        float float9 = resizableDoubleArray0.getExpansionFactor();
        float float10 = resizableDoubleArray0.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getKurtosisImpl();
        long long23 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getGeometricMeanImpl();
        double double29 = descriptiveStatistics25.getMax();
        double double30 = descriptiveStatistics25.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getVarianceImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic31);
        double double33 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics0.getSkewnessImpl();
        double double35 = descriptiveStatistics0.getSumsq();
        long long36 = descriptiveStatistics0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double38 = descriptiveStatistics0.getElement(54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 54 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        double[] doubleArray25 = descriptiveStatistics21.getValues();
        double double26 = descriptiveStatistics21.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double29 = descriptiveStatistics28.getStandardDeviation();
        long long30 = descriptiveStatistics28.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getKurtosisImpl();
        descriptiveStatistics21.setSumImpl(univariateStatistic31);
        descriptiveStatistics1.setSumImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics1.getVarianceImpl();
        double double36 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str38 = descriptiveStatistics37.toString();
        descriptiveStatistics37.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str41 = descriptiveStatistics40.toString();
        double double42 = descriptiveStatistics40.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        descriptiveStatistics40.setSkewnessImpl(univariateStatistic46);
        double double49 = descriptiveStatistics40.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double52 = descriptiveStatistics51.getStandardDeviation();
        long long53 = descriptiveStatistics51.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics51.getMinImpl();
        descriptiveStatistics40.setVarianceImpl(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics40.getMeanImpl();
        descriptiveStatistics37.setMeanImpl(univariateStatistic56);
        int int58 = descriptiveStatistics37.getWindowSize();
        int int59 = descriptiveStatistics37.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics37.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics37.getGeometricMeanImpl();
        double double62 = descriptiveStatistics37.getGeometricMean();
        double double63 = descriptiveStatistics37.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getKurtosisImpl();
        long long67 = descriptiveStatistics64.getN();
        double[] doubleArray68 = descriptiveStatistics64.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getSumImpl();
        descriptiveStatistics64.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = null;
        descriptiveStatistics64.setSkewnessImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics64.getMeanImpl();
        double double75 = descriptiveStatistics37.apply(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics37.getSkewnessImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics1.setPercentileImpl(univariateStatistic76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str38, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str41, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(univariateStatistic76);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 0, (float) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.addValue(100.0d);
        double double10 = descriptiveStatistics0.getSkewness();
        double double11 = descriptiveStatistics0.getStandardDeviation();
        int int12 = descriptiveStatistics0.getWindowSize();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getSumImpl();
        double double15 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics16.setWindowSize((int) (byte) -1);
        long long19 = descriptiveStatistics16.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str21 = descriptiveStatistics20.toString();
        descriptiveStatistics20.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics20.getGeometricMeanImpl();
        double double24 = descriptiveStatistics20.getMax();
        double double25 = descriptiveStatistics20.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getKurtosisImpl();
        descriptiveStatistics20.setVarianceImpl(univariateStatistic28);
        descriptiveStatistics16.setVarianceImpl(univariateStatistic28);
        double double31 = descriptiveStatistics0.apply(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics0.getPercentileImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0]");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getMin();
        double double6 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.discardFrontElements(0);
        double double10 = resizableDoubleArray0.addElementRolling((double) 1);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics10.setWindowSize((int) (byte) -1);
        long long13 = descriptiveStatistics10.getN();
        double double14 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str16 = descriptiveStatistics15.toString();
        double double17 = descriptiveStatistics15.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics15.setSkewnessImpl(univariateStatistic21);
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic21);
        double double25 = descriptiveStatistics10.getGeometricMean();
        double double27 = descriptiveStatistics10.getPercentile((double) 100L);
        double double28 = descriptiveStatistics10.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        double[] doubleArray39 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double40 = univariateStatistic35.evaluate(doubleArray39);
        descriptiveStatistics29.setMaxImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getKurtosisImpl();
        long long45 = descriptiveStatistics42.getN();
        double double46 = descriptiveStatistics42.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        descriptiveStatistics47.setMaxImpl(univariateStatistic57);
        descriptiveStatistics42.setSumImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        descriptiveStatistics63.setKurtosisImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        descriptiveStatistics68.setKurtosisImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics68.getKurtosisImpl();
        descriptiveStatistics63.setMaxImpl(univariateStatistic73);
        double double75 = descriptiveStatistics63.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics63.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics63.getVarianceImpl();
        descriptiveStatistics61.setMinImpl(univariateStatistic77);
        descriptiveStatistics42.setMeanImpl(univariateStatistic77);
        descriptiveStatistics29.setSumImpl(univariateStatistic77);
        double double81 = descriptiveStatistics29.getSum();
        double double82 = descriptiveStatistics29.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics84 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics84.setWindowSize((int) ' ');
        double double87 = descriptiveStatistics84.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics88 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics88.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics88.getKurtosisImpl();
        long long91 = descriptiveStatistics88.getN();
        descriptiveStatistics88.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic94 = descriptiveStatistics88.getVarianceImpl();
        descriptiveStatistics84.setMeanImpl(univariateStatistic94);
        double double96 = descriptiveStatistics29.apply(univariateStatistic94);
        descriptiveStatistics10.setSumImpl(univariateStatistic94);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic94);
        double double99 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.0d + "'", double40 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(descriptiveStatistics88);
        org.junit.Assert.assertNotNull(univariateStatistic89);
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic94);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        descriptiveStatistics1.setWindowSize((int) (short) -1);
        double double11 = descriptiveStatistics1.getStandardDeviation();
        descriptiveStatistics1.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        double double16 = descriptiveStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        double double18 = descriptiveStatistics1.apply(univariateStatistic17);
        double double19 = descriptiveStatistics1.getSkewness();
        double double20 = descriptiveStatistics1.getSumsq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double18 = descriptiveStatistics17.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        descriptiveStatistics19.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics25.setMaxImpl(univariateStatistic35);
        double double37 = descriptiveStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics25.getMinImpl();
        descriptiveStatistics19.setMinImpl(univariateStatistic38);
        descriptiveStatistics17.setMeanImpl(univariateStatistic38);
        double double41 = descriptiveStatistics17.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic47);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic47);
        double double50 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(univariateStatistic51);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        int int5 = resizableDoubleArray0.getNumElements();
        float float6 = resizableDoubleArray0.getExpansionFactor();
        int int7 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(31, (double) 2);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setNumElements(10);
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        double double10 = resizableDoubleArray0.addElementRolling((-1.0d));
        double double12 = resizableDoubleArray0.getElement(0);
        float float13 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray14 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.5f + "'", float13 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setElement(35, (double) 11.0f);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        double double5 = descriptiveStatistics1.getMean();
        double[] doubleArray6 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getMinImpl();
        double[] doubleArray8 = descriptiveStatistics1.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getVarianceImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic9);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 1, (float) 102, (float) 98, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        int int3 = descriptiveStatistics1.getWindowSize();
        double double4 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics5.setGeometricMeanImpl(univariateStatistic22);
        double double24 = descriptiveStatistics5.getMin();
        double[] doubleArray25 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics26.setWindowSize((int) (byte) -1);
        int int29 = descriptiveStatistics26.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics26.setGeometricMeanImpl(univariateStatistic33);
        double double36 = descriptiveStatistics5.apply(univariateStatistic33);
        descriptiveStatistics1.setMinImpl(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        int int8 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setElement(0, (double) 10);
        int int14 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getMinImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        double double11 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getKurtosisImpl();
        double[] doubleArray15 = descriptiveStatistics12.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics12.getVarianceImpl();
        double double17 = descriptiveStatistics12.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics18.setSkewnessImpl(univariateStatistic24);
        double double27 = descriptiveStatistics18.getStandardDeviation();
        descriptiveStatistics18.clear();
        double double29 = descriptiveStatistics18.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getKurtosisImpl();
        descriptiveStatistics30.setMaxImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        descriptiveStatistics30.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics18.setSumImpl(univariateStatistic47);
        descriptiveStatistics12.setMinImpl(univariateStatistic47);
        double double51 = descriptiveStatistics12.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        descriptiveStatistics52.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics52.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics52.getSumsqImpl();
        double double60 = descriptiveStatistics52.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getKurtosisImpl();
        double[] doubleArray65 = descriptiveStatistics62.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics66.getKurtosisImpl();
        double[] doubleArray75 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double76 = univariateStatistic71.evaluate(doubleArray75);
        descriptiveStatistics62.setMaxImpl(univariateStatistic71);
        descriptiveStatistics52.setMaxImpl(univariateStatistic71);
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic71);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic71);
        double double81 = descriptiveStatistics1.getMax();
        double double82 = descriptiveStatistics1.getMax();
        long long83 = descriptiveStatistics1.getN();
        java.lang.Class<?> wildcardClass84 = descriptiveStatistics1.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics85 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass84);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2.0d + "'", double76 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(descriptiveStatistics85);
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(92, 52.5f);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray2.discardFrontElements(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getVariance();
        java.lang.Class<?> wildcardClass11 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        descriptiveStatistics13.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics20.getKurtosisImpl();
        double[] doubleArray29 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double30 = univariateStatistic25.evaluate(doubleArray29);
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics13.getSkewnessImpl();
        double double33 = descriptiveStatistics13.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str35 = descriptiveStatistics34.toString();
        descriptiveStatistics34.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics13.setGeometricMeanImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics40.setWindowSize((int) (byte) -1);
        long long43 = descriptiveStatistics40.getN();
        double double44 = descriptiveStatistics40.getMean();
        double double45 = descriptiveStatistics40.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double48 = descriptiveStatistics47.getMax();
        long long49 = descriptiveStatistics47.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics47.getVarianceImpl();
        descriptiveStatistics40.setGeometricMeanImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics40.getMaxImpl();
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic52);
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double57 = descriptiveStatistics56.getStandardDeviation();
        long long58 = descriptiveStatistics56.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics56.getSkewnessImpl();
        java.lang.String str60 = descriptiveStatistics56.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getKurtosisImpl();
        descriptiveStatistics56.setMeanImpl(univariateStatistic63);
        long long65 = descriptiveStatistics56.getN();
        descriptiveStatistics56.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics56.getPercentileImpl();
        descriptiveStatistics12.setMeanImpl(univariateStatistic67);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray69 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int70 = resizableDoubleArray69.getExpansionMode();
        int int71 = resizableDoubleArray69.getNumElements();
        double[] doubleArray72 = resizableDoubleArray69.getElements();
        float float73 = resizableDoubleArray69.getExpansionFactor();
        int int74 = resizableDoubleArray69.getNumElements();
        resizableDoubleArray69.contract();
        float float76 = resizableDoubleArray69.getExpansionFactor();
        double[] doubleArray77 = resizableDoubleArray69.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double80 = univariateStatistic67.evaluate(doubleArray77, 103, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2.0d + "'", double30 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str35, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str60, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 2.0f + "'", float73 == 2.0f);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 2.0f + "'", float76 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics1.setWindowSize((int) ' ');
        double double4 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getSumsqImpl();
        double double6 = descriptiveStatistics1.getSum();
        double double7 = descriptiveStatistics1.getMin();
        java.lang.Class<?> wildcardClass8 = descriptiveStatistics1.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass8);
        double double10 = descriptiveStatistics9.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        int int8 = resizableDoubleArray0.getNumElements();
        double double10 = resizableDoubleArray0.addElementRolling(2.5d);
        float float11 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 2.5, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.0f + "'", float11 == 2.0f);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        double[] doubleArray8 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics5.getVarianceImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getKurtosisImpl();
        long long14 = descriptiveStatistics11.getN();
        descriptiveStatistics11.addValue((double) 0);
        int int17 = descriptiveStatistics11.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics11.getGeometricMeanImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic18);
        double double20 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics1.getKurtosisImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = descriptiveStatistics1.getPercentile((double) 101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 101.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        float float9 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        int int11 = resizableDoubleArray0.getExpansionMode();
        double double13 = resizableDoubleArray0.addElementRolling((double) 1);
        int int14 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray15 = resizableDoubleArray0.getElements();
        double[] doubleArray16 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0]");
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getVarianceImpl();
        double double18 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getMinImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = descriptiveStatistics0.getElement((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 1 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSkewnessImpl();
        double double24 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics1.getSumImpl();
        double double26 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics1.getGeometricMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        double[] doubleArray20 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double21 = univariateStatistic16.evaluate(doubleArray20);
        descriptiveStatistics10.setMaxImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double[] doubleArray27 = descriptiveStatistics23.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getMeanImpl();
        descriptiveStatistics10.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic29);
        double double32 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics33.setWindowSize((int) (byte) -1);
        long long36 = descriptiveStatistics33.getN();
        double double37 = descriptiveStatistics33.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str39 = descriptiveStatistics38.toString();
        double double40 = descriptiveStatistics38.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        descriptiveStatistics38.setSkewnessImpl(univariateStatistic44);
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic44);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic44);
        double double49 = descriptiveStatistics0.getSkewness();
        double double50 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str39, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setExpansionMode(0);
        resizableDoubleArray0.addElement((double) 1L);
        resizableDoubleArray0.setNumElements(100);
        resizableDoubleArray0.addElement(10000.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getMean();
        java.lang.String str21 = descriptiveStatistics0.toString();
        long long22 = descriptiveStatistics0.getN();
        double double23 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        double double22 = descriptiveStatistics0.getGeometricMean();
        double double23 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        descriptiveStatistics24.setMaxImpl(univariateStatistic34);
        double double36 = descriptiveStatistics24.getVariance();
        double double37 = descriptiveStatistics24.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics24.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics24.getVarianceImpl();
        double double40 = descriptiveStatistics24.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics24.getMinImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic41);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = descriptiveStatistics0.getPercentile(2705.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 2705.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(53, (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSumImpl();
        double double24 = descriptiveStatistics1.getStandardDeviation();
        double double25 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics1.getSumImpl();
        double double28 = descriptiveStatistics1.getPercentile((double) 32.0f);
        java.lang.String str29 = descriptiveStatistics1.toString();
        descriptiveStatistics1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', 2.0f, (float) 100);
        int int4 = resizableDoubleArray3.getExpansionMode();
        double[] doubleArray5 = resizableDoubleArray3.getElements();
        resizableDoubleArray3.contract();
        double double8 = resizableDoubleArray3.addElementRolling((double) 0.0f);
        int int9 = resizableDoubleArray3.start();
        float float10 = resizableDoubleArray3.getContractionCriteria();
        resizableDoubleArray3.addElement((double) 2);
        resizableDoubleArray3.setContractionCriteria((float) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = resizableDoubleArray3.getElement(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 32 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 100.0f + "'", float10 == 100.0f);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(32);
        double[] doubleArray2 = descriptiveStatistics1.getValues();
        double double3 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSumsqImpl();
        double double5 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#', 31.0f);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getSumsq();
        double double7 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        double double11 = descriptiveStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double double18 = descriptiveStatistics9.apply(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str20 = descriptiveStatistics19.toString();
        descriptiveStatistics19.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics19.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics9.setMeanImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics9.getSkewnessImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics27.getSumsqImpl();
        double double35 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str37 = descriptiveStatistics36.toString();
        double double38 = descriptiveStatistics36.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        double double45 = descriptiveStatistics36.apply(univariateStatistic44);
        double double46 = descriptiveStatistics36.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics36.getSumImpl();
        descriptiveStatistics27.setGeometricMeanImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str50 = descriptiveStatistics49.toString();
        double double51 = descriptiveStatistics49.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        double double58 = descriptiveStatistics49.apply(univariateStatistic57);
        descriptiveStatistics27.setSkewnessImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics27.getSumImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str20, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(univariateStatistic60);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        double double5 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getMaxImpl();
        double double7 = descriptiveStatistics1.getMin();
        double double8 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(13, 53.5f, 53.5f);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        int int6 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setExpansionMode((int) (short) 1);
        resizableDoubleArray0.setElement(101, 99.00990099009901d);
        resizableDoubleArray0.addElement((double) 1L);
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = resizableDoubleArray0.getElement(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 4 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str20 = descriptiveStatistics19.toString();
        descriptiveStatistics19.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        double double24 = descriptiveStatistics22.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics22.setSkewnessImpl(univariateStatistic28);
        double double31 = descriptiveStatistics22.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double34 = descriptiveStatistics33.getStandardDeviation();
        long long35 = descriptiveStatistics33.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics33.getMinImpl();
        descriptiveStatistics22.setVarianceImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics22.getMeanImpl();
        descriptiveStatistics19.setMeanImpl(univariateStatistic38);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic38);
        double double41 = descriptiveStatistics0.getSkewness();
        double double42 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.setWindowSize(10);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str20, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        int int6 = resizableDoubleArray0.getNumElements();
        int int7 = resizableDoubleArray0.getNumElements();
        int int8 = resizableDoubleArray0.start();
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setExpansionMode((int) (byte) 0);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 2.5f);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement((int) (byte) 10, 100.0d);
        double double14 = resizableDoubleArray0.getElement((int) (byte) 1);
        int int15 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2.5d + "'", double14 == 2.5d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMax();
        double double8 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getMinImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getMeanImpl();
        descriptiveStatistics1.clear();
        double double14 = descriptiveStatistics1.getSum();
        double double16 = descriptiveStatistics1.getPercentile((double) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        double[] doubleArray8 = resizableDoubleArray0.getValues();
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setContractionCriteria((float) 97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 10L);
        int int6 = resizableDoubleArray0.getNumElements();
        double double8 = resizableDoubleArray0.addElementRolling((double) 101);
        resizableDoubleArray0.setElement(0, 5.4999999999999964d);
        float float12 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setContractionCriteria(98.0f);
        resizableDoubleArray0.setExpansionFactor((float) 13);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getKurtosisImpl();
        double double3 = descriptiveStatistics1.getSum();
        double double4 = descriptiveStatistics1.getSum();
        descriptiveStatistics1.addValue(20.25d);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        double double8 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics6.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics6.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        double[] doubleArray20 = descriptiveStatistics16.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        descriptiveStatistics6.setMinImpl(univariateStatistic22);
        descriptiveStatistics0.setMeanImpl(univariateStatistic22);
        java.lang.String str25 = descriptiveStatistics0.toString();
        double double26 = descriptiveStatistics0.getMax();
        double double27 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) ' ', (float) (byte) 100);
        resizableDoubleArray2.contract();
        double[] doubleArray4 = resizableDoubleArray2.getValues();
        resizableDoubleArray2.addElement((double) (byte) 1);
        double double8 = resizableDoubleArray2.addElementRolling(1.0d);
        double double10 = resizableDoubleArray2.addElementRolling(100.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics1.getPercentileImpl();
        java.lang.String str19 = descriptiveStatistics1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        descriptiveStatistics11.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getGeometricMeanImpl();
        double double15 = descriptiveStatistics11.getMax();
        double double16 = descriptiveStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics11.getVarianceImpl();
        double double18 = descriptiveStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        double double25 = descriptiveStatistics19.getStandardDeviation();
        double double26 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics19.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double30 = descriptiveStatistics29.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getGeometricMeanImpl();
        double double32 = descriptiveStatistics29.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        double[] doubleArray36 = descriptiveStatistics33.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics33.getVarianceImpl();
        descriptiveStatistics29.setSumsqImpl(univariateStatistic37);
        double double39 = descriptiveStatistics19.apply(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getVarianceImpl();
        descriptiveStatistics19.setMaxImpl(univariateStatistic42);
        descriptiveStatistics11.setSumImpl(univariateStatistic42);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray45 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int46 = resizableDoubleArray45.getExpansionMode();
        resizableDoubleArray45.addElement(0.0d);
        int int49 = resizableDoubleArray45.getExpansionMode();
        float float50 = resizableDoubleArray45.getContractionCriteria();
        resizableDoubleArray45.setNumElements(10);
        double[] doubleArray53 = resizableDoubleArray45.getElements();
        double double54 = univariateStatistic42.evaluate(doubleArray53);
        descriptiveStatistics1.setSumImpl(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 2.5f + "'", float50 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double7 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        double double17 = descriptiveStatistics8.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics18.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics18.getPercentileImpl();
        double double25 = descriptiveStatistics18.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        double[] doubleArray29 = descriptiveStatistics26.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics26.getVarianceImpl();
        double double31 = descriptiveStatistics18.apply(univariateStatistic30);
        double double32 = descriptiveStatistics8.apply(univariateStatistic30);
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic30);
        double double34 = descriptiveStatistics6.getGeometricMean();
        double double35 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics6.getMaxImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        double[] doubleArray43 = descriptiveStatistics38.getValues();
        double double44 = descriptiveStatistics38.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics0.getPercentileImpl();
        double double48 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double51 = descriptiveStatistics50.getStandardDeviation();
        double double52 = descriptiveStatistics50.getVariance();
        double double53 = descriptiveStatistics50.getSum();
        long long54 = descriptiveStatistics50.getN();
        int int55 = descriptiveStatistics50.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        descriptiveStatistics56.setKurtosisImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        descriptiveStatistics61.setKurtosisImpl(univariateStatistic64);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics61.getKurtosisImpl();
        descriptiveStatistics56.setMaxImpl(univariateStatistic66);
        double double68 = descriptiveStatistics56.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str70 = descriptiveStatistics69.toString();
        double double71 = descriptiveStatistics69.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        descriptiveStatistics72.setKurtosisImpl(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics72.getKurtosisImpl();
        double double78 = descriptiveStatistics69.apply(univariateStatistic77);
        descriptiveStatistics56.setGeometricMeanImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics56.getPercentileImpl();
        descriptiveStatistics50.setSumImpl(univariateStatistic80);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics50.getSumImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic82);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str70, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(univariateStatistic82);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        int int7 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getKurtosis();
        double double21 = descriptiveStatistics0.getSumsq();
        double double22 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.addElement(100.0d);
        resizableDoubleArray0.clear();
        double double18 = resizableDoubleArray0.addElementRolling(0.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement(Double.NaN);
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setElement((int) 'a', 52.0d);
        resizableDoubleArray0.addElement((double) 91);
        double double13 = resizableDoubleArray0.addElementRolling(97.0d);
        float float14 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setElement(100, 0.34098781653129445d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[NaN, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.5f + "'", float14 == 2.5f);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double[] doubleArray11 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setExpansionFactor(2.5f);
        double double9 = resizableDoubleArray0.addElementRolling((double) (byte) 1);
        int int10 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(10000.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 'a');
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setElement(32, Double.NaN);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[97.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 100, (float) (short) 10, 10.0f);
        double[] doubleArray4 = resizableDoubleArray3.getValues();
        resizableDoubleArray3.addElement((double) 1);
        resizableDoubleArray3.setElement(2, Double.NaN);
        double[] doubleArray10 = resizableDoubleArray3.getElements();
        float float11 = resizableDoubleArray3.getContractionCriteria();
        resizableDoubleArray3.setElement(100, (double) (short) 0);
        resizableDoubleArray3.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray3.setExpansionFactor(53.5f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, NaN]");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 10.0f + "'", float11 == 10.0f);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics0.apply(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = null;
        descriptiveStatistics0.setSumsqImpl(univariateStatistic29);
        java.lang.Class<?> wildcardClass31 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getMinImpl();
        double[] doubleArray34 = descriptiveStatistics32.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.start();
        float float10 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement(42, 2705.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        int int11 = resizableDoubleArray0.getExpansionMode();
        int int12 = resizableDoubleArray0.start();
        float float13 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 1L);
        java.lang.Class<?> wildcardClass16 = resizableDoubleArray0.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.util.ResizableDoubleArray cannot be cast to org.apache.commons.math.stat.descriptive.DescriptiveStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.5f + "'", float13 == 2.5f);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(0, (float) 102, 0.0f, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        long long4 = descriptiveStatistics0.getN();
        double double5 = descriptiveStatistics0.getMin();
        long long6 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#', (float) (byte) 10);
        double double4 = resizableDoubleArray2.addElementRolling((double) 3);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = resizableDoubleArray2.getElement(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 32 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics14.setGeometricMeanImpl(univariateStatistic31);
        double double33 = descriptiveStatistics14.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double35 = descriptiveStatistics34.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getKurtosisImpl();
        long long39 = descriptiveStatistics36.getN();
        descriptiveStatistics36.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getKurtosisImpl();
        descriptiveStatistics42.setMaxImpl(univariateStatistic52);
        double double54 = descriptiveStatistics42.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics42.getMinImpl();
        descriptiveStatistics36.setMinImpl(univariateStatistic55);
        descriptiveStatistics34.setMeanImpl(univariateStatistic55);
        descriptiveStatistics14.setSumImpl(univariateStatistic55);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic55);
        descriptiveStatistics1.setWindowSize((int) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(4, (float) '4');
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getKurtosisImpl();
        double double14 = descriptiveStatistics0.getPercentile((double) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getPercentileImpl();
        double[] doubleArray16 = descriptiveStatistics0.getSortedValues();
        int int17 = descriptiveStatistics0.getWindowSize();
        double double18 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double21 = descriptiveStatistics20.getMax();
        long long22 = descriptiveStatistics20.getN();
        double double23 = descriptiveStatistics20.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = null;
        descriptiveStatistics20.setSkewnessImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics20.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double28 = descriptiveStatistics27.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str31 = descriptiveStatistics30.toString();
        descriptiveStatistics30.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics30.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray35 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int36 = resizableDoubleArray35.start();
        resizableDoubleArray35.addElement((double) 10);
        int int39 = resizableDoubleArray35.getExpansionMode();
        resizableDoubleArray35.addElement((double) (-1L));
        double[] doubleArray42 = resizableDoubleArray35.getElements();
        double double45 = univariateStatistic34.evaluate(doubleArray42, (int) (byte) 1, 1);
        double double46 = descriptiveStatistics27.apply(univariateStatistic34);
        double double47 = descriptiveStatistics27.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics48.getKurtosisImpl();
        long long51 = descriptiveStatistics48.getN();
        descriptiveStatistics48.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics59.getKurtosisImpl();
        descriptiveStatistics54.setMaxImpl(univariateStatistic64);
        double double66 = descriptiveStatistics54.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics54.getMinImpl();
        descriptiveStatistics48.setMinImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics48.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics48.getMaxImpl();
        descriptiveStatistics27.setSumImpl(univariateStatistic70);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double73 = descriptiveStatistics72.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics72.getSumImpl();
        descriptiveStatistics27.setMaxImpl(univariateStatistic74);
        descriptiveStatistics20.setSumImpl(univariateStatistic74);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str31, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic78);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) (byte) 10);
        int int15 = resizableDoubleArray0.start();
        resizableDoubleArray0.setContractionCriteria(2.5f);
        resizableDoubleArray0.addElement((double) 0);
        int int20 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        int int8 = resizableDoubleArray0.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setNumElements((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of elements must be zero or a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double[] doubleArray25 = descriptiveStatistics0.getSortedValues();
        descriptiveStatistics0.setWindowSize(100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double30 = descriptiveStatistics29.getStandardDeviation();
        long long31 = descriptiveStatistics29.getN();
        double double32 = descriptiveStatistics29.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getSumsqImpl();
        double double35 = descriptiveStatistics29.getGeometricMean();
        double double36 = descriptiveStatistics29.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics29.getMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str18 = descriptiveStatistics17.toString();
        double double19 = descriptiveStatistics17.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        descriptiveStatistics17.setSkewnessImpl(univariateStatistic23);
        double double26 = descriptiveStatistics17.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double29 = descriptiveStatistics28.getStandardDeviation();
        long long30 = descriptiveStatistics28.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getMinImpl();
        descriptiveStatistics17.setVarianceImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics17.getMeanImpl();
        descriptiveStatistics17.addValue(10.0d);
        double[] doubleArray36 = descriptiveStatistics17.getSortedValues();
        double double37 = univariateStatistic16.evaluate(doubleArray36);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.000000000000002d + "'", double37 == 10.000000000000002d);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics6.setMaxImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getMeanImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic25);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double29 = descriptiveStatistics28.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        descriptiveStatistics30.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setMinImpl(univariateStatistic49);
        descriptiveStatistics28.setMeanImpl(univariateStatistic49);
        descriptiveStatistics1.setMinImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics1.getMinImpl();
        descriptiveStatistics1.addValue((double) 100.0f);
        double double56 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        descriptiveStatistics62.setKurtosisImpl(univariateStatistic65);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics62.getKurtosisImpl();
        descriptiveStatistics57.setMaxImpl(univariateStatistic67);
        double double69 = descriptiveStatistics57.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics57.getMinImpl();
        double double71 = descriptiveStatistics57.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = null;
        descriptiveStatistics57.setSumImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics57.getVarianceImpl();
        descriptiveStatistics57.setWindowSize(2);
        double[] doubleArray77 = descriptiveStatistics57.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = null;
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic78);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics81 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double82 = descriptiveStatistics81.getStandardDeviation();
        long long83 = descriptiveStatistics81.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics81.getSkewnessImpl();
        java.lang.String str85 = descriptiveStatistics81.toString();
        double double86 = descriptiveStatistics81.getVariance();
        descriptiveStatistics81.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics89 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics89.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics91 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic92 = descriptiveStatistics91.getSumsqImpl();
        descriptiveStatistics89.setKurtosisImpl(univariateStatistic92);
        descriptiveStatistics81.setSkewnessImpl(univariateStatistic92);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic95 = descriptiveStatistics81.getKurtosisImpl();
        descriptiveStatistics57.setVarianceImpl(univariateStatistic95);
        descriptiveStatistics1.setSumImpl(univariateStatistic95);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str85, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(descriptiveStatistics89);
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertNotNull(descriptiveStatistics91);
        org.junit.Assert.assertNotNull(univariateStatistic92);
        org.junit.Assert.assertNotNull(univariateStatistic95);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(100, (double) 1.0f);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        int int10 = resizableDoubleArray0.getExpansionMode();
        float float11 = resizableDoubleArray0.getContractionCriteria();
        int int12 = resizableDoubleArray0.getNumElements();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        float float14 = resizableDoubleArray0.getContractionCriteria();
        int int15 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.5f + "'", float11 == 2.5f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 101 + "'", int12 == 101);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.5f + "'", float14 == 2.5f);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 101 + "'", int15 == 101);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        resizableDoubleArray0.setElement(1, (double) 100.0f);
        double double8 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.setElement((int) ' ', 11224.999999999996d);
        int int12 = resizableDoubleArray0.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = resizableDoubleArray0.getElement((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Elements cannot be retrieved from a negative array index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMax();
        int int8 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getKurtosisImpl();
        double double10 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        descriptiveStatistics11.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics11.getKurtosisImpl();
        double double16 = descriptiveStatistics11.getStandardDeviation();
        java.lang.String str17 = descriptiveStatistics11.toString();
        double double19 = descriptiveStatistics11.getPercentile((double) (short) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        descriptiveStatistics20.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics20.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics27.getSumsqImpl();
        double double35 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getKurtosisImpl();
        double[] doubleArray40 = descriptiveStatistics37.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        double[] doubleArray50 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double51 = univariateStatistic46.evaluate(doubleArray50);
        descriptiveStatistics37.setMaxImpl(univariateStatistic46);
        descriptiveStatistics27.setMaxImpl(univariateStatistic46);
        descriptiveStatistics20.setVarianceImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str56 = descriptiveStatistics55.toString();
        descriptiveStatistics55.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics55.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray60 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int61 = resizableDoubleArray60.start();
        resizableDoubleArray60.addElement((double) 10);
        int int64 = resizableDoubleArray60.getExpansionMode();
        resizableDoubleArray60.addElement((double) (-1L));
        double[] doubleArray67 = resizableDoubleArray60.getElements();
        double double70 = univariateStatistic59.evaluate(doubleArray67, (int) (byte) 1, 1);
        double double71 = descriptiveStatistics20.apply(univariateStatistic59);
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic59);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: -1.0\nmax: -1.0\nmean: -1.0\nstd dev: 0.0\nmedian: -1.0\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 1\nmin: -1.0\nmax: -1.0\nmean: -1.0\nstd dev: 0.0\nmedian: -1.0\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2.0d + "'", double51 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str56, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double11 = descriptiveStatistics10.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getGeometricMeanImpl();
        double double13 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        double[] doubleArray17 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics14.getVarianceImpl();
        descriptiveStatistics10.setSumsqImpl(univariateStatistic18);
        double double20 = descriptiveStatistics0.apply(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getVarianceImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getGeometricMeanImpl();
        double double26 = descriptiveStatistics0.getGeometricMean();
        double double27 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSkewnessImpl();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        double double14 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.setNumElements(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 10L);
        int int6 = resizableDoubleArray0.getNumElements();
        double double8 = resizableDoubleArray0.addElementRolling((double) 101);
        resizableDoubleArray0.setExpansionMode(0);
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement(9.545941546018392d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[101.0]");
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        double double17 = descriptiveStatistics8.getStandardDeviation();
        descriptiveStatistics8.clear();
        double double19 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic20);
        double double22 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        double double1 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic5);
        double double7 = descriptiveStatistics0.getMax();
        double double8 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.addElement((double) 97);
        int int12 = resizableDoubleArray0.getExpansionMode();
        int int13 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 4);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[97.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getSum();
        double double20 = descriptiveStatistics0.getStandardDeviation();
        long long21 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        descriptiveStatistics22.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getKurtosisImpl();
        long long30 = descriptiveStatistics27.getN();
        double double31 = descriptiveStatistics27.getMax();
        double double32 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double34 = descriptiveStatistics33.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getMinImpl();
        descriptiveStatistics27.setSumImpl(univariateStatistic35);
        descriptiveStatistics22.setSumImpl(univariateStatistic35);
        double double38 = descriptiveStatistics22.getVariance();
        double double39 = descriptiveStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        double[] doubleArray44 = descriptiveStatistics40.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getSumImpl();
        double double46 = descriptiveStatistics40.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics40.getSumImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic47);
        double[] doubleArray49 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics22.getGeometricMeanImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic50);
        double double52 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = null;
        descriptiveStatistics0.setMaxImpl(univariateStatistic5);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        double double9 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        double double17 = descriptiveStatistics7.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics7.getSumImpl();
        double double19 = descriptiveStatistics7.getMin();
        double[] doubleArray20 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getPercentileImpl();
        double double28 = descriptiveStatistics21.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        double[] doubleArray32 = descriptiveStatistics29.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getVarianceImpl();
        double double34 = descriptiveStatistics21.apply(univariateStatistic33);
        descriptiveStatistics7.setSumsqImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double38 = descriptiveStatistics37.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getGeometricMeanImpl();
        descriptiveStatistics7.setGeometricMeanImpl(univariateStatistic39);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic39);
        double double42 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double45 = descriptiveStatistics44.getStandardDeviation();
        double double46 = descriptiveStatistics44.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics44.getSumImpl();
        double double48 = descriptiveStatistics44.getVariance();
        double double49 = descriptiveStatistics44.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics44.getKurtosisImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic53);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(13);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getSkewnessImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic15);
        long long17 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        double double24 = descriptiveStatistics19.getKurtosis();
        long long25 = descriptiveStatistics19.getN();
        double double26 = descriptiveStatistics19.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics19.getPercentileImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 32);
        int int6 = resizableDoubleArray0.getExpansionMode();
        int int7 = resizableDoubleArray0.getExpansionMode();
        int int8 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (byte) 1);
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[32.0, 1.0]");
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        double[] doubleArray11 = descriptiveStatistics7.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMinImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getMaxImpl();
        double double16 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getPercentileImpl();
        double double18 = descriptiveStatistics0.getMax();
        double double19 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        int int5 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic6);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        int int22 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        long long37 = descriptiveStatistics34.getN();
        double[] doubleArray38 = descriptiveStatistics34.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics34.getMinImpl();
        double double41 = descriptiveStatistics32.apply(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        descriptiveStatistics42.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics49.getKurtosisImpl();
        long long52 = descriptiveStatistics49.getN();
        descriptiveStatistics49.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics49.getSkewnessImpl();
        descriptiveStatistics42.setSumsqImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics42.getVarianceImpl();
        descriptiveStatistics32.setVarianceImpl(univariateStatistic57);
        double double59 = descriptiveStatistics25.apply(univariateStatistic57);
        double double60 = descriptiveStatistics25.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics25.getSumImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic61);
        double double63 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(univariateStatistic64);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (short) 0, (double) (byte) 100);
        resizableDoubleArray0.addElement((double) 10.0f);
        double double8 = resizableDoubleArray0.getElement(0);
        resizableDoubleArray0.clear();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.setContractionCriteria((float) 42);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double7 = descriptiveStatistics6.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        descriptiveStatistics8.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic24);
        double double26 = descriptiveStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics8.setMinImpl(univariateStatistic27);
        descriptiveStatistics6.setMeanImpl(univariateStatistic27);
        double double30 = descriptiveStatistics6.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic36);
        double double38 = descriptiveStatistics0.apply(univariateStatistic36);
        double double39 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setElement((int) (short) 1, (double) '4');
        double double10 = resizableDoubleArray0.addElementRolling((double) (short) 10);
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        int int12 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        int int15 = resizableDoubleArray0.getNumElements();
        double[] doubleArray16 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getVarianceImpl();
        double double12 = descriptiveStatistics0.getMax();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double17 = descriptiveStatistics16.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics18.setWindowSize((int) (byte) -1);
        long long21 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic22);
        double double24 = descriptiveStatistics16.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics0.getVariance();
        double[] doubleArray29 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics7.setMaxImpl(univariateStatistic17);
        double double19 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics7.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics7.getVarianceImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic21);
        java.lang.Class<?> wildcardClass23 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics25.getSumsqImpl();
        double double33 = descriptiveStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getKurtosisImpl();
        double[] doubleArray38 = descriptiveStatistics35.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        double[] doubleArray48 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double49 = univariateStatistic44.evaluate(doubleArray48);
        descriptiveStatistics35.setMaxImpl(univariateStatistic44);
        descriptiveStatistics25.setMaxImpl(univariateStatistic44);
        descriptiveStatistics24.setSumsqImpl(univariateStatistic44);
        double double53 = descriptiveStatistics24.getMax();
        double[] doubleArray54 = descriptiveStatistics24.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2.0d + "'", double49 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        double double7 = descriptiveStatistics1.getMax();
        long long8 = descriptiveStatistics1.getN();
        double double9 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getKurtosisImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        resizableDoubleArray1.discardFrontElements(0);
        resizableDoubleArray1.setNumElements(11);
        int int6 = resizableDoubleArray1.getExpansionMode();
        int int7 = resizableDoubleArray1.start();
        java.lang.Class<?> wildcardClass8 = resizableDoubleArray1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10, (float) 12, (float) 2L, 33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        int int7 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setContractionCriteria((float) 32);
        resizableDoubleArray0.addElement(0.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        double[] doubleArray9 = descriptiveStatistics6.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics6.getVarianceImpl();
        double double11 = descriptiveStatistics6.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics6.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic12);
        double[] doubleArray14 = descriptiveStatistics0.getSortedValues();
        double double15 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics16.getSumsqImpl();
        double double24 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getPercentileImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        double double27 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        descriptiveStatistics1.clear();
        long long22 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str24 = descriptiveStatistics23.toString();
        descriptiveStatistics23.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics23.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        long long31 = descriptiveStatistics28.getN();
        double double32 = descriptiveStatistics28.getMax();
        double double33 = descriptiveStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double35 = descriptiveStatistics34.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getMinImpl();
        descriptiveStatistics28.setSumImpl(univariateStatistic36);
        descriptiveStatistics23.setSumImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics44.getKurtosisImpl();
        descriptiveStatistics39.setMaxImpl(univariateStatistic49);
        double double51 = descriptiveStatistics23.apply(univariateStatistic49);
        descriptiveStatistics1.setSumImpl(univariateStatistic49);
        double double54 = descriptiveStatistics1.getPercentile((double) 2.5f);
        double double55 = descriptiveStatistics1.getMean();
        double double56 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str24, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        double double9 = resizableDoubleArray0.addElementRolling(1.0d);
        int int10 = resizableDoubleArray0.getExpansionMode();
        int int11 = resizableDoubleArray0.getNumElements();
        double double13 = resizableDoubleArray0.addElementRolling(52.0d);
        resizableDoubleArray0.setExpansionMode(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        double double8 = descriptiveStatistics0.getMin();
        double double9 = descriptiveStatistics0.getStandardDeviation();
        double double10 = descriptiveStatistics0.getVariance();
        double double11 = descriptiveStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getMax();
        double double12 = descriptiveStatistics0.getSumsq();
        long long13 = descriptiveStatistics0.getN();
        double double15 = descriptiveStatistics0.getPercentile((double) 91.5f);
        descriptiveStatistics0.addValue(1985.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic18);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        long long29 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str32 = descriptiveStatistics31.toString();
        double double33 = descriptiveStatistics31.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getKurtosisImpl();
        double double40 = descriptiveStatistics31.apply(univariateStatistic39);
        double double41 = descriptiveStatistics31.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics31.getSumImpl();
        double double43 = descriptiveStatistics31.getMin();
        double[] doubleArray44 = descriptiveStatistics31.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        descriptiveStatistics45.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics45.getPercentileImpl();
        double double52 = descriptiveStatistics45.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getKurtosisImpl();
        double[] doubleArray56 = descriptiveStatistics53.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics53.getVarianceImpl();
        double double58 = descriptiveStatistics45.apply(univariateStatistic57);
        descriptiveStatistics31.setSumsqImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double62 = descriptiveStatistics61.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics61.getGeometricMeanImpl();
        descriptiveStatistics31.setGeometricMeanImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double67 = descriptiveStatistics66.getStandardDeviation();
        long long68 = descriptiveStatistics66.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics66.getSkewnessImpl();
        double double71 = descriptiveStatistics66.getPercentile((double) 100L);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics66.getMinImpl();
        descriptiveStatistics31.setVarianceImpl(univariateStatistic72);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic72);
        double double75 = descriptiveStatistics0.getMin();
        long long76 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics0.getGeometricMeanImpl();
        double double79 = descriptiveStatistics0.getPercentile((double) 31.0f);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics0.getMaxImpl();
        double double81 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str32, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics6.setMaxImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getMeanImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic25);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double29 = descriptiveStatistics28.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        descriptiveStatistics30.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setMinImpl(univariateStatistic49);
        descriptiveStatistics28.setMeanImpl(univariateStatistic49);
        descriptiveStatistics1.setMinImpl(univariateStatistic49);
        double double53 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double56 = descriptiveStatistics55.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double60 = descriptiveStatistics59.getStandardDeviation();
        long long61 = descriptiveStatistics59.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics59.getMinImpl();
        descriptiveStatistics55.setMaxImpl(univariateStatistic62);
        double double64 = descriptiveStatistics55.getMax();
        double double66 = descriptiveStatistics55.getPercentile(Double.NaN);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str68 = descriptiveStatistics67.toString();
        double double69 = descriptiveStatistics67.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        descriptiveStatistics70.setKurtosisImpl(univariateStatistic73);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics70.getKurtosisImpl();
        double double76 = descriptiveStatistics67.apply(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str78 = descriptiveStatistics77.toString();
        descriptiveStatistics77.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics77.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics77.getSumsqImpl();
        descriptiveStatistics67.setMeanImpl(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics67.getSkewnessImpl();
        descriptiveStatistics55.setSumsqImpl(univariateStatistic83);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics55.getKurtosisImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic85);
        int int87 = descriptiveStatistics1.getWindowSize();
        double double88 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str68, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str78, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        double double20 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getSkewnessImpl();
        double double22 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getGeometricMeanImpl();
        double double25 = descriptiveStatistics0.getPercentile(0.34098781653129445d);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(100, (float) 100L, (float) 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        double double8 = descriptiveStatistics0.getMean();
        long long9 = descriptiveStatistics0.getN();
        double double10 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getKurtosisImpl();
        long long14 = descriptiveStatistics11.getN();
        descriptiveStatistics11.addValue((double) 0);
        int int17 = descriptiveStatistics11.getWindowSize();
        double double18 = descriptiveStatistics11.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics11.getMeanImpl();
        double double20 = descriptiveStatistics11.getKurtosis();
        double double22 = descriptiveStatistics11.getPercentile((double) 100);
        double double23 = descriptiveStatistics11.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double26 = descriptiveStatistics25.getStandardDeviation();
        long long27 = descriptiveStatistics25.getN();
        double double28 = descriptiveStatistics25.getMin();
        double double29 = descriptiveStatistics25.getMax();
        double double30 = descriptiveStatistics25.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getKurtosisImpl();
        descriptiveStatistics25.setSkewnessImpl(univariateStatistic33);
        double[] doubleArray35 = descriptiveStatistics25.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics25.getMinImpl();
        descriptiveStatistics11.setSumImpl(univariateStatistic36);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic36);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray39 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int40 = resizableDoubleArray39.getExpansionMode();
        int int41 = resizableDoubleArray39.getNumElements();
        int int42 = resizableDoubleArray39.start();
        float float43 = resizableDoubleArray39.getContractionCriteria();
        double[] doubleArray44 = resizableDoubleArray39.getValues();
        double[] doubleArray45 = resizableDoubleArray39.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = univariateStatistic36.evaluate(doubleArray45, (int) (short) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 2.5f + "'", float43 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSkewness();
        descriptiveStatistics1.setWindowSize((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(101, (float) 2, (float) 2);
        float float4 = resizableDoubleArray3.getExpansionFactor();
        int int5 = resizableDoubleArray3.start();
        double double7 = resizableDoubleArray3.addElementRolling((double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray3.setNumElements((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of elements must be zero or a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        float float4 = resizableDoubleArray3.getContractionCriteria();
        int int5 = resizableDoubleArray3.getExpansionMode();
        float float6 = resizableDoubleArray3.getContractionCriteria();
        double double8 = resizableDoubleArray3.addElementRolling((double) (short) 10);
        resizableDoubleArray3.addElement((double) 10L);
        double[] doubleArray11 = resizableDoubleArray3.getElements();
        resizableDoubleArray3.clear();
        double[] doubleArray13 = resizableDoubleArray3.getValues();
        int int14 = resizableDoubleArray3.start();
        resizableDoubleArray3.setElement((int) '4', 5.5d);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 32.0f + "'", float4 == 32.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 32.0f + "'", float6 == 32.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        resizableDoubleArray0.contract();
        int int10 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setContractionCriteria((float) 'a');
        double double14 = resizableDoubleArray0.getElement(1);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 32);
        int int6 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setNumElements(36);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[32.0, 0.0]");
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getSkewnessImpl();
        java.lang.String str9 = descriptiveStatistics5.toString();
        double double10 = descriptiveStatistics5.getVariance();
        descriptiveStatistics5.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic19);
        long long21 = descriptiveStatistics1.getN();
        double double23 = descriptiveStatistics1.getPercentile((double) (byte) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        java.lang.String str27 = descriptiveStatistics25.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        long long31 = descriptiveStatistics28.getN();
        descriptiveStatistics28.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics28.getSkewnessImpl();
        descriptiveStatistics25.setSumsqImpl(univariateStatistic34);
        double double36 = descriptiveStatistics25.getMean();
        double double37 = descriptiveStatistics25.getKurtosis();
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics39.getKurtosisImpl();
        long long42 = descriptiveStatistics39.getN();
        double[] doubleArray43 = descriptiveStatistics39.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getSumImpl();
        double double45 = descriptiveStatistics39.getStandardDeviation();
        double double46 = descriptiveStatistics39.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics39.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double50 = descriptiveStatistics49.getStandardDeviation();
        long long51 = descriptiveStatistics49.getN();
        double double52 = descriptiveStatistics49.getMin();
        double double53 = descriptiveStatistics49.getMax();
        double double54 = descriptiveStatistics49.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getKurtosisImpl();
        descriptiveStatistics49.setSkewnessImpl(univariateStatistic57);
        double[] doubleArray59 = descriptiveStatistics49.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics49.getMinImpl();
        descriptiveStatistics39.setSumsqImpl(univariateStatistic60);
        descriptiveStatistics25.setMaxImpl(univariateStatistic60);
        double double63 = descriptiveStatistics1.apply(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics13.apply(univariateStatistic21);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic21);
        descriptiveStatistics0.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = descriptiveStatistics0.getElement(54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 54 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic26);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        int int8 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 35.0f);
        float float11 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) 'a', 10.0d);
        int int15 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) 'a', 0.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.0f + "'", float11 == 2.0f);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double6 = descriptiveStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics5.setMinImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getMaxImpl();
        double double20 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics1.getVarianceImpl();
        double double23 = descriptiveStatistics1.getStandardDeviation();
        double[] doubleArray24 = descriptiveStatistics1.getValues();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(0, (float) (byte) 100, (float) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        double double17 = descriptiveStatistics8.apply(univariateStatistic16);
        double double18 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics8.getSumImpl();
        double double20 = descriptiveStatistics8.getMin();
        double[] doubleArray21 = descriptiveStatistics8.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        long long25 = descriptiveStatistics22.getN();
        double[] doubleArray26 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics22.getMinImpl();
        descriptiveStatistics8.setSumsqImpl(univariateStatistic27);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic27);
        double double30 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        java.lang.String str7 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getKurtosisImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic18);
        double double20 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics8.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic21);
        java.lang.String str23 = descriptiveStatistics0.toString();
        double double24 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setNumElements(10);
        resizableDoubleArray0.addElement((double) (short) -1);
        double double11 = resizableDoubleArray0.getElement((int) (byte) 1);
        double double13 = resizableDoubleArray0.addElementRolling((double) 100.5f);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        double double7 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getMeanImpl();
        double double9 = descriptiveStatistics0.getKurtosis();
        double double11 = descriptiveStatistics0.getPercentile((double) 100);
        double double12 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic13);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getSumsqImpl();
        double double10 = descriptiveStatistics0.getSum();
        int int11 = descriptiveStatistics0.getWindowSize();
        int int12 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        double[] doubleArray16 = descriptiveStatistics13.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics13.getVarianceImpl();
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getPercentileImpl();
        double double22 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getKurtosisImpl();
        double double14 = descriptiveStatistics0.getPercentile((double) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getPercentileImpl();
        double[] doubleArray16 = descriptiveStatistics0.getSortedValues();
        double double17 = descriptiveStatistics0.getGeometricMean();
        double double18 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.addElement(0.0d);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 101 + "'", int9 == 101);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        double double20 = descriptiveStatistics1.getGeometricMean();
        descriptiveStatistics1.setWindowSize((int) (byte) 1);
        long long23 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics1.getPercentileImpl();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(3, (float) 10L, (float) 31);
        float float4 = resizableDoubleArray3.getContractionCriteria();
        float float5 = resizableDoubleArray3.getContractionCriteria();
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 31.0f + "'", float4 == 31.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 31.0f + "'", float5 == 31.0f);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setExpansionFactor(2.5f);
        double double9 = resizableDoubleArray0.addElementRolling((double) (byte) 1);
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        float float5 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.contract();
        float float7 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setElement((int) (byte) -1, 0.34098781653129445d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Cannot set an element at a negative index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.0f + "'", float5 == 2.0f);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.0f + "'", float7 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        double double10 = descriptiveStatistics0.getMean();
        double double11 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.addValue((double) 35.0f);
        double double14 = descriptiveStatistics0.getVariance();
        long long15 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double double5 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.addValue((double) (byte) 10);
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getMean();
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getGeometricMeanImpl();
        double double12 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.000000000000002d + "'", double10 == 10.000000000000002d);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic13);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(102, (float) (byte) 10, 100.5f);
        double double5 = resizableDoubleArray3.addElementRolling((double) (short) 100);
        resizableDoubleArray3.clear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getMin();
        double double7 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getMeanImpl();
        descriptiveStatistics0.setWindowSize((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double12 = descriptiveStatistics0.getElement(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 100 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        double[] doubleArray6 = descriptiveStatistics2.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics2.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics2.getMinImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getPercentileImpl();
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        resizableDoubleArray0.addElement((double) (byte) 1);
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 35.0f);
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) ' ');
        resizableDoubleArray0.clear();
        double[] doubleArray20 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', 91.5f);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        double double4 = descriptiveStatistics0.getPercentile(16.0d);
        double double5 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMaxImpl();
        double double8 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics14.getKurtosisImpl();
        descriptiveStatistics9.setMaxImpl(univariateStatistic19);
        double double21 = descriptiveStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics9.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics9.getVarianceImpl();
        double[] doubleArray24 = descriptiveStatistics9.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics9.getSumImpl();
        double double26 = descriptiveStatistics9.getMax();
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics9.getPercentileImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic28);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double[] doubleArray5 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getPercentileImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        java.lang.String str7 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getVarianceImpl();
        double double10 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.discardFrontElements(1);
        resizableDoubleArray0.addElement((double) 'a');
        resizableDoubleArray0.clear();
        double double12 = resizableDoubleArray0.addElementRolling((double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard a negative number of elements.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 0.0f);
        resizableDoubleArray0.addElement(2705.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray10 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int11 = resizableDoubleArray10.getExpansionMode();
        resizableDoubleArray10.addElement(0.0d);
        int int14 = resizableDoubleArray10.getExpansionMode();
        double[] doubleArray15 = resizableDoubleArray10.getElements();
        double double16 = univariateStatistic8.evaluate(doubleArray15);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic8);
        double[] doubleArray18 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double21 = descriptiveStatistics20.getStandardDeviation();
        long long22 = descriptiveStatistics20.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics20.getSkewnessImpl();
        double double25 = descriptiveStatistics20.getPercentile((double) 100L);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double28 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getGeometricMeanImpl();
        double double30 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        double[] doubleArray34 = descriptiveStatistics31.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics31.getVarianceImpl();
        descriptiveStatistics27.setSumsqImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getKurtosisImpl();
        long long40 = descriptiveStatistics37.getN();
        descriptiveStatistics37.addValue((double) 0);
        int int43 = descriptiveStatistics37.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics37.getGeometricMeanImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic44);
        descriptiveStatistics20.setMaxImpl(univariateStatistic44);
        descriptiveStatistics0.setMeanImpl(univariateStatistic44);
        double double48 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getKurtosis();
        double double4 = descriptiveStatistics1.getMax();
        double double5 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        descriptiveStatistics6.clear();
        double double9 = descriptiveStatistics6.getMean();
        double double10 = descriptiveStatistics6.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        descriptiveStatistics11.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics11.getSumsqImpl();
        double double17 = descriptiveStatistics11.getPercentile(Double.NaN);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics11.getGeometricMeanImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic18);
        double double20 = descriptiveStatistics6.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics6.getMinImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics1.setPercentileImpl(univariateStatistic21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray11 = descriptiveStatistics8.getValues();
        double double12 = descriptiveStatistics8.getVariance();
        double double13 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic14);
        descriptiveStatistics5.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double19 = descriptiveStatistics18.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getSkewnessImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic20);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        descriptiveStatistics23.addValue((double) 0);
        int int29 = descriptiveStatistics23.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics23.getGeometricMeanImpl();
        descriptiveStatistics23.setWindowSize((int) (byte) 1);
        long long33 = descriptiveStatistics23.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        descriptiveStatistics34.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        double double44 = descriptiveStatistics40.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics50.getKurtosisImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic55);
        descriptiveStatistics40.setSumImpl(univariateStatistic55);
        descriptiveStatistics34.setSumsqImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics34.getPercentileImpl();
        double double60 = descriptiveStatistics23.apply(univariateStatistic59);
        descriptiveStatistics1.setPercentileImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str63 = descriptiveStatistics62.toString();
        descriptiveStatistics62.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics65.getKurtosisImpl();
        double[] doubleArray68 = descriptiveStatistics65.getValues();
        double double69 = descriptiveStatistics65.getVariance();
        double double70 = descriptiveStatistics65.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics65.getKurtosisImpl();
        descriptiveStatistics62.setMaxImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics75 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics75.getSumsqImpl();
        descriptiveStatistics73.setKurtosisImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics80.getSumsqImpl();
        descriptiveStatistics78.setKurtosisImpl(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics78.getKurtosisImpl();
        descriptiveStatistics73.setMaxImpl(univariateStatistic83);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics85 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics85.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics87 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics87.getSumsqImpl();
        descriptiveStatistics85.setKurtosisImpl(univariateStatistic88);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics85.getKurtosisImpl();
        descriptiveStatistics73.setGeometricMeanImpl(univariateStatistic90);
        double double92 = descriptiveStatistics73.getMin();
        double[] doubleArray93 = descriptiveStatistics73.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic94 = descriptiveStatistics73.getKurtosisImpl();
        descriptiveStatistics62.setMaxImpl(univariateStatistic94);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic96 = descriptiveStatistics62.getMinImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic96);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str63, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(descriptiveStatistics75);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertNotNull(descriptiveStatistics85);
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertNotNull(descriptiveStatistics87);
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic94);
        org.junit.Assert.assertNotNull(univariateStatistic96);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMeanImpl();
        double double11 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateStatistic12);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(10);
        java.lang.Class<?> wildcardClass2 = descriptiveStatistics1.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass2);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getGeometricMeanImpl();
        java.lang.Class<?> wildcardClass5 = descriptiveStatistics3.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass5);
        double double7 = descriptiveStatistics6.getMax();
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str21 = descriptiveStatistics20.toString();
        double double22 = descriptiveStatistics20.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        descriptiveStatistics20.setSkewnessImpl(univariateStatistic26);
        double double29 = descriptiveStatistics20.getStandardDeviation();
        descriptiveStatistics20.clear();
        descriptiveStatistics20.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        descriptiveStatistics33.addValue((double) 0);
        int int39 = descriptiveStatistics33.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics33.getGeometricMeanImpl();
        descriptiveStatistics20.setVarianceImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double44 = descriptiveStatistics43.getStandardDeviation();
        long long45 = descriptiveStatistics43.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics43.getSkewnessImpl();
        double double47 = descriptiveStatistics20.apply(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics48.getKurtosisImpl();
        double[] doubleArray51 = descriptiveStatistics48.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics48.getVarianceImpl();
        double double53 = descriptiveStatistics48.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str55 = descriptiveStatistics54.toString();
        double double56 = descriptiveStatistics54.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        descriptiveStatistics54.setSkewnessImpl(univariateStatistic60);
        double double63 = descriptiveStatistics54.getStandardDeviation();
        descriptiveStatistics54.clear();
        double double65 = descriptiveStatistics54.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        descriptiveStatistics71.setKurtosisImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics71.getKurtosisImpl();
        descriptiveStatistics66.setMaxImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics80.getSumsqImpl();
        descriptiveStatistics78.setKurtosisImpl(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics78.getKurtosisImpl();
        descriptiveStatistics66.setGeometricMeanImpl(univariateStatistic83);
        descriptiveStatistics54.setSumImpl(univariateStatistic83);
        descriptiveStatistics48.setMinImpl(univariateStatistic83);
        double double87 = descriptiveStatistics20.apply(univariateStatistic83);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics20.getKurtosisImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic88);
        double double90 = descriptiveStatistics0.getMin();
        double double91 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str55, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double6 = descriptiveStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics5.setMinImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getMaxImpl();
        double double20 = descriptiveStatistics1.getMin();
        double double21 = descriptiveStatistics1.getMean();
        double double22 = descriptiveStatistics1.getSum();
        java.lang.String str23 = descriptiveStatistics1.toString();
        long long24 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics1.getSkewnessImpl();
        double double26 = descriptiveStatistics1.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics0.apply(univariateStatistic26);
        double double29 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics30.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics30.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics30.getSumsqImpl();
        double double38 = descriptiveStatistics30.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics30.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        double[] doubleArray50 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double51 = univariateStatistic46.evaluate(doubleArray50);
        descriptiveStatistics40.setMaxImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getKurtosisImpl();
        long long56 = descriptiveStatistics53.getN();
        double[] doubleArray57 = descriptiveStatistics53.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics53.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics53.getMeanImpl();
        descriptiveStatistics40.setGeometricMeanImpl(univariateStatistic59);
        descriptiveStatistics30.setGeometricMeanImpl(univariateStatistic59);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics63.getKurtosisImpl();
        long long66 = descriptiveStatistics63.getN();
        double double67 = descriptiveStatistics63.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        descriptiveStatistics68.setKurtosisImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics75 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics75.getSumsqImpl();
        descriptiveStatistics73.setKurtosisImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics73.getKurtosisImpl();
        descriptiveStatistics68.setMaxImpl(univariateStatistic78);
        descriptiveStatistics63.setSumImpl(univariateStatistic78);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic78);
        double double82 = descriptiveStatistics0.getMax();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2.0d + "'", double51 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(descriptiveStatistics75);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getVarianceImpl();
        java.lang.String str16 = descriptiveStatistics0.toString();
        double double17 = descriptiveStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getMax();
        descriptiveStatistics0.setWindowSize((int) (short) 10);
        double double11 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getKurtosisImpl();
        long long13 = descriptiveStatistics0.getN();
        double double14 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        int int11 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.addValue((double) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double12 = descriptiveStatistics11.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getGeometricMeanImpl();
        double double14 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        descriptiveStatistics15.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics15.getPercentileImpl();
        descriptiveStatistics11.setSumsqImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double25 = descriptiveStatistics24.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        descriptiveStatistics26.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        descriptiveStatistics32.setMaxImpl(univariateStatistic42);
        double double44 = descriptiveStatistics32.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics32.getMinImpl();
        descriptiveStatistics26.setMinImpl(univariateStatistic45);
        descriptiveStatistics24.setMeanImpl(univariateStatistic45);
        descriptiveStatistics11.setMaxImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics11.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.setWindowSize(35);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(1);
        double double2 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getPercentileImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        double double14 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str16 = descriptiveStatistics15.toString();
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics18.setSkewnessImpl(univariateStatistic24);
        double double27 = descriptiveStatistics18.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double30 = descriptiveStatistics29.getStandardDeviation();
        long long31 = descriptiveStatistics29.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics29.getMinImpl();
        descriptiveStatistics18.setVarianceImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics18.getMeanImpl();
        descriptiveStatistics15.setMeanImpl(univariateStatistic34);
        int int36 = descriptiveStatistics15.getWindowSize();
        int int37 = descriptiveStatistics15.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics15.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics15.getGeometricMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = null;
        descriptiveStatistics0.setSumsqImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics0.getVarianceImpl();
        double double44 = descriptiveStatistics0.getMean();
        double double45 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics46.getKurtosisImpl();
        long long49 = descriptiveStatistics46.getN();
        double[] doubleArray50 = descriptiveStatistics46.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics46.getMinImpl();
        double double53 = descriptiveStatistics46.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str55 = descriptiveStatistics54.toString();
        descriptiveStatistics54.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics54.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics59.getKurtosisImpl();
        long long62 = descriptiveStatistics59.getN();
        double double63 = descriptiveStatistics59.getMax();
        double double64 = descriptiveStatistics59.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double66 = descriptiveStatistics65.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics65.getMinImpl();
        descriptiveStatistics59.setSumImpl(univariateStatistic67);
        descriptiveStatistics54.setSumImpl(univariateStatistic67);
        double double70 = descriptiveStatistics54.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics54.getVarianceImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str74 = descriptiveStatistics73.toString();
        double double75 = descriptiveStatistics73.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        descriptiveStatistics76.setKurtosisImpl(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics76.getKurtosisImpl();
        double double82 = descriptiveStatistics73.apply(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics84 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double85 = descriptiveStatistics84.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics84.getGeometricMeanImpl();
        descriptiveStatistics73.setMeanImpl(univariateStatistic86);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics73.getSumImpl();
        descriptiveStatistics46.setGeometricMeanImpl(univariateStatistic88);
        double double90 = descriptiveStatistics46.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics46.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic92 = descriptiveStatistics46.getPercentileImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic92);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str55, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str74, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertNotNull(univariateStatistic91);
        org.junit.Assert.assertNotNull(univariateStatistic92);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(13, (float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(52, (float) 10L, 11.5f);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getKurtosisImpl();
        double double3 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        double[] doubleArray14 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double15 = univariateStatistic10.evaluate(doubleArray14);
        descriptiveStatistics4.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        double[] doubleArray21 = descriptiveStatistics17.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getMeanImpl();
        descriptiveStatistics4.setGeometricMeanImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        double double32 = descriptiveStatistics26.getStandardDeviation();
        double double33 = descriptiveStatistics26.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics26.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double37 = descriptiveStatistics36.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getGeometricMeanImpl();
        double double39 = descriptiveStatistics36.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        double[] doubleArray43 = descriptiveStatistics40.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics40.getVarianceImpl();
        descriptiveStatistics36.setSumsqImpl(univariateStatistic44);
        double double46 = descriptiveStatistics26.apply(univariateStatistic44);
        descriptiveStatistics4.setVarianceImpl(univariateStatistic44);
        double double48 = descriptiveStatistics4.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double51 = descriptiveStatistics50.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics50.getGeometricMeanImpl();
        double double53 = descriptiveStatistics50.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics54.getKurtosisImpl();
        double[] doubleArray57 = descriptiveStatistics54.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics54.getVarianceImpl();
        descriptiveStatistics50.setSumsqImpl(univariateStatistic58);
        double double60 = descriptiveStatistics4.apply(univariateStatistic58);
        descriptiveStatistics1.setMeanImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getKurtosisImpl();
        long long65 = descriptiveStatistics62.getN();
        double[] doubleArray66 = descriptiveStatistics62.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics62.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = null;
        descriptiveStatistics62.setSkewnessImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = null;
        descriptiveStatistics62.setGeometricMeanImpl(univariateStatistic70);
        double double72 = descriptiveStatistics62.getSumsq();
        double double73 = descriptiveStatistics62.getSumsq();
        descriptiveStatistics62.addValue(32.0d);
        descriptiveStatistics62.clear();
        descriptiveStatistics62.clear();
        double double78 = descriptiveStatistics62.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics79.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics79.getKurtosisImpl();
        double[] doubleArray82 = descriptiveStatistics79.getValues();
        double double83 = descriptiveStatistics79.getVariance();
        double double84 = descriptiveStatistics79.getMax();
        descriptiveStatistics79.addValue((double) 100L);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics79.getMinImpl();
        descriptiveStatistics79.addValue((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics79.getPercentileImpl();
        double double91 = descriptiveStatistics62.apply(univariateStatistic90);
        descriptiveStatistics1.setMeanImpl(univariateStatistic90);
        double double93 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2.0d + "'", double15 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(descriptiveStatistics79);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics6.setMaxImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getMeanImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic25);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double29 = descriptiveStatistics28.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        descriptiveStatistics30.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setMinImpl(univariateStatistic49);
        descriptiveStatistics28.setMeanImpl(univariateStatistic49);
        descriptiveStatistics1.setMinImpl(univariateStatistic49);
        double double53 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics1.getGeometricMeanImpl();
        descriptiveStatistics1.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double57 = descriptiveStatistics1.getPercentile(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(univariateStatistic54);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10, 10.0f, (float) (short) 10, 0);
        int int5 = resizableDoubleArray4.getExpansionMode();
        double[] doubleArray6 = resizableDoubleArray4.getValues();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray4.discardFrontElements(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getGeometricMeanImpl();
        double double14 = descriptiveStatistics0.getStandardDeviation();
        double double15 = descriptiveStatistics0.getVariance();
        long long16 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double19 = descriptiveStatistics18.getStandardDeviation();
        long long20 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getSkewnessImpl();
        java.lang.String str22 = descriptiveStatistics18.toString();
        double double23 = descriptiveStatistics18.getVariance();
        descriptiveStatistics18.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        descriptiveStatistics18.setSkewnessImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.getVariance();
        long long35 = descriptiveStatistics0.getN();
        double double36 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics0.getPercentileImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getKurtosisImpl();
        long long23 = descriptiveStatistics20.getN();
        descriptiveStatistics20.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics20.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setNumElements((int) ' ');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        double double7 = descriptiveStatistics0.getSumsq();
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getSum();
        double double10 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double double12 = descriptiveStatistics8.getMax();
        double double13 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double15 = descriptiveStatistics14.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics8.setSumImpl(univariateStatistic16);
        descriptiveStatistics3.setSumImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics19.setMaxImpl(univariateStatistic29);
        double double31 = descriptiveStatistics3.apply(univariateStatistic29);
        double double32 = descriptiveStatistics0.apply(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics0.getSumsqImpl();
        int int34 = descriptiveStatistics0.getWindowSize();
        double double35 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#', (float) 54);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        double[] doubleArray8 = resizableDoubleArray0.getValues();
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics0.apply(univariateStatistic26);
        double double29 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics30.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics30.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics30.getSumsqImpl();
        double double38 = descriptiveStatistics30.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics30.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        double[] doubleArray50 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double51 = univariateStatistic46.evaluate(doubleArray50);
        descriptiveStatistics40.setMaxImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getKurtosisImpl();
        long long56 = descriptiveStatistics53.getN();
        double[] doubleArray57 = descriptiveStatistics53.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics53.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics53.getMeanImpl();
        descriptiveStatistics40.setGeometricMeanImpl(univariateStatistic59);
        descriptiveStatistics30.setGeometricMeanImpl(univariateStatistic59);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic59);
        double double63 = descriptiveStatistics0.getSkewness();
        double[] doubleArray64 = descriptiveStatistics0.getSortedValues();
        double double65 = descriptiveStatistics0.getSum();
        java.lang.String str66 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2.0d + "'", double51 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str66, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        resizableDoubleArray1.setElement(2, (double) (byte) 1);
        double double6 = resizableDoubleArray1.addElementRolling((double) '#');
        double[] doubleArray7 = resizableDoubleArray1.getValues();
        int int8 = resizableDoubleArray1.getExpansionMode();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 1.0, 35.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (short) 0, (double) (byte) 100);
        int int5 = resizableDoubleArray0.getExpansionMode();
        int int6 = resizableDoubleArray0.getExpansionMode();
        float float7 = resizableDoubleArray0.getContractionCriteria();
        int int8 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        double[] doubleArray14 = descriptiveStatistics0.getValues();
        descriptiveStatistics0.setWindowSize(102);
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics19.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        double[] doubleArray30 = descriptiveStatistics26.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics26.getMinImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str35 = descriptiveStatistics34.toString();
        double double36 = descriptiveStatistics34.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        descriptiveStatistics34.setSkewnessImpl(univariateStatistic40);
        double double43 = descriptiveStatistics34.getStandardDeviation();
        double[] doubleArray44 = descriptiveStatistics34.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics34.getMeanImpl();
        descriptiveStatistics19.setSumsqImpl(univariateStatistic45);
        descriptiveStatistics0.setMinImpl(univariateStatistic45);
        double double48 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str35, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        int int3 = resizableDoubleArray0.getNumElements();
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.start();
        resizableDoubleArray0.setNumElements(11);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setExpansionMode((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        double double6 = resizableDoubleArray0.addElementRolling((double) (short) 1);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setContractionCriteria((float) ' ');
        resizableDoubleArray0.addElement(9.545941546018392d);
        resizableDoubleArray0.addElement((double) 32);
        resizableDoubleArray0.addElement((double) 90);
        resizableDoubleArray0.setElement((int) (byte) 1, (double) 90);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getGeometricMeanImpl();
        double double12 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSkewnessImpl();
        double double14 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setNumElements(100);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.discardFrontElements(97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        int int12 = resizableDoubleArray0.getNumElements();
        double double14 = resizableDoubleArray0.addElementRolling((double) (short) 1);
        double[] doubleArray15 = resizableDoubleArray0.getValues();
        double double17 = resizableDoubleArray0.addElementRolling(101.0d);
        double double19 = resizableDoubleArray0.getElement(0);
        float float20 = resizableDoubleArray0.getContractionCriteria();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 1.0, 101.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 1.0, 101.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 2.5f + "'", float20 == 2.5f);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        int int8 = descriptiveStatistics0.getWindowSize();
        double double9 = descriptiveStatistics0.getVariance();
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        double double11 = descriptiveStatistics0.getMin();
        java.lang.String str12 = descriptiveStatistics0.toString();
        double double13 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        descriptiveStatistics0.setWindowSize((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        int int11 = descriptiveStatistics5.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics5.getMinImpl();
        double double13 = descriptiveStatistics0.apply(univariateStatistic12);
        double double14 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        long long25 = descriptiveStatistics22.getN();
        double[] doubleArray26 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics22.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics22.getMinImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics15.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics15.getVarianceImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.getSum();
        double[] doubleArray35 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic36);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        descriptiveStatistics11.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic15);
        double double17 = descriptiveStatistics1.getMax();
        long long18 = descriptiveStatistics1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getMaxImpl();
        double double11 = descriptiveStatistics1.getPercentile((double) 35);
        long long12 = descriptiveStatistics1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        double double7 = descriptiveStatistics1.getMax();
        double double8 = descriptiveStatistics1.getVariance();
        double double10 = descriptiveStatistics1.getPercentile(10.448979591836734d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double[] doubleArray15 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        double double23 = descriptiveStatistics17.getStandardDeviation();
        double double24 = descriptiveStatistics17.getSum();
        long long25 = descriptiveStatistics17.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic26);
        double double28 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        descriptiveStatistics29.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics29.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics29.getSumsqImpl();
        double double37 = descriptiveStatistics29.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics29.getSumsqImpl();
        double[] doubleArray39 = descriptiveStatistics29.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        descriptiveStatistics40.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics40.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getKurtosisImpl();
        long long50 = descriptiveStatistics47.getN();
        double[] doubleArray51 = descriptiveStatistics47.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics47.getMinImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic53);
        descriptiveStatistics40.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics40.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics40.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics40.getMaxImpl();
        descriptiveStatistics29.setMinImpl(univariateStatistic58);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics1.getPercentileImpl();
        double double62 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        resizableDoubleArray0.setElement((int) (byte) 1, 0.0d);
        double double13 = resizableDoubleArray0.getElement(10);
        float float14 = resizableDoubleArray0.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.5f + "'", float14 == 2.5f);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = resizableDoubleArray0.getElement(101);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 101 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setNumElements(10);
        int int8 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) (short) 0, 10.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) (-1.0f));
        resizableDoubleArray0.addElement((double) 100);
        resizableDoubleArray0.contract();
        double[] doubleArray11 = resizableDoubleArray0.getValues();
        java.lang.Class<?> wildcardClass12 = resizableDoubleArray0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getKurtosisImpl();
        double double3 = descriptiveStatistics1.getMin();
        double double4 = descriptiveStatistics1.getVariance();
        double double5 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        double double8 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics9.getKurtosisImpl();
        double double15 = descriptiveStatistics6.apply(univariateStatistic14);
        double double16 = descriptiveStatistics6.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        double double35 = descriptiveStatistics18.apply(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double37 = descriptiveStatistics36.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double40 = descriptiveStatistics39.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics39.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double44 = descriptiveStatistics43.getStandardDeviation();
        long long45 = descriptiveStatistics43.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics43.getMinImpl();
        descriptiveStatistics39.setMaxImpl(univariateStatistic46);
        descriptiveStatistics36.setMinImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics49.getKurtosisImpl();
        long long52 = descriptiveStatistics49.getN();
        double double53 = descriptiveStatistics49.getMax();
        double double54 = descriptiveStatistics49.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double56 = descriptiveStatistics55.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getMinImpl();
        descriptiveStatistics49.setSumImpl(univariateStatistic57);
        double double59 = descriptiveStatistics36.apply(univariateStatistic57);
        descriptiveStatistics18.setMinImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str62 = descriptiveStatistics61.toString();
        double double63 = descriptiveStatistics61.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getKurtosisImpl();
        double double70 = descriptiveStatistics61.apply(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str72 = descriptiveStatistics71.toString();
        descriptiveStatistics71.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics71.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics61.setMeanImpl(univariateStatistic75);
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic75);
        descriptiveStatistics6.setSumImpl(univariateStatistic75);
        descriptiveStatistics1.setMinImpl(univariateStatistic75);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str62, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str72, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        float float9 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        float float12 = resizableDoubleArray0.getExpansionFactor();
        float float13 = resizableDoubleArray0.getExpansionFactor();
        double double15 = resizableDoubleArray0.getElement(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.0f + "'", float13 == 2.0f);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(42, 32.5f, 35.5f, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        double double17 = descriptiveStatistics0.apply(univariateStatistic15);
        long long18 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double double26 = descriptiveStatistics0.getPercentile((double) (short) 10);
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics0.getMinImpl();
        java.lang.Class<?> wildcardClass30 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass30);
        double double32 = descriptiveStatistics31.getMax();
        double double33 = descriptiveStatistics31.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        descriptiveStatistics13.setSumImpl(univariateStatistic28);
        descriptiveStatistics7.setSumsqImpl(univariateStatistic28);
        double double33 = descriptiveStatistics7.getPercentile((double) (short) 10);
        descriptiveStatistics7.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics7.getMaxImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double40 = descriptiveStatistics39.getStandardDeviation();
        double double41 = descriptiveStatistics39.getVariance();
        double double42 = descriptiveStatistics39.getSum();
        long long43 = descriptiveStatistics39.getN();
        int int44 = descriptiveStatistics39.getWindowSize();
        double double45 = descriptiveStatistics39.getMax();
        descriptiveStatistics39.addValue((double) 32.0f);
        double double49 = descriptiveStatistics39.getPercentile((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        descriptiveStatistics50.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics50.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics50.getSumsqImpl();
        double double58 = descriptiveStatistics50.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics50.getMeanImpl();
        descriptiveStatistics39.setVarianceImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics39.getSumImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 32.0d + "'", double49 == 32.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic62);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double21 = descriptiveStatistics20.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        long long25 = descriptiveStatistics22.getN();
        descriptiveStatistics22.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics28.setMaxImpl(univariateStatistic38);
        double double40 = descriptiveStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics28.getMinImpl();
        descriptiveStatistics22.setMinImpl(univariateStatistic41);
        descriptiveStatistics20.setMeanImpl(univariateStatistic41);
        descriptiveStatistics0.setSumImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.setWindowSize(31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics48.getKurtosisImpl();
        long long51 = descriptiveStatistics48.getN();
        descriptiveStatistics48.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics59.getKurtosisImpl();
        descriptiveStatistics54.setMaxImpl(univariateStatistic64);
        double double66 = descriptiveStatistics54.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics54.getMinImpl();
        descriptiveStatistics48.setMinImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics48.getVarianceImpl();
        descriptiveStatistics48.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics71.getKurtosisImpl();
        long long74 = descriptiveStatistics71.getN();
        descriptiveStatistics71.addValue((double) 0);
        int int77 = descriptiveStatistics71.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics71.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics71.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = null;
        descriptiveStatistics71.setSumImpl(univariateStatistic80);
        java.lang.String str82 = descriptiveStatistics71.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics71.getVarianceImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic83);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics86 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double87 = descriptiveStatistics86.getMean();
        double[] doubleArray88 = descriptiveStatistics86.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics86.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics86.getKurtosisImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic90);
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: 0.0\nmax: 0.0\nmean: 0.0\nstd dev: 0.0\nmedian: 0.0\nskewness: NaN\nkurtosis: NaN\n" + "'", str82, "DescriptiveStatistics:\nn: 1\nmin: 0.0\nmax: 0.0\nmean: 0.0\nstd dev: 0.0\nmedian: 0.0\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic89);
        org.junit.Assert.assertNotNull(univariateStatistic90);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double21 = descriptiveStatistics20.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        long long25 = descriptiveStatistics22.getN();
        descriptiveStatistics22.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics28.setMaxImpl(univariateStatistic38);
        double double40 = descriptiveStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics28.getMinImpl();
        descriptiveStatistics22.setMinImpl(univariateStatistic41);
        descriptiveStatistics20.setMeanImpl(univariateStatistic41);
        descriptiveStatistics0.setSumImpl(univariateStatistic41);
        java.lang.String str45 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        double double5 = descriptiveStatistics1.getMean();
        double double6 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getMeanImpl();
        double double9 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray10 = descriptiveStatistics7.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getKurtosisImpl();
        long long14 = descriptiveStatistics11.getN();
        double[] doubleArray15 = descriptiveStatistics11.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics11.getMinImpl();
        double double18 = descriptiveStatistics11.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str20 = descriptiveStatistics19.toString();
        double double21 = descriptiveStatistics19.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        descriptiveStatistics19.setSkewnessImpl(univariateStatistic25);
        double double28 = descriptiveStatistics19.getStandardDeviation();
        descriptiveStatistics19.clear();
        double double30 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics19.getGeometricMeanImpl();
        descriptiveStatistics11.setGeometricMeanImpl(univariateStatistic31);
        descriptiveStatistics7.setSumsqImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics7.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str36 = descriptiveStatistics35.toString();
        double double37 = descriptiveStatistics35.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        descriptiveStatistics35.setSkewnessImpl(univariateStatistic41);
        double double44 = descriptiveStatistics35.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double47 = descriptiveStatistics46.getStandardDeviation();
        long long48 = descriptiveStatistics46.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics46.getMinImpl();
        descriptiveStatistics35.setVarianceImpl(univariateStatistic49);
        int int51 = descriptiveStatistics35.getWindowSize();
        java.lang.String str52 = descriptiveStatistics35.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double55 = descriptiveStatistics54.getStandardDeviation();
        long long56 = descriptiveStatistics54.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics54.getMinImpl();
        double double58 = descriptiveStatistics54.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        descriptiveStatistics60.setKurtosisImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics60.getKurtosisImpl();
        double[] doubleArray69 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double70 = univariateStatistic65.evaluate(doubleArray69);
        descriptiveStatistics59.setMaxImpl(univariateStatistic65);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics72.getKurtosisImpl();
        long long75 = descriptiveStatistics72.getN();
        double[] doubleArray76 = descriptiveStatistics72.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics72.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics72.getMeanImpl();
        descriptiveStatistics59.setGeometricMeanImpl(univariateStatistic78);
        descriptiveStatistics54.setGeometricMeanImpl(univariateStatistic78);
        descriptiveStatistics35.setSumImpl(univariateStatistic78);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics7.setMaxImpl(univariateStatistic82);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic82);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics0.getSkewnessImpl();
        double double86 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.addValue((double) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str20, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str36, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str52, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2.0d + "'", double70 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(univariateStatistic89);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getSumsq();
        descriptiveStatistics0.addValue(32.0d);
        descriptiveStatistics0.clear();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str17 = descriptiveStatistics16.toString();
        double double18 = descriptiveStatistics16.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics16.setSkewnessImpl(univariateStatistic22);
        double double25 = descriptiveStatistics16.getStandardDeviation();
        descriptiveStatistics16.clear();
        descriptiveStatistics16.setWindowSize((int) (short) -1);
        double double29 = descriptiveStatistics16.getMax();
        double double30 = descriptiveStatistics16.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics16.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double34 = descriptiveStatistics33.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics36.getKurtosisImpl();
        double double42 = descriptiveStatistics36.getStandardDeviation();
        double double43 = descriptiveStatistics36.getSum();
        int int44 = descriptiveStatistics36.getWindowSize();
        int int45 = descriptiveStatistics36.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics36.getVarianceImpl();
        descriptiveStatistics33.setSumImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics33.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic48);
        long long50 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getMinImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        double double11 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getKurtosisImpl();
        double[] doubleArray15 = descriptiveStatistics12.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics12.getVarianceImpl();
        double double17 = descriptiveStatistics12.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics18.setSkewnessImpl(univariateStatistic24);
        double double27 = descriptiveStatistics18.getStandardDeviation();
        descriptiveStatistics18.clear();
        double double29 = descriptiveStatistics18.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getKurtosisImpl();
        descriptiveStatistics30.setMaxImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        descriptiveStatistics30.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics18.setSumImpl(univariateStatistic47);
        descriptiveStatistics12.setMinImpl(univariateStatistic47);
        double double51 = descriptiveStatistics12.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        descriptiveStatistics52.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics52.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics52.getSumsqImpl();
        double double60 = descriptiveStatistics52.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getKurtosisImpl();
        double[] doubleArray65 = descriptiveStatistics62.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics66.getKurtosisImpl();
        double[] doubleArray75 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double76 = univariateStatistic71.evaluate(doubleArray75);
        descriptiveStatistics62.setMaxImpl(univariateStatistic71);
        descriptiveStatistics52.setMaxImpl(univariateStatistic71);
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic71);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics1.getPercentileImpl();
        java.lang.String str83 = descriptiveStatistics1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 2.0d + "'", double76 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str83, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        double double17 = descriptiveStatistics0.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double19 = descriptiveStatistics18.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double22 = descriptiveStatistics21.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double26 = descriptiveStatistics25.getStandardDeviation();
        long long27 = descriptiveStatistics25.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getMinImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic28);
        descriptiveStatistics18.setMinImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double double35 = descriptiveStatistics31.getMax();
        double double36 = descriptiveStatistics31.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double38 = descriptiveStatistics37.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getMinImpl();
        descriptiveStatistics31.setSumImpl(univariateStatistic39);
        double double41 = descriptiveStatistics18.apply(univariateStatistic39);
        descriptiveStatistics0.setMinImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str44 = descriptiveStatistics43.toString();
        double double45 = descriptiveStatistics43.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        double double52 = descriptiveStatistics43.apply(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str54 = descriptiveStatistics53.toString();
        descriptiveStatistics53.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics53.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics53.getSumsqImpl();
        descriptiveStatistics43.setMeanImpl(univariateStatistic57);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic57);
        double double60 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics0.getPercentileImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str44, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str54, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        descriptiveStatistics1.setWindowSize((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (short) 1);
        int int7 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        int int9 = resizableDoubleArray0.getExpansionMode();
        float float10 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setNumElements(100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        resizableDoubleArray0.setElement((int) '#', 2.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        int int11 = resizableDoubleArray0.getExpansionMode();
        double double13 = resizableDoubleArray0.getElement(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36 + "'", int10 == 36);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getKurtosisImpl();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        double double9 = descriptiveStatistics7.getVariance();
        double double10 = descriptiveStatistics7.getSum();
        double double12 = descriptiveStatistics7.getPercentile(2.0d);
        double double13 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics7.getGeometricMeanImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str17 = descriptiveStatistics16.toString();
        double double18 = descriptiveStatistics16.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics16.setSkewnessImpl(univariateStatistic22);
        double double25 = descriptiveStatistics16.getStandardDeviation();
        descriptiveStatistics16.clear();
        double double27 = descriptiveStatistics16.getSum();
        double double28 = descriptiveStatistics16.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str30 = descriptiveStatistics29.toString();
        double double31 = descriptiveStatistics29.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        descriptiveStatistics29.setSkewnessImpl(univariateStatistic35);
        double double38 = descriptiveStatistics29.getStandardDeviation();
        descriptiveStatistics29.clear();
        descriptiveStatistics29.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getKurtosisImpl();
        long long45 = descriptiveStatistics42.getN();
        descriptiveStatistics42.addValue((double) 0);
        int int48 = descriptiveStatistics42.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics42.getGeometricMeanImpl();
        descriptiveStatistics29.setVarianceImpl(univariateStatistic49);
        descriptiveStatistics16.setSumImpl(univariateStatistic49);
        double double52 = descriptiveStatistics16.getMin();
        double[] doubleArray53 = descriptiveStatistics16.getSortedValues();
        double double54 = descriptiveStatistics16.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double57 = descriptiveStatistics56.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double60 = descriptiveStatistics59.getStandardDeviation();
        long long61 = descriptiveStatistics59.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics59.getMinImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray63 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int64 = resizableDoubleArray63.getExpansionMode();
        resizableDoubleArray63.addElement(0.0d);
        int int67 = resizableDoubleArray63.getExpansionMode();
        double[] doubleArray68 = resizableDoubleArray63.getElements();
        double double69 = univariateStatistic62.evaluate(doubleArray68);
        descriptiveStatistics56.setMinImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        descriptiveStatistics71.setKurtosisImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        descriptiveStatistics76.setKurtosisImpl(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics76.getKurtosisImpl();
        descriptiveStatistics71.setMaxImpl(univariateStatistic81);
        double double83 = descriptiveStatistics71.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics71.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics71.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics71.getPercentileImpl();
        descriptiveStatistics56.setVarianceImpl(univariateStatistic86);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics56.getPercentileImpl();
        descriptiveStatistics16.setSkewnessImpl(univariateStatistic88);
        descriptiveStatistics0.setMinImpl(univariateStatistic88);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str30, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertNotNull(univariateStatistic91);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setExpansionMode((int) (short) 1);
        int int4 = resizableDoubleArray0.getExpansionMode();
        int int5 = resizableDoubleArray0.getExpansionMode();
        double double7 = resizableDoubleArray0.addElementRolling((double) 35.0f);
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setElement(10, (double) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics16.getVarianceImpl();
        descriptiveStatistics14.setMinImpl(univariateStatistic30);
        double double32 = descriptiveStatistics14.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics14.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        long long37 = descriptiveStatistics34.getN();
        double[] doubleArray38 = descriptiveStatistics34.getValues();
        double double39 = descriptiveStatistics34.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double42 = descriptiveStatistics41.getStandardDeviation();
        long long43 = descriptiveStatistics41.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics34.setSumImpl(univariateStatistic44);
        descriptiveStatistics14.setSumImpl(univariateStatistic44);
        descriptiveStatistics0.setSumImpl(univariateStatistic44);
        double[] doubleArray48 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics0.getSkewnessImpl();
        double[] doubleArray50 = descriptiveStatistics0.getValues();
        double double51 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics6.setMaxImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getMeanImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic25);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double29 = descriptiveStatistics28.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        descriptiveStatistics30.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setMinImpl(univariateStatistic49);
        descriptiveStatistics28.setMeanImpl(univariateStatistic49);
        descriptiveStatistics1.setMinImpl(univariateStatistic49);
        double double53 = descriptiveStatistics1.getMax();
        int int54 = descriptiveStatistics1.getWindowSize();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        double double17 = descriptiveStatistics8.getStandardDeviation();
        descriptiveStatistics8.clear();
        double double19 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic20);
        double double22 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        descriptiveStatistics23.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        long long32 = descriptiveStatistics29.getN();
        double double33 = descriptiveStatistics29.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        descriptiveStatistics34.setMaxImpl(univariateStatistic44);
        descriptiveStatistics29.setSumImpl(univariateStatistic44);
        descriptiveStatistics23.setSumsqImpl(univariateStatistic44);
        double double49 = descriptiveStatistics23.getPercentile((double) (short) 10);
        descriptiveStatistics23.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics23.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double55 = descriptiveStatistics54.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics54.getGeometricMeanImpl();
        double double57 = descriptiveStatistics54.getMean();
        double double58 = descriptiveStatistics54.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics54.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics54.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double63 = descriptiveStatistics62.getStandardDeviation();
        long long64 = descriptiveStatistics62.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics62.getSkewnessImpl();
        java.lang.String str66 = descriptiveStatistics62.toString();
        double double67 = descriptiveStatistics62.getVariance();
        descriptiveStatistics62.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics62.getMaxImpl();
        double[] doubleArray71 = descriptiveStatistics62.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics62.getKurtosisImpl();
        descriptiveStatistics54.setSumImpl(univariateStatistic72);
        descriptiveStatistics23.setMinImpl(univariateStatistic72);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str66, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic72);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        descriptiveStatistics16.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getSkewnessImpl();
        descriptiveStatistics9.setSumsqImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics9.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics9.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic25);
        descriptiveStatistics0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = descriptiveStatistics0.getPercentile(10006.25d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 10006.25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.addValue((double) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics10.setMaxImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics22.getKurtosisImpl();
        descriptiveStatistics10.setGeometricMeanImpl(univariateStatistic27);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic27);
        double double30 = descriptiveStatistics0.getKurtosis();
        double double31 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(53, (double) 2L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0]");
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.contract();
        double double6 = resizableDoubleArray0.addElementRolling((double) 4);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str21 = descriptiveStatistics20.toString();
        double double22 = descriptiveStatistics20.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        descriptiveStatistics20.setSkewnessImpl(univariateStatistic26);
        double double29 = descriptiveStatistics20.getStandardDeviation();
        descriptiveStatistics20.clear();
        descriptiveStatistics20.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        descriptiveStatistics33.addValue((double) 0);
        int int39 = descriptiveStatistics33.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics33.getGeometricMeanImpl();
        descriptiveStatistics20.setVarianceImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double44 = descriptiveStatistics43.getStandardDeviation();
        long long45 = descriptiveStatistics43.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics43.getSkewnessImpl();
        double double47 = descriptiveStatistics20.apply(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics48.getKurtosisImpl();
        double[] doubleArray51 = descriptiveStatistics48.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics48.getVarianceImpl();
        double double53 = descriptiveStatistics48.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str55 = descriptiveStatistics54.toString();
        double double56 = descriptiveStatistics54.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        descriptiveStatistics54.setSkewnessImpl(univariateStatistic60);
        double double63 = descriptiveStatistics54.getStandardDeviation();
        descriptiveStatistics54.clear();
        double double65 = descriptiveStatistics54.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        descriptiveStatistics71.setKurtosisImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics71.getKurtosisImpl();
        descriptiveStatistics66.setMaxImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics80.getSumsqImpl();
        descriptiveStatistics78.setKurtosisImpl(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics78.getKurtosisImpl();
        descriptiveStatistics66.setGeometricMeanImpl(univariateStatistic83);
        descriptiveStatistics54.setSumImpl(univariateStatistic83);
        descriptiveStatistics48.setMinImpl(univariateStatistic83);
        double double87 = descriptiveStatistics20.apply(univariateStatistic83);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics20.getKurtosisImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic88);
        double double90 = descriptiveStatistics0.getMin();
        double double91 = descriptiveStatistics0.getStandardDeviation();
        java.lang.String str92 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic93 = descriptiveStatistics0.getPercentileImpl();
        double double94 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str55, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str92, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic93);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(54, 32.5f);
        resizableDoubleArray2.addElement((double) 32);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        double double7 = descriptiveStatistics5.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic11);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic11);
        double double15 = descriptiveStatistics0.getGeometricMean();
        double double17 = descriptiveStatistics0.getPercentile((double) 100L);
        double double18 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.setWindowSize(33);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double[] doubleArray15 = descriptiveStatistics1.getSortedValues();
        descriptiveStatistics1.setWindowSize((int) (short) 1);
        double double18 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getSumImpl();
        java.lang.Class<?> wildcardClass20 = univariateStatistic19.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        int int8 = resizableDoubleArray0.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = resizableDoubleArray0.getElement(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 32 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.clear();
        resizableDoubleArray1.clear();
        resizableDoubleArray1.addElement((double) (short) 100);
        double double7 = resizableDoubleArray1.addElementRolling(11224.999999999996d);
        resizableDoubleArray1.setElement(11, (double) 2);
        resizableDoubleArray1.setExpansionFactor((float) 2L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getMinImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        double double12 = descriptiveStatistics1.getPercentile(Double.NaN);
        double double13 = descriptiveStatistics1.getGeometricMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getSumImpl();
        double double24 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics18.getSumImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getGeometricMeanImpl();
        long long29 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue(23.583333333333332d);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        double double3 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getMax();
        descriptiveStatistics0.addValue((double) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMeanImpl();
        double double11 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        double double14 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getKurtosisImpl();
        double double21 = descriptiveStatistics12.apply(univariateStatistic20);
        double double22 = descriptiveStatistics12.getSumsq();
        double double23 = descriptiveStatistics12.getMean();
        double double24 = descriptiveStatistics12.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        double double34 = descriptiveStatistics30.getMax();
        double double35 = descriptiveStatistics30.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double37 = descriptiveStatistics36.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setSumImpl(univariateStatistic38);
        descriptiveStatistics25.setSumImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        descriptiveStatistics41.setMaxImpl(univariateStatistic51);
        double double53 = descriptiveStatistics25.apply(univariateStatistic51);
        double double54 = descriptiveStatistics12.apply(univariateStatistic51);
        double double55 = descriptiveStatistics12.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics12.getPercentileImpl();
        double double57 = descriptiveStatistics0.apply(univariateStatistic56);
        double[] doubleArray58 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0]");
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        java.lang.String str12 = descriptiveStatistics0.toString();
        double double13 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = null;
        descriptiveStatistics0.setSumImpl(univariateStatistic14);
        double double16 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        int int7 = resizableDoubleArray0.getNumElements();
        int int8 = resizableDoubleArray0.getExpansionMode();
        int int9 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.start();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 2.0f);
        double[] doubleArray13 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setElement(4, 10100.0d);
        double[] doubleArray17 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 10100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 2.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 10100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 2.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 0.0, 0.0, 10100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 2.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.addValue(11225.0d);
        double double20 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getMaxImpl();
        double double22 = descriptiveStatistics0.getStandardDeviation();
        double double23 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 11224.999999999996d + "'", double20 == 11224.999999999996d);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 11225.0d + "'", double23 == 11225.0d);
        org.junit.Assert.assertNotNull(univariateStatistic24);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        double double13 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getSkewnessImpl();
        java.lang.Class<?> wildcardClass15 = univariateStatistic14.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.moment.Skewness cannot be cast to org.apache.commons.math.stat.descriptive.DescriptiveStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        double double10 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        double double12 = resizableDoubleArray0.getElement((int) (short) 0);
        int int13 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getMaxImpl();
        double[] doubleArray10 = descriptiveStatistics1.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics11.clear();
        double double17 = descriptiveStatistics11.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics11.getVarianceImpl();
        double double19 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics11.getMaxImpl();
        double double21 = descriptiveStatistics1.apply(univariateStatistic20);
        double double22 = descriptiveStatistics1.getGeometricMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getMaxImpl();
        double double13 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics14.getSumsqImpl();
        double double22 = descriptiveStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics14.getPercentileImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getGeometricMeanImpl();
        double double29 = descriptiveStatistics25.getMax();
        double[] doubleArray30 = descriptiveStatistics25.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        descriptiveStatistics32.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getKurtosisImpl();
        long long41 = descriptiveStatistics38.getN();
        double double42 = descriptiveStatistics38.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics48.getKurtosisImpl();
        descriptiveStatistics43.setMaxImpl(univariateStatistic53);
        descriptiveStatistics38.setSumImpl(univariateStatistic53);
        descriptiveStatistics32.setSumsqImpl(univariateStatistic53);
        double double58 = descriptiveStatistics32.getPercentile((double) (short) 10);
        descriptiveStatistics32.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics32.getMaxImpl();
        descriptiveStatistics25.setSumsqImpl(univariateStatistic61);
        descriptiveStatistics0.setSumImpl(univariateStatistic61);
        java.lang.String str64 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str64, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getGeometricMean();
        long long6 = descriptiveStatistics0.getN();
        descriptiveStatistics0.clear();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        long long17 = descriptiveStatistics10.getN();
        int int18 = descriptiveStatistics10.getWindowSize();
        double double19 = descriptiveStatistics10.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics20.setMaxImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics32.getKurtosisImpl();
        descriptiveStatistics20.setGeometricMeanImpl(univariateStatistic37);
        double double39 = descriptiveStatistics20.getMin();
        double double40 = descriptiveStatistics20.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str42 = descriptiveStatistics41.toString();
        java.lang.String str43 = descriptiveStatistics41.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getKurtosisImpl();
        long long47 = descriptiveStatistics44.getN();
        descriptiveStatistics44.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getSkewnessImpl();
        descriptiveStatistics41.setSumsqImpl(univariateStatistic50);
        double double52 = descriptiveStatistics41.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics41.getSkewnessImpl();
        double double54 = descriptiveStatistics20.apply(univariateStatistic53);
        descriptiveStatistics10.setSumsqImpl(univariateStatistic53);
        descriptiveStatistics0.setMinImpl(univariateStatistic53);
        double double57 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str42, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray11 = descriptiveStatistics8.getValues();
        double double12 = descriptiveStatistics8.getVariance();
        double double13 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic14);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics1.getMaxImpl();
        double double18 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        double double10 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        double double12 = resizableDoubleArray0.getElement((int) (short) 0);
        int int13 = resizableDoubleArray0.start();
        float float14 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        double[] doubleArray17 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.0f + "'", float14 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(68);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getPercentileImpl();
        org.junit.Assert.assertNotNull(univariateStatistic2);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) -1, (float) 90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: -1must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        descriptiveStatistics11.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic15);
        double double17 = descriptiveStatistics1.getMax();
        double double18 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = null;
        descriptiveStatistics1.setVarianceImpl(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double15 = descriptiveStatistics14.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        descriptiveStatistics16.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getKurtosisImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic32);
        double double34 = descriptiveStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics22.getMinImpl();
        descriptiveStatistics16.setMinImpl(univariateStatistic35);
        descriptiveStatistics14.setMeanImpl(univariateStatistic35);
        descriptiveStatistics1.setMaxImpl(univariateStatistic35);
        descriptiveStatistics1.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics1.getMeanImpl();
        double double41 = descriptiveStatistics1.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        double double18 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double21 = descriptiveStatistics20.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str24 = descriptiveStatistics23.toString();
        descriptiveStatistics23.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics23.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray28 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int29 = resizableDoubleArray28.start();
        resizableDoubleArray28.addElement((double) 10);
        int int32 = resizableDoubleArray28.getExpansionMode();
        resizableDoubleArray28.addElement((double) (-1L));
        double[] doubleArray35 = resizableDoubleArray28.getElements();
        double double38 = univariateStatistic27.evaluate(doubleArray35, (int) (byte) 1, 1);
        double double39 = descriptiveStatistics20.apply(univariateStatistic27);
        double double40 = descriptiveStatistics20.getMean();
        java.lang.String str41 = descriptiveStatistics20.toString();
        long long42 = descriptiveStatistics20.getN();
        double double43 = descriptiveStatistics20.getSum();
        double double44 = descriptiveStatistics20.getMax();
        double double45 = descriptiveStatistics20.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double48 = descriptiveStatistics47.getStandardDeviation();
        long long49 = descriptiveStatistics47.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics47.getSkewnessImpl();
        java.lang.String str51 = descriptiveStatistics47.toString();
        double double52 = descriptiveStatistics47.getVariance();
        descriptiveStatistics47.setWindowSize((int) (short) 100);
        descriptiveStatistics47.setWindowSize((int) (short) -1);
        double double57 = descriptiveStatistics47.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics47.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getKurtosisImpl();
        descriptiveStatistics59.setMaxImpl(univariateStatistic69);
        double double71 = descriptiveStatistics59.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics59.getMinImpl();
        descriptiveStatistics59.setWindowSize((int) (short) 100);
        double double76 = descriptiveStatistics59.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics59.getPercentileImpl();
        descriptiveStatistics47.setMinImpl(univariateStatistic77);
        descriptiveStatistics20.setGeometricMeanImpl(univariateStatistic77);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics81 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str82 = descriptiveStatistics81.toString();
        java.lang.String str83 = descriptiveStatistics81.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics84 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics84.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics84.getKurtosisImpl();
        long long87 = descriptiveStatistics84.getN();
        descriptiveStatistics84.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics84.getSkewnessImpl();
        descriptiveStatistics81.setSumsqImpl(univariateStatistic90);
        double double92 = descriptiveStatistics81.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic93 = descriptiveStatistics81.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic94 = descriptiveStatistics81.getMaxImpl();
        double[] doubleArray95 = descriptiveStatistics81.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic96 = descriptiveStatistics81.getSumImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic96);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str24, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str41, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str51, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str82, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str83, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics84);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(univariateStatistic93);
        org.junit.Assert.assertNotNull(univariateStatistic94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic96);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics4.getKurtosisImpl();
        double double7 = descriptiveStatistics4.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double9 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getSumImpl();
        descriptiveStatistics4.setMinImpl(univariateStatistic10);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic10);
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        double double18 = descriptiveStatistics14.getMax();
        double double19 = descriptiveStatistics14.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double21 = descriptiveStatistics20.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getMinImpl();
        descriptiveStatistics14.setSumImpl(univariateStatistic22);
        double[] doubleArray24 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics14.getMeanImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic25);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(31, (double) 101);
        resizableDoubleArray0.setElement(31, 101.0d);
        resizableDoubleArray0.addElement(10.5d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setContractionCriteria(32.0f);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics13.apply(univariateStatistic21);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getMin();
        double double25 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.addValue((double) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        long long31 = descriptiveStatistics28.getN();
        double double32 = descriptiveStatistics28.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics38.getKurtosisImpl();
        descriptiveStatistics33.setMaxImpl(univariateStatistic43);
        descriptiveStatistics28.setSumImpl(univariateStatistic43);
        double double46 = descriptiveStatistics28.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double48 = descriptiveStatistics47.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str51 = descriptiveStatistics50.toString();
        descriptiveStatistics50.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics50.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray55 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int56 = resizableDoubleArray55.start();
        resizableDoubleArray55.addElement((double) 10);
        int int59 = resizableDoubleArray55.getExpansionMode();
        resizableDoubleArray55.addElement((double) (-1L));
        double[] doubleArray62 = resizableDoubleArray55.getElements();
        double double65 = univariateStatistic54.evaluate(doubleArray62, (int) (byte) 1, 1);
        double double66 = descriptiveStatistics47.apply(univariateStatistic54);
        double double67 = descriptiveStatistics47.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics68.getKurtosisImpl();
        long long71 = descriptiveStatistics68.getN();
        descriptiveStatistics68.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics68.getVarianceImpl();
        int int75 = descriptiveStatistics68.getWindowSize();
        double double76 = descriptiveStatistics68.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics68.getMaxImpl();
        double double78 = descriptiveStatistics47.apply(univariateStatistic77);
        descriptiveStatistics28.setMeanImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics28.getVarianceImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic80);
        java.lang.String str82 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str51, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: 100.0\nmax: 10000.0\nmean: 100.0\nstd dev: 0.0\nmedian: 100.0\nskewness: NaN\nkurtosis: 10000.0\n" + "'", str82, "DescriptiveStatistics:\nn: 1\nmin: 100.0\nmax: 10000.0\nmean: 100.0\nstd dev: 0.0\nmedian: 100.0\nskewness: NaN\nkurtosis: 10000.0\n");
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 1);
        float float13 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray14 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.0f + "'", float13 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0]");
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = null;
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic5);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double[] doubleArray17 = descriptiveStatistics13.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        double double25 = descriptiveStatistics21.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        descriptiveStatistics26.setMaxImpl(univariateStatistic36);
        descriptiveStatistics21.setSumImpl(univariateStatistic36);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics0.getSkewnessImpl();
        double double41 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.setWindowSize(52);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        long long7 = descriptiveStatistics0.getN();
        double double8 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        double double19 = descriptiveStatistics15.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics20.setMaxImpl(univariateStatistic30);
        descriptiveStatistics15.setSumImpl(univariateStatistic30);
        descriptiveStatistics9.setSumsqImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str35 = descriptiveStatistics34.toString();
        descriptiveStatistics34.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics34.getGeometricMeanImpl();
        double double38 = descriptiveStatistics34.getMax();
        double double39 = descriptiveStatistics34.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics34.getVarianceImpl();
        descriptiveStatistics9.setMeanImpl(univariateStatistic40);
        double double42 = descriptiveStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics9.getSumImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics45.getKurtosisImpl();
        double double51 = descriptiveStatistics45.getStandardDeviation();
        double double52 = descriptiveStatistics45.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics45.getPercentileImpl();
        double[] doubleArray59 = new double[] { 2, (byte) 1, 52.0d, 0L, 100.0d };
        double double60 = univariateStatistic53.evaluate(doubleArray59);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getKurtosisImpl();
        long long65 = descriptiveStatistics62.getN();
        double[] doubleArray66 = descriptiveStatistics62.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics62.getSumImpl();
        double double68 = descriptiveStatistics62.getVariance();
        double double69 = descriptiveStatistics62.getMax();
        double double70 = descriptiveStatistics62.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str72 = descriptiveStatistics71.toString();
        descriptiveStatistics71.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics71.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics71.getSumsqImpl();
        double double77 = descriptiveStatistics71.getPercentile(Double.NaN);
        double double78 = descriptiveStatistics71.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics62.setMaxImpl(univariateStatistic79);
        descriptiveStatistics0.setMinImpl(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str35, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[2.0, 1.0, 52.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2.0d + "'", double60 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str72, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(univariateStatistic79);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement(32.0d);
        resizableDoubleArray0.discardFrontElements(0);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor(52.5f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        long long7 = descriptiveStatistics0.getN();
        double double8 = descriptiveStatistics0.getStandardDeviation();
        long long9 = descriptiveStatistics0.getN();
        double double11 = descriptiveStatistics0.getPercentile((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getMeanImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        long long16 = descriptiveStatistics15.getN();
        descriptiveStatistics15.clear();
        java.lang.String str18 = descriptiveStatistics15.toString();
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics20.setMaxImpl(univariateStatistic30);
        double double32 = descriptiveStatistics20.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics20.getMinImpl();
        descriptiveStatistics20.setWindowSize((int) (short) 100);
        java.lang.String str36 = descriptiveStatistics20.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double39 = descriptiveStatistics38.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getGeometricMeanImpl();
        double double41 = descriptiveStatistics38.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getKurtosisImpl();
        long long45 = descriptiveStatistics42.getN();
        descriptiveStatistics42.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics42.getPercentileImpl();
        descriptiveStatistics38.setSumsqImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double52 = descriptiveStatistics51.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getKurtosisImpl();
        long long56 = descriptiveStatistics53.getN();
        descriptiveStatistics53.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getKurtosisImpl();
        descriptiveStatistics59.setMaxImpl(univariateStatistic69);
        double double71 = descriptiveStatistics59.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics59.getMinImpl();
        descriptiveStatistics53.setMinImpl(univariateStatistic72);
        descriptiveStatistics51.setMeanImpl(univariateStatistic72);
        descriptiveStatistics38.setMaxImpl(univariateStatistic72);
        descriptiveStatistics20.setMaxImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray78 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int79 = resizableDoubleArray78.getExpansionMode();
        int int80 = resizableDoubleArray78.getNumElements();
        double[] doubleArray81 = resizableDoubleArray78.getElements();
        double[] doubleArray82 = resizableDoubleArray78.getElements();
        resizableDoubleArray78.setNumElements((int) (byte) 100);
        resizableDoubleArray78.discardFrontElements((int) (byte) 100);
        resizableDoubleArray78.contract();
        double[] doubleArray88 = resizableDoubleArray78.getValues();
        double double91 = univariateStatistic77.evaluate(doubleArray88, (int) (short) 1, (int) (byte) 0);
        descriptiveStatistics15.setMaxImpl(univariateStatistic77);
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str36, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getVarianceImpl();
        java.lang.String str16 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getPercentileImpl();
        double double21 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double26 = descriptiveStatistics25.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getGeometricMeanImpl();
        double double28 = descriptiveStatistics25.getMean();
        double double29 = descriptiveStatistics25.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getMaxImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics1.getPercentileImpl();
        java.lang.Class<?> wildcardClass12 = univariateStatistic11.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.rank.Percentile cannot be cast to org.apache.commons.math.stat.descriptive.DescriptiveStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics12.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setSumImpl(univariateStatistic29);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics0.getMinImpl();
        double double36 = descriptiveStatistics0.getPercentile((double) 32);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 32);
        int int6 = resizableDoubleArray0.getExpansionMode();
        float float7 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.0f + "'", float7 == 2.0f);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = null;
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic5);
        double double7 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getGeometricMeanImpl();
        double[] doubleArray9 = descriptiveStatistics1.getSortedValues();
        double double10 = descriptiveStatistics1.getGeometricMean();
        double double11 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getMaxImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics1.setPercentileImpl(univariateStatistic15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.getExpansionMode();
        int int7 = resizableDoubleArray0.getExpansionMode();
        double double9 = resizableDoubleArray0.addElementRolling(0.9897959183673456d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) -1, (float) 92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: -1must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        descriptiveStatistics1.clear();
        long long22 = descriptiveStatistics1.getN();
        descriptiveStatistics1.addValue(0.0d);
        descriptiveStatistics1.clear();
        double double26 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        double double11 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.addValue((double) 100);
        double double14 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getSumImpl();
        double double16 = descriptiveStatistics0.getMax();
        long long17 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getSkewness();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        java.lang.String str6 = descriptiveStatistics0.toString();
        double double7 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) (byte) 0, (double) (-1));
        int int10 = resizableDoubleArray0.getExpansionMode();
        float float11 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 42);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.0f + "'", float11 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0]");
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getGeometricMeanImpl();
        descriptiveStatistics1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) (byte) 10);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements(2);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 102);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        double double2 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getSkewnessImpl();
        double double4 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#', (float) 32, (float) 100, (int) (short) 1);
        double[] doubleArray5 = resizableDoubleArray4.getValues();
        float float6 = resizableDoubleArray4.getExpansionFactor();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 32.0f + "'", float6 == 32.0f);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        int int5 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        double double7 = descriptiveStatistics0.getSkewness();
        double[] doubleArray8 = descriptiveStatistics0.getSortedValues();
        double double9 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        double double13 = descriptiveStatistics11.getVariance();
        double double14 = descriptiveStatistics11.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        double double25 = descriptiveStatistics21.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        descriptiveStatistics26.setMaxImpl(univariateStatistic36);
        descriptiveStatistics21.setSumImpl(univariateStatistic36);
        descriptiveStatistics15.setSumsqImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics15.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        descriptiveStatistics41.setMaxImpl(univariateStatistic51);
        double double53 = descriptiveStatistics41.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics41.getMinImpl();
        descriptiveStatistics41.setWindowSize((int) (short) 100);
        double double58 = descriptiveStatistics41.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics41.getPercentileImpl();
        descriptiveStatistics15.setMinImpl(univariateStatistic59);
        descriptiveStatistics11.setSumsqImpl(univariateStatistic59);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(univariateStatistic59);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        double double11 = resizableDoubleArray0.addElementRolling((double) 11);
        int int12 = resizableDoubleArray0.getNumElements();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[11.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        double double7 = resizableDoubleArray0.addElementRolling((double) 100L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic12);
        java.lang.Class<?> wildcardClass14 = descriptiveStatistics1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        double double7 = descriptiveStatistics0.getMin();
        double double8 = descriptiveStatistics0.getVariance();
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getPercentileImpl();
        double[] doubleArray11 = descriptiveStatistics0.getSortedValues();
        double double12 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double[] doubleArray25 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double28 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getGeometricMeanImpl();
        double double30 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        double[] doubleArray34 = descriptiveStatistics31.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics31.getVarianceImpl();
        descriptiveStatistics27.setSumsqImpl(univariateStatistic35);
        descriptiveStatistics0.setMeanImpl(univariateStatistic35);
        double double38 = descriptiveStatistics0.getSumsq();
        java.lang.String str39 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str39, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement(31.0d);
        int int13 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        double double21 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getPercentileImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = descriptiveStatistics0.getPercentile(10201.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 10201.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic22);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        double[] doubleArray20 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getKurtosisImpl();
        double double22 = descriptiveStatistics0.getMean();
        double double23 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = null;
        descriptiveStatistics0.setMinImpl(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic24);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(13);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        double double2 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getSkewnessImpl();
        double double4 = descriptiveStatistics0.getMean();
        double double5 = descriptiveStatistics0.getSumsq();
        double double6 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double2 = descriptiveStatistics1.getMean();
        double double3 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getPercentileImpl();
        double[] doubleArray5 = descriptiveStatistics1.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getMeanImpl();
        double double8 = descriptiveStatistics1.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = null;
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic5);
        double double7 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getGeometricMeanImpl();
        double[] doubleArray9 = descriptiveStatistics1.getSortedValues();
        int int10 = descriptiveStatistics1.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        double double14 = descriptiveStatistics12.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        double double16 = descriptiveStatistics12.getSumsq();
        descriptiveStatistics12.addValue(32.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics12.getMaxImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double22 = descriptiveStatistics21.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getMaxImpl();
        double double25 = descriptiveStatistics21.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getSkewnessImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray27 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int28 = resizableDoubleArray27.getExpansionMode();
        resizableDoubleArray27.addElement(0.0d);
        int int31 = resizableDoubleArray27.getNumElements();
        int int32 = resizableDoubleArray27.getExpansionMode();
        int int33 = resizableDoubleArray27.start();
        double double35 = resizableDoubleArray27.addElementRolling((double) (byte) 100);
        int int36 = resizableDoubleArray27.getNumElements();
        double[] doubleArray37 = resizableDoubleArray27.getElements();
        double double38 = univariateStatistic26.evaluate(doubleArray37);
        descriptiveStatistics1.setMeanImpl(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setContractionCriteria((float) 10);
        double double15 = resizableDoubleArray0.addElementRolling((double) 31);
        resizableDoubleArray0.addElement((double) (short) 0);
        double double19 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        double double21 = resizableDoubleArray0.addElementRolling(10201.0d);
        resizableDoubleArray0.addElement(100.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getKurtosisImpl();
        long long4 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic5);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getGeometricMeanImpl();
        double double14 = descriptiveStatistics0.getStandardDeviation();
        double double15 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) (byte) 0, (double) (-1));
        int int10 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setContractionCriteria((float) 'a');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        int int6 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements(100);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMeanImpl();
        double[] doubleArray11 = descriptiveStatistics0.getValues();
        double double12 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        double[] doubleArray25 = descriptiveStatistics21.getValues();
        descriptiveStatistics21.addValue(1.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics21.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        long long32 = descriptiveStatistics29.getN();
        descriptiveStatistics29.addValue((double) 0);
        int int35 = descriptiveStatistics29.getWindowSize();
        double double36 = descriptiveStatistics29.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics29.getMeanImpl();
        double double38 = descriptiveStatistics29.getKurtosis();
        double double40 = descriptiveStatistics29.getPercentile((double) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        double double43 = descriptiveStatistics41.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics41.getSkewnessImpl();
        descriptiveStatistics29.setMaxImpl(univariateStatistic44);
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic44);
        descriptiveStatistics13.setMinImpl(univariateStatistic44);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic44);
        double double49 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.setWindowSize(36);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(100, (double) 1.0f);
        resizableDoubleArray0.setNumElements(101);
        resizableDoubleArray0.setElement((int) (short) 0, (double) 2.0f);
        resizableDoubleArray0.addElement((double) 35.5f);
        int int16 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#');
        resizableDoubleArray1.addElement((double) (short) 0);
        resizableDoubleArray1.setElement(0, 5.4999999999999964d);
        double[] doubleArray7 = resizableDoubleArray1.getElements();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[5.4999999999999964]");
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        descriptiveStatistics8.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics8.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        descriptiveStatistics15.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics8.setSumsqImpl(univariateStatistic21);
        double double23 = descriptiveStatistics8.getStandardDeviation();
        double double24 = descriptiveStatistics8.getSum();
        double double25 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str27 = descriptiveStatistics26.toString();
        double double28 = descriptiveStatistics26.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        double double35 = descriptiveStatistics26.apply(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double38 = descriptiveStatistics37.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getGeometricMeanImpl();
        descriptiveStatistics26.setMeanImpl(univariateStatistic39);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic39);
        descriptiveStatistics0.setSumImpl(univariateStatistic39);
        descriptiveStatistics0.addValue((double) 32.0f);
        java.lang.String str45 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: 32.0\nmax: 32.0\nmean: 32.0\nstd dev: 0.0\nmedian: 32.0\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 1\nmin: 32.0\nmax: 32.0\nmean: 32.0\nstd dev: 0.0\nmedian: 32.0\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic46);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        double double20 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(101, 2.5f, (float) 90, (int) (short) 1);
        int int5 = resizableDoubleArray4.getExpansionMode();
        resizableDoubleArray4.setElement(35, 101.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        double double7 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double10 = descriptiveStatistics9.getMean();
        double[] doubleArray11 = descriptiveStatistics9.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics9.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double20 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        descriptiveStatistics21.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics32.getKurtosisImpl();
        descriptiveStatistics27.setMaxImpl(univariateStatistic37);
        double double39 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics27.getMinImpl();
        descriptiveStatistics21.setMinImpl(univariateStatistic40);
        descriptiveStatistics19.setMeanImpl(univariateStatistic40);
        double double43 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics44.getKurtosisImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic49);
        double double51 = descriptiveStatistics13.apply(univariateStatistic49);
        descriptiveStatistics9.setMaxImpl(univariateStatistic49);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        descriptiveStatistics55.setKurtosisImpl(univariateStatistic58);
        descriptiveStatistics55.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics55.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getKurtosisImpl();
        long long67 = descriptiveStatistics64.getN();
        double[] doubleArray68 = descriptiveStatistics64.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics64.getMinImpl();
        double double71 = descriptiveStatistics62.apply(univariateStatistic70);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        descriptiveStatistics72.setKurtosisImpl(univariateStatistic75);
        descriptiveStatistics72.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics72.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics79.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics79.getKurtosisImpl();
        long long82 = descriptiveStatistics79.getN();
        descriptiveStatistics79.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics79.getSkewnessImpl();
        descriptiveStatistics72.setSumsqImpl(univariateStatistic85);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics72.getVarianceImpl();
        descriptiveStatistics62.setVarianceImpl(univariateStatistic87);
        double double89 = descriptiveStatistics55.apply(univariateStatistic87);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics55.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics55.getKurtosisImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic91);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(descriptiveStatistics79);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertNotNull(univariateStatistic91);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        double double3 = descriptiveStatistics0.getMax();
        double double4 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.addElement(100.0d);
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSkewnessImpl();
        double[] doubleArray7 = descriptiveStatistics0.getValues();
        double double8 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        int int5 = resizableDoubleArray0.getNumElements();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.addElement((double) 1);
        int int9 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 33 + "'", int9 == 33);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        resizableDoubleArray0.setNumElements(36);
        int int11 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        double double9 = resizableDoubleArray0.addElementRolling((double) 10);
        resizableDoubleArray0.addElement((double) ' ');
        double double13 = resizableDoubleArray0.getElement(0);
        resizableDoubleArray0.setNumElements((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double[] doubleArray7 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray11 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics8.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = null;
        descriptiveStatistics8.setMaxImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str16 = descriptiveStatistics15.toString();
        double double17 = descriptiveStatistics15.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getKurtosisImpl();
        double double24 = descriptiveStatistics15.apply(univariateStatistic23);
        double double25 = descriptiveStatistics15.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics15.getSumImpl();
        double double27 = descriptiveStatistics15.getMin();
        double[] doubleArray28 = descriptiveStatistics15.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        descriptiveStatistics29.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics29.getPercentileImpl();
        double double36 = descriptiveStatistics29.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getKurtosisImpl();
        double[] doubleArray40 = descriptiveStatistics37.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics37.getVarianceImpl();
        double double42 = descriptiveStatistics29.apply(univariateStatistic41);
        descriptiveStatistics15.setSumsqImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double46 = descriptiveStatistics45.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getGeometricMeanImpl();
        descriptiveStatistics15.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics8.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic47);
        double double51 = descriptiveStatistics0.getMax();
        double double52 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 1, (float) (short) 1, (float) 90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        double double6 = resizableDoubleArray0.addElementRolling((double) 52.5f);
        double double8 = resizableDoubleArray0.addElementRolling(99.00990099009901d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        double double12 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic19);
        double double22 = descriptiveStatistics13.getStandardDeviation();
        descriptiveStatistics13.clear();
        descriptiveStatistics13.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        descriptiveStatistics26.addValue((double) 0);
        int int32 = descriptiveStatistics26.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics26.getGeometricMeanImpl();
        descriptiveStatistics13.setVarianceImpl(univariateStatistic33);
        descriptiveStatistics0.setSumImpl(univariateStatistic33);
        double double36 = descriptiveStatistics0.getMin();
        java.lang.String str37 = descriptiveStatistics0.toString();
        double double39 = descriptiveStatistics0.getPercentile(16.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics0.getSumsqImpl();
        double double41 = descriptiveStatistics0.getSum();
        double double42 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics6.setMaxImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getMeanImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic25);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double29 = descriptiveStatistics28.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        descriptiveStatistics30.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setMinImpl(univariateStatistic49);
        descriptiveStatistics28.setMeanImpl(univariateStatistic49);
        descriptiveStatistics1.setMinImpl(univariateStatistic49);
        double double53 = descriptiveStatistics1.getMax();
        double double54 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics1.getSumsqImpl();
        double double56 = descriptiveStatistics1.getSkewness();
        double double57 = descriptiveStatistics1.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        java.lang.String str17 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        double[] doubleArray28 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double29 = univariateStatistic24.evaluate(doubleArray28);
        descriptiveStatistics18.setMaxImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double double35 = descriptiveStatistics31.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        descriptiveStatistics31.setSumImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics57.getKurtosisImpl();
        descriptiveStatistics52.setMaxImpl(univariateStatistic62);
        double double64 = descriptiveStatistics52.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics52.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics52.getVarianceImpl();
        descriptiveStatistics50.setMinImpl(univariateStatistic66);
        descriptiveStatistics31.setMeanImpl(univariateStatistic66);
        descriptiveStatistics18.setSumImpl(univariateStatistic66);
        double double70 = descriptiveStatistics0.apply(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics0.getMinImpl();
        double double72 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics0.getMeanImpl();
        double[] doubleArray74 = descriptiveStatistics0.getValues();
        java.lang.String str75 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.0d + "'", double29 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str75, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic76);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics13.apply(univariateStatistic21);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.addValue(52.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics0.getVarianceImpl();
        long long28 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double30 = descriptiveStatistics29.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        descriptiveStatistics31.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        descriptiveStatistics37.setMaxImpl(univariateStatistic47);
        double double49 = descriptiveStatistics37.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics37.getMinImpl();
        descriptiveStatistics31.setMinImpl(univariateStatistic50);
        descriptiveStatistics29.setMeanImpl(univariateStatistic50);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic50);
        int int54 = descriptiveStatistics0.getWindowSize();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        double double17 = descriptiveStatistics0.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getSumsqImpl();
        double double19 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getKurtosisImpl();
        double double6 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics7.setMaxImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        double double24 = descriptiveStatistics7.apply(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double26 = descriptiveStatistics25.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str29 = descriptiveStatistics28.toString();
        descriptiveStatistics28.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray33 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int34 = resizableDoubleArray33.start();
        resizableDoubleArray33.addElement((double) 10);
        int int37 = resizableDoubleArray33.getExpansionMode();
        resizableDoubleArray33.addElement((double) (-1L));
        double[] doubleArray40 = resizableDoubleArray33.getElements();
        double double43 = univariateStatistic32.evaluate(doubleArray40, (int) (byte) 1, 1);
        double double44 = descriptiveStatistics25.apply(univariateStatistic32);
        descriptiveStatistics7.setSumsqImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic46);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = descriptiveStatistics1.getElement(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 12 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(univariateStatistic46);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getKurtosis();
        descriptiveStatistics1.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getMeanImpl();
        double double6 = descriptiveStatistics1.getMax();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = descriptiveStatistics1.getElement(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 2 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics7.setMaxImpl(univariateStatistic17);
        double double19 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics7.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics7.getVarianceImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic21);
        java.lang.Class<?> wildcardClass23 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics25.getSumsqImpl();
        double double33 = descriptiveStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getKurtosisImpl();
        double[] doubleArray38 = descriptiveStatistics35.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        double[] doubleArray48 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double49 = univariateStatistic44.evaluate(doubleArray48);
        descriptiveStatistics35.setMaxImpl(univariateStatistic44);
        descriptiveStatistics25.setMaxImpl(univariateStatistic44);
        descriptiveStatistics24.setSumsqImpl(univariateStatistic44);
        double double53 = descriptiveStatistics24.getMax();
        long long54 = descriptiveStatistics24.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2.0d + "'", double49 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        double[] doubleArray6 = descriptiveStatistics2.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics2.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics2.getMeanImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic8);
        double double11 = descriptiveStatistics1.getPercentile((double) 2);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        descriptiveStatistics12.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        double[] doubleArray18 = descriptiveStatistics15.getValues();
        double double19 = descriptiveStatistics15.getVariance();
        double double20 = descriptiveStatistics15.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic21);
        descriptiveStatistics12.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double26 = descriptiveStatistics25.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getSkewnessImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic27);
        descriptiveStatistics1.setSumImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str31 = descriptiveStatistics30.toString();
        double double32 = descriptiveStatistics30.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        descriptiveStatistics30.setSkewnessImpl(univariateStatistic36);
        double double39 = descriptiveStatistics30.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double42 = descriptiveStatistics41.getStandardDeviation();
        long long43 = descriptiveStatistics41.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics41.getMinImpl();
        descriptiveStatistics30.setVarianceImpl(univariateStatistic44);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray46 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int47 = resizableDoubleArray46.start();
        resizableDoubleArray46.addElement((double) (byte) 0);
        resizableDoubleArray46.contract();
        resizableDoubleArray46.clear();
        int int52 = resizableDoubleArray46.getExpansionMode();
        resizableDoubleArray46.clear();
        resizableDoubleArray46.addElement(1.0d);
        double[] doubleArray56 = resizableDoubleArray46.getValues();
        double double57 = univariateStatistic44.evaluate(doubleArray56);
        descriptiveStatistics1.setMinImpl(univariateStatistic44);
        double double59 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str61 = descriptiveStatistics60.toString();
        descriptiveStatistics60.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics60.getKurtosisImpl();
        double double65 = descriptiveStatistics1.apply(univariateStatistic64);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str31, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str61, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.addElement((double) (short) 0);
        resizableDoubleArray0.setContractionCriteria((float) 42);
        double double12 = resizableDoubleArray0.getElement(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setContractionCriteria(1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        int int6 = resizableDoubleArray0.getNumElements();
        int int7 = resizableDoubleArray0.getNumElements();
        int int8 = resizableDoubleArray0.start();
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        java.lang.Class<?> wildcardClass10 = resizableDoubleArray0.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.util.ResizableDoubleArray cannot be cast to org.apache.commons.math.stat.descriptive.DescriptiveStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setElement(101, (double) 0L);
        double double14 = resizableDoubleArray0.getElement(2);
        int int15 = resizableDoubleArray0.getExpansionMode();
        double double17 = resizableDoubleArray0.getElement((int) ' ');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 0, (float) (byte) 10, (float) 13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        float float2 = resizableDoubleArray1.getExpansionFactor();
        int int3 = resizableDoubleArray1.getExpansionMode();
        int int4 = resizableDoubleArray1.start();
        resizableDoubleArray1.addElement(2.0d);
        double double8 = resizableDoubleArray1.addElementRolling((double) 98.0f);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.0f + "'", float2 == 2.0f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.0d + "'", double8 == 2.0d);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(100, (double) 1.0f);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        int int10 = resizableDoubleArray0.getExpansionMode();
        float float11 = resizableDoubleArray0.getContractionCriteria();
        int int12 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) (byte) 0);
        double[] doubleArray15 = resizableDoubleArray0.getValues();
        int int16 = resizableDoubleArray0.getExpansionMode();
        double double18 = resizableDoubleArray0.addElementRolling(0.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.5f + "'", float11 == 2.5f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 101 + "'", int12 == 101);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) (short) 100);
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        double double14 = resizableDoubleArray0.getElement((int) (short) 0);
        resizableDoubleArray0.addElement((double) 2.5f);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        double double7 = descriptiveStatistics1.getMax();
        descriptiveStatistics1.addValue((double) 32.0f);
        double double11 = descriptiveStatistics1.getPercentile((double) 10L);
        double double12 = descriptiveStatistics1.getSum();
        double double13 = descriptiveStatistics1.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 32.0d + "'", double11 == 32.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getGeometricMeanImpl();
        descriptiveStatistics0.clear();
        long long9 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSumImpl();
        double double24 = descriptiveStatistics1.getStandardDeviation();
        long long25 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double28 = descriptiveStatistics27.getStandardDeviation();
        double double29 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics27.getSumImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        descriptiveStatistics32.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics32.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics32.getSumsqImpl();
        double double40 = descriptiveStatistics32.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double43 = descriptiveStatistics42.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getKurtosisImpl();
        long long47 = descriptiveStatistics44.getN();
        descriptiveStatistics44.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        descriptiveStatistics55.setKurtosisImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics55.getKurtosisImpl();
        descriptiveStatistics50.setMaxImpl(univariateStatistic60);
        double double62 = descriptiveStatistics50.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics50.getMinImpl();
        descriptiveStatistics44.setMinImpl(univariateStatistic63);
        descriptiveStatistics42.setMeanImpl(univariateStatistic63);
        double double66 = descriptiveStatistics42.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics67.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics69.getSumsqImpl();
        descriptiveStatistics67.setKurtosisImpl(univariateStatistic70);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics67.getKurtosisImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic72);
        descriptiveStatistics32.setSumsqImpl(univariateStatistic72);
        descriptiveStatistics1.setMeanImpl(univariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(univariateStatistic72);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(102, (float) 68, (float) 102);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double double12 = descriptiveStatistics8.getMax();
        double double13 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double15 = descriptiveStatistics14.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics8.setSumImpl(univariateStatistic16);
        descriptiveStatistics3.setSumImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics19.setMaxImpl(univariateStatistic29);
        double double31 = descriptiveStatistics3.apply(univariateStatistic29);
        double double32 = descriptiveStatistics0.apply(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics0.getSumsqImpl();
        int int34 = descriptiveStatistics0.getWindowSize();
        java.lang.Class<?> wildcardClass35 = descriptiveStatistics0.getClass();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(102);
        resizableDoubleArray1.contract();
        resizableDoubleArray1.setContractionCriteria(32.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = resizableDoubleArray1.getElement(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 52 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        int int11 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double double14 = resizableDoubleArray0.addElementRolling((double) (-1L));
        resizableDoubleArray0.setNumElements(0);
        resizableDoubleArray0.addElement((double) 2.0f);
        int int19 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getGeometricMeanImpl();
        double double11 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getSumImpl();
        double double13 = descriptiveStatistics1.getGeometricMean();
        double double14 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double[] doubleArray25 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double26 = univariateStatistic21.evaluate(doubleArray25);
        descriptiveStatistics15.setMaxImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        long long31 = descriptiveStatistics28.getN();
        double[] doubleArray32 = descriptiveStatistics28.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics28.getMeanImpl();
        descriptiveStatistics15.setGeometricMeanImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getKurtosisImpl();
        long long39 = descriptiveStatistics36.getN();
        double double40 = descriptiveStatistics36.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        descriptiveStatistics41.setMaxImpl(univariateStatistic51);
        descriptiveStatistics36.setSumImpl(univariateStatistic51);
        descriptiveStatistics15.setSkewnessImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics15.getSkewnessImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray56 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int57 = resizableDoubleArray56.getExpansionMode();
        resizableDoubleArray56.addElement((double) 0);
        double double61 = resizableDoubleArray56.addElementRolling((double) 0.0f);
        resizableDoubleArray56.setElement((int) (byte) 10, (double) (short) -1);
        int int65 = resizableDoubleArray56.getNumElements();
        int int66 = resizableDoubleArray56.start();
        double[] doubleArray67 = resizableDoubleArray56.getElements();
        double double68 = univariateStatistic55.evaluate(doubleArray67);
        descriptiveStatistics1.setMinImpl(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2.0d + "'", double26 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getVarianceImpl();
        double double22 = descriptiveStatistics0.getPercentile((double) 35.0f);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        double double24 = descriptiveStatistics23.getSum();
        double double25 = descriptiveStatistics23.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics23.getMaxImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double double26 = descriptiveStatistics0.getPercentile((double) (short) 10);
        descriptiveStatistics0.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics32.getKurtosisImpl();
        long long35 = descriptiveStatistics32.getN();
        double[] doubleArray36 = descriptiveStatistics32.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics32.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics32.getMeanImpl();
        descriptiveStatistics31.setSumsqImpl(univariateStatistic38);
        double double40 = descriptiveStatistics31.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics31.getKurtosisImpl();
        double double42 = descriptiveStatistics31.getMax();
        double double43 = descriptiveStatistics31.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str45 = descriptiveStatistics44.toString();
        double double46 = descriptiveStatistics44.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getKurtosisImpl();
        double double53 = descriptiveStatistics44.apply(univariateStatistic52);
        double double54 = descriptiveStatistics44.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics44.getSumImpl();
        double double56 = descriptiveStatistics44.getMin();
        double[] doubleArray57 = descriptiveStatistics44.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        descriptiveStatistics58.setKurtosisImpl(univariateStatistic61);
        descriptiveStatistics58.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics58.getPercentileImpl();
        double double65 = descriptiveStatistics58.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics66.getKurtosisImpl();
        double[] doubleArray69 = descriptiveStatistics66.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics66.getVarianceImpl();
        double double71 = descriptiveStatistics58.apply(univariateStatistic70);
        descriptiveStatistics44.setSumsqImpl(univariateStatistic70);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double75 = descriptiveStatistics74.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics74.getGeometricMeanImpl();
        descriptiveStatistics44.setGeometricMeanImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics80.getSumsqImpl();
        descriptiveStatistics78.setKurtosisImpl(univariateStatistic81);
        double double83 = descriptiveStatistics44.apply(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics44.getMinImpl();
        descriptiveStatistics31.setMaxImpl(univariateStatistic84);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic84);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertNotNull(univariateStatistic88);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getSkewnessImpl();
        java.lang.String str9 = descriptiveStatistics5.toString();
        double double10 = descriptiveStatistics5.getVariance();
        descriptiveStatistics5.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double23 = descriptiveStatistics22.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics24.setWindowSize((int) (byte) -1);
        long long27 = descriptiveStatistics24.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics22.getKurtosisImpl();
        descriptiveStatistics22.setWindowSize((-1));
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics22.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics22.getSkewnessImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics1.getSkewnessImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((-1), 0.0f, (float) 11, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double double5 = descriptiveStatistics0.getKurtosis();
        long long6 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double double12 = descriptiveStatistics7.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getVarianceImpl();
        double double14 = descriptiveStatistics7.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getKurtosisImpl();
        double double21 = descriptiveStatistics15.getStandardDeviation();
        double double22 = descriptiveStatistics15.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics15.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double26 = descriptiveStatistics25.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getGeometricMeanImpl();
        double double28 = descriptiveStatistics25.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        double[] doubleArray32 = descriptiveStatistics29.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getVarianceImpl();
        descriptiveStatistics25.setSumsqImpl(univariateStatistic33);
        double double35 = descriptiveStatistics15.apply(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getVarianceImpl();
        descriptiveStatistics15.setMaxImpl(univariateStatistic38);
        descriptiveStatistics7.setSumImpl(univariateStatistic38);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic38);
        descriptiveStatistics0.setWindowSize(35);
        double double44 = descriptiveStatistics0.getStandardDeviation();
        double double45 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        int int6 = resizableDoubleArray0.start();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        int int9 = resizableDoubleArray0.getExpansionMode();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        double double6 = descriptiveStatistics0.getPercentile(Double.NaN);
        double double7 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double19 = descriptiveStatistics18.getStandardDeviation();
        long long20 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getMinImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics0.setMinImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getMean();
        double[] doubleArray25 = descriptiveStatistics0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = descriptiveStatistics0.getPercentile(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 'a');
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.getNumElements();
        float float11 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.addElement((double) 32.0f);
        int int14 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[97.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.0f + "'", float11 == 2.0f);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) -1, (float) 98, (float) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(0, (float) 10L, 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(10, (float) '#');
        float float3 = resizableDoubleArray2.getExpansionFactor();
        int int4 = resizableDoubleArray2.getNumElements();
        resizableDoubleArray2.clear();
        int int6 = resizableDoubleArray2.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray2.setContractionCriteria((float) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 35.0f + "'", float3 == 35.0f);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#', (float) '#', (float) 101, (int) (byte) 0);
        resizableDoubleArray4.setElement((int) '4', 10.5d);
        int int8 = resizableDoubleArray4.getNumElements();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        float float2 = resizableDoubleArray0.getContractionCriteria();
        int int3 = resizableDoubleArray0.getExpansionMode();
        float float4 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 2.0f);
        resizableDoubleArray0.discardFrontElements((int) (short) 1);
        resizableDoubleArray0.setElement(53, (double) 'a');
        float float12 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.5f + "'", float2 == 2.5f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.5f + "'", float4 == 2.5f);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.contract();
        double double5 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        resizableDoubleArray0.setContractionCriteria((float) 2);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        long long8 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double[] doubleArray15 = descriptiveStatistics1.getSortedValues();
        descriptiveStatistics1.addValue((double) 10.0f);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics18.setSkewnessImpl(univariateStatistic24);
        double double27 = descriptiveStatistics18.getStandardDeviation();
        descriptiveStatistics18.clear();
        double double29 = descriptiveStatistics18.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getKurtosisImpl();
        descriptiveStatistics30.setMaxImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        descriptiveStatistics30.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics18.setSumImpl(univariateStatistic47);
        descriptiveStatistics18.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics18.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics18.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic53);
        double double55 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        descriptiveStatistics1.setWindowSize(100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        double double9 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        descriptiveStatistics17.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        double[] doubleArray33 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double34 = univariateStatistic29.evaluate(doubleArray33);
        descriptiveStatistics17.setSkewnessImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics17.getGeometricMeanImpl();
        descriptiveStatistics7.setMinImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics7.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics7.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        double[] doubleArray44 = descriptiveStatistics40.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getSumImpl();
        double double46 = descriptiveStatistics40.getVariance();
        double double47 = descriptiveStatistics40.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        descriptiveStatistics48.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics48.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getKurtosisImpl();
        long long58 = descriptiveStatistics55.getN();
        descriptiveStatistics55.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics55.getSkewnessImpl();
        descriptiveStatistics48.setSumsqImpl(univariateStatistic61);
        double double63 = descriptiveStatistics48.getStandardDeviation();
        double double64 = descriptiveStatistics48.getSum();
        double double65 = descriptiveStatistics48.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str67 = descriptiveStatistics66.toString();
        double double68 = descriptiveStatistics66.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics69.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics69.setKurtosisImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics69.getKurtosisImpl();
        double double75 = descriptiveStatistics66.apply(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double78 = descriptiveStatistics77.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics77.getGeometricMeanImpl();
        descriptiveStatistics66.setMeanImpl(univariateStatistic79);
        descriptiveStatistics48.setSkewnessImpl(univariateStatistic79);
        descriptiveStatistics40.setSumImpl(univariateStatistic79);
        descriptiveStatistics7.setMeanImpl(univariateStatistic79);
        double double84 = descriptiveStatistics7.getMax();
        double double85 = descriptiveStatistics7.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics87 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double88 = descriptiveStatistics87.getStandardDeviation();
        double double89 = descriptiveStatistics87.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics87.getSumImpl();
        double double91 = descriptiveStatistics87.getVariance();
        double double92 = descriptiveStatistics87.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic93 = descriptiveStatistics87.getPercentileImpl();
        descriptiveStatistics7.setPercentileImpl(univariateStatistic93);
        descriptiveStatistics1.setMinImpl(univariateStatistic93);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2.0d + "'", double34 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str67, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(univariateStatistic93);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getKurtosisImpl();
        double double4 = descriptiveStatistics1.getSkewness();
        long long5 = descriptiveStatistics1.getN();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic9);
        double[] doubleArray11 = descriptiveStatistics1.getValues();
        double double12 = descriptiveStatistics1.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(92);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setElement((int) (short) 1, (double) '4');
        resizableDoubleArray0.setContractionCriteria(10.0f);
        double[] doubleArray11 = resizableDoubleArray0.getValues();
        double double13 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        float float14 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray15 = resizableDoubleArray0.getElements();
        int int16 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 52.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.0f + "'", float14 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        double double8 = resizableDoubleArray0.getElement(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str11 = descriptiveStatistics10.toString();
        double double12 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic16);
        double double19 = descriptiveStatistics10.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getMinImpl();
        descriptiveStatistics10.setVarianceImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics10.getMeanImpl();
        descriptiveStatistics7.setMeanImpl(univariateStatistic26);
        int int28 = descriptiveStatistics7.getWindowSize();
        int int29 = descriptiveStatistics7.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics7.getSumImpl();
        double double31 = descriptiveStatistics0.apply(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double34 = descriptiveStatistics33.getStandardDeviation();
        double double35 = descriptiveStatistics33.getKurtosis();
        descriptiveStatistics33.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics33.getMeanImpl();
        double[] doubleArray38 = descriptiveStatistics33.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double41 = univariateStatistic30.evaluate(doubleArray38, 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setElement((int) (short) 100, 0.0d);
        int int14 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray15 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        double double8 = resizableDoubleArray0.addElementRolling((double) 2.0f);
        resizableDoubleArray0.setContractionCriteria(35.0f);
        int int11 = resizableDoubleArray0.start();
        int int12 = resizableDoubleArray0.start();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 2.0, 2.0]");
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic13);
        double double15 = descriptiveStatistics0.getStandardDeviation();
        double double16 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getSumImpl();
        double double18 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        long long6 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getGeometricMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(625.0d);
        resizableDoubleArray0.contract();
        double[] doubleArray11 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setContractionCriteria((float) 36);
        int int14 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[625.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.start();
        float float10 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        double double15 = resizableDoubleArray0.addElementRolling((double) (byte) 10);
        resizableDoubleArray0.setExpansionMode((int) (byte) 1);
        double double19 = resizableDoubleArray0.getElement(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getVarianceImpl();
        double double18 = descriptiveStatistics0.getMin();
        double double19 = descriptiveStatistics0.getMean();
        double double20 = descriptiveStatistics0.getStandardDeviation();
        java.lang.String str21 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getMinImpl();
        double double11 = descriptiveStatistics1.getMin();
        double double12 = descriptiveStatistics1.getGeometricMean();
        double double13 = descriptiveStatistics1.getSumsq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double9 = descriptiveStatistics8.getStandardDeviation();
        long long10 = descriptiveStatistics8.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getSkewnessImpl();
        java.lang.String str12 = descriptiveStatistics8.toString();
        double double13 = descriptiveStatistics8.getVariance();
        descriptiveStatistics8.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic16);
        long long18 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(2);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str22 = descriptiveStatistics21.toString();
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double28 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double32 = descriptiveStatistics31.getStandardDeviation();
        long long33 = descriptiveStatistics31.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics31.getMinImpl();
        descriptiveStatistics27.setMaxImpl(univariateStatistic34);
        double double36 = descriptiveStatistics27.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics27.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics27.getMeanImpl();
        descriptiveStatistics21.setGeometricMeanImpl(univariateStatistic38);
        double double40 = descriptiveStatistics20.apply(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics20.getMeanImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic41);
        double double43 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double[] doubleArray9 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getSumImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic10);
        double double12 = descriptiveStatistics1.getMax();
        double double13 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double16 = descriptiveStatistics15.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getGeometricMeanImpl();
        double double18 = descriptiveStatistics15.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        descriptiveStatistics19.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics19.getPercentileImpl();
        descriptiveStatistics15.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double29 = descriptiveStatistics28.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        descriptiveStatistics30.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setMinImpl(univariateStatistic49);
        descriptiveStatistics28.setMeanImpl(univariateStatistic49);
        descriptiveStatistics15.setMaxImpl(univariateStatistic49);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics15.getMeanImpl();
        double double55 = descriptiveStatistics1.apply(univariateStatistic54);
        int int56 = descriptiveStatistics1.getWindowSize();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double[] doubleArray4 = descriptiveStatistics1.getSortedValues();
        double[] doubleArray5 = descriptiveStatistics1.getSortedValues();
        double double6 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double9 = descriptiveStatistics8.getStandardDeviation();
        long long10 = descriptiveStatistics8.getN();
        double double11 = descriptiveStatistics8.getMin();
        double double12 = descriptiveStatistics8.getMax();
        double double13 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic16);
        double[] doubleArray18 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics8.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getMaxImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic20);
        double double22 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSumImpl();
        double double24 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double[] doubleArray9 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getSumImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic10);
        descriptiveStatistics1.clear();
        double double13 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        descriptiveStatistics14.addValue((double) 0);
        int int20 = descriptiveStatistics14.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics21.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics21.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getVarianceImpl();
        descriptiveStatistics14.setMeanImpl(univariateStatistic35);
        descriptiveStatistics1.setMaxImpl(univariateStatistic35);
        double double38 = descriptiveStatistics1.getSumsq();
        long long39 = descriptiveStatistics1.getN();
        java.lang.String str40 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics41.getSkewnessImpl();
        double double44 = descriptiveStatistics41.getMin();
        double double45 = descriptiveStatistics41.getMax();
        double double46 = descriptiveStatistics41.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics41.getMinImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        double double51 = descriptiveStatistics49.getMin();
        double double52 = descriptiveStatistics49.getMax();
        descriptiveStatistics49.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics49.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics49.getMeanImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic56);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic9);
        double double12 = descriptiveStatistics0.getPercentile((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        double[] doubleArray16 = descriptiveStatistics13.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        double[] doubleArray21 = descriptiveStatistics17.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getMinImpl();
        double double24 = descriptiveStatistics17.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        double double27 = descriptiveStatistics25.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        descriptiveStatistics25.setSkewnessImpl(univariateStatistic31);
        double double34 = descriptiveStatistics25.getStandardDeviation();
        descriptiveStatistics25.clear();
        double double36 = descriptiveStatistics25.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics25.getGeometricMeanImpl();
        descriptiveStatistics17.setGeometricMeanImpl(univariateStatistic37);
        descriptiveStatistics13.setSumsqImpl(univariateStatistic37);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic37);
        long long41 = descriptiveStatistics0.getN();
        double double42 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics13.apply(univariateStatistic21);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double[] doubleArray35 = descriptiveStatistics31.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics31.getMeanImpl();
        descriptiveStatistics30.setSumsqImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics30.getGeometricMeanImpl();
        double double40 = descriptiveStatistics0.apply(univariateStatistic39);
        double double41 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        double double8 = descriptiveStatistics0.getSum();
        double double9 = descriptiveStatistics0.getMax();
        double double10 = descriptiveStatistics0.getSkewness();
        double double11 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getSumImpl();
        double double9 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics10.getSumsqImpl();
        double double18 = descriptiveStatistics10.getMax();
        descriptiveStatistics10.setWindowSize((int) 'a');
        double double21 = descriptiveStatistics10.getVariance();
        long long22 = descriptiveStatistics10.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement(2, (double) (-1));
        int int13 = resizableDoubleArray0.start();
        resizableDoubleArray0.contract();
        double[] doubleArray15 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, -1.0, 0.0]");
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double11 = descriptiveStatistics10.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getGeometricMeanImpl();
        double double13 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        double[] doubleArray17 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics14.getVarianceImpl();
        descriptiveStatistics10.setSumsqImpl(univariateStatistic18);
        double double20 = descriptiveStatistics0.apply(univariateStatistic18);
        descriptiveStatistics0.addValue((double) 0L);
        double double23 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(102);
        resizableDoubleArray1.contract();
        resizableDoubleArray1.addElement((double) 0L);
        double double6 = resizableDoubleArray1.addElementRolling(0.0d);
        resizableDoubleArray1.setNumElements((int) (short) 100);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        double double12 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic19);
        double double22 = descriptiveStatistics13.getStandardDeviation();
        descriptiveStatistics13.clear();
        descriptiveStatistics13.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        descriptiveStatistics26.addValue((double) 0);
        int int32 = descriptiveStatistics26.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics26.getGeometricMeanImpl();
        descriptiveStatistics13.setVarianceImpl(univariateStatistic33);
        descriptiveStatistics0.setSumImpl(univariateStatistic33);
        double double36 = descriptiveStatistics0.getMin();
        double double37 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double40 = descriptiveStatistics39.getStandardDeviation();
        double double41 = descriptiveStatistics39.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics39.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        double double6 = descriptiveStatistics1.getPercentile((double) 100L);
        double double7 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getGeometricMeanImpl();
        long long9 = descriptiveStatistics1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        double double6 = descriptiveStatistics0.getPercentile(Double.NaN);
        double double7 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        double double10 = descriptiveStatistics8.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double19 = descriptiveStatistics18.getStandardDeviation();
        long long20 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getMinImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics0.setMinImpl(univariateStatistic21);
        long long24 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getKurtosisImpl();
        long long26 = descriptiveStatistics0.getN();
        double double27 = descriptiveStatistics0.getMax();
        double double28 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        int int4 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (byte) 0, (double) (short) -1);
        double double9 = resizableDoubleArray0.addElementRolling(33.0d);
        float float10 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 33.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[33.0]");
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        double double5 = descriptiveStatistics1.getMean();
        double double6 = descriptiveStatistics1.getSum();
        double double7 = descriptiveStatistics1.getMean();
        double double8 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getPercentileImpl();
        double double12 = descriptiveStatistics10.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics10.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics10.getSumsqImpl();
        double double15 = descriptiveStatistics10.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getVarianceImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 1, 0.0d);
        float float10 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setContractionCriteria((float) 91);
        resizableDoubleArray0.setElement((int) ' ', (double) (short) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        double double9 = resizableDoubleArray0.addElementRolling((double) (byte) 0);
        resizableDoubleArray0.addElement((double) 100.5f);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setContractionCriteria((float) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setContractionCriteria((float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0]");
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics14.setWindowSize((int) ' ');
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getSkewnessImpl();
        descriptiveStatistics14.setSumsqImpl(univariateStatistic23);
        descriptiveStatistics0.setMeanImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double28 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getGeometricMeanImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics0.getPercentileImpl();
        double double33 = descriptiveStatistics0.getPercentile(5.4999999999999964d);
        double double34 = descriptiveStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) (byte) 1);
        double double7 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        resizableDoubleArray0.setNumElements((int) (short) 10);
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        int int11 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = resizableDoubleArray0.getElement(42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 42 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        double double7 = descriptiveStatistics5.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic11);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic11);
        double double15 = descriptiveStatistics0.getGeometricMean();
        double double17 = descriptiveStatistics0.getPercentile((double) 100L);
        double double18 = descriptiveStatistics0.getMin();
        double double19 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getSkewnessImpl();
        double double21 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        int int7 = resizableDoubleArray0.getNumElements();
        int int8 = resizableDoubleArray0.getNumElements();
        float float9 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        float float2 = resizableDoubleArray1.getExpansionFactor();
        int int3 = resizableDoubleArray1.getNumElements();
        int int4 = resizableDoubleArray1.getExpansionMode();
        resizableDoubleArray1.setNumElements(92);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.0f + "'", float2 == 2.0f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (short) 0, (double) (byte) 100);
        resizableDoubleArray0.addElement((double) 10.0f);
        double double8 = resizableDoubleArray0.getElement(0);
        resizableDoubleArray0.clear();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        int int12 = resizableDoubleArray0.getExpansionMode();
        int int13 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getPercentileImpl();
        double double20 = descriptiveStatistics13.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray24 = descriptiveStatistics21.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics21.getVarianceImpl();
        double double26 = descriptiveStatistics13.apply(univariateStatistic25);
        double double27 = descriptiveStatistics3.apply(univariateStatistic25);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic25);
        double double29 = descriptiveStatistics1.getGeometricMean();
        double double30 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics1.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getKurtosisImpl();
        long long37 = descriptiveStatistics34.getN();
        double[] doubleArray38 = descriptiveStatistics34.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics34.getMeanImpl();
        descriptiveStatistics33.setSumsqImpl(univariateStatistic40);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic40);
        double double43 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics1.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics1.getSumsqImpl();
        double double46 = descriptiveStatistics1.getMax();
        java.lang.String str47 = descriptiveStatistics1.toString();
        double double49 = descriptiveStatistics1.getPercentile(2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str47, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double9 = descriptiveStatistics8.getStandardDeviation();
        long long10 = descriptiveStatistics8.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getSkewnessImpl();
        java.lang.String str12 = descriptiveStatistics8.toString();
        double double13 = descriptiveStatistics8.getVariance();
        descriptiveStatistics8.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getGeometricMeanImpl();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        descriptiveStatistics2.setKurtosisImpl(univariateStatistic5);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics2.setMaxImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getMaxImpl();
        long long17 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics19.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getGeometricMeanImpl();
        java.lang.String str26 = descriptiveStatistics19.toString();
        java.lang.Class<?> wildcardClass27 = descriptiveStatistics19.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass27);
        double double31 = descriptiveStatistics30.getMin();
        double[] doubleArray32 = descriptiveStatistics30.getSortedValues();
        double double33 = univariateStatistic18.evaluate(doubleArray32);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.setWindowSize((int) (byte) 100);
        double double10 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double15 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.addValue((double) (-1L));
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics18.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics18.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics18.getSumsqImpl();
        double double26 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics18.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        double[] doubleArray38 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double39 = univariateStatistic34.evaluate(doubleArray38);
        descriptiveStatistics28.setMaxImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics41.getKurtosisImpl();
        long long44 = descriptiveStatistics41.getN();
        double[] doubleArray45 = descriptiveStatistics41.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics41.getMeanImpl();
        descriptiveStatistics28.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics18.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics0.setMinImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics0.getMaxImpl();
        double double52 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.0d + "'", double39 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.5d) + "'", double52 == (-0.5d));
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = null;
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic5);
        double double7 = descriptiveStatistics1.getMax();
        double double8 = descriptiveStatistics1.getStandardDeviation();
        double double9 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str11 = descriptiveStatistics10.toString();
        double double12 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic16);
        double double19 = descriptiveStatistics10.getStandardDeviation();
        descriptiveStatistics10.clear();
        double double21 = descriptiveStatistics10.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getKurtosisImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics22.setGeometricMeanImpl(univariateStatistic39);
        descriptiveStatistics10.setSumImpl(univariateStatistic39);
        double double42 = descriptiveStatistics10.getSkewness();
        double double43 = descriptiveStatistics10.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double46 = descriptiveStatistics45.getStandardDeviation();
        long long47 = descriptiveStatistics45.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics45.getSkewnessImpl();
        java.lang.String str49 = descriptiveStatistics45.toString();
        double double50 = descriptiveStatistics45.getVariance();
        descriptiveStatistics45.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        descriptiveStatistics45.setSkewnessImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics45.getPercentileImpl();
        descriptiveStatistics10.setGeometricMeanImpl(univariateStatistic59);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str49, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic59);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getKurtosisImpl();
        long long15 = descriptiveStatistics12.getN();
        descriptiveStatistics12.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        double double30 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics18.getMinImpl();
        descriptiveStatistics12.setMinImpl(univariateStatistic31);
        descriptiveStatistics10.setMeanImpl(univariateStatistic31);
        double double34 = descriptiveStatistics10.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getKurtosisImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic40);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic40);
        long long43 = descriptiveStatistics0.getN();
        double double44 = descriptiveStatistics0.getStandardDeviation();
        double double45 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setExpansionMode((int) (short) 1);
        int int4 = resizableDoubleArray0.getNumElements();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(10201.0d);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        descriptiveStatistics2.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getKurtosisImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic18);
        double double20 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics8.getMinImpl();
        descriptiveStatistics2.setMinImpl(univariateStatistic21);
        descriptiveStatistics0.setMeanImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double27 = descriptiveStatistics26.getStandardDeviation();
        long long28 = descriptiveStatistics26.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics26.getSkewnessImpl();
        java.lang.String str30 = descriptiveStatistics26.toString();
        double double31 = descriptiveStatistics26.getVariance();
        descriptiveStatistics26.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics26.getMaxImpl();
        descriptiveStatistics26.addValue((double) '4');
        double double37 = descriptiveStatistics26.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        double double40 = descriptiveStatistics38.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics38.getVarianceImpl();
        double double42 = descriptiveStatistics26.apply(univariateStatistic41);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic41);
        double double44 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getKurtosisImpl();
        long long48 = descriptiveStatistics45.getN();
        double[] doubleArray49 = descriptiveStatistics45.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics45.getSumImpl();
        double double51 = descriptiveStatistics45.getVariance();
        double double52 = descriptiveStatistics45.getMax();
        double double53 = descriptiveStatistics45.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str55 = descriptiveStatistics54.toString();
        descriptiveStatistics54.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics54.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics54.getSumsqImpl();
        double double60 = descriptiveStatistics54.getPercentile(Double.NaN);
        double double61 = descriptiveStatistics54.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic62);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic62);
        double double65 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str30, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str55, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.addElement((double) 0.0f);
        int int10 = resizableDoubleArray0.start();
        int int11 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 0.0, 0.0]");
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        double double10 = descriptiveStatistics0.getMean();
        double double11 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray14 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray15 = resizableDoubleArray14.getElements();
        double[] doubleArray16 = resizableDoubleArray14.getElements();
        int int17 = resizableDoubleArray14.getNumElements();
        resizableDoubleArray14.clear();
        double[] doubleArray19 = resizableDoubleArray14.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = univariateStatistic13.evaluate(doubleArray19, (int) (byte) 100, 98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double18 = descriptiveStatistics17.getStandardDeviation();
        long long19 = descriptiveStatistics17.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getSkewnessImpl();
        java.lang.String str21 = descriptiveStatistics17.toString();
        double double22 = descriptiveStatistics17.getVariance();
        descriptiveStatistics17.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics17.setSkewnessImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        descriptiveStatistics31.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics31.getSkewnessImpl();
        descriptiveStatistics17.setVarianceImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics17.getSumImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic39);
        java.lang.Class<?> wildcardClass41 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass41);
        double double43 = descriptiveStatistics42.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double7 = descriptiveStatistics6.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic8);
        double double10 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic16);
        double double18 = descriptiveStatistics1.getVariance();
        double double19 = descriptiveStatistics1.getSkewness();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        long long7 = descriptiveStatistics0.getN();
        int int8 = descriptiveStatistics0.getWindowSize();
        double double9 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        long long17 = descriptiveStatistics10.getN();
        int int18 = descriptiveStatistics10.getWindowSize();
        double double19 = descriptiveStatistics10.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics10.getMeanImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray21 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int22 = resizableDoubleArray21.start();
        resizableDoubleArray21.addElement((double) 10);
        int int25 = resizableDoubleArray21.getExpansionMode();
        resizableDoubleArray21.clear();
        int int27 = resizableDoubleArray21.getNumElements();
        int int28 = resizableDoubleArray21.getExpansionMode();
        resizableDoubleArray21.addElement((double) 100.0f);
        resizableDoubleArray21.setExpansionMode((int) (short) 0);
        int int33 = resizableDoubleArray21.getExpansionMode();
        double[] doubleArray34 = resizableDoubleArray21.getElements();
        double double35 = univariateStatistic20.evaluate(doubleArray34);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(univariateStatistic37);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement((int) (short) 1, (double) 32.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = resizableDoubleArray0.getElement(98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 98 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        double double8 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics6.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics6.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        double[] doubleArray20 = descriptiveStatistics16.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        descriptiveStatistics6.setMinImpl(univariateStatistic22);
        descriptiveStatistics0.setMeanImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics0.getSumsqImpl();
        double double26 = descriptiveStatistics0.getSum();
        double double27 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        descriptiveStatistics28.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics28.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics28.getSumsqImpl();
        double double36 = descriptiveStatistics28.getMax();
        descriptiveStatistics28.setWindowSize((int) (short) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double[] doubleArray41 = descriptiveStatistics40.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics28.setMeanImpl(univariateStatistic42);
        double double44 = descriptiveStatistics0.apply(univariateStatistic42);
        double double45 = descriptiveStatistics0.getKurtosis();
        double double46 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        descriptiveStatistics13.setSumImpl(univariateStatistic28);
        descriptiveStatistics7.setSumsqImpl(univariateStatistic28);
        double double33 = descriptiveStatistics7.getPercentile((double) (short) 10);
        descriptiveStatistics7.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics7.getMaxImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic36);
        double[] doubleArray38 = descriptiveStatistics0.getValues();
        double double39 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMaxImpl();
        descriptiveStatistics0.setWindowSize((int) (byte) 1);
        double double9 = descriptiveStatistics0.getMean();
        double double10 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getStandardDeviation();
        double double13 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10, 100.5f, (float) 92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        double double7 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getMaxImpl();
        double double11 = descriptiveStatistics1.getStandardDeviation();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = descriptiveStatistics1.getPercentile(1225.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 1225.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getPercentileImpl();
        double double21 = descriptiveStatistics1.getStandardDeviation();
        int int22 = descriptiveStatistics1.getWindowSize();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = descriptiveStatistics1.getElement(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 3 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double double13 = descriptiveStatistics7.getStandardDeviation();
        double double14 = descriptiveStatistics7.getSum();
        int int15 = descriptiveStatistics7.getWindowSize();
        int int16 = descriptiveStatistics7.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics7.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics21.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics21.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getVarianceImpl();
        descriptiveStatistics19.setMinImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics19.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics19.getPercentileImpl();
        descriptiveStatistics7.setMinImpl(univariateStatistic38);
        long long40 = descriptiveStatistics7.getN();
        java.lang.String str41 = descriptiveStatistics7.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics7.getSumImpl();
        double double43 = descriptiveStatistics0.apply(univariateStatistic42);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray44 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int45 = resizableDoubleArray44.getExpansionMode();
        int int46 = resizableDoubleArray44.getNumElements();
        double[] doubleArray47 = resizableDoubleArray44.getElements();
        float float48 = resizableDoubleArray44.getExpansionFactor();
        int int49 = resizableDoubleArray44.getNumElements();
        resizableDoubleArray44.contract();
        resizableDoubleArray44.clear();
        resizableDoubleArray44.addElement((double) ' ');
        double[] doubleArray54 = resizableDoubleArray44.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double57 = univariateStatistic42.evaluate(doubleArray54, 53, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str41, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 2.0f + "'", float48 == 2.0f);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[32.0]");
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        descriptiveStatistics0.setWindowSize((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        int int11 = descriptiveStatistics5.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics5.getMinImpl();
        double double13 = descriptiveStatistics0.apply(univariateStatistic12);
        double double14 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        long long25 = descriptiveStatistics22.getN();
        double[] doubleArray26 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics22.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics22.getMinImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics15.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics15.getVarianceImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic32);
        double double34 = descriptiveStatistics0.getSum();
        double double35 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(10, (float) 10L, (float) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        descriptiveStatistics1.addValue((double) 101);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics9.getSumsqImpl();
        double double17 = descriptiveStatistics9.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        double[] doubleArray22 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        double[] doubleArray32 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double33 = univariateStatistic28.evaluate(doubleArray32);
        descriptiveStatistics19.setMaxImpl(univariateStatistic28);
        descriptiveStatistics9.setMaxImpl(univariateStatistic28);
        double double36 = descriptiveStatistics9.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str38 = descriptiveStatistics37.toString();
        double double39 = descriptiveStatistics37.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        descriptiveStatistics37.setSkewnessImpl(univariateStatistic43);
        double double46 = descriptiveStatistics37.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double49 = descriptiveStatistics48.getStandardDeviation();
        long long50 = descriptiveStatistics48.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics48.getMinImpl();
        descriptiveStatistics37.setVarianceImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double55 = descriptiveStatistics54.getStandardDeviation();
        long long56 = descriptiveStatistics54.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics54.getSkewnessImpl();
        java.lang.String str58 = descriptiveStatistics54.toString();
        double double59 = descriptiveStatistics54.getVariance();
        descriptiveStatistics54.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        descriptiveStatistics62.setKurtosisImpl(univariateStatistic65);
        descriptiveStatistics54.setSkewnessImpl(univariateStatistic65);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        descriptiveStatistics68.setKurtosisImpl(univariateStatistic71);
        descriptiveStatistics68.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics68.getSkewnessImpl();
        descriptiveStatistics54.setVarianceImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics54.getSumImpl();
        descriptiveStatistics37.setMaxImpl(univariateStatistic76);
        descriptiveStatistics9.setSkewnessImpl(univariateStatistic76);
        descriptiveStatistics1.setMeanImpl(univariateStatistic76);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double81 = descriptiveStatistics80.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics80.getSkewnessImpl();
        double double83 = descriptiveStatistics80.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics80.getMinImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic84);
        double double86 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.0d + "'", double33 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str38, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str58, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 101.0d + "'", double86 == 101.0d);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 10L);
        int int6 = resizableDoubleArray0.getNumElements();
        double double8 = resizableDoubleArray0.addElementRolling((double) 101);
        resizableDoubleArray0.setElement(0, 5.4999999999999964d);
        float float12 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        double double5 = descriptiveStatistics0.getSum();
        long long6 = descriptiveStatistics0.getN();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getVarianceImpl();
        double double9 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getSumImpl();
        double double24 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics18.getSumImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics0.getValues();
        double double28 = descriptiveStatistics0.getMin();
        java.lang.String str29 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double32 = descriptiveStatistics31.getStandardDeviation();
        double double33 = descriptiveStatistics31.getVariance();
        double double34 = descriptiveStatistics31.getSum();
        double double36 = descriptiveStatistics31.getPercentile(2.0d);
        double double37 = descriptiveStatistics31.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics31.getGeometricMeanImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double43 = descriptiveStatistics42.getStandardDeviation();
        long long44 = descriptiveStatistics42.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getSkewnessImpl();
        java.lang.String str46 = descriptiveStatistics42.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getKurtosisImpl();
        descriptiveStatistics42.setMeanImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics42.getGeometricMeanImpl();
        double double52 = descriptiveStatistics42.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics42.getSumImpl();
        double[] doubleArray54 = descriptiveStatistics42.getSortedValues();
        double double55 = univariateStatistic40.evaluate(doubleArray54);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str46, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        double double7 = descriptiveStatistics5.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic11);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic11);
        double double15 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str17 = descriptiveStatistics16.toString();
        double double18 = descriptiveStatistics16.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics16.setSkewnessImpl(univariateStatistic22);
        double double25 = descriptiveStatistics16.getStandardDeviation();
        descriptiveStatistics16.clear();
        descriptiveStatistics16.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        long long32 = descriptiveStatistics29.getN();
        descriptiveStatistics29.addValue((double) 0);
        int int35 = descriptiveStatistics29.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics29.getGeometricMeanImpl();
        descriptiveStatistics16.setVarianceImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double40 = descriptiveStatistics39.getStandardDeviation();
        long long41 = descriptiveStatistics39.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics39.getSkewnessImpl();
        double double43 = descriptiveStatistics16.apply(univariateStatistic42);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic42);
        double double45 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics0.getPercentileImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic12);
        double double19 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double[] doubleArray15 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double19 = descriptiveStatistics18.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getGeometricMeanImpl();
        double double21 = descriptiveStatistics18.getMean();
        double double22 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic24);
        double double26 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double28 = descriptiveStatistics27.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        long long32 = descriptiveStatistics29.getN();
        descriptiveStatistics29.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getKurtosisImpl();
        descriptiveStatistics35.setMaxImpl(univariateStatistic45);
        double double47 = descriptiveStatistics35.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics35.getMinImpl();
        descriptiveStatistics29.setMinImpl(univariateStatistic48);
        descriptiveStatistics27.setMeanImpl(univariateStatistic48);
        double double51 = descriptiveStatistics27.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics52.getKurtosisImpl();
        double[] doubleArray55 = descriptiveStatistics52.getValues();
        double double56 = descriptiveStatistics52.getVariance();
        double double57 = descriptiveStatistics52.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str59 = descriptiveStatistics58.toString();
        double double60 = descriptiveStatistics58.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        descriptiveStatistics61.setKurtosisImpl(univariateStatistic64);
        descriptiveStatistics58.setSkewnessImpl(univariateStatistic64);
        double double67 = descriptiveStatistics58.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics68.getKurtosisImpl();
        long long71 = descriptiveStatistics68.getN();
        double[] doubleArray72 = descriptiveStatistics68.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics68.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics68.getMinImpl();
        descriptiveStatistics58.setMinImpl(univariateStatistic74);
        descriptiveStatistics52.setMeanImpl(univariateStatistic74);
        double double77 = descriptiveStatistics27.apply(univariateStatistic74);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics79.setWindowSize((int) (byte) -1);
        long long82 = descriptiveStatistics79.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = null;
        descriptiveStatistics79.setMinImpl(univariateStatistic83);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics79.getVarianceImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic85);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str59, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(descriptiveStatistics79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic85);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getMinImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getMeanImpl();
        double double13 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics1.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        double[] doubleArray19 = descriptiveStatistics15.getValues();
        double double20 = descriptiveStatistics15.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getMeanImpl();
        double double22 = descriptiveStatistics15.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double25 = descriptiveStatistics24.getStandardDeviation();
        long long26 = descriptiveStatistics24.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics24.getSkewnessImpl();
        java.lang.String str28 = descriptiveStatistics24.toString();
        descriptiveStatistics24.addValue(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        descriptiveStatistics34.setMaxImpl(univariateStatistic44);
        double double46 = descriptiveStatistics34.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics34.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics34.getVarianceImpl();
        descriptiveStatistics32.setMinImpl(univariateStatistic48);
        descriptiveStatistics24.setSumsqImpl(univariateStatistic48);
        long long51 = descriptiveStatistics24.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        double[] doubleArray61 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double62 = univariateStatistic57.evaluate(doubleArray61);
        descriptiveStatistics24.setSkewnessImpl(univariateStatistic57);
        descriptiveStatistics15.setMinImpl(univariateStatistic57);
        descriptiveStatistics1.setMinImpl(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str28, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2.0d + "'", double62 == 2.0d);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        double double7 = descriptiveStatistics1.getMean();
        int int8 = descriptiveStatistics1.getWindowSize();
        double double9 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        descriptiveStatistics10.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        double[] doubleArray26 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double27 = univariateStatistic22.evaluate(doubleArray26);
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic22);
        descriptiveStatistics1.setMinImpl(univariateStatistic22);
        double double30 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2.0d + "'", double27 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        int int7 = resizableDoubleArray0.start();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        int int9 = resizableDoubleArray0.getExpansionMode();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement(625.0d);
        resizableDoubleArray0.setElement(11, (double) (-1L));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        double double20 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str22 = descriptiveStatistics21.toString();
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getGeometricMeanImpl();
        double double25 = descriptiveStatistics21.getMax();
        double double26 = descriptiveStatistics21.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getVarianceImpl();
        double double28 = descriptiveStatistics21.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double31 = descriptiveStatistics30.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str33 = descriptiveStatistics32.toString();
        double double34 = descriptiveStatistics32.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        descriptiveStatistics32.setSkewnessImpl(univariateStatistic38);
        double double41 = descriptiveStatistics32.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        descriptiveStatistics42.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getPercentileImpl();
        double double49 = descriptiveStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics50.getKurtosisImpl();
        double[] doubleArray53 = descriptiveStatistics50.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics50.getVarianceImpl();
        double double55 = descriptiveStatistics42.apply(univariateStatistic54);
        double double56 = descriptiveStatistics32.apply(univariateStatistic54);
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic54);
        descriptiveStatistics21.setMeanImpl(univariateStatistic54);
        double double59 = descriptiveStatistics0.apply(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics0.getSumImpl();
        double[] doubleArray61 = descriptiveStatistics0.getValues();
        descriptiveStatistics0.addValue((double) 31);
        double[] doubleArray64 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str33, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[31.0]");
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getPercentileImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = descriptiveStatistics1.getElement(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 97 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double[] doubleArray1 = descriptiveStatistics0.getSortedValues();
        double double2 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.clear();
        double[] doubleArray4 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        resizableDoubleArray0.contract();
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setElement(101, (double) 1);
        double double15 = resizableDoubleArray0.getElement(33);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMax();
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getKurtosis();
        double double10 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics11.clear();
        java.lang.String str17 = descriptiveStatistics11.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        descriptiveStatistics18.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics18.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics18.getSumsqImpl();
        double double24 = descriptiveStatistics18.getPercentile(Double.NaN);
        double double25 = descriptiveStatistics18.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics11.setMeanImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        double double30 = descriptiveStatistics29.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str32 = descriptiveStatistics31.toString();
        double double33 = descriptiveStatistics31.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        descriptiveStatistics31.setSkewnessImpl(univariateStatistic37);
        double double40 = descriptiveStatistics31.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        descriptiveStatistics41.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics41.getPercentileImpl();
        double double48 = descriptiveStatistics41.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics49.getKurtosisImpl();
        double[] doubleArray52 = descriptiveStatistics49.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics49.getVarianceImpl();
        double double54 = descriptiveStatistics41.apply(univariateStatistic53);
        double double55 = descriptiveStatistics31.apply(univariateStatistic53);
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic53);
        descriptiveStatistics11.setGeometricMeanImpl(univariateStatistic53);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str32, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic59);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics1.setWindowSize((int) ' ');
        double double4 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getSumsqImpl();
        double double6 = descriptiveStatistics1.getSum();
        double[] doubleArray7 = descriptiveStatistics1.getValues();
        double double8 = descriptiveStatistics1.getVariance();
        double double9 = descriptiveStatistics1.getGeometricMean();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(97, (float) 97, (float) 103, (int) (short) 0);
        int int5 = resizableDoubleArray4.getNumElements();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        double double5 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double8 = descriptiveStatistics7.getMax();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getVarianceImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        int int5 = descriptiveStatistics0.getWindowSize();
        double double6 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSkewnessImpl();
        double double8 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        double double11 = descriptiveStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        descriptiveStatistics9.setSkewnessImpl(univariateStatistic15);
        double double18 = descriptiveStatistics9.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getMinImpl();
        descriptiveStatistics9.setMinImpl(univariateStatistic25);
        double double27 = descriptiveStatistics9.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str29 = descriptiveStatistics28.toString();
        descriptiveStatistics28.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getGeometricMeanImpl();
        double double32 = descriptiveStatistics28.getMax();
        double double33 = descriptiveStatistics28.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics28.getVarianceImpl();
        double double35 = descriptiveStatistics28.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics36.getKurtosisImpl();
        double double42 = descriptiveStatistics36.getStandardDeviation();
        double double43 = descriptiveStatistics36.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics36.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double47 = descriptiveStatistics46.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics46.getGeometricMeanImpl();
        double double49 = descriptiveStatistics46.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics50.getKurtosisImpl();
        double[] doubleArray53 = descriptiveStatistics50.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics50.getVarianceImpl();
        descriptiveStatistics46.setSumsqImpl(univariateStatistic54);
        double double56 = descriptiveStatistics36.apply(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getVarianceImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic59);
        descriptiveStatistics28.setSumImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getKurtosisImpl();
        long long65 = descriptiveStatistics62.getN();
        double double66 = descriptiveStatistics62.getMax();
        double double67 = descriptiveStatistics62.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double69 = descriptiveStatistics68.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics68.getMinImpl();
        descriptiveStatistics62.setSumImpl(univariateStatistic70);
        double[] doubleArray72 = descriptiveStatistics62.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics62.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics62.getSumImpl();
        descriptiveStatistics28.setGeometricMeanImpl(univariateStatistic74);
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic74);
        descriptiveStatistics0.setMinImpl(univariateStatistic74);
        double double78 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        double double12 = resizableDoubleArray0.addElementRolling((double) 1);
        resizableDoubleArray0.discardFrontElements(10);
        resizableDoubleArray0.setContractionCriteria(2.5f);
        resizableDoubleArray0.setElement(35, (double) 12.5f);
        float float20 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 1.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 2.0f + "'", float20 == 2.0f);
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double double5 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.addValue((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double10 = descriptiveStatistics9.getStandardDeviation();
        long long11 = descriptiveStatistics9.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics9.getMinImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getMeanImpl();
        java.lang.String str15 = descriptiveStatistics0.toString();
        double double16 = descriptiveStatistics0.getMin();
        double double17 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: 10.0\nmax: 10.0\nmean: 10.0\nstd dev: 0.0\nmedian: 10.0\nskewness: 10.0\nkurtosis: 100.0\n" + "'", str15, "DescriptiveStatistics:\nn: 1\nmin: 10.0\nmax: 10.0\nmean: 10.0\nstd dev: 0.0\nmedian: 10.0\nskewness: 10.0\nkurtosis: 100.0\n");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(32);
        double double2 = descriptiveStatistics1.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = null;
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(53, (float) 11);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getKurtosis();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getKurtosisImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic32);
        double double34 = descriptiveStatistics22.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics22.getMinImpl();
        descriptiveStatistics22.setWindowSize((int) (short) 100);
        java.lang.String str38 = descriptiveStatistics22.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str38, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic39);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        int int8 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMinImpl();
        double double10 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double6 = descriptiveStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics5.setMinImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getMaxImpl();
        double double20 = descriptiveStatistics1.getVariance();
        double[] doubleArray21 = descriptiveStatistics1.getValues();
        int int22 = descriptiveStatistics1.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSkewnessImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        float float2 = resizableDoubleArray0.getContractionCriteria();
        int int3 = resizableDoubleArray0.getExpansionMode();
        float float4 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 2.0f);
        resizableDoubleArray0.discardFrontElements((int) (short) 1);
        resizableDoubleArray0.addElement((double) 31);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = resizableDoubleArray0.getElement(53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 53 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.5f + "'", float2 == 2.5f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.5f + "'", float4 == 2.5f);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10, 2.0f, (float) '4');
        double double5 = resizableDoubleArray3.addElementRolling((double) 1);
        float float6 = resizableDoubleArray3.getExpansionFactor();
        int int7 = resizableDoubleArray3.getExpansionMode();
        float float8 = resizableDoubleArray3.getExpansionFactor();
        int int9 = resizableDoubleArray3.getExpansionMode();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        float float5 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.contract();
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 10.0f);
        int int13 = resizableDoubleArray0.getExpansionMode();
        float float14 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.0f + "'", float5 == 2.0f);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.0f + "'", float14 == 2.0f);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        resizableDoubleArray1.setElement(2, (double) (byte) 1);
        double[] doubleArray5 = resizableDoubleArray1.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = resizableDoubleArray1.getElement(101);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 101 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 1.0]");
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getMin();
        double double7 = descriptiveStatistics0.getVariance();
        double double8 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics14.getKurtosisImpl();
        descriptiveStatistics9.setMaxImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        descriptiveStatistics24.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        descriptiveStatistics31.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics31.getSkewnessImpl();
        descriptiveStatistics24.setSumsqImpl(univariateStatistic37);
        double double39 = descriptiveStatistics24.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        descriptiveStatistics40.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics40.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getKurtosisImpl();
        double[] doubleArray56 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double57 = univariateStatistic52.evaluate(doubleArray56);
        descriptiveStatistics40.setSkewnessImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics40.getSkewnessImpl();
        descriptiveStatistics24.setGeometricMeanImpl(univariateStatistic59);
        descriptiveStatistics22.setVarianceImpl(univariateStatistic59);
        descriptiveStatistics9.setMinImpl(univariateStatistic59);
        descriptiveStatistics0.setMaxImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2.0d + "'", double57 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.clear();
        resizableDoubleArray1.clear();
        resizableDoubleArray1.addElement((double) (short) 100);
        double double7 = resizableDoubleArray1.addElementRolling(11224.999999999996d);
        resizableDoubleArray1.addElement((double) 3);
        float float10 = resizableDoubleArray1.getExpansionFactor();
        resizableDoubleArray1.setElement((int) (short) 0, (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics14.setMaxImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics14.setGeometricMeanImpl(univariateStatistic31);
        double double33 = descriptiveStatistics14.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double35 = descriptiveStatistics34.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getKurtosisImpl();
        long long39 = descriptiveStatistics36.getN();
        descriptiveStatistics36.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getKurtosisImpl();
        descriptiveStatistics42.setMaxImpl(univariateStatistic52);
        double double54 = descriptiveStatistics42.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics42.getMinImpl();
        descriptiveStatistics36.setMinImpl(univariateStatistic55);
        descriptiveStatistics34.setMeanImpl(univariateStatistic55);
        descriptiveStatistics14.setSumImpl(univariateStatistic55);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getKurtosisImpl();
        long long63 = descriptiveStatistics60.getN();
        double[] doubleArray64 = descriptiveStatistics60.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics60.getSumImpl();
        double double66 = descriptiveStatistics60.getSumsq();
        double double67 = descriptiveStatistics60.getMin();
        double double68 = descriptiveStatistics60.getMax();
        double double69 = descriptiveStatistics60.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        descriptiveStatistics70.setKurtosisImpl(univariateStatistic73);
        double[] doubleArray75 = descriptiveStatistics70.getValues();
        double double76 = descriptiveStatistics70.getSumsq();
        double double77 = descriptiveStatistics70.getMin();
        double double78 = descriptiveStatistics70.getMean();
        double double79 = descriptiveStatistics70.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics70.getPercentileImpl();
        descriptiveStatistics60.setGeometricMeanImpl(univariateStatistic80);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic80);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(univariateStatistic80);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getMaxImpl();
        double double23 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        descriptiveStatistics24.clear();
        double double30 = descriptiveStatistics24.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics24.getVarianceImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic31);
        double double33 = descriptiveStatistics0.getStandardDeviation();
        double double34 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSkewnessImpl();
        double double9 = descriptiveStatistics0.getPercentile((double) 100.0f);
        double double10 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSkewnessImpl();
        double[] doubleArray12 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        descriptiveStatistics13.setSumImpl(univariateStatistic28);
        double double31 = descriptiveStatistics13.getVariance();
        double double32 = descriptiveStatistics13.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics13.getKurtosisImpl();
        double double34 = descriptiveStatistics0.apply(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getKurtosisImpl();
        descriptiveStatistics38.setMaxImpl(univariateStatistic48);
        double double50 = descriptiveStatistics38.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics38.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics38.getVarianceImpl();
        descriptiveStatistics36.setMinImpl(univariateStatistic52);
        double double54 = descriptiveStatistics36.getMin();
        double double55 = descriptiveStatistics36.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics36.getSumsqImpl();
        double double57 = descriptiveStatistics0.apply(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        double[] doubleArray17 = descriptiveStatistics14.getSortedValues();
        double double18 = univariateStatistic12.evaluate(doubleArray17);
        descriptiveStatistics0.setMeanImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getSkewnessImpl();
        java.lang.String str25 = descriptiveStatistics21.toString();
        double double26 = descriptiveStatistics21.getVariance();
        descriptiveStatistics21.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getPercentileImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic35);
        double double37 = descriptiveStatistics0.getSum();
        double double38 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics0.getVarianceImpl();
        double double41 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) (byte) 10);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        resizableDoubleArray0.clear();
        double double20 = resizableDoubleArray0.addElementRolling((double) 100);
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double6 = descriptiveStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics5.setMinImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getMaxImpl();
        double double20 = descriptiveStatistics1.getMin();
        double double21 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics1.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        descriptiveStatistics24.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getVarianceImpl();
        int int31 = descriptiveStatistics24.getWindowSize();
        double double32 = descriptiveStatistics24.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics24.getMaxImpl();
        double double34 = descriptiveStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics24.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double38 = descriptiveStatistics37.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        double double41 = descriptiveStatistics40.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str43 = descriptiveStatistics42.toString();
        double double44 = descriptiveStatistics42.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        descriptiveStatistics42.setSkewnessImpl(univariateStatistic48);
        double double51 = descriptiveStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        descriptiveStatistics52.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics52.getPercentileImpl();
        double double59 = descriptiveStatistics52.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getKurtosisImpl();
        double[] doubleArray63 = descriptiveStatistics60.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics60.getVarianceImpl();
        double double65 = descriptiveStatistics52.apply(univariateStatistic64);
        double double66 = descriptiveStatistics42.apply(univariateStatistic64);
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic64);
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic64);
        double double69 = descriptiveStatistics24.apply(univariateStatistic64);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(35, (float) 68, (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(33, (float) 91, 32.5f, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        double double10 = descriptiveStatistics0.getMin();
        double double11 = descriptiveStatistics0.getVariance();
        double[] doubleArray12 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        double double11 = descriptiveStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double double18 = descriptiveStatistics9.apply(univariateStatistic17);
        double double19 = descriptiveStatistics9.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics9.getSumImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double24 = descriptiveStatistics23.getStandardDeviation();
        long long25 = descriptiveStatistics23.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics23.getMinImpl();
        double double27 = descriptiveStatistics23.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        double[] doubleArray38 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double39 = univariateStatistic34.evaluate(doubleArray38);
        descriptiveStatistics28.setMaxImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics41.getKurtosisImpl();
        long long44 = descriptiveStatistics41.getN();
        double[] doubleArray45 = descriptiveStatistics41.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics41.getMeanImpl();
        descriptiveStatistics28.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics23.setGeometricMeanImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double51 = descriptiveStatistics50.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics52.getKurtosisImpl();
        long long55 = descriptiveStatistics52.getN();
        descriptiveStatistics52.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        descriptiveStatistics58.setKurtosisImpl(univariateStatistic61);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        descriptiveStatistics63.setKurtosisImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics63.getKurtosisImpl();
        descriptiveStatistics58.setMaxImpl(univariateStatistic68);
        double double70 = descriptiveStatistics58.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics58.getMinImpl();
        descriptiveStatistics52.setMinImpl(univariateStatistic71);
        descriptiveStatistics50.setMeanImpl(univariateStatistic71);
        descriptiveStatistics23.setMinImpl(univariateStatistic71);
        double double75 = descriptiveStatistics23.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic76);
        descriptiveStatistics0.addValue(10100.0d);
        double double80 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.0d + "'", double39 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        descriptiveStatistics2.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getKurtosisImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic18);
        double double20 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics8.getMinImpl();
        descriptiveStatistics2.setMinImpl(univariateStatistic21);
        descriptiveStatistics0.setMeanImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getSum();
        double double25 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.setWindowSize((int) (byte) 100);
        double double28 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        long long4 = descriptiveStatistics0.getN();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        double double7 = descriptiveStatistics0.getSum();
        double double8 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics16.getStandardDeviation();
        double double23 = descriptiveStatistics16.getSum();
        int int24 = descriptiveStatistics16.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getMaxImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics27.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics27.getSumsqImpl();
        double double35 = descriptiveStatistics27.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str37 = descriptiveStatistics36.toString();
        double double38 = descriptiveStatistics36.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        double double45 = descriptiveStatistics36.apply(univariateStatistic44);
        double double46 = descriptiveStatistics36.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics36.getSumImpl();
        descriptiveStatistics27.setGeometricMeanImpl(univariateStatistic47);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics50.getKurtosisImpl();
        long long53 = descriptiveStatistics50.getN();
        descriptiveStatistics50.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics50.getGeometricMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic55);
        long long57 = descriptiveStatistics0.getN();
        double double58 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double61 = descriptiveStatistics60.getStandardDeviation();
        long long62 = descriptiveStatistics60.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics60.getSkewnessImpl();
        java.lang.String str64 = descriptiveStatistics60.toString();
        double double65 = descriptiveStatistics60.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics60.getPercentileImpl();
        double double67 = descriptiveStatistics0.apply(univariateStatistic66);
        long long68 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue(5.656854249492381d);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str64, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) 'a');
        float float2 = resizableDoubleArray1.getExpansionFactor();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.discardFrontElements((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.0f + "'", float2 == 2.0f);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setNumElements((int) (short) 1);
        int int7 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        float float9 = resizableDoubleArray0.getExpansionFactor();
        float float10 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.setContractionCriteria(10.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(10000.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.setElement(0, (double) 100);
        resizableDoubleArray0.clear();
        float float11 = resizableDoubleArray0.getExpansionFactor();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = resizableDoubleArray0.getElement((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 35 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.0f + "'", float11 == 2.0f);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) (byte) 0, (double) (-1));
        int int10 = resizableDoubleArray0.getExpansionMode();
        double double12 = resizableDoubleArray0.addElementRolling((double) 103);
        int int13 = resizableDoubleArray0.getExpansionMode();
        float float14 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.0f + "'", float14 == 2.0f);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        double double2 = descriptiveStatistics1.getMin();
        double double3 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        descriptiveStatistics4.setKurtosisImpl(univariateStatistic7);
        descriptiveStatistics4.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getPercentileImpl();
        double double11 = descriptiveStatistics4.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getKurtosisImpl();
        double[] doubleArray15 = descriptiveStatistics12.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics12.getVarianceImpl();
        double double17 = descriptiveStatistics4.apply(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = null;
        descriptiveStatistics4.setMeanImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics4.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics4.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics4.getMaxImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) (-1.0f));
        resizableDoubleArray0.addElement((double) 100);
        resizableDoubleArray0.contract();
        int int11 = resizableDoubleArray0.start();
        double double13 = resizableDoubleArray0.addElementRolling(0.0d);
        double[] doubleArray14 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0]");
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getSumImpl();
        double double24 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics18.getSumImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getGeometricMeanImpl();
        double double30 = descriptiveStatistics0.getPercentile(31.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str32 = descriptiveStatistics31.toString();
        double double33 = descriptiveStatistics31.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        descriptiveStatistics31.setSkewnessImpl(univariateStatistic37);
        double double40 = descriptiveStatistics31.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double43 = descriptiveStatistics42.getStandardDeviation();
        long long44 = descriptiveStatistics42.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getMinImpl();
        descriptiveStatistics31.setVarianceImpl(univariateStatistic45);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray47 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int48 = resizableDoubleArray47.getExpansionMode();
        resizableDoubleArray47.clear();
        double[] doubleArray50 = resizableDoubleArray47.getElements();
        double[] doubleArray51 = resizableDoubleArray47.getElements();
        double double52 = univariateStatistic45.evaluate(doubleArray51);
        descriptiveStatistics0.setMinImpl(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str32, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) (byte) 1);
        double double7 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        resizableDoubleArray0.setNumElements((int) (short) 10);
        int int10 = resizableDoubleArray0.getExpansionMode();
        double double12 = resizableDoubleArray0.addElementRolling(100.00000000000004d);
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.00000000000004]");
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        float float4 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray5 = resizableDoubleArray0.getValues();
        float float6 = resizableDoubleArray0.getExpansionFactor();
        double double8 = resizableDoubleArray0.addElementRolling((double) (short) -1);
        float float9 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double18 = descriptiveStatistics17.getStandardDeviation();
        long long19 = descriptiveStatistics17.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getSkewnessImpl();
        java.lang.String str21 = descriptiveStatistics17.toString();
        double double22 = descriptiveStatistics17.getVariance();
        descriptiveStatistics17.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics17.setSkewnessImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        descriptiveStatistics31.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics31.getSkewnessImpl();
        descriptiveStatistics17.setVarianceImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics17.getSumImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        double double47 = descriptiveStatistics41.getStandardDeviation();
        double double48 = descriptiveStatistics41.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics41.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double52 = descriptiveStatistics51.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics51.getGeometricMeanImpl();
        double double54 = descriptiveStatistics51.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getKurtosisImpl();
        double[] doubleArray58 = descriptiveStatistics55.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics55.getVarianceImpl();
        descriptiveStatistics51.setSumsqImpl(univariateStatistic59);
        double double61 = descriptiveStatistics41.apply(univariateStatistic59);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic59);
        double double63 = descriptiveStatistics0.getStandardDeviation();
        int int64 = descriptiveStatistics0.getWindowSize();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.clear();
        int int3 = resizableDoubleArray1.start();
        float float4 = resizableDoubleArray1.getExpansionFactor();
        double[] doubleArray5 = resizableDoubleArray1.getElements();
        double double7 = resizableDoubleArray1.addElementRolling((double) 92);
        double[] doubleArray8 = resizableDoubleArray1.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = resizableDoubleArray1.getElement(103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 103 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics7.setMaxImpl(univariateStatistic17);
        double double19 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str21 = descriptiveStatistics20.toString();
        double double22 = descriptiveStatistics20.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        double double29 = descriptiveStatistics20.apply(univariateStatistic28);
        descriptiveStatistics7.setGeometricMeanImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics7.getPercentileImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic31);
        double double33 = descriptiveStatistics1.getSum();
        descriptiveStatistics1.setWindowSize((int) (byte) 10);
        double double36 = descriptiveStatistics1.getGeometricMean();
        java.lang.Class<?> wildcardClass37 = descriptiveStatistics1.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str40 = descriptiveStatistics39.toString();
        descriptiveStatistics39.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics39.getGeometricMeanImpl();
        double double43 = descriptiveStatistics39.getKurtosis();
        java.lang.String str44 = descriptiveStatistics39.toString();
        double double45 = descriptiveStatistics39.getSum();
        long long46 = descriptiveStatistics39.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getKurtosisImpl();
        long long50 = descriptiveStatistics47.getN();
        descriptiveStatistics47.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics47.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics54.getKurtosisImpl();
        double[] doubleArray63 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double64 = univariateStatistic59.evaluate(doubleArray63);
        descriptiveStatistics47.setSkewnessImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics47.getSkewnessImpl();
        double double67 = descriptiveStatistics47.getSum();
        long long68 = descriptiveStatistics47.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics47.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics47.getSumImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic70);
        descriptiveStatistics38.setSumsqImpl(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str44, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 2.0d + "'", double64 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getVariance();
        int int8 = descriptiveStatistics0.getWindowSize();
        double double9 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        double[] doubleArray20 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double21 = univariateStatistic16.evaluate(doubleArray20);
        descriptiveStatistics10.setMaxImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double[] doubleArray27 = descriptiveStatistics23.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getMeanImpl();
        descriptiveStatistics10.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic29);
        double double32 = descriptiveStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#');
        int int2 = resizableDoubleArray1.getExpansionMode();
        resizableDoubleArray1.setExpansionFactor(2.0f);
        double[] doubleArray5 = resizableDoubleArray1.getElements();
        double[] doubleArray6 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.setElement((int) (short) 1, (double) 35);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getMaxImpl();
        double double23 = descriptiveStatistics0.getVariance();
        double double24 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics25.getSumsqImpl();
        double double33 = descriptiveStatistics25.getMax();
        descriptiveStatistics25.setWindowSize((int) (short) 10);
        double double36 = descriptiveStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics0.getSumsqImpl();
        long long40 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        int int4 = resizableDoubleArray1.getNumElements();
        double[] doubleArray5 = resizableDoubleArray1.getElements();
        double[] doubleArray6 = resizableDoubleArray1.getElements();
        int int7 = resizableDoubleArray1.getExpansionMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements(0);
        resizableDoubleArray0.setElement(1, 10.0d);
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0]");
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double double27 = descriptiveStatistics23.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics28.setMaxImpl(univariateStatistic38);
        descriptiveStatistics23.setSumImpl(univariateStatistic38);
        descriptiveStatistics17.setSumsqImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str43 = descriptiveStatistics42.toString();
        descriptiveStatistics42.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getGeometricMeanImpl();
        double double46 = descriptiveStatistics42.getMax();
        double double47 = descriptiveStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getVarianceImpl();
        descriptiveStatistics17.setMeanImpl(univariateStatistic48);
        descriptiveStatistics0.setSumImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str52 = descriptiveStatistics51.toString();
        descriptiveStatistics51.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics54.getKurtosisImpl();
        double[] doubleArray57 = descriptiveStatistics54.getValues();
        double double58 = descriptiveStatistics54.getVariance();
        double double59 = descriptiveStatistics54.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics54.getKurtosisImpl();
        descriptiveStatistics51.setMaxImpl(univariateStatistic60);
        descriptiveStatistics51.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double65 = descriptiveStatistics64.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getSkewnessImpl();
        descriptiveStatistics51.setMaxImpl(univariateStatistic66);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics69.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics69.setKurtosisImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        descriptiveStatistics74.setKurtosisImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics74.getKurtosisImpl();
        descriptiveStatistics69.setMaxImpl(univariateStatistic79);
        double double81 = descriptiveStatistics69.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics82 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str83 = descriptiveStatistics82.toString();
        double double84 = descriptiveStatistics82.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics85 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics85.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics87 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics87.getSumsqImpl();
        descriptiveStatistics85.setKurtosisImpl(univariateStatistic88);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics85.getKurtosisImpl();
        double double91 = descriptiveStatistics82.apply(univariateStatistic90);
        descriptiveStatistics69.setGeometricMeanImpl(univariateStatistic90);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic90);
        double double94 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic95 = descriptiveStatistics0.getMaxImpl();
        int int96 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic97 = descriptiveStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str52, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(descriptiveStatistics82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str83, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(descriptiveStatistics85);
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertNotNull(descriptiveStatistics87);
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(univariateStatistic95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic97);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 10L);
        int int6 = resizableDoubleArray0.getNumElements();
        double double8 = resizableDoubleArray0.addElementRolling((double) 101);
        resizableDoubleArray0.setElement(0, 5.4999999999999964d);
        int int12 = resizableDoubleArray0.getNumElements();
        double double14 = resizableDoubleArray0.addElementRolling((double) 1);
        double[] doubleArray15 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.4999999999999964d + "'", double14 == 5.4999999999999964d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double double5 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.addValue((double) (byte) 10);
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getMean();
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        double double14 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics12.setSkewnessImpl(univariateStatistic18);
        double double21 = descriptiveStatistics12.getStandardDeviation();
        descriptiveStatistics12.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics12.getKurtosisImpl();
        double double25 = descriptiveStatistics0.apply(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics0.getGeometricMeanImpl();
        double double28 = descriptiveStatistics0.getElement(0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        double double31 = descriptiveStatistics29.getVariance();
        descriptiveStatistics29.addValue(10.0d);
        double[] doubleArray34 = descriptiveStatistics29.getValues();
        int int35 = descriptiveStatistics29.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double38 = descriptiveStatistics37.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str40 = descriptiveStatistics39.toString();
        double double41 = descriptiveStatistics39.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        descriptiveStatistics39.setSkewnessImpl(univariateStatistic45);
        double double48 = descriptiveStatistics39.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        descriptiveStatistics49.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics49.getPercentileImpl();
        double double56 = descriptiveStatistics49.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics57.getKurtosisImpl();
        double[] doubleArray60 = descriptiveStatistics57.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics57.getVarianceImpl();
        double double62 = descriptiveStatistics49.apply(univariateStatistic61);
        double double63 = descriptiveStatistics39.apply(univariateStatistic61);
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic61);
        double double65 = descriptiveStatistics37.getGeometricMean();
        double double66 = descriptiveStatistics37.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics37.getMaxImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray68 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int69 = resizableDoubleArray68.getExpansionMode();
        resizableDoubleArray68.clear();
        double[] doubleArray71 = resizableDoubleArray68.getElements();
        double[] doubleArray72 = resizableDoubleArray68.getElements();
        double[] doubleArray73 = resizableDoubleArray68.getElements();
        double double74 = univariateStatistic67.evaluate(doubleArray73);
        descriptiveStatistics29.setVarianceImpl(univariateStatistic67);
        double double76 = descriptiveStatistics0.apply(univariateStatistic67);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = descriptiveStatistics0.getPercentile((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.000000000000002d + "'", double10 == 10.000000000000002d);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        int int6 = descriptiveStatistics0.getWindowSize();
        double double7 = descriptiveStatistics0.getSkewness();
        double double8 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double11 = descriptiveStatistics10.getStandardDeviation();
        long long12 = descriptiveStatistics10.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics10.getSkewnessImpl();
        java.lang.String str14 = descriptiveStatistics10.toString();
        double double15 = descriptiveStatistics10.getVariance();
        descriptiveStatistics10.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic21);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        long long2 = descriptiveStatistics1.getN();
        descriptiveStatistics1.clear();
        java.lang.String str4 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getSumsqImpl();
        double double6 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        double[] doubleArray11 = descriptiveStatistics7.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getSumImpl();
        descriptiveStatistics7.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double[] doubleArray25 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double26 = univariateStatistic21.evaluate(doubleArray25);
        descriptiveStatistics15.setMaxImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics15.getSumsqImpl();
        double double29 = descriptiveStatistics15.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics32.getKurtosisImpl();
        long long35 = descriptiveStatistics32.getN();
        double[] doubleArray36 = descriptiveStatistics32.getValues();
        double double37 = descriptiveStatistics32.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics32.getVarianceImpl();
        double double39 = descriptiveStatistics32.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics32.getMaxImpl();
        descriptiveStatistics7.setSkewnessImpl(univariateStatistic40);
        descriptiveStatistics1.setMinImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics1.getGeometricMeanImpl();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2.0d + "'", double26 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic43);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(31, (float) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        double double14 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getSkewnessImpl();
        double double16 = descriptiveStatistics0.getSum();
        double double17 = descriptiveStatistics0.getKurtosis();
        java.lang.String str18 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 32);
        int int6 = resizableDoubleArray0.getExpansionMode();
        int int7 = resizableDoubleArray0.start();
        float float8 = resizableDoubleArray0.getContractionCriteria();
        double double10 = resizableDoubleArray0.addElementRolling((double) 32.0f);
        double[] doubleArray11 = resizableDoubleArray0.getValues();
        double double13 = resizableDoubleArray0.addElementRolling(10.0d);
        int int14 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor(1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[32.0, 32.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 32.0d + "'", double13 == 32.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(100, (float) (byte) 100);
        resizableDoubleArray2.clear();
        double[] doubleArray4 = resizableDoubleArray2.getElements();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        double double6 = descriptiveStatistics0.getSum();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        double double8 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSkewnessImpl();
        double double12 = descriptiveStatistics0.getSkewness();
        descriptiveStatistics0.setWindowSize(92);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getSkewnessImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10, (float) 4, (float) 31);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getVariance();
        int int8 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMeanImpl();
        double double10 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        int int15 = descriptiveStatistics0.getWindowSize();
        double double16 = descriptiveStatistics0.getMax();
        descriptiveStatistics0.addValue((double) 2L);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement((int) (short) 0, 10.0d);
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        double double9 = resizableDoubleArray0.addElementRolling((double) 3);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSkewnessImpl();
        double double20 = descriptiveStatistics0.getSum();
        long long21 = descriptiveStatistics0.getN();
        java.lang.String str22 = descriptiveStatistics0.toString();
        double double23 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: 0.0\nmax: 0.0\nmean: 0.0\nstd dev: 0.0\nmedian: 0.0\nskewness: 0.0\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 1\nmin: 0.0\nmax: 0.0\nmean: 0.0\nstd dev: 0.0\nmedian: 0.0\nskewness: 0.0\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double[] doubleArray9 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getSumImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic10);
        descriptiveStatistics1.clear();
        double double13 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        descriptiveStatistics14.addValue((double) 0);
        int int20 = descriptiveStatistics14.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics21.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics21.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getVarianceImpl();
        descriptiveStatistics14.setMeanImpl(univariateStatistic35);
        descriptiveStatistics1.setMaxImpl(univariateStatistic35);
        double double38 = descriptiveStatistics1.getSumsq();
        long long39 = descriptiveStatistics1.getN();
        double double41 = descriptiveStatistics1.getPercentile(32.0d);
        double double43 = descriptiveStatistics1.getPercentile(99.00990099009901d);
        descriptiveStatistics1.setWindowSize((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics1.getMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic46);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        float float4 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getSum();
        double double20 = descriptiveStatistics0.getStandardDeviation();
        double double21 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        double double27 = descriptiveStatistics22.getKurtosis();
        long long28 = descriptiveStatistics22.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str30 = descriptiveStatistics29.toString();
        descriptiveStatistics29.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics29.getGeometricMeanImpl();
        double double33 = descriptiveStatistics29.getMax();
        double double34 = descriptiveStatistics29.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics29.getVarianceImpl();
        double double36 = descriptiveStatistics29.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        double double43 = descriptiveStatistics37.getStandardDeviation();
        double double44 = descriptiveStatistics37.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics37.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double48 = descriptiveStatistics47.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getGeometricMeanImpl();
        double double50 = descriptiveStatistics47.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics51.getKurtosisImpl();
        double[] doubleArray54 = descriptiveStatistics51.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics51.getVarianceImpl();
        descriptiveStatistics47.setSumsqImpl(univariateStatistic55);
        double double57 = descriptiveStatistics37.apply(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getVarianceImpl();
        descriptiveStatistics37.setMaxImpl(univariateStatistic60);
        descriptiveStatistics29.setSumImpl(univariateStatistic60);
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double66 = descriptiveStatistics65.getStandardDeviation();
        long long67 = descriptiveStatistics65.getN();
        double[] doubleArray68 = descriptiveStatistics65.getSortedValues();
        double[] doubleArray69 = descriptiveStatistics65.getSortedValues();
        double[] doubleArray70 = descriptiveStatistics65.getSortedValues();
        double double71 = univariateStatistic60.evaluate(doubleArray70);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str30, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        long long4 = descriptiveStatistics0.getN();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        double double6 = descriptiveStatistics0.getMin();
        double double7 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        double double14 = descriptiveStatistics8.getStandardDeviation();
        double double15 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics8.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double19 = descriptiveStatistics18.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getGeometricMeanImpl();
        double double21 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        descriptiveStatistics18.setSumsqImpl(univariateStatistic26);
        double double28 = descriptiveStatistics8.apply(univariateStatistic26);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        descriptiveStatistics31.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getKurtosisImpl();
        long long40 = descriptiveStatistics37.getN();
        double double41 = descriptiveStatistics37.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getKurtosisImpl();
        descriptiveStatistics42.setMaxImpl(univariateStatistic52);
        descriptiveStatistics37.setSumImpl(univariateStatistic52);
        descriptiveStatistics31.setSumsqImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str57 = descriptiveStatistics56.toString();
        descriptiveStatistics56.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics56.getGeometricMeanImpl();
        double double60 = descriptiveStatistics56.getMax();
        double double61 = descriptiveStatistics56.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics56.getVarianceImpl();
        descriptiveStatistics31.setMeanImpl(univariateStatistic62);
        double double64 = descriptiveStatistics31.getMean();
        double double65 = descriptiveStatistics31.getMean();
        double double66 = descriptiveStatistics31.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics67.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics67.getKurtosisImpl();
        double[] doubleArray70 = descriptiveStatistics67.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics67.getVarianceImpl();
        double double72 = descriptiveStatistics67.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics67.getGeometricMeanImpl();
        descriptiveStatistics31.setMaxImpl(univariateStatistic73);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics31.getMeanImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic75);
        long long77 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str57, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }
}

